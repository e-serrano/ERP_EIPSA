# Form implementation generated from reading ui file 'ReclamationOffer_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
from PyQt6.QtWidgets import QAbstractItemView
import os
from Email_Styles import email_offer1, email_offer2, email_offer3
from datetime import *

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_ReclamationOffer_Window(QtWidgets.QMainWindow):
    """
    UI class for the Reclamation Offer window.
    """
    def __init__(self, name, username):
        """
        Initializes the Ui_ReclamationOffer_Window with the specified name and username.

        Args:
            name (str): name associated with the window.
            username (str): username associated with the window.
        """
        super().__init__()
        self.name=name
        self.username=username
        self.setupUi(self)

    def setupUi(self, ReclamationOffer_Window):
        """
        Sets up the user interface for the ReclamationOffer_Window.

        Args:
            ReclamationOffer_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        ReclamationOffer_Window.setObjectName("ReclamationOffer_Window")
        ReclamationOffer_Window.resize(400, 561)
        ReclamationOffer_Window.setMinimumSize(QtCore.QSize(800, 700))
        # ReclamationOffer_Window.setMaximumSize(QtCore.QSize(600, 575))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        ReclamationOffer_Window.setWindowIcon(icon)
        ReclamationOffer_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=ReclamationOffer_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        # self.frame.setMinimumSize(QtCore.QSize(550, 500))
        # self.frame.setMaximumSize(QtCore.QSize(550, 500))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 0, 0, 1, 2)
        self.tableReclamation = QtWidgets.QTableWidget(parent=self.frame)
        self.tableReclamation.setObjectName("tableWidget")
        self.tableReclamation.setColumnCount(13)
        self.tableReclamation.setRowCount(0)
        for i in range(13):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableReclamation.setHorizontalHeaderItem(i, item)
        self.tableReclamation.setSelectionMode(QAbstractItemView.SelectionMode.ContiguousSelection)
        self.gridLayout_2.addWidget(self.tableReclamation, 1, 0, 1, 4)
        self.Button_Send = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Send.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Send.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Send.setObjectName("Button_Send")
        self.gridLayout_2.addWidget(self.Button_Send, 2, 0, 1, 1)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addWidget(self.Button_Cancel, 2, 2, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem3, 2, 1, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        ReclamationOffer_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=ReclamationOffer_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 22))
        self.menubar.setObjectName("menubar")
        ReclamationOffer_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=ReclamationOffer_Window)
        self.statusbar.setObjectName("statusbar")
        ReclamationOffer_Window.setStatusBar(self.statusbar)
        self.tableReclamation.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableReclamation.horizontalHeader().setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableReclamation.setSortingEnabled(True)
        self.tableReclamation.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        ReclamationOffer_Window.setWindowFlag(QtCore.Qt.WindowType.WindowCloseButtonHint, False)

        self.retranslateUi(ReclamationOffer_Window)
        QtCore.QMetaObject.connectSlotsByName(ReclamationOffer_Window)

        self.Button_Cancel.clicked.connect(ReclamationOffer_Window.close)
        self.Button_Send.clicked.connect(self.sendmails)
        self.tableReclamation.itemDoubleClicked.connect(self.expand_cell)
        self.ReclamationOffer()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, ReclamationOffer_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        ReclamationOffer_Window.setWindowTitle(_translate("ReclamationOffer_Window", "Reclamación Ofertas"))
        item = self.tableReclamation.horizontalHeaderItem(0)
        item.setText(_translate("ReclamationOffer_Window", "Nº Oferta"))
        item = self.tableReclamation.horizontalHeaderItem(1)
        item.setText(_translate("ReclamationOffer_Window", "Fecha Presentación"))
        item = self.tableReclamation.horizontalHeaderItem(2)
        item.setText(_translate("ReclamationOffer_Window", "Última Actualización"))
        item = self.tableReclamation.horizontalHeaderItem(3)
        item.setText(_translate("ReclamationOffer_Window", "Días Dif. Pres. - Act."))
        item = self.tableReclamation.horizontalHeaderItem(4)
        item.setText(_translate("ReclamationOffer_Window", "Última Reclamación"))
        item = self.tableReclamation.horizontalHeaderItem(5)
        item.setText(_translate("ReclamationOffer_Window", "Días Última Rec."))
        item = self.tableReclamation.horizontalHeaderItem(6)
        item.setText(_translate("ReclamationOffer_Window", "Tipo Rec."))
        item = self.tableReclamation.horizontalHeaderItem(7)
        item.setText(_translate("ReclamationOffer_Window", "Seguimiento"))
        item = self.tableReclamation.horizontalHeaderItem(8)
        item.setText(_translate("ReclamationOffer_Window", "Veces Reclamado"))
        item = self.tableReclamation.horizontalHeaderItem(9)
        item.setText(_translate("ReclamationOffer_Window", "Mails"))
        item = self.tableReclamation.horizontalHeaderItem(10)
        item.setText(_translate("ReclamationOffer_Window", "Rec. 1"))
        item = self.tableReclamation.horizontalHeaderItem(11)
        item.setText(_translate("ReclamationOffer_Window", "Rec. 2"))
        item = self.tableReclamation.horizontalHeaderItem(12)
        item.setText(_translate("ReclamationOffer_Window", "Rec. 3"))
        self.Button_Cancel.setText(_translate("ReclamationOffer_Window", "Salir"))
        self.Button_Send.setText(_translate("ReclamationOffer_Window", "Reclamar"))


    def ReclamationOffer(self):
        """
        Queries the database for offers to reclaim, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        conn = None
        commands_responsible = ("""
                        SELECT *
                        FROM users_data.initials
                        """)
        commands_queryrecoffer = ("""
                        SELECT offers."num_offer",TO_CHAR(offers."presentation_date", 'DD-MM-YYYY'),TO_CHAR(offers."last_update", 'DD-MM-YYYY'),
                        (offers."last_update" - offers."presentation_date") AS "difference_update", TO_CHAR(offers."last_rec", 'DD-MM-YYYY'),
                        (current_date - offers."last_rec") AS "difference_rec", offers."type_rec",offers."tracking",offers."rec_times", offers."mails"
                        FROM offers
                        WHERE (offers."responsible" = %s
                        AND
                        offers."state" = 'Presentada'
                        AND
                        offers."last_update" < (current_date - interval '10 days')
                        )
                        ORDER BY offers."num_offer"
                        """)

        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_responsible)
            results_responsible=cur.fetchall()
            match=list(filter(lambda x:self.username in x, results_responsible))
            responsible=match[0][0]
            cur.execute(commands_queryrecoffer, (responsible,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableReclamation.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(13):
                    if column in [10,11,12]:
                        radio_button = QtWidgets.QCheckBox()
                        self.tableReclamation.setCellWidget(tablerow, column, radio_button)
                    else:
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableReclamation.setItem(tablerow, column, it)

                tablerow+=1

            self.tableReclamation.verticalHeader().hide()
            self.tableReclamation.setItemDelegate(AlignDelegate(self.tableReclamation))
            self.tableReclamation.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableReclamation.horizontalHeader().setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableReclamation.horizontalHeader().setSectionResizeMode(9, QtWidgets.QHeaderView.ResizeMode.Interactive)

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

    def sendmails(self):
        """
        Sends emails regarding selected offers based on user reclamations using the appropriate templates 
        (Rec1, Rec2 or Rec3) based on the selected checkboxes.
        """
        actual_date=date.today()
        actual_date= actual_date.strftime("%d/%m/%Y")
        commands_responsiblemail = ("""
                                    SELECT email
                                    FROM users_data.registration
                                    WHERE username = %s
                                    """)
        commands_queryoffer = ("""
                                SELECT offers."mails",offers."num_offer",offers."num_ref_offer",offers."presentation_date",offers."tracking",offers."rec_times"
                                FROM offers
                                WHERE (offers."num_offer" = %s
                                )
                                ORDER BY offers."num_offer"
                                """)
        commands_insertdataoffer = ("""
                                    UPDATE offers
                                    SET "last_rec" = %s, "type_rec" = %s, "tracking" = %s, "rec_times" = %s
                                    WHERE "num_offer" = %s
                                    """)

        offers_reclamation = []
        for row in range(self.tableReclamation.rowCount()):
            offer = self.tableReclamation.item(row, 0).text()
            reclamation = None
            checkbox1  = self.tableReclamation.cellWidget(row, 10)
            checkbox2  = self.tableReclamation.cellWidget(row, 11)
            checkbox3  = self.tableReclamation.cellWidget(row, 12)

            if checkbox1 and checkbox1.isChecked():
                reclamation = 'Rec1'
            elif checkbox2 and checkbox2.isChecked():
                reclamation = 'Rec2'
            elif checkbox3 and checkbox3.isChecked():
                reclamation = 'Rec3'
            offers_reclamation.append([offer,reclamation])

        list_checkboxes = [x[1] for x in offers_reclamation]
        if all(item is None for item in list_checkboxes):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("No has seleccionado ninguna oferta para reclamar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            try:
                name, surname = [word.lower() for word in self.name.split()]
                username = name[0] + "." + surname
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                data=(username,)
                cur.execute(commands_responsiblemail,data)
                results_email=cur.fetchall()
                email=results_email[0][0]

                for offer in offers_reclamation:
                    data=(offer[0],)
                    cur.execute(commands_queryoffer,data)
                    results_offers=cur.fetchall()
                    if results_offers[0][0] in ['None','']:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("La oferta" + offer[0] + " no puede ser reclamada porque no tiene mails de contacto")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon
                    else:
                        if offer[1] == 'Rec1':
                            mail=email_offer1(results_offers[0][0], results_offers[0][1], results_offers[0][2], email, results_offers[0][3])
                            mail.send_email()

                            if results_offers[0][4] is None:
                                tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            elif results_offers[0][4]=='':
                                tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            else:
                                tracking = results_offers[0][4] + "\n" + date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            rec_times = int(results_offers[0][5]) + 1 if results_offers[0][5] is not None else 1
                            data = (actual_date, offer[1], tracking, rec_times, offer[0],)
                            cur.execute(commands_insertdataoffer,data)

                        elif offer[1] == 'Rec2':
                            mail=email_offer2(results_offers[0][0], results_offers[0][1], results_offers[0][2], email, results_offers[0][3])
                            mail.send_email()

                            if results_offers[0][4] is None:
                                tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            elif results_offers[0][4]=='':
                                tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            else:
                                tracking = results_offers[0][4] + "\n" + date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            rec_times = int(results_offers[0][5]) + 1 if results_offers[0][5] is not None else 1
                            data = (actual_date, offer[1], tracking, rec_times, offer[0],)
                            cur.execute(commands_insertdataoffer,data)

                        elif offer[1] == 'Rec3':
                            dlg1 = QtWidgets.QInputDialog()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg1.setWindowIcon(new_icon)
                            dlg1.setWindowTitle('Reclamación Oferta')
                            dlg1.setLabelText('Introduce el asunto:')

                            dlg2 = QtWidgets.QInputDialog()
                            new_icon2 = QtGui.QIcon()
                            new_icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg2.setWindowIcon(new_icon2)
                            dlg2.setWindowTitle('Reclamación Oferta')
                            dlg2.setLabelText('Introduce el cuerpo del correo:')
                            dlg2.resize(200,500)

                            while True:
                                clickedButton = dlg1.exec()
                                if clickedButton == 1:
                                    subject_text = dlg1.textValue()
                                    if subject_text != '':
                                        while True:
                                            body_text, ok = QtWidgets.QInputDialog.getMultiLineText(self, 'Reclamación Oferta', 'Introduce el cuerpo del correo:')#dlg2.textValue()
                                            if ok:
                                                if body_text != '':
                                                    mail=email_offer3(results_offers[0][0], results_offers[0][1], results_offers[0][2], email, results_offers[0][3],subject_text,body_text)
                                                    mail.send_email()

                                                    if results_offers[0][4] is None:
                                                        tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                                                    elif results_offers[0][4]=='':
                                                        tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                                                    else:
                                                        tracking = results_offers[0][4] + "\n" + date.today().strftime("%d/%m/%Y") + ": Reclamada"
                                                    rec_times = int(results_offers[0][5]) + 1 if results_offers[0][5] is not None else 1
                                                    data = (actual_date, offer[1], tracking, rec_times, offer[0],)
                                                    cur.execute(commands_insertdataoffer,data)
                                                    break
                                                else:
                                                    dlg_error = QtWidgets.QMessageBox()
                                                    new_icon = QtGui.QIcon()
                                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                    dlg_error.setWindowIcon(new_icon)
                                                    dlg_error.setWindowTitle('Reclamación Oferta')
                                                    dlg_error.setText("El cuerpo no puede estar vacío")
                                                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                                    dlg_error.exec()
                                                    del dlg_error,new_icon
                                            else:
                                                break
                                        break
                                    else:
                                        dlg_error = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg_error.setWindowIcon(new_icon)
                                        dlg_error.setWindowTitle('Reclamación Oferta')
                                        dlg_error.setText("El asunto no puede estar vacío")
                                        dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                        dlg_error.exec()
                                        del dlg_error,new_icon
                                else:
                                    break

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Correos enviados con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.ReclamationOffer()

    def expand_cell(self, item):
        """
        Displays the content of a cell in a dialog box. Useful for viewing larger text fields 
        in a table more comfortably.

        Args:
            item (QTableWidgetItem): The table item to be expanded.
        """
        if item.column() in [7]:
            cell_content = item.text()
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Reclamación Ofertas")
            dlg.setText(cell_content)
            dlg.exec()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ReclamationOffer_Window = Ui_ReclamationOffer_Window('Luis Bravo', 'l.bravo')
    ReclamationOffer_Window.show()
    sys.exit(app.exec())