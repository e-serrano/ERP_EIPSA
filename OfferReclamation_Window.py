# Form implementation generated from reading ui file 'ReclamationOffer_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config, get_path
import psycopg2
from PyQt6.QtWidgets import QAbstractItemView
import os
from Email_Styles import email_offer1, email_offer2, email_offer3
from datetime import *
from utils.Database_Manager import Database_Connection
from utils.Show_Message import MessageHelper
from utils.Emails import EmailOffer

basedir = r"\\ERP-EIPSA-DATOS\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class CustomTableWidget(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(str(get_path("Resources", "Iconos", "Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column_index in [2, 3, 4, 5]:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

# Function to custom sort for date columns
    def custom_sort(self, column, order):
        """
        Custom sorting method for date and numeric columns. Sorts the specified column based on date and numeric values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class Ui_ReclamationOffer_Window(QtWidgets.QMainWindow):
    """
    UI class for the Reclamation Offer window.
    """
    def __init__(self, name, username):
        """
        Initializes the Ui_ReclamationOffer_Window with the specified name and username.

        Args:
            name (str): name associated with the window.
            username (str): username associated with the window.
        """
        super().__init__()
        self.name=name
        self.username=username
        self.setupUi(self)

    def setupUi(self, ReclamationOffer_Window):
        """
        Sets up the user interface for the ReclamationOffer_Window.

        Args:
            ReclamationOffer_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        ReclamationOffer_Window.setObjectName("ReclamationOffer_Window")
        ReclamationOffer_Window.resize(400, 561)
        ReclamationOffer_Window.setMinimumSize(QtCore.QSize(800, 700))
        # ReclamationOffer_Window.setMaximumSize(QtCore.QSize(600, 575))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        ReclamationOffer_Window.setWindowIcon(icon)
        ReclamationOffer_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=ReclamationOffer_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        # self.frame.setMinimumSize(QtCore.QSize(550, 500))
        # self.frame.setMaximumSize(QtCore.QSize(550, 500))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 0, 0, 1, 2)
        self.tableReclamation = CustomTableWidget()
        self.tableReclamation.setObjectName("tableWidget")
        self.tableReclamation.setColumnCount(14)
        self.tableReclamation.setRowCount(0)
        for i in range(14):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableReclamation.setHorizontalHeaderItem(i, item)
        self.tableReclamation.setSelectionMode(QAbstractItemView.SelectionMode.ContiguousSelection)
        self.gridLayout_2.addWidget(self.tableReclamation, 1, 0, 1, 4)
        self.Button_Send = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Send.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Send.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Send.setObjectName("Button_Send")
        self.gridLayout_2.addWidget(self.Button_Send, 2, 0, 1, 1)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addWidget(self.Button_Cancel, 2, 2, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem3, 2, 1, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        ReclamationOffer_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=ReclamationOffer_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 22))
        self.menubar.setObjectName("menubar")
        ReclamationOffer_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=ReclamationOffer_Window)
        self.statusbar.setObjectName("statusbar")
        ReclamationOffer_Window.setStatusBar(self.statusbar)
        self.tableReclamation.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableReclamation.horizontalHeader().setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableReclamation.setSortingEnabled(False)
        self.tableReclamation.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        ReclamationOffer_Window.setWindowFlag(QtCore.Qt.WindowType.WindowCloseButtonHint, False)

        self.retranslateUi(ReclamationOffer_Window)
        QtCore.QMetaObject.connectSlotsByName(ReclamationOffer_Window)

        self.Button_Cancel.clicked.connect(ReclamationOffer_Window.close)
        self.Button_Send.clicked.connect(self.sendmails)
        self.tableReclamation.itemDoubleClicked.connect(self.expand_cell)
        self.ReclamationOffer()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, ReclamationOffer_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        ReclamationOffer_Window.setWindowTitle(_translate("ReclamationOffer_Window", "Reclamación Ofertas"))
        item = self.tableReclamation.horizontalHeaderItem(0)
        item.setText(_translate("ReclamationOffer_Window", "Nº Oferta"))
        item = self.tableReclamation.horizontalHeaderItem(1)
        item.setText(_translate("ReclamationOffer_Window", "Responsable"))
        item = self.tableReclamation.horizontalHeaderItem(2)
        item.setText(_translate("ReclamationOffer_Window", "Fecha Presentación"))
        item = self.tableReclamation.horizontalHeaderItem(3)
        item.setText(_translate("ReclamationOffer_Window", "Última Actualización"))
        item = self.tableReclamation.horizontalHeaderItem(4)
        item.setText(_translate("ReclamationOffer_Window", "Días Dif. Pres. - Act."))
        item = self.tableReclamation.horizontalHeaderItem(5)
        item.setText(_translate("ReclamationOffer_Window", "Última Reclamación"))
        item = self.tableReclamation.horizontalHeaderItem(6)
        item.setText(_translate("ReclamationOffer_Window", "Días Última Rec."))
        item = self.tableReclamation.horizontalHeaderItem(7)
        item.setText(_translate("ReclamationOffer_Window", "Tipo Rec."))
        item = self.tableReclamation.horizontalHeaderItem(8)
        item.setText(_translate("ReclamationOffer_Window", "Seguimiento"))
        item = self.tableReclamation.horizontalHeaderItem(9)
        item.setText(_translate("ReclamationOffer_Window", "Veces Reclamado"))
        item = self.tableReclamation.horizontalHeaderItem(10)
        item.setText(_translate("ReclamationOffer_Window", "Mails"))
        item = self.tableReclamation.horizontalHeaderItem(11)
        item.setText(_translate("ReclamationOffer_Window", "Rec. 1"))
        item = self.tableReclamation.horizontalHeaderItem(12)
        item.setText(_translate("ReclamationOffer_Window", "Rec. 2"))
        item = self.tableReclamation.horizontalHeaderItem(13)
        item.setText(_translate("ReclamationOffer_Window", "Rec. 3"))
        self.Button_Cancel.setText(_translate("ReclamationOffer_Window", "Salir"))
        self.Button_Send.setText(_translate("ReclamationOffer_Window", "Reclamar"))


    def ReclamationOffer(self):
        """
        Queries the database for offers to reclaim, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """

        commands_responsible = ("""
                        SELECT *
                        FROM users_data.initials
                        """)

        commands_queryrecoffer = ("""
                        SELECT offers."num_offer",offers."responsible",TO_CHAR(offers."presentation_date", 'DD-MM-YYYY'),TO_CHAR(offers."last_update", 'DD-MM-YYYY'),
                        (offers."last_update" - offers."presentation_date") AS "difference_update", TO_CHAR(offers."last_rec", 'DD-MM-YYYY'),
                        (current_date - offers."last_rec") AS "difference_rec", offers."type_rec",offers."tracking",offers."rec_times", offers."mails"
                        FROM offers
                        WHERE (offers."responsible" = %s
                        AND
                        offers."state" = 'Presentada'
                        AND
                        offers."last_update" < (current_date - interval '10 days')
                        )
                        ORDER BY offers."num_offer"
                        """)
        
        commands_queryrecoffer_coordinator = ("""
                        SELECT offers."num_offer",offers."responsible",TO_CHAR(offers."presentation_date", 'DD-MM-YYYY'),TO_CHAR(offers."last_update", 'DD-MM-YYYY'),
                        (offers."last_update" - offers."presentation_date") AS "difference_update", TO_CHAR(offers."last_rec", 'DD-MM-YYYY'),
                        (current_date - offers."last_rec") AS "difference_rec", offers."type_rec",offers."tracking",offers."rec_times", offers."mails"
                        FROM offers
                        WHERE (offers."responsible" not in ('a.calvo')
                        AND
                        offers."state" = 'Presentada'
                        AND
                        offers."last_update" < (current_date - interval '10 days')
                        )
                        ORDER BY offers."num_offer"
                        """)

        try:
            with Database_Connection(config()) as conn:
                with conn.cursor() as cur:
                    cur.execute(commands_responsible)
                    results_responsible=cur.fetchall()
                    match=list(filter(lambda x:self.username in x, results_responsible))
                    responsible=match[0][0]

                    if self.username == 'l.bravo':
                        cur.execute(commands_queryrecoffer_coordinator)
                    else:
                        cur.execute(commands_queryrecoffer, (responsible,))

                    results=cur.fetchall()

            self.tableReclamation.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(14):
                    if column in [11,12,13]:
                        radio_button = QtWidgets.QCheckBox()
                        self.tableReclamation.setCellWidget(tablerow, column, radio_button)
                    else:
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableReclamation.setItem(tablerow, column, it)

                tablerow+=1

            self.tableReclamation.verticalHeader().hide()
            self.tableReclamation.setItemDelegate(AlignDelegate(self.tableReclamation))
            self.tableReclamation.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableReclamation.horizontalHeader().setDefaultSectionSize(150)
            self.tableReclamation.horizontalHeader().setSectionResizeMode(8, QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableReclamation.horizontalHeader().setSectionResizeMode(10, QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableReclamation.horizontalHeader().setSectionResizeMode(11, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableReclamation.horizontalHeader().setSectionResizeMode(12, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableReclamation.horizontalHeader().setSectionResizeMode(13, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)

            self.tableReclamation.horizontalHeader().sectionDoubleClicked.connect(self.on_header_section_clicked)

            if self.username != 'l.bravo':
                self.tableReclamation.hideColumn(1)

        except (Exception, psycopg2.DatabaseError) as error:
            MessageHelper.show_message("Ha ocurrido el siguiente error:\n"
                        + str(error), "critical")

    def sendmails(self):
        """
        Sends emails regarding selected offers based on user reclamations using the appropriate templates 
        (Rec1, Rec2 or Rec3) based on the selected checkboxes.
        """
        actual_date=date.today()
        actual_date= actual_date.strftime("%d/%m/%Y")

        commands_responsiblemail = ("""
                                    SELECT email
                                    FROM users_data.registration
                                    WHERE username = %s
                                    """)

        commands_queryoffer = ("""
                                SELECT offers."mails",offers."num_offer",offers."num_ref_offer",offers."presentation_date",offers."tracking",offers."rec_times"
                                FROM offers
                                WHERE (offers."num_offer" = %s
                                )
                                ORDER BY offers."num_offer"
                                """)

        commands_insertdataoffer = ("""
                                    UPDATE offers
                                    SET "last_rec" = %s, "type_rec" = %s, "tracking" = %s, "rec_times" = %s
                                    WHERE "num_offer" = %s
                                    """)

        offers_reclamation = []
        for row in range(self.tableReclamation.rowCount()):
            offer = self.tableReclamation.item(row, 0).text()
            reclamation = None
            checkbox1  = self.tableReclamation.cellWidget(row, 11)
            checkbox2  = self.tableReclamation.cellWidget(row, 12)
            checkbox3  = self.tableReclamation.cellWidget(row, 13)

            if checkbox1 and checkbox1.isChecked():
                reclamation = 'Rec1'
            elif checkbox2 and checkbox2.isChecked():
                reclamation = 'Rec2'
            elif checkbox3 and checkbox3.isChecked():
                reclamation = 'Rec3'

            offers_reclamation.append([offer,reclamation])

        list_checkboxes = [x[1] for x in offers_reclamation]

        if all(item is None for item in list_checkboxes):
            MessageHelper.show_message("No has seleccionado ninguna oferta para reclamar", "warning")

        else:
            try:
                name, surname = [word.lower() for word in self.name.split()]
                username = name[0] + "." + surname

                with Database_Connection(config()) as conn:
                    with conn.cursor() as cur:
                        data=(username,)
                        cur.execute(commands_responsiblemail,data)
                        results_email=cur.fetchall()
                        email=results_email[0][0]

                for offer in offers_reclamation:
                    data=(offer[0],)
                    with Database_Connection(config()) as conn:
                        with conn.cursor() as cur:
                            cur.execute(commands_queryoffer,data)
                            results_offers=cur.fetchall()

                    if results_offers[0][0] in ['None','']:
                        MessageHelper.show_message("La oferta" + offer[0] + " no puede ser reclamada porque no tiene mails de contacto", "warning")

                    else:
                        if offer[1] == 'Rec1':
                            mail=email_offer1(results_offers[0][0], results_offers[0][1], results_offers[0][2], email, results_offers[0][3])
                            mail.send_email()

                            # email = EmailOffer(email, results_offers[0][0], results_offers[0][1], results_offers[0][2], results_offers[0][3])
                            # email.send_email('offer_reminder_1')

                            if results_offers[0][4] is None:
                                tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            elif results_offers[0][4]=='':
                                tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            else:
                                tracking = results_offers[0][4] + "\n" + date.today().strftime("%d/%m/%Y") + ": Reclamada"

                            rec_times = int(results_offers[0][5]) + 1 if results_offers[0][5] is not None else 1
                            data = (actual_date, offer[1], tracking, rec_times, offer[0],)

                            with Database_Connection(config()) as conn:
                                with conn.cursor() as cur:
                                    cur.execute(commands_insertdataoffer,data)
                                conn.commit()

                        elif offer[1] == 'Rec2':
                            mail=email_offer2(results_offers[0][0], results_offers[0][1], results_offers[0][2], email, results_offers[0][3])
                            mail.send_email()

                            if results_offers[0][4] is None:
                                tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            elif results_offers[0][4]=='':
                                tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                            else:
                                tracking = results_offers[0][4] + "\n" + date.today().strftime("%d/%m/%Y") + ": Reclamada"

                            rec_times = int(results_offers[0][5]) + 1 if results_offers[0][5] is not None else 1
                            data = (actual_date, offer[1], tracking, rec_times, offer[0],)

                            with Database_Connection(config()) as conn:
                                with conn.cursor() as cur:
                                    cur.execute(commands_insertdataoffer,data)
                                conn.commit()

                        elif offer[1] == 'Rec3':
                            dlg1 = QtWidgets.QInputDialog()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg1.setWindowIcon(new_icon)
                            dlg1.setWindowTitle('Reclamación Oferta')
                            dlg1.setLabelText('Introduce el asunto:')

                            dlg2 = QtWidgets.QInputDialog()
                            new_icon2 = QtGui.QIcon()
                            new_icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg2.setWindowIcon(new_icon2)
                            dlg2.setWindowTitle('Reclamación Oferta')
                            dlg2.setLabelText('Introduce el cuerpo del correo:')
                            dlg2.resize(200,500)

                            while True:
                                clickedButton = dlg1.exec()
                                if clickedButton == 1:
                                    subject_text = dlg1.textValue()
                                    if subject_text != '':
                                        while True:
                                            body_text, ok = QtWidgets.QInputDialog.getMultiLineText(self, 'Reclamación Oferta', 'Introduce el cuerpo del correo:')#dlg2.textValue()
                                            if ok:
                                                if body_text != '':
                                                    mail=email_offer3(results_offers[0][0], results_offers[0][1], results_offers[0][2], email, results_offers[0][3],subject_text,body_text)
                                                    mail.send_email()

                                                    if results_offers[0][4] is None:
                                                        tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                                                    elif results_offers[0][4]=='':
                                                        tracking = date.today().strftime("%d/%m/%Y") + ": Reclamada"
                                                    else:
                                                        tracking = results_offers[0][4] + "\n" + date.today().strftime("%d/%m/%Y") + ": Reclamada"

                                                    rec_times = int(results_offers[0][5]) + 1 if results_offers[0][5] is not None else 1
                                                    data = (actual_date, offer[1], tracking, rec_times, offer[0],)

                                                    with Database_Connection(config()) as conn:
                                                        with conn.cursor() as cur:
                                                            cur.execute(commands_insertdataoffer,data)
                                                        conn.commit()
                                                    break
                                                else:
                                                    MessageHelper.show_message("El cuerpo no puede estar vacío","warning")
                                            else:
                                                break
                                        break
                                    else:
                                        MessageHelper.show_message("El asunto no puede estar vacío","warning")
                                else:
                                    break

                MessageHelper.show_message("Correos enviados con éxito", "info")

            except (Exception, psycopg2.DatabaseError) as error:
                MessageHelper.show_message("Ha ocurrido el siguiente error:\n"
                            + str(error), "critical")

            self.ReclamationOffer()

    def expand_cell(self, item):
        """
        Displays the content of a cell in a dialog box. Useful for viewing larger text fields 
        in a table more comfortably.

        Args:
            item (QTableWidgetItem): The table item to be expanded.
        """
        if item.column() in [7]:
            cell_content = item.text()
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Reclamación Ofertas")
            dlg.setText(cell_content)
            dlg.exec()

# Function when clicking on table ¡ header
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableReclamation.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableReclamation.horizontalHeader().height()
        popup_pos = self.tableReclamation.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableReclamation.show_unique_values_menu(logical_index, popup_pos, header_height)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ReclamationOffer_Window = Ui_ReclamationOffer_Window('Luis Bravo', 's.sanz')
    ReclamationOffer_Window.show()
    sys.exit(app.exec())