# Form implementation generated from reading ui file 'EditOrder_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QUrl
from datetime import *
import os
from config import config
import psycopg2
import pandas as pd
from PDF_Viewer import PDF_Viewer
from PDF_Styles import welding_homologation
from tkinter.filedialog import asksaveasfilename
from openpyxl import Workbook
from openpyxl.styles import NamedStyle
from openpyxl.utils.dataframe import dataframe_to_rows

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_Welding_Menu(QtWidgets.QMainWindow):
    """
    UI class for the Verification Test Menu window.
    """
    def __init__(self, username):
        """
        Initializes the Ui_Welding_Menu with the specified username.

        Args:
            username (str): username associated with the window.
        """
        super().__init__()
        self.username = username
        self.pdf_viewer = PDF_Viewer()
        self.setupUi(self)

    def setupUi(self, Welding_Menu):
        """
        Sets up the user interface for the Welding_Menu.

        Args:
            Welding_Menu (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        Welding_Menu.setObjectName("Welding_Menu")
        Welding_Menu.resize(680, 425)
        Welding_Menu.setMinimumSize(QtCore.QSize(280, 425))
        Welding_Menu.setMaximumSize(QtCore.QSize(280, 425))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Welding_Menu.setWindowIcon(icon)
        if self.username in ['m.gil','d.marquez']:
            Welding_Menu.setStyleSheet("QWidget {\n"
    "background-color: #121212;\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .2em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}"
    )
        else:
            Welding_Menu.setStyleSheet("QWidget {\n"
    "background-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid black;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .2em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}"
    )
        self.centralwidget = QtWidgets.QWidget(parent=Welding_Menu)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_Homologation = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Homologation.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Homologation.setFont(font)
        self.Button_Homologation.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Homologation.setObjectName("Button_Homologation")
        self.Button_Homologation.setText("HomologaciÃ³n")
        self.verticalLayout_3.addWidget(self.Button_Homologation)
        self.Button_Resume = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Resume.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Resume.setFont(font)
        self.Button_Resume.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Resume.setObjectName("Button_Resume")
        self.Button_Resume.setText("Exportar Datos")
        self.verticalLayout_3.addWidget(self.Button_Resume)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_Cancel.sizePolicy().hasHeightForWidth())
        self.Button_Cancel.setSizePolicy(sizePolicy)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(90, 30))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(90, 30))
        self.Button_Cancel.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Cancel.setStyleSheet("QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}"
)
        self.Button_Cancel.setAutoDefault(True)
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addLayout(self.verticalLayout_3, 0, 0, 1, 2)
        self.gridLayout_2.addWidget(self.Button_Cancel, 1, 1, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Welding_Menu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Welding_Menu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 680, 22))
        self.menubar.setObjectName("menubar")
        Welding_Menu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Welding_Menu)
        self.statusbar.setObjectName("statusbar")
        Welding_Menu.setStatusBar(self.statusbar)
        Welding_Menu.setWindowFlags(QtCore.Qt.WindowType.WindowMinimizeButtonHint)

        self.retranslateUi(Welding_Menu)
        self.Button_Cancel.clicked.connect(Welding_Menu.close) # type: ignore
        self.Button_Homologation.clicked.connect(self.homologation_data)
        self.Button_Resume.clicked.connect(self.resume_data)

        QtCore.QMetaObject.connectSlotsByName(Welding_Menu)


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, Welding_Menu):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        Welding_Menu.setWindowTitle(_translate("Welding_Menu", "Pruebas"))
        self.Button_Cancel.setText(_translate("Welding_Menu", "Cancelar"))


# Function to query data related to welding homolgation and generate a PDF report
    def homologation_data(self):
        """
        Fetches welding data from the database and generates a PDF report of homologation status.
        """
        commands_welding = ("""
                        SELECT personal."name", TO_CHAR(Max(imp_ot."date_ot"), 'dd/mm/yyyy') as max_date, operations."name_eipsa",
                        TO_CHAR(Max(imp_ot."date_ot") + INTERVAL '180 days', 'dd/mm/yyyy') AS hom_date,
                        EXTRACT(DAY FROM ((Max(imp_ot."date_ot") + INTERVAL '180 days') - CURRENT_DATE)) as remaining_days,
                        CASE WHEN ((Max(imp_ot."date_ot") + INTERVAL '180 days') - CURRENT_DATE) > INTERVAL '45 days' THEN '' ELSE 'Preveer Homolog.' END AS prev_hom
                        FROM fabrication.personal AS personal
                        RIGHT JOIN fabrication.imp_ot AS imp_ot ON personal."code" = imp_ot."personal_id"
                        LEFT JOIN fabrication.operations AS operations ON imp_ot."operations_id" = operations."id"
                        GROUP BY personal."name", operations."name_eipsa", personal."code", operations."name"
                        HAVING (personal."code" = 13 AND operations."name_eipsa" IN ('011 TIG (GTAW)', '012 TIG + ELECTRODO (GTAW + SMAW)', '013 TIG + HILO (GTAW + GMAW)')) OR (personal."code" = 67 AND operations."name_eipsa" IN ('011 TIG (GTAW)', '013 TIG + HILO (GTAW + GMAW)'))
                        ORDER BY personal."name", operations."name_eipsa", personal."code"
                        """)
        conn = None
        try:
            # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_welding)
            results = cur.fetchall()

            df = pd.DataFrame(results, columns=["name", "max_date", "operation", "hom_date", "remaining_days", "prev_hom"])

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


        pdf = welding_homologation()
        pdf.set_auto_page_break(auto=True, margin=1)
        pdf.add_page()
        pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
        pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
        pdf.set_font('Helvetica', 'B', 10)
        pdf.set_xy(16, 0.5)
        pdf.cell(3, 0.5, self.format_date_spanish(date.today()))
        pdf.ln(1)

        pdf.set_font('Helvetica', 'B', 20)
        pdf.cell(3, 0.5, 'Informe de estado de homologaciÃ³n de soldadores')
        pdf.set_font('Helvetica', 'B', 8)

        pdf.ln(2)

        pdf.set_fill_color(121, 167, 227)
        pdf.cell(4.5, 0.53, "Nombre", align='C', fill=True)
        pdf.cell(0.2, 0.53, "")
        pdf.cell(5, 0.53, "Proceso", align='C', fill=True)
        pdf.cell(0.2, 0.53, "")
        pdf.cell(2, 0.53, "Ãltima Fecha", align='C', fill=True)
        pdf.cell(0.2, 0.53, "")
        pdf.cell(2.5, 0.53, "Fecha Homolog.", align='C', fill=True)
        pdf.cell(0.2, 0.53, "")
        pdf.cell(1, 0.53, "DÃ­as", align='C', fill=True)

        pdf.ln()

        for row in range(df.shape[0]):
            pdf.cell(4.5, 0.53, df.iloc[row, 0], align='C')
            pdf.cell(0.2, 0.53, "")
            pdf.cell(5, 0.53, df.iloc[row, 2], align='C')
            pdf.cell(0.2, 0.53, "")
            pdf.cell(2, 0.53, df.iloc[row, 1], align='C')
            pdf.cell(0.2, 0.53, "")
            pdf.cell(2.5, 0.53, df.iloc[row, 3], align='C')
            pdf.cell(0.2, 0.53, "")
            pdf.cell(1, 0.53, str(int(df.iloc[row, 4])), align='C')
            pdf.cell(0.2, 0.53, "")
            pdf.cell(3, 0.53, df.iloc[row, 5], align='C')

            pdf.ln(1)

        pdf_buffer = pdf.output()

        temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp.pdf"))))

        with open(temp_file_path, "wb") as temp_file:
            temp_file.write(pdf_buffer)

        pdf.close()

        self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
        self.pdf_viewer.showMaximized()

# Function to open corresponding window when Liquid Test button is clicked
    def resume_data(self):
        """
        Opens the 'liquidtest' window. Sets up the UI for the user.
        """
        commands_welding = ("""
                        SELECT imp_ot."date_ot", imp_ot."number_ot",
                        CASE WHEN LEFT(orders.tag, 2) = 'P-' THEN LEFT(orders.tag, 12) ELSE LEFT(orders.tag, 9) END AS num_order,
                        personal."name", operations."name_eipsa"
                        FROM fabrication.imp_ot AS imp_ot
                        LEFT JOIN fabrication.personal AS personal ON personal."code" = imp_ot."personal_id"
                        LEFT JOIN fabrication.operations AS operations ON imp_ot."operations_id" = operations."id"
                        LEFT JOIN fabrication.fab_order AS orders ON orders."ot_num" = imp_ot."number_ot"
                        WHERE imp_ot."operations_id" in (11,12,13)
                        ORDER BY imp_ot."date_ot"
                        """)
        conn = None
        try:
            # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_welding)
            results = cur.fetchall()

            df = pd.DataFrame(results, columns=["Fecha", "OT", "NÂº Pedido", "Personal", "OperaciÃ³n"])

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

            output_path = asksaveasfilename(defaultextension=".xlsx", filetypes=[("Archivos de Excel", "*.xlsx")], title="Guardar archivo de Excel")
            if output_path:

                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), 1):
                    ws.append(row)

                # Date Style
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')

                # Apply Date Style
                for cell in ws['A']:
                    cell.style = date_style

                # Save Excel
                wb.save(output_path)

# Function to format date to long in spanish
    def format_date_spanish(self, date_toformat):
        """
        Formats a date object to a long string in Spanish.

        Args:
            date_toformat (date): The date to format.
            
        Returns:
            str: The formatted date as a string in the format "day de month de year".
        """
        months = ("enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre")
        day = date_toformat.day
        month = months[date_toformat.month - 1]
        year = date_toformat.year
        messsage = "{} de {} de {}".format(day, month, year)

        return messsage




if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Welding_Menu = QtWidgets.QMainWindow()
    ui = Ui_Welding_Menu('m.gil')
    ui.setupUi(Welding_Menu)
    Welding_Menu.show()
    sys.exit(app.exec())
