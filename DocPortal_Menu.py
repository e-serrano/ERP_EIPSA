# Form implementation generated from reading ui file 'EditOffer_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6 import QtCore, QtGui, QtWidgets
import os
import psycopg2
from config import config
import re
import pandas as pd
from tkinter.filedialog import askopenfilename


basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_PortalDoc_Menu(QtWidgets.QMainWindow):
    """
    UI class for the Document Portal Menu window.
    """

    def __init__(self):
        """
        Initializes the main window
        """
        super().__init__() 
        self.setupUi(self)


    def setupUi(self, PortalDoc_Menu):
        """
        Sets up the user interface for the PortalDoc_Menu.

        Args:
            PortalDoc_Menu (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        PortalDoc_Menu.setObjectName("PortalDoc_Menu")
        PortalDoc_Menu.resize(300, 336)
        PortalDoc_Menu.setMinimumSize(QtCore.QSize(300, 300))
        PortalDoc_Menu.setMaximumSize(QtCore.QSize(300, 340))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        PortalDoc_Menu.setWindowIcon(icon)
        PortalDoc_Menu.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}"
)
        self.centralwidget = QtWidgets.QWidget(parent=PortalDoc_Menu)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(275, 275))
        self.frame.setMaximumSize(QtCore.QSize(275, 275))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 80, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 4, 0, 1, 1)
        self.Button_Creation = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Creation.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Creation.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Creation.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Creation.setObjectName("Button_Creation")
        self.gridLayout_2.addWidget(self.Button_Creation, 1, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem1, 2, 0, 1, 1)
        self.Button_Activation = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Activation.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Activation.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Activation.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Activation.setObjectName("Button_Activation")
        self.gridLayout_2.addWidget(self.Button_Activation, 2, 0, 1, 1)
        self.Button_DocTag = QtWidgets.QPushButton(parent=self.frame)
        self.Button_DocTag.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_DocTag.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_DocTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_DocTag.setObjectName("Button_DocTag")
        self.gridLayout_2.addWidget(self.Button_DocTag, 3, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem2 = QtWidgets.QSpacerItem(140, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setEnabled(True)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.horizontalLayout.addWidget(self.Button_Cancel)
        self.gridLayout_2.addLayout(self.horizontalLayout, 5, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem3, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        PortalDoc_Menu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=PortalDoc_Menu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 300, 22))
        self.menubar.setObjectName("menubar")
        PortalDoc_Menu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=PortalDoc_Menu)
        self.statusbar.setObjectName("statusbar")
        PortalDoc_Menu.setStatusBar(self.statusbar)
        PortalDoc_Menu.setWindowFlags(QtCore.Qt.WindowType.WindowMinimizeButtonHint)


        self.retranslateUi(PortalDoc_Menu)
        self.Button_Cancel.clicked.connect(PortalDoc_Menu.close) # type: ignore
        self.Button_Creation.clicked.connect(self.creation)
        self.Button_Activation.clicked.connect(self.activation)
        self.Button_DocTag.clicked.connect(self.doc_tags)
        QtCore.QMetaObject.connectSlotsByName(PortalDoc_Menu)


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, PortalDoc_Menu):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        PortalDoc_Menu.setWindowTitle(_translate("PortalDoc_Menu", "Documentación"))
        self.Button_Creation.setText(_translate("PortalDoc_Menu", "Creación Líneas"))
        self.Button_Activation.setText(_translate("PortalDoc_Menu", "Activación Líneas / Portal"))
        self.Button_DocTag.setText(_translate("PortalDoc_Menu", "Documentación Tags"))
        self.Button_Cancel.setText(_translate("PortalDoc_Menu", "Cancelar"))


    def creation(self):
        """
        Handles the creation process of document lines for an order. Prompts the user 
        to enter an order number and a date, then updates the database with the provided 
        information if valid input is received.
        """
        dlg1 = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg1.setWindowIcon(new_icon)
        dlg1.setWindowTitle('Creación Líneas')
        dlg1.setLabelText('Introduce un pedido:')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Creación Líneas')
        dlg2.setLabelText('Introduce una fecha (dd/mm/yyyy):')

        while True:
            clickedButton = dlg1.exec()
            if clickedButton == 1:
                order_doc = dlg1.textValue()
                if order_doc != '':
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        commands_check_order = f"""SELECT * FROM orders WHERE num_order = '{order_doc}'"""
                        cur.execute(commands_check_order)
                        results = cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()


                    if len(results) == 0:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle('Creación Líneas')
                        dlg.setText('El pedido introducido no existe')
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                    else:
                        while True:
                            clickedButton2 = dlg2.exec()
                            if clickedButton2 == 1:
                                date_doc = dlg2.textValue()
                                if date_doc != '' and re.match(r'^\d{2}[/]\d{2}[/]\d{4}$', date_doc):
                                    conn = None
                                    try:
                                    # read the connection parameters
                                        params = config()
                                    # connect to the PostgreSQL server
                                        conn = psycopg2.connect(**params)
                                        cur = conn.cursor()
                                    # execution of commands
                                        commands_insert_date = f"""UPDATE orders SET lines_creation_date = '{date_doc}' WHERE num_order = '{order_doc}'"""
                                        cur.execute(commands_insert_date)

                                    # close communication with the PostgreSQL database server
                                        cur.close()
                                    # commit the changes
                                        conn.commit()

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle('Creación Líneas')
                                        dlg.setText("Datos insertados con éxito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg,new_icon

                                    except (Exception, psycopg2.DatabaseError) as error:
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                    + str(error))
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                        dlg.exec()
                                        del dlg, new_icon
                                    finally:
                                        if conn is not None:
                                            conn.close()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle('Creación Líneas')
                                dlg_error.setText("La fecha no puede estar vacía o no es un valor válido")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break
                else:
                    dlg_error = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg_error.setWindowIcon(new_icon)
                    dlg_error.setWindowTitle('Creación Líneas')
                    dlg_error.setText("El pedido no puede estar vacío. Introduce un valor válido.")
                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg_error.exec()
                    del dlg_error,new_icon
            else:
                break


    def activation(self):
        """
        Handles the activation process of document lines for an order. Prompts the user 
        to enter an order number and a date, then updates the database with the provided 
        information if valid input is received.
        """
        dlg1 = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg1.setWindowIcon(new_icon)
        dlg1.setWindowTitle('Activación Líneas / Portal')
        dlg1.setLabelText('Introduce un pedido:')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Activación Líneas / Portal')
        dlg2.setLabelText('Introduce una fecha (dd/mm/yyyy):')

        while True:
            clickedButton = dlg1.exec()
            if clickedButton == 1:
                order_doc = dlg1.textValue()
                if order_doc != '':
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        commands_check_order = f"""SELECT * FROM orders WHERE num_order = '{order_doc}'"""
                        cur.execute(commands_check_order)
                        results = cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()


                    if len(results) == 0:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle('Activación Líneas / Portal')
                        dlg.setText('El pedido introducido no existe')
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                    else:
                        while True:
                            clickedButton2 = dlg2.exec()
                            if clickedButton2 == 1:
                                date_doc = dlg2.textValue()
                                if date_doc != '' and re.match(r'^\d{2}[/]\d{2}[/]\d{4}$', date_doc):
                                    conn = None
                                    try:
                                    # read the connection parameters
                                        params = config()
                                    # connect to the PostgreSQL server
                                        conn = psycopg2.connect(**params)
                                        cur = conn.cursor()
                                    # execution of commands
                                        commands_insert_date = f"""UPDATE orders SET lines_activation_date = '{date_doc}' WHERE num_order = '{order_doc}'"""
                                        cur.execute(commands_insert_date)

                                    # close communication with the PostgreSQL database server
                                        cur.close()
                                    # commit the changes
                                        conn.commit()

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle('Activación Líneas / Portal')
                                        dlg.setText("Datos insertados con éxito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg,new_icon

                                    except (Exception, psycopg2.DatabaseError) as error:
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                    + str(error))
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                        dlg.exec()
                                        del dlg, new_icon
                                    finally:
                                        if conn is not None:
                                            conn.close()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle('Activación Líneas / Portal')
                                dlg_error.setText("La fecha no puede estar vacía o no es un valor válido")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break
                else:
                    dlg_error = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg_error.setWindowIcon(new_icon)
                    dlg_error.setWindowTitle('Activación Líneas / Portal')
                    dlg_error.setText("El pedido no puede estar vacío. Introduce un valor válido.")
                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg_error.exec()
                    del dlg_error,new_icon
            else:
                break


    def doc_tags(self):
        """
        Opens a file dialog for the user to select an Excel file for updating data of tags.
        """
        while True:
            selection, ok = QtWidgets.QInputDialog.getItem(self, "Tag-Documentación", "Seleccióna un tipo de equipo:", ['Caudal', 'Temperatura', 'Nivel'], 0, False)
            if ok and selection:
                type_eq = selection
                if selection != '':
                    excel_file = askopenfilename(filetypes=[("Archivos de Excel", "*.xlsx")],
                            title="Seleccionar archivo Excel")
                    if excel_file:
                        params = config()
                        conn = psycopg2.connect(**params)
                        cursor = conn.cursor()

                        df_table = pd.read_excel(excel_file, na_values=['N/A'], keep_default_na=False)
                        df_table = df_table.astype(str)
                        df_table.replace('nan', 'N/A', inplace=True)

                        try:
                            for index, row in df_table.iterrows():
                                if "ID" in row and "tag" in row:
                                    id_value = row["ID"]
                                    tag_value = row["tag"]
                                    doc_calc = row["calculation_document"]
                                    doc_dwg = row["drawing_document"]

                                if type_eq=='Caudal':
                                    table_name='tags_data.tags_flow'
                                    set_clause = f'"calc_num_doc_eipsa" = \'{doc_calc}\', "dwg_num_doc_eipsa" = \'{doc_dwg}\''
                                    where_clause = f'"id_tag_flow" = \'{id_value}\' AND "tag" = \'{tag_value}\''
                                elif type_eq=='Temperatura':
                                    table_name='tags_data.tags_temp'
                                    set_clause = f'"calc_num_doc_eipsa" = \'{doc_calc}\', "dwg_num_doc_eipsa" = \'{doc_dwg}\''
                                    where_clause = f'"id_tag_temp" = \'{id_value}\' AND "tag" = \'{tag_value}\''
                                elif type_eq=='Nivel':
                                    table_name='tags_data.tags_level'
                                    set_clause = f'"dwg_num_doc_eipsa" = \'{doc_dwg}\''
                                    where_clause = f'"id_tag_level" = \'{id_value}\' AND "tag" = \'{tag_value}\''

                            # Creating the update query and executing it
                                sql_update = f'UPDATE {table_name} SET {set_clause} WHERE {where_clause}'
                                cursor.execute(sql_update)

                        # Closing cursor and database connection
                            conn.commit()
                            cursor.close()

                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("ERP EIPSA")
                            dlg.setText("Datos actualizados con éxito")
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            dlg.exec()
                            del dlg, new_icon

                        except (Exception, psycopg2.DatabaseError) as error:
                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("ERP EIPSA")
                            dlg.setText("Ha ocurrido el siguiente error:\n"
                                        + str(error))
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                            dlg.exec()
                            del dlg, new_icon
                        finally:
                            if conn is not None:
                                conn.close()
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Tag-Documentación")
                dlg_error.setText("Selecciona un tipo de equipo")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break




# if __name__ == "__main__":
#     app = QtWidgets.QApplication(sys.argv)
#     PortalDoc_Menu = QtWidgets.QMainWindow()
#     ui = Ui_PortalDoc_Menu()
#     ui.setupUi(PortalDoc_Menu)
#     PortalDoc_Menu.show()
#     sys.exit(app.exec())
