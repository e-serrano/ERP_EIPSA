# Form implementation generated from reading ui file 'SupplierOrder_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QUrl
from config import config
import psycopg2
import locale
from PDF_Styles import supplier_order
import tkinter as tk
import datetime
import os
from PDF_Viewer import PDF_Viewer
from datetime import *

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class CustomTableWidgetOrder(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column_index in [3, 4, 12, 14, 16]:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

# Function to sort column based on integer datatypes
    def custom_sort_int(self, column, order):
        """
        Custom sorting method for integer columns. Sorts the specified column based on integer values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: int(self.item(i, column).text()))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function to sort column based on date datatypes
    def custom_sort(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class CustomTableWidgetRecord(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column_index in [1]:
            self.custom_sort_int(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

# Function to sort column based on integer datatypes
    def custom_sort_int(self, column, order):
        """
        Custom sorting method for integer columns. Sorts the specified column based on integer values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: int(self.item(i, column).text()))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function to sort column based on date datatypes
    def custom_sort(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class ScrollableComboBox(QtWidgets.QComboBox):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setEditable(True)
        self.match_text = ""  # To store entered text
        self.lineEdit().textChanged.connect(self.store_text)

    def store_text(self, text):
        self.match_text = text  # Storing text of line edit

    def showPopup(self):
        # Call to original method
        super().showPopup()
        
        if self.match_text:
            index = self.findText(self.match_text, flags=QtCore.Qt.MatchFlag.MatchContains) # Search first partial match
            if index != -1:  # If found
                popup = self.view()  # Obtain view of dropdown
                popup.setCurrentIndex(popup.model().index(index, 0))  # Select index
                popup.scrollTo(popup.model().index(index, 0), hint=popup.ScrollHint.PositionAtTop) 

class Ui_SupplierOrder_Window(QtWidgets.QMainWindow):
    """
    UI class for the Supplier Order window.
    """
    def __init__(self, username, num_order = None):
        """
        Initializes the Ui_SupplierOrder_Window object with a user-specific username.

        Args:
            username (str): The username of the current user.
            username (str, Optional): The username of the current user.

        Side Effects:
            Creates an instance of the PDF_Viewer class for PDF handling.
        """
        super().__init__()
        self.username = username
        self.num_order = num_order
        self.pdf_viewer = PDF_Viewer()
        self.setupUi(self)

    def setupUi(self, SupplierOrder_Window):
        """
        Sets up the user interface for the SupplierOrder_Window.

        Args:
            SupplierOrder_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        SupplierOrder_Window.setObjectName("SupplierOrder_Window")
        SupplierOrder_Window.resize(1534, 722)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        SupplierOrder_Window.setWindowIcon(icon)
        if self.username == 'd.marquez':
            SupplierOrder_Window.setStyleSheet("QWidget {\n"
    "background-color: #121212; color: rgb(255, 255, 255)\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 13px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .2em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    "QComboBox:editable {\n"
    "border: 1px solid white;\n"
    "border-radius: 3px;\n"
    "}\n"
    "QComboBox QAbstractItemView{\n"
    "min-width: 1200px;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item {\n"
    "min-height: 35px;\n"
    "border: .5px solid white;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item:hover {\n"
    "background-color: blue;\n"
    "color: white;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item:selected {\n"
    "background-color: blue;\n"
    "color: white;\n"
    "}"
    )
        else:
            SupplierOrder_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid white;\n"
"}\n"
"\n"
"QComboBox QAbstractItemView{\n"
    "min-width: 1200px;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item {\n"
    "min-height: 35px;\n"
    "}\n"
    "\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 13px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .2em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=SupplierOrder_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.splitter = QtWidgets.QSplitter(QtCore.Qt.Orientation.Horizontal)

        self.scrollArea = QtWidgets.QScrollArea(parent=self.frame)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 500, 500))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_NumOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOrder.setMinimumSize(QtCore.QSize(int(95//1.5), int(35//1.5)))
        self.label_NumOrder.setMaximumSize(QtCore.QSize(int(95//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_NumOrder.setFont(font)
        self.label_NumOrder.setObjectName("label_NumOrder")
        self.gridLayout_2.addWidget(self.label_NumOrder, 1, 1, 1, 1)
        self.NumOrder_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.NumOrder_SupplierOrder.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.NumOrder_SupplierOrder.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.NumOrder_SupplierOrder.setFont(font)
        self.NumOrder_SupplierOrder.setObjectName("NumOrder_SupplierOrder")
        self.gridLayout_2.addWidget(self.NumOrder_SupplierOrder, 1, 2, 1, 1)
        self.label_Supplier = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Supplier.setFont(font)
        self.label_Supplier.setObjectName("label_Supplier")
        self.gridLayout_2.addWidget(self.label_Supplier, 1, 3, 1, 1)
        self.Supplier_SupplierOrder = ScrollableComboBox()
        self.Supplier_SupplierOrder.setEditable(True)
        self.Supplier_SupplierOrder.setMinimumSize(QtCore.QSize(int(300//1.5), int(35//1.5)))
        self.Supplier_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Supplier_SupplierOrder.setFont(font)
        self.Supplier_SupplierOrder.setObjectName("Supplier_SupplierOrder")
        self.gridLayout_2.addWidget(self.Supplier_SupplierOrder, 1, 4, 1, 4)
        self.label_DelivWay = QtWidgets.QLabel(parent=self.frame)
        self.label_DelivWay.setMinimumSize(QtCore.QSize(int(150//1.5), int(35//1.5)))
        self.label_DelivWay.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_DelivWay.setFont(font)
        self.label_DelivWay.setObjectName("label_DelivWay")
        self.gridLayout_2.addWidget(self.label_DelivWay, 1, 8, 1, 2)
        self.DelivWay_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivWay_SupplierOrder.setMinimumSize(QtCore.QSize(int(150//1.5), int(35//1.5)))
        self.DelivWay_SupplierOrder.setMaximumSize(QtCore.QSize(int(150//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivWay_SupplierOrder.setFont(font)
        self.DelivWay_SupplierOrder.setObjectName("DelivWay_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivWay_SupplierOrder, 1, 10, 1, 1)
        self.label_PayWay = QtWidgets.QLabel(parent=self.frame)
        self.label_PayWay.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.label_PayWay.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_PayWay.setFont(font)
        self.label_PayWay.setObjectName("label_PayWay")
        self.gridLayout_2.addWidget(self.label_PayWay, 1, 11, 1, 2)
        self.PayWay_SupplierOrder = QtWidgets.QComboBox(parent=self.frame)
        self.PayWay_SupplierOrder.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.PayWay_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        self.PayWay_SupplierOrder.setEditable(True)
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.PayWay_SupplierOrder.setFont(font)
        self.PayWay_SupplierOrder.setObjectName("PayWay_SupplierOrder")
        self.gridLayout_2.addWidget(self.PayWay_SupplierOrder, 1, 13, 1, 3)
        icon0 = QtGui.QIcon()
        icon0.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Add_White.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Plus = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Plus.setMinimumSize(QtCore.QSize(int(35//1.5), int(35//1.5)))
        self.Button_Plus.setMaximumSize(QtCore.QSize(int(35//1.5), int(35//1.5)))
        self.Button_Plus.setIcon(icon0)
        self.Button_Plus.setObjectName("Button_Plus")
        self.gridLayout_2.addWidget(self.Button_Plus, 1, 16, 1, 1)
        self.label_Date = QtWidgets.QLabel(parent=self.frame)
        self.label_Date.setMinimumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        self.label_Date.setMaximumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Date.setFont(font)
        self.label_Date.setObjectName("label_Date")
        self.gridLayout_2.addWidget(self.label_Date, 2, 1, 1, 1)
        self.Date_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Date_SupplierOrder.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Date_SupplierOrder.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Date_SupplierOrder.setFont(font)
        self.Date_SupplierOrder.setObjectName("Date_SupplierOrder")
        self.gridLayout_2.addWidget(self.Date_SupplierOrder, 2, 2, 1, 1)
        self.label_TheirRef = QtWidgets.QLabel(parent=self.frame)
        self.label_TheirRef.setMinimumSize(QtCore.QSize(int(95//1.5), int(35//1.5)))
        self.label_TheirRef.setMaximumSize(QtCore.QSize(int(95//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_TheirRef.setFont(font)
        self.label_TheirRef.setObjectName("label_TheirRef")
        self.gridLayout_2.addWidget(self.label_TheirRef, 2, 3, 1, 1)
        self.TheirRef_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.TheirRef_SupplierOrder.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.TheirRef_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.TheirRef_SupplierOrder.setFont(font)
        self.TheirRef_SupplierOrder.setObjectName("TheirRef_SupplierOrder")
        self.gridLayout_2.addWidget(self.TheirRef_SupplierOrder, 2, 4, 1, 4)
        self.label_DelivDate = QtWidgets.QLabel(parent=self.frame)
        self.label_DelivDate.setMinimumSize(QtCore.QSize(int(150//1.5), int(35//1.5)))
        self.label_DelivDate.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_DelivDate.setFont(font)
        self.label_DelivDate.setObjectName("label_DelivDate")
        self.gridLayout_2.addWidget(self.label_DelivDate, 2, 8, 1, 2)
        self.DelivDate_SupplierOrder = QtWidgets.QDateEdit(calendarPopup=True)
        self.DelivDate_SupplierOrder.setMinimumSize(QtCore.QSize(int(150//1.5), int(35//1.5)))
        self.DelivDate_SupplierOrder.setMaximumSize(QtCore.QSize(int(150//1.5), int(35//1.5)))
        self.DelivDate_SupplierOrder.setDate(QtCore.QDate.currentDate())
        self.DelivDate_SupplierOrder.setDisplayFormat("dd/MM/yyyy")
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivDate_SupplierOrder.setFont(font)
        self.DelivDate_SupplierOrder.setObjectName("DelivDate_SupplierOrder")
        self.DelivDate_SupplierOrder.setStyleSheet("QCalendarWidget QWidget{\n"
"background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QTableView{\n"
"    background-color: #121212;\n"
"alternate-background-color: #121212;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton {\n"
"    color: white;\n"
"    font-size:14px;\n"
"    icon-size:20px 20px;\n"
"    background-color:rgb(3, 174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QToolButton::hover {\n"
"    background-color : #019ad2;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton::pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border: 3px solid;\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QCalendarWidget QSpinBox{\n"
"    background-color: rgb(255, 255, 255);\n"
"    border: 2px solid;\n"
"    border-color: rgb(3,174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QAbstractItemView:enabled{\n"
"    selection-background-color: rgb(3, 174, 236);\n"
"    selection-color: white;\n"
"}\n"
"\n"
"#qt_calendar_prevmonth {\n"
"    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/back_arrow.png);\n"
"}\n"
"#qt_calendar_nextmonth {\n"
"    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/forward_arrow.png);\n"
"}")
        self.gridLayout_2.addWidget(self.DelivDate_SupplierOrder, 2, 10, 1, 1)
        self.label_DelivTerm = QtWidgets.QLabel(parent=self.frame)
        self.label_DelivTerm.setMinimumSize(QtCore.QSize(int(0//1.5), int(35//1.5)))
        self.label_DelivTerm.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_DelivTerm.setFont(font)
        self.label_DelivTerm.setObjectName("label_DelivTerm")
        self.gridLayout_2.addWidget(self.label_DelivTerm, 2, 11, 1, 2)
        self.DelivTerm_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivTerm_SupplierOrder.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.DelivTerm_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivTerm_SupplierOrder.setFont(font)
        self.DelivTerm_SupplierOrder.setObjectName("DelivTerm_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivTerm_SupplierOrder, 2, 13, 1, 4)
        self.label_Obs = QtWidgets.QLabel(parent=self.frame)
        self.label_Obs.setMinimumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        self.label_Obs.setMaximumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Obs.setFont(font)
        self.label_Obs.setObjectName("label_Obs")
        self.gridLayout_2.addWidget(self.label_Obs, 3, 1, 1, 1)
        self.OrderObs_SupplierOrder = QtWidgets.QTextEdit(parent=self.frame)
        self.OrderObs_SupplierOrder.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.OrderObs_SupplierOrder.setMaximumSize(QtCore.QSize(16777214, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.OrderObs_SupplierOrder.setFont(font)
        self.OrderObs_SupplierOrder.setObjectName("OrderObs_SupplierOrder")
        self.gridLayout_2.addWidget(self.OrderObs_SupplierOrder, 3, 2, 1, 6)
        self.label_Supply = QtWidgets.QLabel(parent=self.frame)
        self.label_Supply.setMinimumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        self.label_Supply.setMaximumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Supply.setFont(font)
        self.label_Supply.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Supply.setObjectName("label_Supply")
        self.gridLayout_2.addWidget(self.label_Supply, 4, 1, 1, 1)
        self.Supply_SupplierOrder = ScrollableComboBox()
        self.Supply_SupplierOrder.setEditable(True)
        self.Supply_SupplierOrder.setMinimumSize(QtCore.QSize(int(300//1.5), int(35//1.5)))
        self.Supply_SupplierOrder.setMinimumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Supply_SupplierOrder.setFont(font)
        self.Supply_SupplierOrder.setObjectName("Supply_SupplierOrder")
        self.gridLayout_2.addWidget(self.Supply_SupplierOrder, 5, 1, 1, 4)
        self.label_Stock = QtWidgets.QLabel(parent=self.frame)
        self.label_Stock.setMinimumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.label_Stock.setMaximumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Stock.setFont(font)
        self.label_Stock.setObjectName("label_Stock")
        self.gridLayout_2.addWidget(self.label_Stock, 4, 5, 1, 1)
        self.Stock_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Stock_SupplierOrder.setMinimumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.Stock_SupplierOrder.setMaximumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Stock_SupplierOrder.setFont(font)
        self.Stock_SupplierOrder.setReadOnly(True)
        self.Stock_SupplierOrder.setObjectName("Stock_SupplierOrder")
        self.gridLayout_2.addWidget(self.Stock_SupplierOrder, 5, 5, 1, 1)
        self.label_StockDsp = QtWidgets.QLabel(parent=self.frame)
        self.label_StockDsp.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.label_StockDsp.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_StockDsp.setFont(font)
        self.label_StockDsp.setObjectName("label_StockDsp")
        self.gridLayout_2.addWidget(self.label_StockDsp, 4, 6, 1, 1)
        self.StockDsp_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.StockDsp_SupplierOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.StockDsp_SupplierOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.StockDsp_SupplierOrder.setFont(font)
        self.StockDsp_SupplierOrder.setReadOnly(True)
        self.StockDsp_SupplierOrder.setObjectName("StockDsp_SupplierOrder")
        self.gridLayout_2.addWidget(self.StockDsp_SupplierOrder, 5, 6, 1, 1)
        self.label_StockVrt = QtWidgets.QLabel(parent=self.frame)
        self.label_StockVrt.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.label_StockVrt.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_StockVrt.setFont(font)
        self.label_StockVrt.setObjectName("label_StockVrt")
        self.gridLayout_2.addWidget(self.label_StockVrt, 4, 7, 1, 1)
        self.StockVrt_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.StockVrt_SupplierOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.StockVrt_SupplierOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.StockVrt_SupplierOrder.setFont(font)
        self.StockVrt_SupplierOrder.setReadOnly(True)
        self.StockVrt_SupplierOrder.setObjectName("StockVrt_SupplierOrder")
        self.gridLayout_2.addWidget(self.StockVrt_SupplierOrder, 5, 7, 1, 1)
        self.label_UnitValue = QtWidgets.QLabel(parent=self.frame)
        self.label_UnitValue.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.label_UnitValue.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_UnitValue.setFont(font)
        self.label_UnitValue.setObjectName("label_UnitValue")
        self.gridLayout_2.addWidget(self.label_UnitValue, 4, 8, 1, 1)
        self.UnitValue_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.UnitValue_SupplierOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.UnitValue_SupplierOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.UnitValue_SupplierOrder.setFont(font)
        self.UnitValue_SupplierOrder.setObjectName("UnitValue_SupplierOrder")
        self.gridLayout_2.addWidget(self.UnitValue_SupplierOrder, 5, 8, 1, 1)
        self.label_Discount = QtWidgets.QLabel(parent=self.frame)
        self.label_Discount.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.label_Discount.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Discount.setFont(font)
        self.label_Discount.setObjectName("label_Discount")
        self.gridLayout_2.addWidget(self.label_Discount, 4, 9, 1, 1)
        self.Discount_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Discount_SupplierOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.Discount_SupplierOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Discount_SupplierOrder.setFont(font)
        self.Discount_SupplierOrder.setObjectName("Discount_SupplierOrder")
        self.gridLayout_2.addWidget(self.Discount_SupplierOrder, 5, 9, 1, 1)
        self.label_IDOrd = QtWidgets.QLabel(parent=self.frame)
        self.label_IDOrd.setMinimumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.label_IDOrd.setMaximumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.label_IDOrd.setObjectName("label_IDOrd")
        self.label_IDOrd.setText("")
        if self.username == 'd.marquez':
            self.label_IDOrd.setStyleSheet("color: #121212")
        else:
            self.label_IDOrd.setStyleSheet("color: white")
        self.gridLayout_2.addWidget(self.label_IDOrd, 6, 1, 1, 1)
        self.label_IDRecord = QtWidgets.QLabel(parent=self.frame)
        self.label_IDRecord.setMinimumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.label_IDRecord.setMaximumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.label_IDRecord.setObjectName("label_IDRecord")
        self.label_IDRecord.setText("")
        if self.username == 'd.marquez':
            self.label_IDRecord.setStyleSheet("color: #121212")
        else:
            self.label_IDRecord.setStyleSheet("color: white")
        self.gridLayout_2.addWidget(self.label_IDRecord, 6, 2, 1, 1)
        self.label_Position = QtWidgets.QLabel(parent=self.frame)
        self.label_Position.setMinimumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.label_Position.setMaximumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Position.setFont(font)
        self.label_Position.setObjectName("label_Position")
        self.gridLayout_2.addWidget(self.label_Position, 6, 5, 1, 1)
        self.Position_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Position_SupplierOrder.setMinimumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.Position_SupplierOrder.setMaximumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Position_SupplierOrder.setFont(font)
        self.Position_SupplierOrder.setObjectName("Position_SupplierOrder")
        self.gridLayout_2.addWidget(self.Position_SupplierOrder, 7, 5, 1, 1)
        self.label_Quantity = QtWidgets.QLabel(parent=self.frame)
        self.label_Quantity.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.label_Quantity.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Quantity.setFont(font)
        self.label_Quantity.setObjectName("label_Quantity")
        self.gridLayout_2.addWidget(self.label_Quantity, 6, 6, 1, 1)
        self.Quantity_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Quantity_SupplierOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.Quantity_SupplierOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Quantity_SupplierOrder.setFont(font)
        self.Quantity_SupplierOrder.setObjectName("Quantity_SupplierOrder")
        self.gridLayout_2.addWidget(self.Quantity_SupplierOrder, 7, 6, 1, 1)
        self.label_Deliv1 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv1.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.label_Deliv1.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Deliv1.setFont(font)
        self.label_Deliv1.setObjectName("label_Deliv1")
        self.gridLayout_2.addWidget(self.label_Deliv1, 6, 7, 1, 1)
        self.Deliv1_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv1_SupplierOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.Deliv1_SupplierOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Deliv1_SupplierOrder.setFont(font)
        self.Deliv1_SupplierOrder.setObjectName("Deliv1_SupplierOrder")
        self.gridLayout_2.addWidget(self.Deliv1_SupplierOrder, 7, 7, 1, 1)
        self.label_Deliv2 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv2.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.label_Deliv2.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Deliv2.setFont(font)
        self.label_Deliv2.setObjectName("label_Deliv2")
        self.gridLayout_2.addWidget(self.label_Deliv2, 6, 8, 1, 1)
        self.Deliv2_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv2_SupplierOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.Deliv2_SupplierOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Deliv2_SupplierOrder.setFont(font)
        self.Deliv2_SupplierOrder.setObjectName("Deliv2_SupplierOrder")
        self.gridLayout_2.addWidget(self.Deliv2_SupplierOrder, 7, 8, 1, 1)
        self.label_Deliv3 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv3.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.label_Deliv3.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Deliv3.setFont(font)
        self.label_Deliv3.setObjectName("label_Deliv3")
        self.gridLayout_2.addWidget(self.label_Deliv3, 6, 9, 1, 1)
        self.Deliv3_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv3_SupplierOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        self.Deliv3_SupplierOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Deliv3_SupplierOrder.setFont(font)
        self.Deliv3_SupplierOrder.setObjectName("Deliv3_SupplierOrder")
        self.gridLayout_2.addWidget(self.Deliv3_SupplierOrder, 7, 9, 1, 1)
        self.label_DateDeliv = QtWidgets.QLabel(parent=self.frame)
        self.label_DateDeliv.setMinimumSize(QtCore.QSize(int(105//1.5), int(35//1.5)))
        self.label_DateDeliv.setMaximumSize(QtCore.QSize(int(105//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        font.setItalic(True)
        self.label_DateDeliv.setFont(font)
        self.label_DateDeliv.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_DateDeliv.setObjectName("label_DateDeliv")
        self.gridLayout_2.addWidget(self.label_DateDeliv, 6, 10, 1, 1)
        self.label_NoteDeliv = QtWidgets.QLabel(parent=self.frame)
        self.label_NoteDeliv.setMinimumSize(QtCore.QSize(int(105//1.5), int(35//1.5)))
        self.label_NoteDeliv.setMaximumSize(QtCore.QSize(int(105//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        font.setItalic(True)
        self.label_NoteDeliv.setFont(font)
        self.label_NoteDeliv.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_NoteDeliv.setObjectName("label_NoteDeliv")
        self.gridLayout_2.addWidget(self.label_NoteDeliv, 7, 10, 1, 1)
        self.label_1Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_1Deliv.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.label_1Deliv.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        font.setItalic(True)
        self.label_1Deliv.setFont(font)
        self.label_1Deliv.setObjectName("label_1Deliv")
        self.gridLayout_2.addWidget(self.label_1Deliv, 5, 11, 1, 1)
        self.DelivDate1_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate1_SupplierOrder.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.DelivDate1_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivDate1_SupplierOrder.setFont(font)
        self.DelivDate1_SupplierOrder.setObjectName("DelivDate1_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivDate1_SupplierOrder, 6, 11, 1, 2)
        self.DelivNote1_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote1_SupplierOrder.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.DelivNote1_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivNote1_SupplierOrder.setFont(font)
        self.DelivNote1_SupplierOrder.setObjectName("DelivNote1_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivNote1_SupplierOrder, 7, 11, 1, 2)
        self.label_2Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_2Deliv.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.label_2Deliv.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        font.setItalic(True)
        self.label_2Deliv.setFont(font)
        self.label_2Deliv.setObjectName("label_2Deliv")
        self.gridLayout_2.addWidget(self.label_2Deliv, 5, 13, 1, 1)
        self.DelivDate2_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate2_SupplierOrder.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.DelivDate2_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivDate2_SupplierOrder.setFont(font)
        self.DelivDate2_SupplierOrder.setObjectName("DelivDate2_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivDate2_SupplierOrder, 6, 13, 1, 2)
        self.DelivNote2_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote2_SupplierOrder.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.DelivNote2_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivNote2_SupplierOrder.setFont(font)
        self.DelivNote2_SupplierOrder.setObjectName("DelivNote2_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivNote2_SupplierOrder, 7, 13, 1, 2)
        self.label_3Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_3Deliv.setMinimumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.label_3Deliv.setMaximumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        font.setItalic(True)
        self.label_3Deliv.setFont(font)
        self.label_3Deliv.setObjectName("label_3Deliv")
        self.gridLayout_2.addWidget(self.label_3Deliv, 5, 15, 1, 1)
        self.DelivDate3_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate3_SupplierOrder.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.DelivDate3_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivDate3_SupplierOrder.setFont(font)
        self.DelivDate3_SupplierOrder.setObjectName("DelivDate3_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivDate3_SupplierOrder, 6, 15, 1, 2)
        self.DelivNote3_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote3_SupplierOrder.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.DelivNote3_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.DelivNote3_SupplierOrder.setFont(font)
        self.DelivNote3_SupplierOrder.setObjectName("DelivNote3_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivNote3_SupplierOrder, 7, 15, 1, 2)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Check.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Deliv1 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv1.setMinimumSize(QtCore.QSize(int(35//1.5), int(35//1.5)))
        self.Button_Deliv1.setMaximumSize(QtCore.QSize(int(35//1.5), int(35//1.5)))
        self.Button_Deliv1.setIcon(icon1)
        self.Button_Deliv1.setObjectName("Button_Deliv1")
        self.gridLayout_2.addWidget(self.Button_Deliv1, 5, 12, 1, 1)
        self.Button_Deliv2 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv2.setMinimumSize(QtCore.QSize(int(35//1.5), int(35//1.5)))
        self.Button_Deliv2.setMaximumSize(QtCore.QSize(int(35//1.5), int(35//1.5)))
        self.Button_Deliv2.setIcon(icon1)
        self.Button_Deliv2.setObjectName("Button_Deliv2")
        self.gridLayout_2.addWidget(self.Button_Deliv2, 5, 14, 1, 1)
        self.Button_Deliv3 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv3.setMinimumSize(QtCore.QSize(int(35//1.5), int(35//1.5)))
        self.Button_Deliv3.setMaximumSize(QtCore.QSize(int(35//1.5), int(35//1.5)))
        self.Button_Deliv3.setIcon(icon1)
        self.Button_Deliv3.setObjectName("Button_Deliv3")
        self.gridLayout_2.addWidget(self.Button_Deliv3, 5, 16, 1, 1)
        self.Button_CreateOrder = QtWidgets.QPushButton(parent=self.frame)
        self.Button_CreateOrder.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_CreateOrder.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_CreateOrder.setObjectName("Button_CreateOrder")
        self.gridLayout_2.addWidget(self.Button_CreateOrder, 1, 17, 1, 1)
        self.Button_ModifyOrder = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyOrder.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_ModifyOrder.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_ModifyOrder.setObjectName("Button_ModifyOrder")
        self.gridLayout_2.addWidget(self.Button_ModifyOrder, 2, 17, 1, 1)
        self.Button_Reload = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Reload.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_Reload.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_Reload.setObjectName("Button_Reload")
        self.gridLayout_2.addWidget(self.Button_Reload, 3, 17, 1, 1)
        self.Button_CreateQuotation = QtWidgets.QPushButton(parent=self.frame)
        self.Button_CreateQuotation.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_CreateQuotation.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_CreateQuotation.setObjectName("Button_CreateQuotation")
        self.gridLayout_2.addWidget(self.Button_CreateQuotation, 4, 17, 1, 1)
        self.Button_AddRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddRecord.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_AddRecord.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_AddRecord.setObjectName("Button_AddRecord")
        self.gridLayout_2.addWidget(self.Button_AddRecord, 5, 17, 1, 1)
        self.Button_ModifyRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyRecord.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_ModifyRecord.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_ModifyRecord.setObjectName("Button_ModifyRecord")
        self.gridLayout_2.addWidget(self.Button_ModifyRecord, 6, 17, 1, 1)
        self.Button_DeleteRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_DeleteRecord.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_DeleteRecord.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_DeleteRecord.setObjectName("Button_DeleteRecord")
        self.gridLayout_2.addWidget(self.Button_DeleteRecord, 7, 17, 1, 1)
        self.Button_Observations = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Observations.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_Observations.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        self.Button_Observations.setObjectName("Button_Observations")
        self.gridLayout_2.addWidget(self.Button_Observations, 8, 1, 1, 3)
        self.label_Details = QtWidgets.QLabel(parent=self.frame)
        self.label_Details.setMinimumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        self.label_Details.setMaximumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Details.setFont(font)
        self.label_Details.setObjectName("label_Details")
        self.gridLayout_2.addWidget(self.label_Details, 9, 1, 1, 1)
        self.frame_2 = QtWidgets.QFrame(parent=self.frame)
        self.frame_2.setMaximumSize(QtCore.QSize(int(500//1.5), 16777215))
        if self.username == 'd.marquez':
            self.frame_2.setStyleSheet(".QFrame {\n"
"    border: 1px solid white;\n"
"}")
        else:
            self.frame_2.setStyleSheet(".QFrame {\n"
"    border: 1px solid black;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_Total = QtWidgets.QLabel(parent=self.frame_2)
        self.label_Total.setMinimumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.label_Total.setMaximumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        font.setBold(True)
        self.label_Total.setFont(font)
        self.label_Total.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_Total.setObjectName("label_Total")
        self.verticalLayout.addWidget(self.label_Total)
        self.Total_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame_2)
        self.Total_SupplierOrder.setMinimumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Total_SupplierOrder.setMaximumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        font.setBold(True)
        self.Total_SupplierOrder.setFont(font)
        self.Total_SupplierOrder.setReadOnly(True)
        self.Total_SupplierOrder.setObjectName("Total_SupplierOrder")
        self.Total_SupplierOrder.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.verticalLayout.addWidget(self.Total_SupplierOrder)
        self.gridLayout_2.addWidget(self.frame_2, 8, 13, 2, 4)
        self.Currency_SupplierOrder = QtWidgets.QComboBox(parent=self.frame)
        self.Currency_SupplierOrder.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Currency_SupplierOrder.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        font.setBold(True)
        self.Currency_SupplierOrder.setFont(font)
        self.Currency_SupplierOrder.setObjectName("Currency_SupplierOrder")
        self.gridLayout_2.addWidget(self.Currency_SupplierOrder, 8, 17, 1, 1)
        self.Button_Print = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Print.setMinimumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_Print.setMaximumSize(QtCore.QSize(int(120//1.5), int(35//1.5)))
        self.Button_Print.setObjectName("Button_Print")
        self.gridLayout_2.addWidget(self.Button_Print, 9, 17, 1, 1)
        self.tableRecords = CustomTableWidgetRecord()
        self.tableRecords.setMinimumSize(QtCore.QSize(16777215, int(200//1.5)))
        # self.tableRecords.setMaximumSize(QtCore.QSize(16777215, int(200//1.5)))
        self.tableRecords.setObjectName("tableRecords")
        self.tableRecords.setColumnCount(13)
        self.tableRecords.setRowCount(0)
        for i in range(13):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(14//1.5))
            font.setBold(True)
            item.setFont(font)
            self.tableRecords.setHorizontalHeaderItem(i, item)
        self.tableRecords.hideColumn(12)
        self.gridLayout_2.addWidget(self.tableRecords, 10, 1, 1, 17)
        # self.Coms_SupplierOrder = QtWidgets.QTextEdit(parent=self.frame)
        # self.Coms_SupplierOrder.setMinimumSize(QtCore.QSize(0, int(80//1.5)))
        # self.Coms_SupplierOrder.setMaximumSize(QtCore.QSize(int(2800//1.5), int(1500//1.5)))
        # font = QtGui.QFont()
        # font.setPointSize(int(14//1.5))
        # self.Coms_SupplierOrder.setFont(font)
        # self.Coms_SupplierOrder.setObjectName("Coms_SupplierOrder")
        # self.gridLayout_2.addWidget(self.Coms_SupplierOrder, 11, 1, 3, 17)
        # self.label_FinalCom = QtWidgets.QLabel(parent=self.frame)
        # self.label_FinalCom.setMinimumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        # self.label_FinalCom.setMaximumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        # font = QtGui.QFont()
        # font.setPointSize(int(14//1.5))
        # self.label_FinalCom.setFont(font)
        # self.label_FinalCom.setObjectName("label_FinalCom")
        # self.gridLayout_2.addWidget(self.label_FinalCom, 14, 1, 1, 1)
        # self.FinalComs_SupplierOrder = QtWidgets.QTextEdit(parent=self.frame)
        # self.FinalComs_SupplierOrder.setMinimumSize(QtCore.QSize(0, int(60//1.5)))
        # self.FinalComs_SupplierOrder.setMaximumSize(QtCore.QSize(int(1220//1.5), int(60//1.5)))
        # font = QtGui.QFont()
        # font.setPointSize(int(14//1.5))
        # self.FinalComs_SupplierOrder.setFont(font)
        # self.FinalComs_SupplierOrder.setObjectName("FinalComs_SupplierOrder")
        # self.gridLayout_2.addWidget(self.FinalComs_SupplierOrder, 14, 2, 2, 15)
        
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.tableSupplierOrders = CustomTableWidgetOrder()
        self.tableSupplierOrders.setObjectName("tableSupplierOrders")
        self.tableSupplierOrders.setColumnCount(3)
        self.tableSupplierOrders.setRowCount(0)
        for i in range(3):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(14//1.5))
            font.setBold(True)
            item.setFont(font)
            self.tableSupplierOrders.setHorizontalHeaderItem(i, item)

        # self.verticalLayout_2.addWidget(self.scrollArea)
        # self.verticalLayout_2.addWidget(self.tableSupplierOrders)

        self.splitter.addWidget(self.scrollArea)
        self.splitter.addWidget(self.tableSupplierOrders)
        self.splitter.setSizes([280, 20])
        self.verticalLayout_2.addWidget(self.splitter)

        self.Position = QtWidgets.QLineEdit(parent=self.frame)
        self.Position.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Position.setMaximumSize(QtCore.QSize(500, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Position.setFont(font)
        self.Position.setObjectName("Position")
        self.verticalLayout_2.addWidget(self.Position)
        self.gridLayout.addWidget(self.frame, 1, 0, 1, 1)
        SupplierOrder_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=SupplierOrder_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1534, 22))
        self.menubar.setObjectName("menubar")
        SupplierOrder_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=SupplierOrder_Window)
        self.statusbar.setObjectName("statusbar")
        SupplierOrder_Window.setStatusBar(self.statusbar)
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableSupplierOrders.setSortingEnabled(False)
        self.tableSupplierOrders.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")

        self.retranslateUi(SupplierOrder_Window)
        QtCore.QMetaObject.connectSlotsByName(SupplierOrder_Window)

        commands_suppliers = ("""
                        SELECT * 
                        FROM purch_fact.suppliers
                        ORDER BY purch_fact.suppliers.name
                        """)
        commands_supplies = ("""
                        SELECT reference, description, ROUND(physical_stock,2), ROUND(available_stock,2), ROUND(pending_stock,2), id
                        FROM purch_fact.supplies
                        ORDER BY reference ASC
                        """)
        commands_currency = ("""
                        SELECT * 
                        FROM purch_fact.currency
                        ORDER BY purch_fact.currency.id
                        """)
        commands_payway = ("""
                        SELECT pay_way
                        FROM purch_fact.pay_way_suppliers_order
                        ORDER BY pay_way ASC
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_suppliers)
            results_suppliers=cur.fetchall()
            cur.execute(commands_supplies)
            results_supplies=cur.fetchall()
            cur.execute(commands_currency)
            results_currency=cur.fetchall()
            cur.execute(commands_payway)
            results_payway=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_suppliers=[x[1] for x in results_suppliers]
        self.Supplier_SupplierOrder.addItems([''] + list_suppliers)

        self.list_supplies=[x[0] + ' | ' + x[1] + ' | ' + str(x[2]) + ' | ' + str(x[3]) + ' | ' + str(x[4])  + ' | ID:' + str(x[5]) for x in results_supplies]
        self.Supply_SupplierOrder.addItems([''] + self.list_supplies)

        list_currency=[x[2] for x in results_currency]
        self.Currency_SupplierOrder.addItems(list_currency)

        list_payway=[x[0] for x in results_payway]
        self.PayWay_SupplierOrder.addItems([''] + sorted(list_payway))

        self.Position_SupplierOrder.setText('1')
        self.Date_SupplierOrder.setText(date.today().strftime("%d/%m/%Y"))

        self.tableSupplierOrders.currentCellChanged.connect(self.loadformorder)
        self.tableSupplierOrders.cellClicked.connect(self.loadformorder)
        self.tableRecords.currentCellChanged.connect(self.loadformsupply)
        self.tableRecords.cellClicked.connect(self.loadformsupply)
        self.Button_CreateOrder.clicked.connect(self.createorder)
        self.Button_ModifyOrder.clicked.connect(self.modifyorder)
        self.Button_Reload.clicked.connect(self.load_all)
        self.Button_CreateQuotation.clicked.connect(self.createquotation)
        self.Button_AddRecord.clicked.connect(self.addrecord)
        self.Button_ModifyRecord.clicked.connect(self.modifyrecord)
        self.Button_DeleteRecord.clicked.connect(self.deleterecord)
        self.Button_Deliv1.clicked.connect(self.adddeliv1)
        self.Button_Deliv2.clicked.connect(self.adddeliv2)
        self.Button_Deliv3.clicked.connect(self.adddeliv3)
        self.Supply_SupplierOrder.currentIndexChanged.connect(self.loadstocks)
        self.Button_Print.clicked.connect(self.printsupplierorder)
        self.Button_Plus.clicked.connect(self.add_payway)
        self.tableRecords.horizontalHeader().sectionClicked.connect(self.on_headerrecords_section_clicked)
        self.tableSupplierOrders.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.Position.textChanged.connect(self.position_table)
        self.Button_Observations.clicked.connect(self.show_dialog)
        self.loadtableorders()

        self.tableSupplierOrders.itemDoubleClicked.connect(self.item_double_clicked)

        if self.num_order is not None:
            self.position_table(self.num_order)

        self.Quantity_SupplierOrder.editingFinished.connect(lambda: (self.UnitValue_SupplierOrder.setFocus(), self.UnitValue_SupplierOrder.selectAll()))


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, SupplierOrder_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        SupplierOrder_Window.setWindowTitle(_translate("SupplierOrder_Window", "Pedido Proveedor"))
        self.Button_CreateOrder.setText(_translate("SupplierOrder_Window", "Cr. Ped."))
        self.Button_ModifyOrder.setText(_translate("SupplierOrder_Window", "Mod. Ped."))
        self.Button_Reload.setText(_translate("SupplierOrder_Window", "Recargar"))
        self.Button_CreateQuotation.setText(_translate("SupplierOrder_Window", "Crear Cot."))
        self.Button_AddRecord.setText(_translate("SupplierOrder_Window", "Ag. Reg."))
        self.Button_ModifyRecord.setText(_translate("SupplierOrder_Window", "Mod. Reg."))
        self.Button_DeleteRecord.setText(_translate("SupplierOrder_Window", "El. Reg."))
        self.Button_Print.setText(_translate("SupplierOrder_Window", "IMP."))
        self.Button_Observations.setText(_translate("SupplierOrder_Window", "Notas Pedido"))
        self.label_Total.setText(_translate("SupplierOrder_Window", "Total:"))
        self.label_Supplier.setText(_translate("SupplierOrder_Window", "Prov.:"))
        self.label_TheirRef.setText(_translate("SupplierOrder_Window", "S/Ref.:"))
        self.label_Stock.setText(_translate("SupplierOrder_Window", "St.:"))
        self.label_Quantity.setText(_translate("SupplierOrder_Window", "Cant.:"))
        self.label_NumOrder.setText(_translate("SupplierOrder_Window", "Nº Pedido:"))
        self.label_Deliv2.setText(_translate("SupplierOrder_Window", "Ent. 2:"))
        self.label_Details.setText(_translate("SupplierOrder_Window", "Detalle:"))
        self.label_StockVrt.setText(_translate("SupplierOrder_Window", "St. V.:"))
        self.label_Deliv3.setText(_translate("SupplierOrder_Window", "Ent. 3:"))
        self.label_Obs.setText(_translate("SupplierOrder_Window", "Obs:"))
        self.label_Supply.setText(_translate("SupplierOrder_Window", "Insumo:"))
        self.label_Date.setText(_translate("SupplierOrder_Window", "Fecha:"))
        self.label_StockDsp.setText(_translate("SupplierOrder_Window", "St. D.:"))
        self.label_DelivDate.setText(_translate("SupplierOrder_Window", "F. Entrega:"))
        self.label_DelivWay.setText(_translate("SupplierOrder_Window", "Envío:"))
        self.label_Deliv1.setText(_translate("SupplierOrder_Window", "Ent. 1:"))
        self.label_3Deliv.setText(_translate("SupplierOrder_Window", "3ª Ent."))
        self.label_2Deliv.setText(_translate("SupplierOrder_Window", "2ª Ent."))
        self.label_1Deliv.setText(_translate("SupplierOrder_Window", "1ª Ent."))
        self.label_DateDeliv.setText(_translate("SupplierOrder_Window", "Fecha"))
        self.label_NoteDeliv.setText(_translate("SupplierOrder_Window", "Albarán"))
        self.label_DelivTerm.setText(_translate("SupplierOrder_Window", "P. Entrega:"))
        self.label_PayWay.setText(_translate("SupplierOrder_Window", "Pago:"))
        # self.label_FinalCom.setText(_translate("SupplierOrder_Window", "Coment. Final:"))
        self.label_UnitValue.setText(_translate("SupplierOrder_Window", "V. Un.:"))
        self.label_Discount.setText(_translate("SupplierOrder_Window", "% Dcto.:"))
        self.label_Position.setText(_translate("SupplierOrder_Window", "Pos.:"))

        item = self.tableSupplierOrders.horizontalHeaderItem(0)
        item.setText(_translate("SupplierOrder_Window", "ID"))
        item = self.tableSupplierOrders.horizontalHeaderItem(1)
        item.setText(_translate("SupplierOrder_Window", "Nº Pedido"))
        item = self.tableSupplierOrders.horizontalHeaderItem(2)
        item.setText(_translate("SupplierOrder_Window", "Proveedor"))
        item = self.tableRecords.horizontalHeaderItem(0)
        item.setText(_translate("SupplierOrder_Window", "ID"))
        item = self.tableRecords.horizontalHeaderItem(1)
        item.setText(_translate("SupplierOrder_Window", "Pos."))
        item = self.tableRecords.horizontalHeaderItem(2)
        item.setText(_translate("SupplierOrder_Window", "Insumo"))
        item = self.tableRecords.horizontalHeaderItem(3)
        item.setText(_translate("SupplierOrder_Window", "Descripción"))
        item = self.tableRecords.horizontalHeaderItem(4)
        item.setText(_translate("SupplierOrder_Window", "Cantidad"))
        item = self.tableRecords.horizontalHeaderItem(5)
        item.setText(_translate("SupplierOrder_Window", "Valor Un."))
        item = self.tableRecords.horizontalHeaderItem(6)
        item.setText(_translate("SupplierOrder_Window", "%DCTO."))
        item = self.tableRecords.horizontalHeaderItem(7)
        item.setText(_translate("SupplierOrder_Window", "Sbtot."))
        item = self.tableRecords.horizontalHeaderItem(8)
        item.setText(_translate("SupplierOrder_Window", "Pendiente"))
        item = self.tableRecords.horizontalHeaderItem(9)
        item.setText(_translate("SupplierOrder_Window", "Cant 1"))
        item = self.tableRecords.horizontalHeaderItem(10)
        item.setText(_translate("SupplierOrder_Window", "Cant 2"))
        item = self.tableRecords.horizontalHeaderItem(11)
        item.setText(_translate("SupplierOrder_Window", "Cant 3"))

# Function to create order
    def createorder(self):
        """
        Creates a new entry in database after validating form inputs.
        """
        num_order=self.NumOrder_SupplierOrder.text()
        supplier_name=self.Supplier_SupplierOrder.currentText()
        delivway=self.DelivWay_SupplierOrder.text()
        payway=self.PayWay_SupplierOrder.currentText()
        order_date=self.Date_SupplierOrder.text()
        their_ref=self.TheirRef_SupplierOrder.text()
        delivdate=self.DelivDate_SupplierOrder.date().toString(QtCore.Qt.DateFormat.ISODate)
        delivterm=self.DelivTerm_SupplierOrder.text()
        order_obs=self.OrderObs_SupplierOrder.toPlainText()
        # order_com=self.Coms_SupplierOrder.toPlainText()
        # order_finalcoms=self.FinalComs_SupplierOrder.toPlainText()
        currency=self.Currency_SupplierOrder.currentText()[0]
        total=self.Total_SupplierOrder.text()
        self.Coms_SupplierOrder = ''

        if order_date=="" or (order_date==" " or (num_order==" " or (num_order=="" or supplier_name == ""))):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Pedido")
            dlg.setText("Rellena la fecha, el número de pédido y el proveedor")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not self.is_valid_date(order_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Pedido")
            dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            delivdate = None if delivdate == '' else delivdate
            check_neworder = "SELECT id FROM purch_fact.supplier_ord_header WHERE supplier_order_num = %s"
            commands_neworder=("""
                            INSERT INTO purch_fact.supplier_ord_header (
                            supplier_id, order_date, delivery_date, notes, supplier_order_num, their_ref,
                            delivery_way, pay_way, delivery_term, total_amount, currency_id
                            )
                            VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplier = "SELECT id FROM purch_fact.suppliers WHERE name = %s"
                cur.execute(query_supplier, (supplier_name,))
                result_supplier = cur.fetchone()
                query_currency = "SELECT id FROM purch_fact.currency WHERE symbol_currency = %s"
                cur.execute(query_currency, (currency,))
                result_currency = cur.fetchone()
            # get id from table
                supplier_id = result_supplier[0]
                currency_id = result_currency[0]
            # execution of principal command
                cur.execute(check_neworder, (num_order,))
                result_checkorder = cur.fetchall()

                if len(result_checkorder) == 0:
                    data=(supplier_id,order_date,delivdate,order_obs,num_order,their_ref,delivway,payway,delivterm,total,currency_id,)
                    cur.execute(commands_neworder, data)

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Crear Pedido Proveedor")
                    dlg.setText("Pedido creado con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()

                    del dlg,new_icon
                else:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Crear Pedido Proveedor")
                    dlg.setText("El número de pedido ya existe")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg,new_icon
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                print(error)
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_idorder = "SELECT id FROM purch_fact.supplier_ord_header ORDER BY id"
                cur.execute(query_idorder)
                result_idorder = cur.fetchall()

            # get id from table
                idorder = result_idorder[-1][0]
                self.label_IDOrd.setText(str(idorder))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtableorders()

            self.tableRecords.setRowCount(0)

# Function to modify order data
    def modifyorder(self):
        """
        Edit the corresponding entry in database after validating form inputs.
        """
        order_id=self.label_IDOrd.text()
        num_order=self.NumOrder_SupplierOrder.text()
        supplier_name=self.Supplier_SupplierOrder.currentText()
        delivway=self.DelivWay_SupplierOrder.text()
        payway=self.PayWay_SupplierOrder.currentText()
        order_date=self.Date_SupplierOrder.text()
        their_ref=self.TheirRef_SupplierOrder.text()
        delivdate=self.DelivDate_SupplierOrder.date().toString(QtCore.Qt.DateFormat.ISODate)
        delivterm=self.DelivTerm_SupplierOrder.text()
        order_obs=self.OrderObs_SupplierOrder.toPlainText()
        # order_com=self.Coms_SupplierOrder.toPlainText()
        # order_finalcoms=self.FinalComs_SupplierOrder.toPlainText()
        currency=self.Currency_SupplierOrder.currentText()[0]
        total=self.Total_SupplierOrder.text()

        if order_id=="" or (order_date==" " or order_date==""):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Pedido")
            dlg.setText("Selecciona un pedido existente e introduce una fecha válida")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not self.is_valid_date(order_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Pedido")
            dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        # elif not self.is_valid_date(delivdate):
        #     dlg = QtWidgets.QMessageBox()
        #     new_icon = QtGui.QIcon()
        #     new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        #     dlg.setWindowIcon(new_icon)
        #     dlg.setWindowTitle("Crear Pedido")
        #     dlg.setText("La fecha de entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
        #     dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
        #     dlg.exec()
        #     del dlg, new_icon

        else:
            commands_updateorder = ("""
                        UPDATE purch_fact.supplier_ord_header
                        SET "supplier_id" = %s, "order_date" = %s, "delivery_date" = %s, "notes" = %s, "supplier_order_num" = %s, "their_ref" = %s,
                        "delivery_way" = %s, "pay_way" = %s, "delivery_term" = %s, "total_amount" = %s, "currency_id" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplier = "SELECT id FROM purch_fact.suppliers WHERE name = %s"
                cur.execute(query_supplier, (supplier_name,))
                result_supplier = cur.fetchone()

                query_currency = "SELECT id FROM purch_fact.currency WHERE symbol_currency = %s"
                cur.execute(query_currency, (currency,))
                result_currency = cur.fetchone()
            # get id from table
                supplier_id = result_supplier[0]
                currency_id = result_currency[0]
            # execution of principal command
                data=(supplier_id,order_date,delivdate,order_obs,num_order,their_ref,delivway,payway,delivterm,total,currency_id,order_id,)
                cur.execute(commands_updateorder, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Modificar Pedido Proveedor")
                dlg.setText("Pedido modificado con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg,new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to create record
    def addrecord(self):
        """
        Creates a new entry in database after validating form inputs.
        """
        order_id=self.label_IDOrd.text()
        supply_name=self.Supply_SupplierOrder.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        unit_value=self.UnitValue_SupplierOrder.text()
        if "€" in unit_value:
            unit_value=unit_value.replace(".","")
            unit_value=unit_value.replace(" €","")
        else:
            unit_value=unit_value
        discount=self.Discount_SupplierOrder.text()
        if "%" in discount:
            discount = discount.replace(" %","")
        else:
            discount = discount if discount not in [""," "] else 0
        position=self.Position_SupplierOrder.text()
        quantity=self.Quantity_SupplierOrder.text()
        deliv_quant_1=self.Deliv1_SupplierOrder.text() if self.Deliv1_SupplierOrder.text() not in [""," "] else 0
        deliv_quant_2=self.Deliv2_SupplierOrder.text() if self.Deliv2_SupplierOrder.text() not in [""," "] else 0
        deliv_quant_3=self.Deliv3_SupplierOrder.text() if self.Deliv3_SupplierOrder.text() not in [""," "] else 0
        supply_id=self.Supply_SupplierOrder.currentText().split("|")[-1].strip().split(":")[1]

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            query_checkposition = "SELECT * FROM purch_fact.supplier_ord_detail WHERE (position_supply = %s AND supplier_ord_header_id= %s)"
            cur.execute(query_checkposition, (position, order_id,))
            result_position = cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        if order_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("Por favor, para añadir registros elige un pedido existente o crea uno nuevo")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif quantity == "" or (quantity == " " or quantity == 0):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("Añade una cantidad válida de elementos")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif position == "" or (position ==" " or position == 0):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("Añade posición válida y mayor que 0")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif unit_value == "" or (unit_value ==" " or unit_value == 0):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("Añade un precio válido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif len(result_position)>0:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("Esa posición ya existe. Elige otra")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            commands_newrecord = ("""
                                INSERT INTO purch_fact.supplier_ord_detail (
                                supplier_ord_header_id,position_supply,supply_id,unit_value,
                                discount,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3
                                )
                                VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = "SELECT id, pending_stock FROM purch_fact.supplies WHERE id = %s"
                cur.execute(query_supplyid, (supply_id,))
                result_supplyid = cur.fetchone()

            # get id from table
                supply_id = result_supplyid[0]
                pending_stock = result_supplyid[1]
                new_pending_stock = str(float(pending_stock) + float(quantity))

                query_pending_stock = ("""UPDATE purch_fact.supplies
                                        SET "pending_stock" = %s 
                                        WHERE "id" = %s""")
                cur.execute(query_pending_stock, (new_pending_stock,supply_id,))
            # execution of principal command
                data=(order_id,position,supply_id,unit_value,discount,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3,)
                cur.execute(commands_newrecord, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.Supply_SupplierOrder.setCurrentIndex(0)
            self.Quantity_SupplierOrder.setText("")
            
            self.loadtablerecords()
            self.calculate_totalorder()
            self.loadstocks()

            self.Stock_SupplierOrder.setText('')
            self.StockDsp_SupplierOrder.setText('')
            self.StockVrt_SupplierOrder.setText('')

            self.Supply_SupplierOrder.setFocus()

            self.Position_SupplierOrder.setText(str(int(position) + 1))

            self.position_table_record(str(int(position)))

# Function to modify record data
    def modifyrecord(self):
        """
        Edit the corresponding entry in database after validating form inputs.
        """
        order_id=self.label_IDOrd.text()
        record_id=self.label_IDRecord.text()
        supply_name=self.Supply_SupplierOrder.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        unit_value=self.UnitValue_SupplierOrder.text()
        if "€" in unit_value:
            unit_value=unit_value.replace(".","")
            unit_value=unit_value.replace(" €","")
        else:
            unit_value=unit_value
        discount=self.Discount_SupplierOrder.text()
        if "%" in discount:
            discount = discount.replace(" %","")
        else:
            discount = discount if discount not in [""," "] else 0
        position=self.Position_SupplierOrder.text()
        quantity=self.Quantity_SupplierOrder.text()
        deliv_quant_1=self.Deliv1_SupplierOrder.text() if self.Deliv1_SupplierOrder.text() not in [""," "] else 0
        deliv_quant_2=self.Deliv2_SupplierOrder.text() if self.Deliv2_SupplierOrder.text() not in [""," "] else 0
        deliv_quant_3=self.Deliv3_SupplierOrder.text() if self.Deliv3_SupplierOrder.text() not in [""," "] else 0
        supply_id=self.Supply_SupplierOrder.currentText().split("|")[-1].strip().split(":")[1]

        if order_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Registros")
            dlg.setText("No puedes hacer lo que estas intentando, flipao")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif record_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Registros")
            dlg.setText("Selecciona un registro existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif position == "" or (position ==" " or position == 0):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Registros")
            dlg.setText("Elige una posición válida y mayor que 0")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            commands_modifyrecord = ("""
                        UPDATE purch_fact.supplier_ord_detail
                        SET "position_supply" = %s, "supply_id" = %s, "unit_value" = %s, "discount" = %s,
                        "quantity" = %s, "deliv_quant_1" = %s, "deliv_quant_2" = %s, "deliv_quant_3" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = ("""SELECT id, physical_stock, pending_stock, available_stock
                                    FROM purch_fact.supplies
                                    WHERE id = %s""")
                cur.execute(query_supplyid, (supply_id,))
                result_supplyid = cur.fetchone()

                query_quantitysupply = ("""SELECT pending, deliv_quant_1, deliv_quant_2, deliv_quant_3
                                        FROM purch_fact.supplier_ord_detail
                                        WHERE id = %s""")
                cur.execute(query_quantitysupply, (record_id,))
                result_quantity = cur.fetchone()
            # get id from table
                stock = result_supplyid[1]
                pending_stock = result_supplyid[2]
                available_stock = result_supplyid[3]

                old_pending = result_quantity[0]
                old_quant_deliv_1 = result_quantity[1] if result_quantity[1] is not None else 0
                old_quant_deliv_2 = result_quantity[2] if result_quantity[2] is not None else 0
                old_quant_deliv_3 = result_quantity[3] if result_quantity[3] is not None else 0

                new_quant_deliv = float(deliv_quant_1) + float(deliv_quant_2) + float(deliv_quant_3)
                old_quant_deliv = float(old_quant_deliv_1) + float(old_quant_deliv_2) + float(old_quant_deliv_3)

                new_pending = float(quantity) - new_quant_deliv

                new_stock= str(float(stock) - old_quant_deliv + new_quant_deliv)
                new_pending_stock = str(float(pending_stock) - float(old_pending) + float(new_pending))
                new_available_stock= str(float(available_stock) - old_quant_deliv + new_quant_deliv)

                query_pending_stock = ("""UPDATE purch_fact.supplies
                                        SET "physical_stock" = %s, "pending_stock" = %s, "available_stock" = %s 
                                        WHERE "id" = %s""")

                cur.execute(query_pending_stock, (new_stock,new_pending_stock,new_available_stock,supply_id,))
            # execution of principal command
                data=(position,supply_id,unit_value,discount,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3,record_id,)
                cur.execute(commands_modifyrecord, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                print(error)
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablerecords()
            self.calculate_totalorder()
            self.loadstocks()

# Function to delete record data
    def deleterecord(self):
        """
        Delete the corresponding entry in database after validating form inputs.
        """
        record_id=self.label_IDRecord.text()

        if record_id == "" or self.Supply_SupplierOrder.currentText()=='':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Eliminar Registros")
            dlg.setText("Selecciona un registro existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            supply_name=self.Supply_SupplierOrder.currentText()
            supply_name=supply_name[:supply_name.find(" |")]
            quantity=self.Quantity_SupplierOrder.text()
            supply_id=self.Supply_SupplierOrder.currentText().split("|")[-1].strip().split(":")[1]
            commands_deleterecord = ("""
                                DELETE FROM purch_fact.supplier_ord_detail
                                WHERE purch_fact.supplier_ord_detail.id = %s
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = "SELECT id, pending_stock FROM purch_fact.supplies WHERE id = %s"
                cur.execute(query_supplyid, (supply_id,))
                result_supplyid = cur.fetchone()

            # get id from table
                pending_stock = result_supplyid[1]
                new_pending_stock = str(float(pending_stock) - float(quantity))

                query_pending_stock = ("""UPDATE purch_fact.supplies
                                        SET "pending_stock" = %s 
                                        WHERE "id" = %s""")
                cur.execute(query_pending_stock, (new_pending_stock,supply_id,))
            # execution of principal command
                data=(record_id,)
                cur.execute(commands_deleterecord, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.Supply_SupplierOrder.setCurrentIndex(0)
            self.Position_SupplierOrder.setText("")
            self.Quantity_SupplierOrder.setText("")
            
            self.loadtablerecords()
            self.calculate_totalorder()
            self.loadstocks()

# Function to load client order form
    def loadformorder(self,current_row):
        """
        Loads the order details from a selected row in the table and populates the order form fields.

        Args:
            current_row (int): Number of current row being processing

        Raises:
            psycopg2.DatabaseError: If an error occurs while querying the PostgreSQL database.
        """
        if current_row >= 0:
            data_order=[]

            item_text=self.tableSupplierOrders.item(current_row, 0).text()
            data_order.append(item_text)

            self.label_IDOrd.setText(data_order[0])

            commands_querytableorders = ("""
                            SELECT so_header.supplier_order_num, suppliers."name",
                            TO_CHAR(so_header."order_date",'DD-MM-YYYY'), TO_CHAR(so_header.delivery_date,'DD-MM-YYYY'),
                            so_header.their_ref, so_header.notes, so_header.delivery_term, so_header.delivery_way, 
                            so_header.order_com, so_header.pay_way,
                            TO_CHAR(so_header."deliv_date_1",'DD-MM-YYYY'), so_header."deliv_note_1",
                            TO_CHAR(so_header."deliv_date_2",'DD-MM-YYYY'), so_header."deliv_note_2",
                            TO_CHAR(so_header."deliv_date_3",'DD-MM-YYYY'), so_header."deliv_note_3"
                            FROM purch_fact.supplier_ord_header AS so_header
                            LEFT JOIN purch_fact.suppliers AS suppliers ON (suppliers."id" = so_header."supplier_id")
                            WHERE so_header.id = %s
                            ORDER BY so_header.supplier_order_num DESC
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_querytableorders,(data_order[0],))
                results_orders=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.NumOrder_SupplierOrder.setText(results_orders[0][0])
            self.Supplier_SupplierOrder.setCurrentText(results_orders[0][1])
            self.Date_SupplierOrder.setText(results_orders[0][2])
            self.DelivDate_SupplierOrder.setDate(QtCore.QDate.fromString(results_orders[0][3], "dd-MM-yyyy"))
            self.TheirRef_SupplierOrder.setText(results_orders[0][4])
            self.OrderObs_SupplierOrder.setText(results_orders[0][5])
            self.DelivTerm_SupplierOrder.setText(results_orders[0][6])
            self.DelivWay_SupplierOrder.setText(results_orders[0][7])
            self.Coms_SupplierOrder = results_orders[0][8]
            # self.FinalComs_SupplierOrder.setText(data_order[10])
            self.PayWay_SupplierOrder.setCurrentText(results_orders[0][9])
            self.DelivDate1_SupplierOrder.setText(results_orders[0][10] if results_orders[0][10] != "None" else "")
            self.DelivNote1_SupplierOrder.setText(results_orders[0][11] if results_orders[0][11] != "None" else "")
            self.DelivDate2_SupplierOrder.setText(results_orders[0][12] if results_orders[0][12] != "None" else "")
            self.DelivNote2_SupplierOrder.setText(results_orders[0][13] if results_orders[0][13] != "None" else "")
            self.DelivDate3_SupplierOrder.setText(results_orders[0][14] if results_orders[0][14] != "None" else "")
            self.DelivNote3_SupplierOrder.setText(results_orders[0][15] if results_orders[0][15] != "None" else "")

            self.label_IDRecord.setText("")

            self.Supply_SupplierOrder.setCurrentIndex(0)
            self.Quantity_SupplierOrder.setText("")
            self.UnitValue_SupplierOrder.setText("")
            self.Discount_SupplierOrder.setText("")
            self.Deliv1_SupplierOrder.setText("")
            self.Deliv2_SupplierOrder.setText("")
            self.Deliv3_SupplierOrder.setText("")
            self.Stock_SupplierOrder.setText("")
            self.StockDsp_SupplierOrder.setText("")
            self.StockVrt_SupplierOrder.setText("")

            self.loadtablerecords()
            self.calculate_totalorder()

            total_rows = self.tableRecords.rowCount()

            if total_rows == 0:
                self.Position_SupplierOrder.setText("1")
            else:
                biggest_value = None
                for row in range(total_rows):
                    item = self.tableRecords.item(row, 1).text()
                    if item is not None:
                        value = int(item)
                        if biggest_value is None or value > biggest_value:
                            biggest_value = value

                self.Position_SupplierOrder.setText(str(biggest_value + 1))

# Function to load record form
    def loadformsupply(self,current_row):
        """
        Loads supply data from the selected row in the supply table and populates the form fields.

        Args:
            current_row (int): Number of current row being processing
        """
        if current_row >= 0:
            data_supply=[]

            for column in range(13):
                item_text=self.tableRecords.item(current_row, column).text()
                data_supply.append(item_text)

            self.label_IDRecord.setText(data_supply[0])
            self.Position_SupplierOrder.setText(data_supply[1])
            self.Quantity_SupplierOrder.setText(data_supply[4])
            self.UnitValue_SupplierOrder.setText(data_supply[5].replace(".","").replace(",",".").replace(" €",""))
            self.Discount_SupplierOrder.setText('' if data_supply[6] == '0.00 %' else data_supply[6].replace(" %",""))
            self.Deliv1_SupplierOrder.setText(data_supply[9])
            self.Deliv2_SupplierOrder.setText(data_supply[10])
            self.Deliv3_SupplierOrder.setText(data_supply[11])

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_stocks = "SELECT physical_stock, available_stock, pending_stock FROM purch_fact.supplies WHERE id = %s"
                cur.execute(query_stocks, (data_supply[12],))
                result_stocks = cur.fetchone()

            # get id from table
                stock = result_stocks[0]
                available = result_stocks[1]
                pending = result_stocks[2]

                self.Stock_SupplierOrder.setText(str(stock))
                self.StockDsp_SupplierOrder.setText(str(available))
                self.StockVrt_SupplierOrder.setText(str(round(available + pending, 4)))

                self.Supply_SupplierOrder.setCurrentText(data_supply[2] + " | " + data_supply[3] + " | " + str(round(stock,2)) + " | " + str(round(available,2)) + " | " + str(round(pending, 2)) + " | ID:" + data_supply[12])

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to load table of orders
    def loadtableorders(self):
        """
        Loads and displays orders data in a table widget.
        Handles errors with a message box and updates the table widget with the data.
        """
        commands_querytableorders = ("""
                        SELECT so_header.id, so_header.supplier_order_num, suppliers."name"
                        
                        FROM purch_fact.supplier_ord_header AS so_header
                        LEFT JOIN purch_fact.suppliers AS suppliers ON (suppliers."id" = so_header."supplier_id")
                        ORDER BY so_header.supplier_order_num DESC
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytableorders)
            results_orders=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableSupplierOrders.setRowCount(len(results_orders))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))

    # fill the Qt Table with the query results
        for row in results_orders:
            for column in range(3):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableSupplierOrders.setItem(tablerow, column, it)

            self.tableSupplierOrders.setItemDelegateForRow(tablerow, AlignDelegate(self.tableSupplierOrders))
            tablerow+=1

        self.tableSupplierOrders.verticalHeader().hide()
        self.tableSupplierOrders.setSortingEnabled(False)
        if self.username == 'd.marquez':
            self.tableSupplierOrders.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableSupplierOrders.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableSupplierOrders.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        self.tableSupplierOrders.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableSupplierOrders.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.Stretch)
        # self.tableSupplierOrders.horizontalHeader().setSectionResizeMode(10, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableSupplierOrders.hideColumn(0)

# Function to load table of records
    def loadtablerecords(self):
        """
        Loads and displays items data in a table widget.
        Handles errors with a message box and updates the table widget with the data.
        """
        locale.setlocale(locale.LC_ALL, '')
        order_id=self.label_IDOrd.text()
        commands_querytablerecords = ("""
                        SELECT purch_fact.supplier_ord_detail.id, purch_fact.supplier_ord_detail.position_supply,
                        purch_fact.supplies."reference", purch_fact.supplies."description",
                        purch_fact.supplier_ord_detail.quantity, purch_fact.supplier_ord_detail.unit_value, 
                        purch_fact.supplier_ord_detail.discount,purch_fact.supplier_ord_detail.pending,
                        purch_fact.supplier_ord_detail.deliv_quant_1, purch_fact.supplier_ord_detail.deliv_quant_2,
                        purch_fact.supplier_ord_detail.deliv_quant_3, purch_fact.supplier_ord_detail."supply_id"
                        FROM purch_fact.supplier_ord_detail
                        LEFT JOIN purch_fact.supplies ON (purch_fact.supplies."id" = purch_fact.supplier_ord_detail."supply_id")
                        WHERE supplier_ord_header_id = %s
                        ORDER BY purch_fact.supplier_ord_detail.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytablerecords,(order_id,))
            results_records=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableRecords.setRowCount(len(results_records))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))

    # fill the Qt Table with the query results
        for row in results_records:
            row_list=list(row)
            row_list.insert(7,float(row_list[4])*float(row_list[5])*(1-float(row_list[6])/100))

            row_list[5] = locale.format_string("%.3f", float(row_list[5]), grouping=True)
            row_list[5] = row_list[5] + " €"

            row_list[6] = "{:.2f}".format(float(row[6]))
            row_list[6] = row_list[6] + " %"

            row_list[7] = locale.format_string("%.2f", float(row_list[7]), grouping=True)
            row_list[7] = row_list[7] + " €"

            for column in range(13):
                value = row_list[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableRecords.setItem(tablerow, column, it)

            self.tableRecords.setItemDelegateForRow(tablerow, AlignDelegate(self.tableRecords))
            tablerow+=1

        self.tableRecords.verticalHeader().hide()
        self.tableRecords.setSortingEnabled(False)
        if self.username == 'd.marquez':
            self.tableRecords.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableRecords.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableRecords.horizontalHeader().setSectionResizeMode(11, QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableRecords.setColumnWidth(3,600)
        self.tableRecords.hideColumn(0)
        self.tableRecords.custom_sort_int(1, QtCore.Qt.SortOrder.AscendingOrder)
        # self.tableRecords.hideColumn(12)

# Function to add delivery 1 data
    def adddeliv1(self):
        """
        Adds the first delivery details for a supplier order.
        """
        # self.root = tk.Tk()
        # self.root.withdraw()
        date=self.DelivDate1_SupplierOrder.text()
        note=self.DelivNote1_SupplierOrder.text()
        order_id=self.label_IDOrd.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 1ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("La fecha de 1ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv1_check = ("""
                        SELECT deliv_date_1, deliv_note_1
                        FROM purch_fact.supplier_ord_header
                        WHERE id = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv1_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            selected_indexes = self.tableRecords.selectedIndexes()
            if selected_indexes:
                try:
                    for index in selected_indexes:
                        row_index = index.row()
                        commands_deliv1_header = ("""
                                    UPDATE purch_fact.supplier_ord_header
                                    SET "deliv_date_1" = %s, "deliv_note_1" = %s
                                    WHERE "id" = %s
                                    """)
                        commands_deliv1_detail = ("""
                                    UPDATE purch_fact.supplier_ord_detail
                                    SET "deliv_date_1" = %s, "deliv_note_1" = %s
                                    WHERE "supplier_ord_header_id" = %s
                                    """)
                        conn = None
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of principal command
                        data=(date,note,order_id,)
                        cur.execute(commands_deliv1_header, data)
                        cur.execute(commands_deliv1_detail, data)

                        record_id = self.tableRecords.item(row_index, 0).text()
                        supply_name = self.tableRecords.item(row_index, 2).text()
                        supply_description = self.tableRecords.item(row_index, 3).text()
                        supply_id = self.tableRecords.item(row_index, 12).text()
                        quant_1 = self.tableRecords.item(row_index, 8).text()

                        commands_add_deliv_quant_1 = ("""
                                                        UPDATE purch_fact.supplier_ord_detail
                                                        SET "deliv_quant_1" = %s
                                                        WHERE "id" = %s
                                                        """)
                        query_stock = ("""
                                        SELECT physical_stock, pending_stock, available_stock FROM purch_fact.supplies
                                        WHERE "id" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies 
                                            SET "physical_stock" = %s, "pending_stock" = %s, "available_stock" = %s
                                            WHERE "id" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_1,(quant_1,record_id))
                        cur.execute(query_stock, (supply_id,))
                        results=cur.fetchone()

                        stock = results[0]
                        pending_stock = results[1]
                        available_stock = results [2]
                        new_stock = str(float(stock) + float(quant_1))
                        new_pending_stock = str(float(pending_stock) - float(quant_1))
                        new_available_stock = str(float(available_stock) + float(quant_1))
                        cur.execute(query_updatestock, (new_stock, new_pending_stock, new_available_stock, supply_id,))
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        # self.root.deiconify()
                        # self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 1ª entrega")
                    dlg.setText("1ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadstocks()

# Function to add delivery 2 data
    def adddeliv2(self):
        """
        Adds the second delivery details for a supplier order.
        """
        # self.root = tk.Tk()
        # self.root.withdraw()
        date=self.DelivDate2_SupplierOrder.text()
        note=self.DelivNote2_SupplierOrder.text()
        order_id=self.label_IDOrd.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 2ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("La fecha de 2ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv2_check = ("""
                            SELECT deliv_date_2, deliv_note_2
                            FROM purch_fact.supplier_ord_header
                            WHERE id = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv2_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            selected_indexes = self.tableRecords.selectedIndexes()
            if selected_indexes:
                try:
                    for index in selected_indexes:
                        row_index = index.row()
                        commands_deliv2_header = ("""
                                    UPDATE purch_fact.supplier_ord_header
                                    SET "deliv_date_2" = %s, "deliv_note_2" = %s
                                    WHERE "id" = %s
                                    """)
                        commands_deliv2_detail = ("""
                                    UPDATE purch_fact.supplier_ord_detail
                                    SET "deliv_date_2" = %s, "deliv_note_2" = %s
                                    WHERE "supplier_ord_header_id" = %s
                                    """)
                        conn = None
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of principal command
                        data=(date,note,order_id,)
                        cur.execute(commands_deliv2_header, data)
                        cur.execute(commands_deliv2_detail, data)

                        record_id = self.tableRecords.item(row_index, 0).text()
                        supply_name = self.tableRecords.item(row_index, 2).text()
                        supply_description = self.tableRecords.item(row_index, 3).text()
                        supply_id = self.tableRecords.item(row_index, 12).text()
                        quant_2 = self.tableRecords.item(row_index, 8).text()

                        commands_add_deliv_quant_2 = ("""
                                                    UPDATE purch_fact.supplier_ord_detail
                                                    SET "deliv_quant_2" = %s
                                                    WHERE "id" = %s
                                                    """)
                        query_stock = ("""
                                        SELECT physical_stock, pending_stock, available_stock FROM purch_fact.supplies
                                        WHERE "id" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies 
                                            SET "physical_stock" = %s, "pending_stock" = %s, "available_stock" = %s
                                            WHERE "id" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_2,(quant_2,record_id))
                        cur.execute(query_stock, (supply_id,))
                        results=cur.fetchone()

                        stock = results[0]
                        pending_stock = results[1]
                        available_stock = results[2]
                        new_stock = str(float(stock) + float(quant_2))
                        new_pending_stock = str(float(pending_stock) - float(quant_2))
                        new_available_stock = str(float(available_stock) + float(quant_2))
                        cur.execute(query_updatestock, (new_stock, new_pending_stock, new_available_stock, supply_id,))
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        # self.root.deiconify()
                        # self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 2ª entrega")
                    dlg.setText("2ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadtableorders()
                self.loadstocks()

# Function to add delivery 3 data
    def adddeliv3(self):
        """
        Adds the third delivery details for a supplier order.
        """
        # self.root = tk.Tk()
        # self.root.withdraw()
        date=self.DelivDate3_SupplierOrder.text()
        note=self.DelivNote3_SupplierOrder.text()
        order_id=self.label_IDOrd.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 3ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("La fecha de 3ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv3_check = ("""
                            SELECT deliv_date_3, deliv_note_3
                            FROM purch_fact.supplier_ord_header
                            WHERE id = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv3_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            selected_indexes = self.tableRecords.selectedIndexes()
            if selected_indexes:
                try:
                    for index in selected_indexes:
                        row_index = index.row()
                        commands_deliv3_header = ("""
                                    UPDATE purch_fact.supplier_ord_header
                                    SET "deliv_date_3" = %s, "deliv_note_3" = %s
                                    WHERE "id" = %s
                                    """)
                        commands_deliv3_detail = ("""
                                    UPDATE purch_fact.supplier_ord_detail
                                    SET "deliv_date_3" = %s, "deliv_note_3" = %s
                                    WHERE "supplier_ord_header_id" = %s
                                    """)
                        conn = None
                    
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of principal command
                        data=(date,note,order_id,)
                        cur.execute(commands_deliv3_header, data)
                        cur.execute(commands_deliv3_detail, data)

                        record_id = self.tableRecords.item(row_index, 0).text()
                        supply_name = self.tableRecords.item(row_index, 2).text()
                        supply_description = self.tableRecords.item(row_index, 3).text()
                        supply_id = self.tableRecords.item(row_index, 12).text()
                        quant_3 = self.tableRecords.item(row_index, 8).text()

                        commands_add_deliv_quant_3 = ("""
                            UPDATE purch_fact.supplier_ord_detail
                            SET "deliv_quant_3" = %s
                            WHERE "id" = %s
                            """)
                        query_stock = ("""
                                        SELECT physical_stock, pending_stock, available_stock FROM purch_fact.supplies
                                        WHERE "id" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies 
                                            SET "physical_stock" = %s, "pending_stock" = %s, "available_stock" = %s
                                            WHERE "id" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_3,(quant_3,record_id))
                        cur.execute(query_stock, (supply_id,))
                        results=cur.fetchone()

                        stock = results[0]
                        pending_stock = results[1]
                        available_stock = results[2]
                        new_stock = str(float(stock) + float(quant_3))
                        new_pending_stock = str(float(pending_stock) - float(quant_3))
                        new_available_stock = str(float(available_stock) + float(quant_3))
                        cur.execute(query_updatestock, (new_stock, new_pending_stock, new_available_stock, supply_id,))
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        # self.root.deiconify()
                        # self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 3ª entrega")
                    dlg.setText("3ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadstocks()

# Function to load stock values
    def loadstocks(self):
        """
        Loads stock information for the selected supply.
        """
        supply_name=self.Supply_SupplierOrder.currentText()
        if supply_name != '':
            supply_name=supply_name[:supply_name.find(" |")]
            supply_id=self.Supply_SupplierOrder.currentText().split("|")[-1].strip().split(":")[1] if self.Supply_SupplierOrder.currentText() != '' else 17130

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_stocks = "SELECT physical_stock, available_stock, pending_stock, unit_value FROM purch_fact.supplies WHERE id = %s"
                cur.execute(query_stocks, (supply_id,))
                result_stocks = cur.fetchone()

            # get id from table
                stock = result_stocks[0]
                available_stock = result_stocks[1]
                pending = result_stocks[2]
                unit_value = result_stocks[3]

                self.Stock_SupplierOrder.setText(str(round(stock,2)))
                self.StockDsp_SupplierOrder.setText(str(round(available_stock,2)))
                self.StockVrt_SupplierOrder.setText(str(round(available_stock + pending, 2)))
                self.UnitValue_SupplierOrder.setText(str(unit_value))

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

        if supply_name != '':
            self.Quantity_SupplierOrder.setFocus()

#  Function to calculate the order total amount
    def calculate_totalorder(self):
        """
        Calculates the total values for euro amount in the order based on the data in the table model.
        """
        locale.setlocale(locale.LC_ALL, '')
        total = 0
        for row in range(self.tableRecords.rowCount()):
            item = self.tableRecords.item(row, 7)
            if item is not None:
                value = item.text()
                value=value.replace(".","")
                value=value.replace(",",".")
                value=value[:value.find(" €")]
                total += float(value)
        total = locale.format_string("%.2f", total, grouping=True)
        total = total + " €"
        self.Total_SupplierOrder.setText(total)

# Function to print in PDF the supplier order
    def printsupplierorder(self):
        """
        Generates the pdf of the order for supplier with prices and other without them for verification.
        """
        order_id=self.label_IDOrd.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Imprimir pedido")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            num_order=self.NumOrder_SupplierOrder.text()
            date=self.Date_SupplierOrder.text()
            their_ref=self.TheirRef_SupplierOrder.text()
            payway=self.PayWay_SupplierOrder.currentText()
            delivway=self.DelivWay_SupplierOrder.text()
            delivterm=self.DelivTerm_SupplierOrder.text()
            obs=self.OrderObs_SupplierOrder.toPlainText()
            coments=self.Coms_SupplierOrder
            # final_coments=self.FinalComs_SupplierOrder.toPlainText()
            total_order=self.Total_SupplierOrder.text()
            supplier_name=self.Supplier_SupplierOrder.currentText()
            currency_symbol=self.Currency_SupplierOrder.currentText()

            commands_updateorder = ("""
                        UPDATE purch_fact.supplier_ord_header
                        SET "total_amount" = %s, "order_com" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(total_order, coments, order_id,)
                cur.execute(commands_updateorder, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            pdf = supplier_order(num_order,date,their_ref,payway,delivway,delivterm,obs,supplier_name)
            pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
            pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
            pdf.set_auto_page_break(auto=True, margin=2)
            pdf.add_page()

            for row in range(self.tableRecords.rowCount()):
                position_text=self.tableRecords.item(row, 1).text()
                quantity_text=self.tableRecords.item(row, 4).text()
                code_text=self.tableRecords.item(row, 2).text()
                description_text=self.tableRecords.item(row, 3).text()
                unitvalue_text=self.tableRecords.item(row, 5).text()
                discount_text=self.tableRecords.item(row, 6).text()
                total_text=self.tableRecords.item(row, 7).text()

                currency_unitvalue=unitvalue_text[:unitvalue_text.find(" €")]
                currency_unitvalue=currency_unitvalue.replace(".",":").replace(",",".").replace(":","")
                currency_unitvalue=float(currency_unitvalue)
                currency_unitvalue=locale.format_string("%.2f", currency_unitvalue, grouping=True) + " " + currency_symbol

                currency_total=total_text[:total_text.find(" €")]
                currency_total=currency_total.replace(".","")
                currency_total=currency_total.replace(",",".")
                currency_total=float(currency_total)
                currency_total=locale.format_string("%.2f", currency_total, grouping=True) + " " + currency_symbol

                y_position = pdf.get_y()
                pdf.set_font('DejaVuSansCondensed', '', 9)
                pdf.cell(1, 0.53, position_text, align='C')
                pdf.cell(0.2, 0.53, "")
                pdf.cell(1.25, 0.53, quantity_text, align='C')
                pdf.cell(0.2, 0.53, "")
                if len(code_text) > 25:
                    x_position = pdf.get_x()
                    y_position = pdf.get_y()
                    pdf.multi_cell(4.6, 0.5, code_text, align='L')
                    pdf.set_y(y_position)
                    pdf.set_x(x_position + 4.6)
                else:
                    pdf.cell(4.6, 0.4, code_text, align='L')
                pdf.cell(0.2, 0.53, "")
                x_position = pdf.get_x()
                y_position = pdf.get_y()
                pdf.multi_cell(6.1, 0.4, description_text, align='L')
                lines = pdf.get_multicell_height(6.1, description_text)
                pdf.set_y(y_position)
                pdf.set_x(x_position + 6.1)
                pdf.cell(0.2, 0.53, "")
                pdf.set_font('DejaVuSansCondensed', size=9)
                pdf.cell(1.94, 0.53, currency_unitvalue, align='R')
                pdf.cell(0.2, 0.53, "")
                pdf.set_font('Helvetica', '', 9)
                pdf.cell(1.23, 0.53, discount_text, align='C')
                pdf.cell(0.2, 0.53, "")
                pdf.set_font('DejaVuSansCondensed', size=9)
                pdf.cell(2.05, 0.53, currency_total, align='R')
                pdf.ln(lines + 0.5)

            currency_totalorder=float(total_order[:total_order.find(" €")].replace(".","").replace(",","."))
            currency_totalorder=currency_totalorder
            currency_totalorder=locale.format_string("%.2f", currency_totalorder, grouping=True) + " " + currency_symbol

            pdf.set_fill_color(231, 231, 226)
            pdf.cell(13.75, 0.50, "")
            pdf.set_font('Helvetica', 'U', 8)
            pdf.cell(2.3, 0.50, "Total del pedido:", fill=True)
            pdf.set_font('DejaVuSansCondensed-Bold', size=10)
            pdf.cell(3.32, 0.50, currency_totalorder, align='R', fill=True)
            pdf.ln(1)
            
            y_position = pdf.get_y()

            # Calculate height of content to add
            total_content_height = pdf.get_multicell_height(19.35, coments)  # Height of each cell plus line break

            # Verify if exists enough space on actual page
            if y_position + total_content_height < 33:
                # If exists, add content on actual page
                pdf.set_font('DejaVuSansCondensed-Bold', size=8)
                x_position = pdf.get_x()
                pdf.multi_cell(19.35, 0.3, coments) if coments is not None else pdf.cell(19.35, 0.3, coments)
            else:
                # If not exists, add content on next page
                pdf.add_page()
                pdf.set_fill_color(231, 231, 226)
                pdf.cell(13.75, 0.50, "")
                pdf.set_font('Helvetica', 'U', 8)
                pdf.cell(2.3, 0.50, "Total del pedido:", fill=True)
                pdf.set_font('DejaVuSansCondensed-Bold', size=10)
                pdf.cell(3.32, 0.50, currency_totalorder, align='R', fill=True)
                pdf.ln(1)
                pdf.set_font('DejaVuSansCondensed-Bold', size=8)
                x_position = pdf.get_x()
                pdf.multi_cell(19.35, 0.3, coments) if coments is not None else pdf.cell(19.35, 0.3, coments)

            # Restore original Y position after add content
            pdf.set_y(y_position)
            pdf.set_x(x_position + 19.35)
            pdf.ln(1)

            pdf_buffer = pdf.output()

            temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp.pdf"))))

            with open(temp_file_path, "wb") as temp_file:
                temp_file.write(pdf_buffer)

            pdf.close()

            self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
            self.pdf_viewer.showMaximized()


            pdf_verification = supplier_order(num_order,date,their_ref,payway,delivway,delivterm,obs,supplier_name)
            pdf_verification.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
            pdf_verification.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
            pdf_verification.set_auto_page_break(auto=True, margin=2)
            pdf_verification.add_page()

            for row in range(self.tableRecords.rowCount()):
                position_text=self.tableRecords.item(row, 1).text()
                quantity_text=self.tableRecords.item(row, 4).text()
                code_text=self.tableRecords.item(row, 2).text()
                description_text=self.tableRecords.item(row, 3).text()
                unitvalue_text=self.tableRecords.item(row, 5).text()
                discount_text=self.tableRecords.item(row, 6).text()
                total_text=self.tableRecords.item(row, 7).text()

                y_position = pdf_verification.get_y()
                pdf_verification.set_font('DejaVuSansCondensed', '', 9)
                pdf_verification.cell(1, 0.53, position_text, align='C')
                pdf_verification.cell(0.2, 0.53, "")
                pdf_verification.cell(1.25, 0.53, quantity_text, align='C')
                pdf_verification.cell(0.2, 0.53, "")
                if len(code_text) > 25:
                    x_position = pdf_verification.get_x()
                    y_position = pdf_verification.get_y()
                    pdf_verification.multi_cell(4.6, 0.5, code_text, align='L')
                    pdf_verification.set_y(y_position)
                    pdf_verification.set_x(x_position + 4.6)
                else:
                    pdf_verification.cell(4.6, 0.4, code_text, align='L')
                pdf_verification.cell(0.2, 0.53, "")
                x_position = pdf_verification.get_x()
                y_position = pdf_verification.get_y()
                pdf_verification.multi_cell(6.1, 0.4, description_text, align='L')
                pdf_verification.set_y(y_position)
                pdf_verification.set_x(x_position + 6.1)
                pdf_verification.cell(0.2, 0.53, "")
                pdf_verification.set_font('DejaVuSansCondensed', size=9)
                pdf_verification.cell(1.94, 0.53, "", align='R')
                pdf_verification.cell(0.2, 0.53, "")
                pdf_verification.set_font('Helvetica', '', 9)
                pdf_verification.cell(1.23, 0.53, "", align='C')
                pdf_verification.cell(0.2, 0.53, "")
                pdf_verification.set_font('DejaVuSansCondensed', size=9)
                pdf_verification.cell(2.05, 0.53, "", align='R')
                pdf_verification.ln(1.3)

            y_position = pdf_verification.get_y()

            # Calculate height of content to add
            total_content_height = pdf_verification.get_multicell_height(19.35, coments) + 0.5 + 0.5 + 0.5  # Height of each cell plus line break

            # Verify if exists enough space on actual page
            if y_position + total_content_height < 29.8:
                # If exists, add content on actual page
                pdf_verification.set_fill_color(231, 231, 226)
                pdf_verification.cell(13.75, 0.50, "")
                pdf_verification.set_font('Helvetica', 'U', 8)
                pdf_verification.cell(2.3, 0.50, "Total del pedido:", fill=True)
                pdf_verification.set_font('DejaVuSansCondensed-Bold', size=10)
                pdf_verification.cell(3.32, 0.50, "", align='R', fill=True)
                pdf_verification.ln(1)
                pdf_verification.set_font('DejaVuSansCondensed-Bold', size=8)
                x_position = pdf_verification.get_x()
                pdf_verification.multi_cell(19.35, 0.3, coments) if coments is not None else pdf_verification.cell(19.35, 0.3, coments)
            else:
                # If not exists, add content on next page
                pdf_verification.add_page()
                pdf_verification.set_fill_color(231, 231, 226)
                pdf_verification.cell(13.75, 0.50, "")
                pdf_verification.set_font('Helvetica', 'U', 8)
                pdf_verification.cell(2.3, 0.50, "Total del pedido:", fill=True)
                pdf_verification.set_font('DejaVuSansCondensed-Bold', size=10)
                pdf_verification.cell(3.32, 0.50, "", align='R', fill=True)
                pdf_verification.ln(1)
                pdf_verification.set_font('DejaVuSansCondensed-Bold', size=8)
                x_position = pdf_verification.get_x()
                pdf_verification.multi_cell(19.35, 0.3, coments) if coments is not None else pdf_verification.cell(19.35, 0.3, coments)

            # Restore original Y position after add content
            pdf_verification.set_y(y_position)
            pdf_verification.set_x(x_position + 19.35)
            pdf_verification.ln(1)

            output_path = "//nas01/DATOS/Comunes/MARIO GIL/VERIFICACION/ALBARANES/PENDIENTES/" + num_order + ".pdf"

            if output_path:
                pdf_verification.output(output_path)

# Function to check date format
    def is_valid_date(self, date_str):
        """
        Checks if the given date string is in a valid format.

        Args:
            date_str (str): The date string to validate.

        Returns:
            bool: True if the date format is valid, False otherwise.
        """
        formats = ['%d/%m/%Y', '%d-%m-%Y']
        
        for fmt in formats:
            try:
                datetime.strptime(date_str, fmt)
                return True
            except ValueError:
                pass
            
        return False

# Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableSupplierOrders.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableSupplierOrders.horizontalHeader().height()
        popup_pos = self.tableSupplierOrders.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableSupplierOrders.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function when clicking on table header
    def on_headerrecords_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableRecords.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableRecords.horizontalHeader().height()
        popup_pos = self.tableRecords.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableRecords.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to add a new pay way
    def add_payway(self):
        """
        Opens a dialog for adding a new payment method, inserts it into the database, 
        and updates the payment methods list.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Forma de pago')
        dlg.setLabelText('Introduce una forma de pago:')

        while True:
            clickedButton = dlg.exec()
            if clickedButton == 1:
                value_payway = dlg.textValue()
                if value_payway != '':
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        commands_insertpayway = ("""INSERT INTO purch_fact.pay_way_suppliers_order (pay_way) 
                                        VALUES (%s)""")
                        cur.execute(commands_insertpayway, (value_payway,))

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Forma de pago")
                        dlg.setText("Datos insertados con éxito")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg,new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Forma de pago")
                dlg_error.setText("El valor no puede estar vacío")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

        commands_payway = ("""
                        SELECT pay_way
                        FROM purch_fact.pay_way_suppliers_order
                        ORDER BY pay_way ASC
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_payway)
            results_payway=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()
        
        self.PayWay_SupplierOrder.clear()
        list_payway=[x[0] for x in results_payway]
        self.PayWay_SupplierOrder.addItems([''] + sorted(list_payway))

# Function to move table to specific item by text search
    def position_table(self, num_order_tocheck = None):
        """
        Selects and scrolls to the row in the Client Order P- table based on the input position.
        """
        if num_order_tocheck is None:
            text_position = self.Position.text()
        else:
            text_position = num_order_tocheck

        self.tableSupplierOrders.clearSelection()

        for i in range(self.tableSupplierOrders.rowCount()):
            item = self.tableSupplierOrders.item(i, 1)
            if item is not None and text_position.upper() in item.text().upper():
                item.setSelected(True)
                self.tableSupplierOrders.scrollToItem(item)
                self.loadformorder(item.row())
                return

    def position_table_record(self, record_position):
        """
        Selects and scrolls to the row in the Client Order record table based on the input position.
        """
        text_position = record_position

        self.tableRecords.clearSelection()

        for i in range(self.tableRecords.rowCount()):
            item = self.tableRecords.item(i, 1)
            if item is not None and text_position.upper() in item.text().upper():
                item.setSelected(True)
                self.tableRecords.scrollToItem(item)
                return

# Function to events for keys
    def keyPressEvent(self, event: QtGui.QKeyEvent):
        """Handles key press events for clearing input fields or resetting combo boxes.

        Args:
            event (QtGui.QKeyEvent): The key press event containing information 
                                    about the key that was pressed.
        """
        if event.key() == QtCore.Qt.Key.Key_Escape:
            focused_widget = QtWidgets.QApplication.focusWidget()
            if isinstance(focused_widget, QtWidgets.QLineEdit) or isinstance(focused_widget, QtWidgets.QTextEdit):
                focused_widget.clear()
            elif isinstance(focused_widget, QtWidgets.QComboBox):
                focused_widget.setCurrentIndex(0)

# Function to show dialog to insert order comments
    def show_dialog(self):
        """
        Displays a dialog window allowing the user to view and edit order comments.
        The dialog is only shown if the order ID (`label_IDOrd`) is not empty.
        """
        if self.label_IDOrd.text() != '':
            
            dlg = QtWidgets.QDialog()
            dlg.setWindowTitle("Dialog")
            dlg.setGeometry(50, 50, 900, 600)
            dlg.setWindowModality(QtCore.Qt.WindowModality.NonModal)

            vLayout = QtWidgets.QVBoxLayout(dlg)

            btn = QtWidgets.QPushButton("Guardar")
            vLayout.addWidget(btn)
            btn.clicked.connect(self.save_order_comments)
            
            self.te = QtWidgets.QTextEdit()
            self.te.setText(self.Coms_SupplierOrder)
            self.te.setStyleSheet("background-color: transparent;")
            vLayout.addWidget(self.te)

            # dlg.exec()

            dlg.show()

            self.dialog = dlg

# Function to save order comments
    def save_order_comments(self):
        """
        Saves the supplier order comments to the database.
        """
        id_order = self.label_IDOrd.text()
        self.Coms_SupplierOrder = self.te.toPlainText()

        commands_updateorder = ("""
                        UPDATE purch_fact.supplier_ord_header
                        SET "order_com" = %s
                        WHERE "id" = %s
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of principal command
            data=(self.Coms_SupplierOrder, id_order,)
            cur.execute(commands_updateorder, data)
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Function to load file
    def item_double_clicked(self, item):
        """
        Handles double-click events on items in a QTableWidget. Opens the corresponding PDF
        
        Args:
            item (QtWidgets.QTableWidgetItem): The item that was double-clicked.
        """
        if item.column() == 1:
            item_number = self.tableSupplierOrders.item(item.row(), 1).text()

            query_path = ("""
                        SELECT suppliers."num_delivnote"
                        FROM verification.delivnote_suppliers AS suppliers
                        WHERE suppliers."supplier_order_num" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(query_path, (item_number,))
                results=cur.fetchall()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                if len(results) != 0 and results[0][0] is not None:
                    file_path = os.path.normpath(results[0][0])
                    os.startfile(file_path)

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to load comboboxes
    def load_comboboxes(self):
        """
        Loads the list of clients and supplies from the database into the selection widget.

        Raises:
            psycopg2.DatabaseError: If a database error occurs during the SQL execution.
        """
        commands_suppliers = ("""
                        SELECT * 
                        FROM purch_fact.suppliers
                        ORDER BY purch_fact.suppliers.name
                        """)
        commands_supplies = ("""
                        SELECT reference, description, ROUND(physical_stock,2), ROUND(available_stock,2), ROUND(pending_stock,2), id
                        FROM purch_fact.supplies
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_suppliers)
            results_suppliers=cur.fetchall()
            cur.execute(commands_supplies)
            results_supplies=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_suppliers=[x[1] for x in results_suppliers]
        self.Supplier_SupplierOrder.addItems([''] + list_suppliers)

        self.list_supplies=[x[0] + ' | ' + x[1] + ' | ' + str(x[2]) + ' | ' + str(x[3]) + ' | ' + str(x[4])  + ' | ID:' + str(x[5]) for x in results_supplies]
        self.Supply_SupplierOrder.addItems([''] + sorted(self.list_supplies))

# Function to load tables and comboboxes
    def load_all(self):
        """
        Loads initial data for the application.

        This function calls `loadtableorders()` to populate the table with order data and 
        `load_comboboxes()` to initialize and populate comboboxes with relevant data.
        """
        self.loadtableorders()
        self.load_comboboxes()

# Function to create quotation from supplier order
    def createquotation(self):
        order_id=self.label_IDOrd.text()

        if order_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Cotización")
            dlg.setText("Por favor, para elige o un crea un pedido para crear la cotización")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif self.tableRecords.rowCount() == 0:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Cotización")
            dlg.setText("Por favor, añade productos al pedido para crear la cotización")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            supplier_name=self.Supplier_SupplierOrder.currentText()

            dlg = QtWidgets.QInputDialog()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle('Crear Cotización')
            dlg.setLabelText('Insertar fecha:')

            while True:
                clickedButton = dlg.exec()
                if clickedButton == 1:
                    quotation_date = dlg.textValue()
                    if quotation_date != '':
                        commands_newquotation = ("""
                                            INSERT INTO purch_fact.quotation_header (supplier_id, quot_date)
                                            VALUES (%s,%s,%s)
                                            """)
                        
                        conn = None
                        try:
                        # read the connection parameters
                            params = config()
                        # connect to the PostgreSQL server
                            conn = psycopg2.connect(**params)
                            cur = conn.cursor()
                        # execution of commands
                            query_supplier = "SELECT id FROM purch_fact.suppliers WHERE name = %s"
                            cur.execute(query_supplier, (supplier_name,))
                            result_supplier = cur.fetchone()

                        # get id from table
                            supplier_id = result_supplier[0]
                        # execution of principal command
                            data=(supplier_id,quotation_date,)
                            cur.execute(commands_newquotation, data)

                            query_idquotation = "SELECT id FROM purch_fact.quotation_header ORDER BY id"
                            cur.execute(query_idquotation)
                            result_idquotation = cur.fetchall()

                        # get id from table
                            idquotation = result_idquotation[-1][0]

                            for i in range(self.tableRecords.rowCount()):
                                commands_newrecord = ("""
                                INSERT INTO purch_fact.quotation_details (
                                quot_header_id,supply_id,quantity,currency_id,currency_value,value
                                )
                                VALUES (%s,%s,%s,%s,%s,%s)
                                """)

                                supply_id = self.tableRecords.item(i, 12).text()
                                quantity = self.tableRecords.item(i, 4).text()
                                currency_id = 1
                                currency_value = self.tableRecords.item(i, 5).text()

                                euro_value=currency_value.replace(",",".")
                                euro_value=euro_value[:euro_value.find(" €")]

                                data = (idquotation, supply_id,quantity,currency_id,euro_value, euro_value)

                                cur.execute(commands_newrecord, data)

                        # close communication with the PostgreSQL database server
                            cur.close()
                        # commit the changes
                            conn.commit()

                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("Crear Cotización")
                            dlg.setText("Cotización creada con éxito")
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            dlg.exec()

                            del dlg,new_icon

                        except (Exception, psycopg2.DatabaseError) as error:
                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("ERP EIPSA")
                            dlg.setText("Ha ocurrido el siguiente error:\n"
                                        + str(error))
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                            dlg.exec()
                            del dlg, new_icon
                        finally:
                            if conn is not None:
                                conn.close()

                        break

                    dlg_error = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg_error.setWindowIcon(new_icon)
                    dlg_error.setWindowTitle("Crear Cotización")
                    dlg_error.setText("La fecha no puede estar vacía")
                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg_error.exec()
                    del dlg_error,new_icon
                else:
                    break




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_SupplierOrder_Window('d.marquez')
    ui.showMaximized()
    sys.exit(app.exec())
