# Form implementation generated from reading ui file 'App_Comercial.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from PyQt6.QtCore import Qt
import psycopg2
from config import config
from datetime import *
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from matplotlib import ticker
import os
from ExportDocs_Menu import Ui_ExportDocs_Menu
from tkinter.filedialog import askopenfilename
import pandas as pd

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.
    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class ImageCalendarWidget(QtWidgets.QCalendarWidget):
    """
    A custom QCalendarWidget that highlights specific dates by painting an image on the calendar cells.

    This widget allows the user to set a list of dates (`task_dates`) and draws a custom image 
    on the corresponding calendar cells when these dates are displayed.

    Attributes:
    -----------
    task_dates : list
        A list of QDate objects that represent the dates on which the image will be displayed.
    """
    def __init__(self, parent=None):
        """
        Initializes the ImageCalendarWidget instance.

        Args:
        -----------
        parent : QWidget, optional
            The parent widget, if any. Defaults to None.

        Initializes the `task_dates` attribute as an empty list.
        """
        super().__init__(parent)
        self.task_dates = []

    def set_task_dates(self, dates):
        """
        Sets the dates on which the custom image will be drawn and refreshes the calendar.

        Args:
        -----------
        dates : list of QDate
            A list of QDate objects representing the dates on which the image should appear.
        """
        self.task_dates = dates
        self.updateCells()

    def paintCell(self, painter, rect, date):
        """
        Customizes the painting of calendar cells to include a flag image on specific dates.

        Args:
        -----------
        painter : QPainter
            The QPainter object responsible for rendering the cell.
        rect : QRect
            The rectangular area of the cell to be painted.
        date : QDate
            The date associated with the cell being painted.
        """
        QtWidgets.QCalendarWidget.paintCell(self, painter, rect, date)

        if date in self.task_dates:
            image_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Flag.png"))
            image = QtGui.QImage(image_path)
            if not image.isNull():
                image_scaled = image.scaled(rect.width() // 4, rect.height() // 4, QtCore.Qt.AspectRatioMode.KeepAspectRatio, QtCore.Qt.TransformationMode.SmoothTransformation)
                image_rect = image_scaled.rect()
                image_rect.moveTopRight(rect.topRight() - QtCore.QPoint(2, -5))
                painter.drawImage(image_rect, image_scaled)

class Ui_App_Comercial(QtWidgets.QMainWindow):
    """
    Main application window for the commercial app.
    """
    def __init__(self, name, username):
        """
        Initializes the main window, setting up the user interface and storing user-specific details.

        Args:
            name (str): The name of the user.
            username (str): The username of the user.
        """
        super(Ui_App_Comercial, self).__init__()
        self.name=name
        self.username=username
        self.setupUi(self)

    def setupUi(self, App_Comercial):
        """
        Sets up the user interface components for the main application window.

        Args:
            App_Comercial (QtWidgets.QMainWindow): The main window object to set up.
        """
        App_Comercial.setObjectName("App_Comercial")
        App_Comercial.resize(945, 860)
        App_Comercial.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Comercial.setWindowIcon(icon)
        App_Comercial.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Comercial)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Logo.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        self.Button_ExpOffer = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ExpOffer.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_ExpOffer.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_ExpOffer.setToolTip('Exportar Documentos')
        self.Button_ExpOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_ExpOffer.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_ExpOffer.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Export_Doc.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ExpOffer.setIcon(icon12)
        self.Button_ExpOffer.setIconSize(QtCore.QSize(40, 40))
        self.Button_ExpOffer.setObjectName("Button_ExpOffer")
        self.Header.addWidget(self.Button_ExpOffer)
        spacerItem11 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem11)
        self.Button_Doc = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Doc.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Doc.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Doc.setToolTip('Documentación')
        self.Button_Doc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Doc.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Doc.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Documents_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Doc.setIcon(icon1)
        self.Button_Doc.setIconSize(QtCore.QSize(40, 40))
        self.Button_Doc.setObjectName("Button_Doc")
        self.Header.addWidget(self.Button_Doc)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem1)
        self.Button_Graphs = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Graphs.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Graphs.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Graphs.setToolTip('Gráficos')
        self.Button_Graphs.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Graphs.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Graphs.setText("")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Chart.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Graphs.setIcon(icon14)
        self.Button_Graphs.setIconSize(QtCore.QSize(40, 40))
        self.Button_Graphs.setObjectName("Button_Graphs")
        self.Header.addWidget(self.Button_Graphs)
        spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem10)
        self.Button_ClientsResume = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ClientsResume.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_ClientsResume.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_ClientsResume.setToolTip('Resumen Clientes')
        self.Button_ClientsResume.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_ClientsResume.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_ClientsResume.setText("")
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Customers.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ClientsResume.setIcon(icon15)
        self.Button_ClientsResume.setIconSize(QtCore.QSize(40, 40))
        self.Button_ClientsResume.setObjectName("Button_ClientsResume")
        self.Header.addWidget(self.Button_ClientsResume)
        spacerItem13 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem13)
        self.Button_QueryTask = QtWidgets.QPushButton(parent=self.frame)
        self.Button_QueryTask.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_QueryTask.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_QueryTask.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_QueryTask.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_QueryTask.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Task.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTask.setIcon(icon5)
        self.Button_QueryTask.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryTask.setObjectName("Button_QueryTask")
        self.Button_QueryTask.setToolTip("Tareas")
        self.Header.addWidget(self.Button_QueryTask)
        spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem14)
        self.Button_RecOffer = QtWidgets.QPushButton(parent=self.frame)
        self.Button_RecOffer.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_RecOffer.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_RecOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_RecOffer.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_RecOffer.setText("")
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Reclamation.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_RecOffer.setIcon(icon16)
        self.Button_RecOffer.setIconSize(QtCore.QSize(40, 40))
        self.Button_RecOffer.setObjectName("Button_RecOffer")
        self.Button_RecOffer.setToolTip("Reclamar Ofertas")
        self.Header.addWidget(self.Button_RecOffer)
        spacerItem12 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem12)

        if self.name in ['Luis Bravo']:
            self.Button_ClockIn = QtWidgets.QPushButton(parent=self.frame)
            self.Button_ClockIn.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_ClockIn.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_ClockIn.setToolTip('Fichajes')
            self.Button_ClockIn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_ClockIn.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_ClockIn.setText("")
            icon17 = QtGui.QIcon()
            icon17.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/ClockIn.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ClockIn.setIcon(icon17)
            self.Button_ClockIn.setIconSize(QtCore.QSize(40, 40))
            self.Button_ClockIn.setObjectName("Button_ClockIn")
            self.Button_ClockIn.clicked.connect(self.clockin)
            self.Header.addWidget(self.Button_ClockIn)

        elif self.name in ['Ana Calvo']:
            self.Button_Users = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Users.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Users.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Users.setToolTip('Gestión Usuarios')
            self.Button_Users.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Users.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Users.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/User_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Users.setIcon(icon2)
            self.Button_Users.setIconSize(QtCore.QSize(40, 40))
            self.Button_Users.setObjectName("Button_Users")
            self.Header.addWidget(self.Button_Users)
            spacerItem16 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem16)
            self.Button_Upload = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Upload.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Upload.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Upload.setToolTip('Importar Ofertas/Pedidos')
            self.Button_Upload.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Upload.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Upload.setText("")
            icon18 = QtGui.QIcon()
            icon18.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Upload_Arrow.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Upload.setIcon(icon18)
            self.Button_Upload.setIconSize(QtCore.QSize(40, 40))
            self.Button_Upload.setObjectName("Button_Upload")
            self.Button_Users.clicked.connect(self.user_edition)
            self.Button_Upload.clicked.connect(self.upload_offer_order)
            self.Header.addWidget(self.Button_Upload)

        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.HeaderUserName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderUserName.setFont(font)
        self.HeaderUserName.setStyleSheet("color:rgb(255, 255, 255)")
        self.HeaderUserName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderUserName.setObjectName("HeaderUserName")
        self.Header.addWidget(self.HeaderUserName)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem3)
        self.Button_Notification = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Notification.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setToolTip('Notificaciones')
        self.Button_Notification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Notification.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Notification.setText("")
        self.Button_Notification.setIconSize(QtCore.QSize(40, 40))
        self.Button_Notification.setObjectName("Button_Notification")
        self.Header.addWidget(self.Button_Notification)
        spacerItem15 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem15)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setToolTip('Configuración')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        if self.name == 'Luis Bravo':
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Mando.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        elif self.name == 'Sandra Sanz':
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Bender.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        elif self.name == 'Carlos Crespo':
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Pikachu.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        elif self.name == 'Ana Calvo':
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Girl.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        else:
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/User.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem4 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem4)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_NewOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_NewOffer.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_NewOffer.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_NewOffer.setFont(font)
        self.Button_NewOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Offer_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_NewOffer.setIcon(icon3)
        self.Button_NewOffer.setIconSize(QtCore.QSize(40, 40))
        self.Button_NewOffer.setCheckable(False)
        self.Button_NewOffer.setAutoRepeat(False)
        self.Button_NewOffer.setAutoExclusive(False)
        self.Button_NewOffer.setObjectName("Button_NewOffer")
        self.verticalLayout_3.addWidget(self.Button_NewOffer)
        self.Button_EditOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_EditOffer.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_EditOffer.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_EditOffer.setFont(font)
        self.Button_EditOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Offer_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_EditOffer.setIcon(icon4)
        self.Button_EditOffer.setIconSize(QtCore.QSize(40, 40))
        self.Button_EditOffer.setObjectName("Button_EditOffer")
        self.verticalLayout_3.addWidget(self.Button_EditOffer)
        self.Button_QueryOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOffer.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryOffer.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryOffer.setFont(font)
        self.Button_QueryOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Offer_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOffer.setIcon(icon5)
        self.Button_QueryOffer.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryOffer.setObjectName("Button_QueryOffer")
        self.verticalLayout_3.addWidget(self.Button_QueryOffer)
        self.Button_NewOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_NewOrder.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_NewOrder.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_NewOrder.setFont(font)
        self.Button_NewOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Order_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_NewOrder.setIcon(icon6)
        self.Button_NewOrder.setIconSize(QtCore.QSize(40, 40))
        self.Button_NewOrder.setObjectName("Button_NewOrder")
        self.verticalLayout_3.addWidget(self.Button_NewOrder)
        self.Button_EditOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_EditOrder.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_EditOrder.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_EditOrder.setFont(font)
        self.Button_EditOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Order_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_EditOrder.setIcon(icon7)
        self.Button_EditOrder.setIconSize(QtCore.QSize(40, 40))
        self.Button_EditOrder.setObjectName("Button_EditOrder")
        self.verticalLayout_3.addWidget(self.Button_EditOrder)
        self.Button_QueryOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOrder.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryOrder.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryOrder.setFont(font)
        self.Button_QueryOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Order_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOrder.setIcon(icon8)
        self.Button_QueryOrder.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryOrder.setObjectName("Button_QueryOrder")
        self.verticalLayout_3.addWidget(self.Button_QueryOrder)
        self.Button_NewTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_NewTag.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_NewTag.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_NewTag.setFont(font)
        self.Button_NewTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/TAG_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_NewTag.setIcon(icon9)
        self.Button_NewTag.setIconSize(QtCore.QSize(40, 40))
        self.Button_NewTag.setObjectName("Button_NewTag")
        self.verticalLayout_3.addWidget(self.Button_NewTag)
        self.Button_EditTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_EditTag.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_EditTag.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_EditTag.setFont(font)
        self.Button_EditTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/TAG_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_EditTag.setIcon(icon10)
        self.Button_EditTag.setIconSize(QtCore.QSize(40, 40))
        self.Button_EditTag.setObjectName("Button_EditTag")
        self.verticalLayout_3.addWidget(self.Button_EditTag)
        self.Button_QueryTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryTag.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryTag.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryTag.setFont(font)
        self.Button_QueryTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/TAG_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTag.setIcon(icon11)
        self.Button_QueryTag.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryTag.setObjectName("Button_QueryTag")
        self.verticalLayout_3.addWidget(self.Button_QueryTag)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem5 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem5)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.tableOffer = QtWidgets.QTableWidget(parent=self.frame)
        self.tableOffer.setMinimumSize(QtCore.QSize(650, 280))
        self.tableOffer.setObjectName("tableOffer")
        if self.username == 'l.bravo':
            number_columns = 11
        else:
            number_columns = 10
        self.tableOffer.setColumnCount(number_columns)
        self.tableOffer.setRowCount(0)
        for i in range(number_columns):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableOffer.setHorizontalHeaderItem(i, item)
        self.tableOffer.verticalHeader().setVisible(False)
        self.tableOffer.setSortingEnabled(False)
        self.tableOffer.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.MainLayout.addWidget(self.tableOffer)
        spacerItem6 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem6)
        self.BottomLayout = QtWidgets.QGridLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
        # spacerItem8 = QtWidgets.QSpacerItem(15, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        # self.BottomLayout.addItem(spacerItem8)
        self.Calendar = ImageCalendarWidget(parent=self.frame)
        self.Calendar.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Calendar.sizePolicy().hasHeightForWidth())
        self.Calendar.setSizePolicy(sizePolicy)
        self.Calendar.setMinimumSize(QtCore.QSize(300, 400))
        self.Calendar.setMaximumSize(QtCore.QSize(583, 400))
        self.Calendar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.Calendar.setStyleSheet("QCalendarWidget QWidget{\n"
"background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QTableView{\n"
"    background-color: white;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton {\n"
"    color: white;\n"
"    font-size:20px;\n"
"    icon-size:30px 30px;\n"
"    background-color:rgb(3, 174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QToolButton::hover {\n"
"    background-color : #019ad2;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton::pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border: 3px solid;\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QCalendarWidget QSpinBox{\n"
"    background-color: rgb(255, 255, 255);\n"
"    border: 2px solid;\n"
"    border-color: rgb(3,174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QAbstractItemView:enabled{\n"
"    selection-background-color: rgb(3, 174, 236);\n"
"    selection-color: white;\n"
"}\n"
"\n"
"#qt_calendar_prevmonth {\n"
"    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/back_arrow.png);\n"
"}\n"
"#qt_calendar_nextmonth {\n"
"    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/forward_arrow.png);\n"
"\n"
"}")
        self.Calendar.setSelectedDate(QtCore.QDate.currentDate())
        self.Calendar.setGridVisible(True)
        self.Calendar.setNavigationBarVisible(True)
        self.Calendar.setDateEditEnabled(True)
        self.Calendar.setObjectName("Calendar")
        self.Calendar.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.BottomLayout.addWidget(self.Calendar, 0, 2, 1, 1)
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Comercial.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Comercial)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Comercial.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Comercial)
        self.statusbar.setObjectName("statusbar")
        App_Comercial.setStatusBar(self.statusbar)
        self.tableOffer.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.retranslateUi(App_Comercial)
        QtCore.QMetaObject.connectSlotsByName(App_Comercial)

        self.Button_NewOffer.clicked.connect(self.new_offer)
        self.Button_EditOffer.clicked.connect(self.edit_offer)
        self.Button_QueryOffer.clicked.connect(self.query_offer)
        self.Button_NewOrder.clicked.connect(self.new_order)
        self.Button_EditOrder.clicked.connect(self.edit_order)
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.Button_NewTag.clicked.connect(self.new_tag)
        self.Button_EditTag.clicked.connect(self.edit_tag)
        self.Button_QueryTag.clicked.connect(self.query_tag)
        self.Button_ExpOffer.clicked.connect(self.export_menu)
        self.Button_Doc.clicked.connect(self.query_documents)
        self.Button_Graphs.clicked.connect(self.stats_offers)
        self.Button_ClientsResume.clicked.connect(self.clients_generalresume)
        self.Button_QueryTask.clicked.connect(self.querytask)
        self.Button_RecOffer.clicked.connect(self.reclamation_offer)
        self.Button_Profile.clicked.connect(self.showMenu)
        self.tableOffer.itemDoubleClicked.connect(self.on_item_double_clicked)
        self.Calendar.activated.connect(self.show_selected_date_tasks)
        self.Calendar.customContextMenuRequested.connect(self.show_context_menu)
        self.Button_Notification.clicked.connect(self.notifications)

        self.setup_task_dates()

        self.update_principal_screen()

        self.alert_offers()
        self.alert_reclamation_offers()

        self.load_notifications()


    def show_context_menu(self, point):
        """
        Displays a context menu at the specified point in the calendar widget. 
        Provides options to add or edit tasks for the selected date.
        
        Args:
            point (QPoint): The location where the context menu will appear.
        """
        selected_date = self.Calendar.selectedDate()
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 150px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")

        action1 = menu.addAction("Agregar tareas")
        action1.triggered.connect(lambda: self.newtask(selected_date))
        action2 = menu.addAction("Editar tareas")
        action2.triggered.connect(lambda: self.querytask(selected_date))

        menu.exec(self.Calendar.mapToGlobal(point))

# Function to translate and updates the text of various UI elements
    def retranslateUi(self, App_Comercial):
        """
        Translates and updates the text of various UI elements in the given App_Comercial.
        """
        _translate = QtCore.QCoreApplication.translate
        App_Comercial.setWindowTitle(_translate("App_Comercial", "ERP EIPSA - Comercial"))
        self.HeaderName.setText(_translate("App_Comercial", self.name))
        self.HeaderUserName.setText(_translate("App_Comercial", self.username))
        self.Button_NewOffer.setText(_translate("App_Comercial", "    Nueva Oferta"))
        self.Button_EditOffer.setText(_translate("App_Comercial", "    Editar Oferta"))
        self.Button_QueryOffer.setText(_translate("App_Comercial", "    Consultar Ofertas"))
        self.Button_NewOrder.setText(_translate("App_Comercial", "    Nuevo Pedido"))
        self.Button_EditOrder.setText(_translate("App_Comercial", "    Editar Pedido"))
        self.Button_QueryOrder.setText(_translate("App_Comercial", "   Consultar Pedidos"))
        self.Button_NewTag.setText(_translate("App_Comercial", "    Nuevo(s) TAG(s)"))
        self.Button_EditTag.setText(_translate("App_Comercial", "    Editar TAG(s)"))
        self.Button_QueryTag.setText(_translate("App_Comercial", "    Consultar TAG(s)"))
        self.tableOffer.setSortingEnabled(True)
        item = self.tableOffer.horizontalHeaderItem(0)
        item.setText(_translate("App_Comercial", "Nº Oferta"))
        item = self.tableOffer.horizontalHeaderItem(1)
        item.setText(_translate("App_Comercial", "Estado"))
        item = self.tableOffer.horizontalHeaderItem(2)
        item.setText(_translate("App_Comercial", "Cliente"))
        item = self.tableOffer.horizontalHeaderItem(3)
        item.setText(_translate("App_Comercial", "Cl. Final / Planta"))
        item = self.tableOffer.horizontalHeaderItem(4)
        item.setText(_translate("App_Comercial", "Fecha Pres."))
        item = self.tableOffer.horizontalHeaderItem(5)
        item.setText(_translate("App_Comercial", "Material"))
        item = self.tableOffer.horizontalHeaderItem(6)
        item.setText(_translate("App_Comercial", "Importe"))
        item = self.tableOffer.horizontalHeaderItem(7)
        item.setText(_translate("App_Comercial", "Notas"))
        item = self.tableOffer.horizontalHeaderItem(8)
        item.setText(_translate("App_Comercial", "Ptos. Importantes"))
        item = self.tableOffer.horizontalHeaderItem(9)
        item.setText(_translate("App_Comercial", "Seguimiento"))
        __sortingEnabled = self.tableOffer.isSortingEnabled()
        self.tableOffer.setSortingEnabled(False)
        self.tableOffer.setSortingEnabled(__sortingEnabled)

# Function to open window for create offers
    def new_offer(self):
        """
        Opens a new window for creating a new offer in the application. 
        """
        from OfferNew_Menu import Ui_NewOffer_Menu
        self.new_offer_menu=QtWidgets.QMainWindow()
        self.ui=Ui_NewOffer_Menu(self.username)
        self.ui.setupUi(self.new_offer_menu)
        self.new_offer_menu.show()
        self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for edit offers
    def edit_offer(self):
        """
        Opens a new window for editing an existing offer. 
        """
        from OfferEdit_Menu import Ui_EditOffer_Menu
        self.edit_offer_menu=QtWidgets.QMainWindow()
        self.ui=Ui_EditOffer_Menu(self.username)
        self.ui.setupUi(self.edit_offer_menu)
        self.edit_offer_menu.show()
        self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for query offers
    def query_offer(self):
        """
        Opens a new window for querying offers. 
        """
        from OfferQuery_Window import Ui_QueryOffer_Window
        self.query_offer_window=Ui_QueryOffer_Window(self.username)
        self.query_offer_window.show()

# Function to open window for create orders
    def new_order(self):
        """
        Opens a new window for creating a new order. 
        """
        from OrderNewAddData_Window import Ui_New_OrderAddData_Window
        self.new_orderAddData_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_OrderAddData_Window()
        self.ui.setupUi(self.new_orderAddData_window)
        self.new_orderAddData_window.show()
        self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for edit orders
    def edit_order(self):
        """
        Opens a new window for editing an existing order. 
        """
        from OrderEdit_Menu import Ui_EditOrder_Menu
        self.edit_order_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditOrder_Menu()
        self.ui.setupUi(self.edit_order_window)
        self.edit_order_window.show()
        self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for query orders
    def query_order(self):
        """
        Opens a new window for querying orders. 
        """
        from OrderQuery_Window import Ui_QueryOrder_Window
        self.query_order_window=Ui_QueryOrder_Window()
        self.query_order_window.show()

# Function to open window for create tags
    def new_tag(self):
        """
        Opens a new window for creating new tags. 
        """
        from TAGCreate_Menu import Ui_CreateTag_Menu
        self.new_tag_window=QtWidgets.QMainWindow()
        self.ui=Ui_CreateTag_Menu()
        self.ui.setupUi(self.new_tag_window)
        self.new_tag_window.show()

# Function to open window for edit tags
    def edit_tag(self):
        """
        Opens a new menu for different types of editing existing tags. 
        """
        from TAGEdit_Menu import Ui_EditTags_Menu
        self.edittags_menu=QtWidgets.QMainWindow()
        self.ui=Ui_EditTags_Menu()
        self.ui.setupUi(self.edittags_menu)
        self.edittags_menu.show()

# Function to open window for query tags
    def query_tag(self):
        """
        Opens a new window for querying tags. 
        """
        from TAGQuery_Menu import Ui_TAGQuery_Menu
        self.querytag_window=QtWidgets.QMainWindow()
        self.ui=Ui_TAGQuery_Menu('Comercial')
        self.ui.setupUi(self.querytag_window)
        self.querytag_window.show()

# Function to open menu for export documents
    def export_menu(self):
        """
        Opens a new window for exporting documents. 
        """
        self.exportdocs_menu=QtWidgets.QMainWindow()
        self.ui=Ui_ExportDocs_Menu(self.username)
        self.ui.setupUi(self.exportdocs_menu)
        self.exportdocs_menu.show()

# Function to open window for query documents
    def query_documents(self):
        """
        Opens a new window for querying documents. 
        """
        from DocQuery_Window import Ui_QueryDoc_Window
        self.querydoc_menu=Ui_QueryDoc_Window()
        self.querydoc_menu.show()

# Function to open menu of offer statistics
    def stats_offers(self):
        """
        Opens a new window for viewing offer statistics. 
        """
        from OfferStats_Menu import Ui_StatsOffer_Menu
        self.statswindow=QtWidgets.QMainWindow()
        self.ui=Ui_StatsOffer_Menu()
        self.ui.setupUi(self.statswindow)
        self.statswindow.show()

# Function to open window with clients data resume
    def clients_generalresume(self):
        """
        Opens a new window to display a general resume of client data. 
        """
        from ClientsGeneralResume_Window import Ui_ClientsGeneralResume_Window
        self.clients_general_resume_window=QtWidgets.QMainWindow()
        self.ui=Ui_ClientsGeneralResume_Window()
        self.ui.setupUi(self.clients_general_resume_window)
        self.clients_general_resume_window.show()

# Function to open window for query tasks
    def querytask(self, date=None):
        """
        Opens a new window for querying tasks. 
        
        Args:
            date (QDate, optional): The date to filter tasks. Defaults to None.
        """
        from TaskQuery_Window import Ui_QueryTask_Window
        self.querytaskwindow=Ui_QueryTask_Window(self.name, date)
        self.querytaskwindow.show()
        self.querytaskwindow.Button_Cancel.clicked.connect(self.setup_task_dates)

# Function to open window for create a new task
    def newtask(self, date):
        """
        Opens a new window for creating a new task. 
        
        Args:
            date (QDate): The date associated with the new task.
        """
        from TaskAdd_Window import Ui_AddTask_Window
        self.newtaskwindow=QtWidgets.QMainWindow()
        self.ui=Ui_AddTask_Window(self.name, date)
        self.ui.setupUi(self.newtaskwindow)
        self.newtaskwindow.show()
        self.ui.Button_Cancel.clicked.connect(self.setup_task_dates)

# Function to show menu when profile button is clicked
    def showMenu(self):
        """
        Displays a context menu when the profile button is clicked. 
        Provides options to edit the password.
        """
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contraseña")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))

# Function to open window for password edition
    def editpassword(self):
        """
        Opens a new window for editing the user's password. 
        """
        from PasswordEdit_Window import Ui_EditPasswordWindow
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()

# Function to open window for user edition
    def user_edition(self):
        """
        Opens a new window for editing user details. 
        """
        from UserEdit_Menu import Ui_EditUser_Menu
        self.edit_user_menu=QtWidgets.QMainWindow()
        self.ui=Ui_EditUser_Menu()
        self.ui.setupUi(self.edit_user_menu)
        self.edit_user_menu.show()

# Function to open window to show active notifications
    def notifications(self):
        """
        Opens a new window to show active notifications. 
        """
        from NotificationsHistory_Window import Ui_HistoryNotifications_Window
        self.notification_window=Ui_HistoryNotifications_Window(self.username)
        self.notification_window.show()
        self.notification_window.Button_Cancel.clicked.connect(self.load_notifications)

# Function to update table and graphs at the same time
    def update_principal_screen(self):
        """
        Updates the main screen by reloading the table data and updating the graphs.
        """
        self.load_table()
        self.load_graphs()

# Function to load values on graphs
    def load_graphs(self):
        """
        Loads and displays graphs for the current year's sales data and product type proportions.
        Handles errors with a message box and updates the UI with the graphs.
        """
        try:
            commands_responsible = ("""
                        SELECT *
                        FROM users_data.initials
                        """)
            commands_graph1 = ("""
                        SELECT orders."order_month", CAST(SUM(orders."order_amount") AS numeric)
                        FROM offers
                        INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                        WHERE (offers."responsible"=%s
                        AND
                        orders."order_year"=%s
                        )
                        GROUP BY orders."order_month"
                        ORDER BY orders."order_month"
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_responsible)
                results_responsible=cur.fetchall()

                match=list(filter(lambda x:self.username in x, results_responsible))
                responsible=match[0][0]

                data=(responsible, date.today().year,)
                cur.execute(commands_graph1, data)
                results=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            months=[int(x[0]) for x in results]
            amounts=[float(x[1]) for x in results]

            self.canvas=FigureCanvas(Figure())
            ax=self.canvas.figure.subplots()
            ax.bar(months,amounts)
            ax.set_xticks(range(1,13))
            axticks_y=ticker.FuncFormatter(self.format_y_ticks)
            ax.yaxis.set_major_formatter(axticks_y)
            ax.set_title('Ventas totales año actual')
            ax.set_xlabel('Mes')
            ax.set_ylabel('Importe (€)')

            self.canvas.setMinimumSize(QtCore.QSize(200, 400))
            self.canvas.setMaximumSize(QtCore.QSize(585, 400))

            self.canvas.setObjectName("Graph1")
            self.BottomLayout.addWidget(self.canvas, 0, 0, 1, 1)

            # spacerItem7 = QtWidgets.QSpacerItem(15, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            # self.BottomLayout.addItem(spacerItem7)

            commands_graph2 = ("""
                        SELECT COUNT(orders."num_order"), product_type."variable"
                        FROM offers
                        INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                        INNER JOIN product_type ON (offers."material"=product_type."material")
                        WHERE (offers."responsible"=%s
                        AND
                        "order_year"=%s
                        )
                        GROUP BY product_type."variable"
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_responsible)
                results_responsible=cur.fetchall()

                match=list(filter(lambda x:self.username in x, results_responsible))
                responsible=match[0][0]

                data=(responsible, date.today().year,)
                cur.execute(commands_graph2, data)
                results2=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            count=[x[0] for x in results2]
            labels=[x[1] for x in results2]

            self.canvas2=FigureCanvas(Figure())
            bx=self.canvas2.figure.subplots()
            bx.pie(count,labels=labels,autopct='%1.1f%%')
            bx.set_title('Proporción equipos vendidos')

            self.canvas2.setMinimumSize(QtCore.QSize(200, 400))
            self.canvas2.setMaximumSize(QtCore.QSize(585, 400))
            self.canvas2.setObjectName("canvas2")
            self.BottomLayout.addWidget(self.canvas2, 0, 1, 1, 1)

        except:
            pass

# Function to load values on table
    def load_table(self):
        """
        Loads and displays offer data in a table widget.
        Handles errors with a message box and updates the table widget with the data.
        """
        self.tableOffer.setRowCount(0)
        commands_responsible = ("""
                        SELECT *
                        FROM users_data.initials
                        """)
        commands_appcomercial = ("""
                    SELECT "num_offer","state","client","final_client",TO_CHAR("presentation_date", 'DD-MM-YYYY'),"material","offer_amount","notes","important","tracking"
                    FROM offers
                    WHERE ("responsible" = %s
                    AND
                    ("state" = 'Presentada'
                    OR
                    "state" = 'Registrada'
                    ))
                    ORDER BY "num_offer"
                    """)
        commands_appcomercial_coordination = ("""
                    SELECT "num_offer","state", "responsible", "client","final_client",TO_CHAR("presentation_date", 'DD-MM-YYYY'),"material","offer_amount","notes","important","tracking"
                    FROM offers
                    WHERE ("responsible" not in ('a.calvo')
                    AND
                    ("state" = 'Presentada'
                    OR
                    "state" = 'Registrada'
                    ))
                    ORDER BY "num_offer"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_responsible)
            results_responsible=cur.fetchall()
            match=list(filter(lambda x:self.username in x, results_responsible))
            responsible=match[0][0]
            if responsible in ('l.bravo'):
                cur.execute(commands_appcomercial_coordination)
                results=cur.fetchall()
                number_columns = 11
                self.tableOffer.setHorizontalHeaderLabels(["Nº Oferta", "Estado", "Responsable", "Cliente", "Cl. Final / Planta", "Fecha Pres.", "Material", "Importe", "Notas", "Ptos. Importantes", "Seguimiento"])
            else:
                cur.execute(commands_appcomercial,(responsible,))
                results=cur.fetchall()
                number_columns = 10
            self.tableOffer.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(number_columns):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableOffer.setItem(tablerow, column, it)

                tablerow+=1

            self.tableOffer.verticalHeader().hide()
            self.tableOffer.setItemDelegate(AlignDelegate(self.tableOffer))

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableOffer.setSortingEnabled(False)

# Function to stablish dates with task assigned to put icon on calendar
    def setup_task_dates(self):
        """
        Sets up task dates for the calendar widget.
        Handles errors with a message box and updates the calendar with task dates.
        """
        commands_loaddatestasks_LB = ("""
                    SELECT "task_date","task"
                    FROM tasks
                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        commands_loaddatestasks = ("""
                    SELECT "task_date","task"
                    FROM tasks
                    WHERE ("responsible" = %s
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_loaddatestasks,(self.name,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dates_with_tasks_raw=[x[0] for x in results]
            dates_with_tasks=list(set(dates_with_tasks_raw))

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()
        # task_dates = [QtCore.QDate.currentDate().addDays(0), QtCore.QDate.currentDate().addDays(3)]
        task_dates = dates_with_tasks
        self.Calendar.set_task_dates(task_dates)

# Function to show task of the selected date
    def show_selected_date_tasks(self):
        """
        Displays tasks for the selected date in a message box.
        Handles errors with a message box.
        """
        self.click_count = 0
        selected_date = self.Calendar.selectedDate()
        if self.name == 'Carlos Crespo':
            creator=self.name[0] + self.name[self.name.find(' ')+1] + 'H'
        else:
            creator=self.name[0] + self.name[self.name.find(' ')+1]
        returned = self.get_tasks_for_date(creator, selected_date)

        if returned:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            final_text=''

            for item in returned:
                responsible = item[0]
                tasks = item [1]
                task_text = "<br><br>-".join(tasks)
                final_text += "<br><br>" + f"<b>{responsible}:</b><br>-" + task_text

            dlg.setText(f"<html><body>Tareas para la fecha {selected_date.toString('dd-MM-yyyy')}:{final_text}</body></html>")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()
            del dlg, new_icon

#Function to obtain tasks associated to a date
    def get_tasks_for_date(self, creator, date):
        """
        Retrieves tasks for a specific date.
        
        Args:
            creator (str): The creator or responsible person for the tasks.
            date (QDate): The date for which tasks are being retrieved.
        
        Returns:
            list: A list of tasks for the specified date.
        """
        commands_loaddatestasks_LB = ("""
                    SELECT "responsible","task_date","task","state","creator"
                    FROM tasks
                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                    AND
                    "task_date" IS NOT NULL
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        commands_loaddatestasks = ("""
                    SELECT "responsible","task_date","task","state","creator"
                    FROM tasks
                    WHERE ("responsible" = %s
                    AND
                    "task_date" IS NOT NULL
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_loaddatestasks,(self.name,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dict_responsibles_tasks={}

            for i in range(len(results)):
                responsible=results[i][0]
                key=QtCore.QDate(results[i][1].year, results[i][1].month, results[i][1].day)
                value="(" + results[i][4]+") " + results[i][2] + " (" + results[i][3] + ")"

                if responsible not in dict_responsibles_tasks:
                    dict_responsibles_tasks[responsible] = [{key: [value]}]

                else:
                    for item in dict_responsibles_tasks[responsible]:
                        if key not in item:
                            item[key] = [value]

                        else:
                            item[key].append(value)

            value_to_return = []
            for item in dict_responsibles_tasks.keys():
                for element in dict_responsibles_tasks[item]:
                    if date in element:
                        value_to_return.append([item,dict_responsibles_tasks[item][dict_responsibles_tasks[item].index(element)][date]])

            return value_to_return

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

#Function to show dialog showing delayed offers
    def alert_offers(self):
        """
        Shows a message box with delayed offers.
        Handles errors with a message box.
        """
        delay_date=QtCore.QDate.currentDate().addDays(-10)

        commands_responsible = ("""
                        SELECT *
                        FROM users_data.initials
                        """)
        commands_offerdelay = ("""
                    SELECT "num_offer"
                    FROM offers
                    WHERE ("responsible" = %s
                    AND
                    "state" = 'Presentada'
                    AND
                    "presentation_date" < %s::date )
                    ORDER BY "num_offer"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_responsible)
            results_responsible=cur.fetchall()
            match=list(filter(lambda x:self.username in x, results_responsible))
            responsible=match[0][0]
            cur.execute(commands_offerdelay,(responsible,delay_date.toString(QtCore.Qt.DateFormat.ISODate),))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        offers_delay=[x[0] for x in results]

        if len(offers_delay) != 0:
            offers_delay_text = "\n".join(offers_delay)
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Las siguientes ofertas llevan presentadas más de 10 días:\n"
                        "\n"
                        + offers_delay_text)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()
            del dlg, new_icon

#Function to formatting y axis of graps
    def format_y_ticks(self, y, pos):
        """
        Formats y-axis ticks for graphs.
        
        Args:
            y (float): The y-axis value to format.
            pos (int): The tick position (not used).
        
        Returns:
            str: The formatted y-axis value.
        """
        if y >= 1e6:
            return '{:.1f}M'.format(y * 1e-6)
        elif y >= 1e3:
            return '{:.1f}k'.format(y * 1e-3)
        else:
            return '{:d}'.format(int(y))

# Function to check if column index of double clicked cell is equal to first column index
    def on_item_double_clicked(self, item):
        """
        Handles double-click events on items in a QTableWidget. Opens different forms based on the column of the clicked item.
        
        Args:
            item (QtWidgets.QTableWidgetItem): The item that was double-clicked.
        """
        if item.column() == 2:
            self.clientresume(item)
        elif item.column() == 0:
            self.editofferform(item)
        elif item.column() in [7, 8, 9]:
            cell_content = item.text()
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Ofertas")
            dlg.setText(cell_content)
            dlg.exec()


# Function when double clicked cell is in client column
    def clientresume(self, item):
        """
        Opens the client resume window for the client whose name is displayed in the clicked item.

        Args:
            item (QtWidgets.QTableWidgetItem): The item containing the client name.
        """
        from ClientResume_Window import Ui_ClientResume_Window
        clientname=item.text()
        self.client_resume_window=QtWidgets.QMainWindow()
        self.ui=Ui_ClientResume_Window(clientname)
        self.ui.setupUi(self.client_resume_window)
        self.client_resume_window.show()

# Function when double clicked cell is in client column
    def editofferform(self, item):
        """
        Opens the offer edit form for the offer number displayed in the clicked item.
        
        Args:
            item (QtWidgets.QTableWidgetItem): The item containing the offer number.
        """
        from OfferEdit_Window import Ui_Edit_Offer_Window
        num_offer=item.text()
        self.edit_offer_window=QtWidgets.QMainWindow()
        self.ui=Ui_Edit_Offer_Window(self.username, num_offer)
        self.ui.setupUi(self.edit_offer_window)
        self.edit_offer_window.show()
        self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open reclamation window
    def reclamation_offer(self):
        """
        Opens the reclamation window to handle offers that need reclamation.
        """
        from OfferReclamation_Window import Ui_ReclamationOffer_Window
        self.reclamationoffer_window=QtWidgets.QMainWindow()
        self.ui=Ui_ReclamationOffer_Window(self.name, self.username)
        self.ui.setupUi(self.reclamationoffer_window)
        self.reclamationoffer_window.show()

# Function to show pop-up with offers to reclaim
    def alert_reclamation_offers(self):
        """
        Shows a pop-up alerting the user if there are offers to reclaim that are overdue.
        """
        conn = None
        commands_responsible = ("""
                        SELECT *
                        FROM users_data.initials
                        """)
        commands_queryrecoffer = ("""
                        SELECT offers."num_offer",TO_CHAR(offers."presentation_date", 'DD-MM-YYYY'),TO_CHAR(offers."last_update", 'DD-MM-YYYY'),
                        (offers."last_update" - offers."presentation_date") AS "difference_in_days"
                        FROM offers
                        WHERE (offers."responsible" = %s
                        AND
                        offers."state" = 'Presentada'
                        AND
                        offers."last_update" < (current_date - interval '10 days')
                        )
                        ORDER BY offers."num_offer"
                        """)

        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_responsible)
            results_responsible=cur.fetchall()
            match=list(filter(lambda x:self.username in x, results_responsible))
            responsible=match[0][0]
            cur.execute(commands_queryrecoffer, (responsible,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            offers_rec_delay=[x[0] for x in results]

            if len(offers_rec_delay) != 0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Hay " + str(len(offers_rec_delay)) + " ofertas para reclamar\n"
                            "¿Quieres reclamarlas ahora?\n")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                result = dlg.exec()
                if result == QtWidgets.QMessageBox.StandardButton.Yes:
                    self.reclamation_offer()
                del dlg, new_icon

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Function to load number of notifications
    def load_notifications(self):
        """
        Loads and displays notifications for the user from various tables in the 'notifications' schema.
        """
        query_tables_notifications = """SELECT table_name
                                FROM information_schema.tables
                                WHERE table_schema = 'notifications' AND table_type = 'BASE TABLE';"""
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_tables_notifications)
            results=cur.fetchall()
            tables_names=[x[0] for x in results]

            notifications = []

            for table in tables_names:
                commands_notifications = f" SELECT * FROM notifications.{table} WHERE username = '{self.username}' and state = 'Pendiente'"
                cur.execute(commands_notifications)
                results=cur.fetchall()

                for x in results:
                    notifications.append(x)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        if len(notifications) != 0:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Notif_on.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        else:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Notif_off.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Notification.setIcon(icon13)

# Function to open window with clock-ins
    def clockin(self):
        """
        Opens the clock-in window where the user can manage their clock-ins.
        """
        from ClockIn_Window import MyCalendarApp
        self.clockin_window = MyCalendarApp(self.username)
        self.clockin_window.showMaximized()

# Function to upload excel file with offer or order information
    def upload_offer_order(self):
        """
        Uploads offer or order information from an Excel file and inserts it into the corresponding database table.
        """
        while True:
            item, ok = QtWidgets.QInputDialog.getItem(self, "Cargar Info", "Selecciona que quieres cargar:", ['Ofertas', 'Pedidos'], 0, False)
            if ok and item:
                item_type = item
                if item_type != '':
                    if item_type == 'Ofertas':
                        table_name = "offers"
                    elif item_type == 'Pedidos':
                        table_name = "orders"

                    fname = askopenfilename(filetypes=[("Archivos de Excel", "*.xlsx")],
                            title="Seleccionar archivo Excel")

                    if fname:
                        params = config()
                        conn = psycopg2.connect(**params)
                        cursor = conn.cursor()

                    #Importing excel file into dataframe
                        df_table = pd.read_excel(fname, na_values=['N/A'], keep_default_na=False)
                        df_table = df_table.astype(str)
                        df_table.replace('nan', 'N/A', inplace=True)

                        try:
                    # Loop through each row of the DataFrame and insert the data into the table
                            for index, row in df_table.iterrows():
                                # Create a list of pairs (column_name, column_value) for each column with value
                                    columns_values = [(column, row[column]) for column in df_table.columns if not pd.isnull(row[column])]

                                # Creating string for columns names
                                    columns = ', '.join([column for column, _ in columns_values])

                                # Creating string for columns values. For money/amount values, dots are replaced for commas to avoid insertion problems
                                    values = ', '.join([f"'{value.replace('.', ',')}'" if column in ['offer_amount','order_amount']
                                                        else ('NULL' if value == '' and column in ['order_date','expected_date','register_date','recep_date','limit_date',
                                                        'presentation_date', 'items_number']
                                                        else "'{}'".format(value.replace('\'', '\'\''))) for column, value in columns_values])

                                # Creating insertion query and executing it
                                    sql_insertion = f"INSERT INTO {table_name} ({columns}) VALUES ({values})"
                                    cursor.execute(sql_insertion)

                            cursor.close()
                            conn.commit()

                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("ERP EIPSA")
                            dlg.setText("Datos importados con éxito")
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            dlg.exec()
                            del dlg, new_icon
                            break

                        except (Exception, psycopg2.DatabaseError) as error:
                            print(error)
                        finally:
                            if conn is not None:
                                conn.close()
            else:
                break





# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     App_Comercial = QtWidgets.QMainWindow()
#     ui = Ui_App_Comercial()
#     ui.setupUi(App_Comercial)
#     App_Comercial.showMaximized()
#     sys.exit(app.exec())