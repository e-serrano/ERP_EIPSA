# Form implementation generated from reading ui file 'App_Documentation.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from config import config
from datetime import *
import psycopg2
import sys
import configparser
from Database_Connection import createConnection
from tkinter.filedialog import askopenfilename
import pandas as pd
from NewDoc_Window import Ui_New_Doc_Window
from EditDoc_Window import Ui_EditDoc_Window
from QueryDoc_Window import Ui_QueryDoc_Window
from EditPassword_Window import Ui_EditPasswordWindow


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_App_Documentation(object):
    def __init__(self, name, username):
        self.name=name
        self.username=username

    # def __init__(self):
    #     self.name='Enrique Serrano'
    #     self.username='e.serrano'

    def setupUi(self, App_Documentation):
        App_Documentation.setObjectName("App_Documentation")
        App_Documentation.resize(945, 860)
        App_Documentation.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Documentation.setWindowIcon(icon)
        App_Documentation.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Documentation)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/Logo.ico"))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem1)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setToolTip('Configuraci√≥n')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/User.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem3 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem3)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_NewDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_NewDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_NewDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_NewDoc.setFont(font)
        self.Button_NewDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/Documents_New.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_NewDoc.setIcon(icon1)
        self.Button_NewDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_NewDoc.setObjectName("Button_NewDoc")
        self.verticalLayout_3.addWidget(self.Button_NewDoc)
        self.Button_ImportDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_ImportDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_ImportDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_ImportDoc.setFont(font)
        self.Button_ImportDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/Documents_Import.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ImportDoc.setIcon(icon2)
        self.Button_ImportDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_ImportDoc.setObjectName("Button_ImportDoc")
        self.verticalLayout_3.addWidget(self.Button_ImportDoc)
        self.Button_EditDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_EditDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_EditDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_EditDoc.setFont(font)
        self.Button_EditDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/Documents_Edit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_EditDoc.setIcon(icon3)
        self.Button_EditDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_EditDoc.setObjectName("Button_EditDoc")
        self.verticalLayout_3.addWidget(self.Button_EditDoc)
        self.Button_QueryDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryDoc.setFont(font)
        self.Button_QueryDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/Documents_Search.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryDoc.setIcon(icon4)
        self.Button_QueryDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryDoc.setObjectName("Button_QueryDoc")
        self.verticalLayout_3.addWidget(self.Button_QueryDoc)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem4)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.tableDocs = QtWidgets.QTableWidget(parent=self.frame)
        self.tableDocs.setMinimumSize(QtCore.QSize(650, 280))
        self.tableDocs.setObjectName("tableDocs")
        self.tableDocs.setColumnCount(6)
        self.tableDocs.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(5, item)
        self.tableDocs.verticalHeader().setVisible(False)
        self.tableDocs.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.MainLayout.addWidget(self.tableDocs)
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem5)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
        self.Calendar = QtWidgets.QCalendarWidget(parent=self.frame)
        self.Calendar.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Calendar.sizePolicy().hasHeightForWidth())
        self.Calendar.setSizePolicy(sizePolicy)
        self.Calendar.setMinimumSize(QtCore.QSize(200, 400))
        self.Calendar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.Calendar.setStyleSheet("QCalendarWidget QWidget{\n"
"background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QTableView{\n"
"    background-color: white;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton {\n"
"    color: white;\n"
"    font-size:20px;\n"
"    icon-size:30px 30px;\n"
"    background-color:rgb(3, 174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QToolButton::hover {\n"
"    background-color : #019ad2;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton::pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border: 3px solid;\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QCalendarWidget QSpinBox{\n"
"    background-color: rgb(255, 255, 255);\n"
"    border: 2px solid;\n"
"    border-color: rgb(3,174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QAbstractItemView:enabled{\n"
"    selection-background-color: rgb(3, 174, 236);\n"
"    selection-color: white;\n"
"}\n"
"\n"
"#qt_calendar_prevmonth {\n"
"    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/back_arrow.png);\n"
"}\n"
"#qt_calendar_nextmonth {\n"
"    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/forward_arrow.png);\n"
"}")
        self.Calendar.setSelectedDate(QtCore.QDate.currentDate())
        self.Calendar.setGridVisible(True)
        self.Calendar.setNavigationBarVisible(True)
        self.Calendar.setDateEditEnabled(True)
        self.Calendar.setObjectName("Calendar")
        self.BottomLayout.addWidget(self.Calendar)
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Documentation.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Documentation)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Documentation.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Documentation)
        self.statusbar.setObjectName("statusbar")
        App_Documentation.setStatusBar(self.statusbar)
        self.tableDocs.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


        delay_date=QtCore.QDate.currentDate().addDays(-10)
        commands_documentation = ("""
                    SELECT "num_doc_eipsa","num_order","doc_title","state","revision",TO_CHAR("state_date", 'DD-MM-YYYY')
                    FROM documentation
                    WHERE ("state_date" < %s::date
                    AND
                    ("state" = 'Enviado'
                    OR
                    "state" = 'Comentado'
                    ))
                    ORDER BY "num_doc_eipsa"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_documentation,(delay_date.toString(QtCore.Qt.DateFormat.ISODate),))
            results=cur.fetchall()
            self.tableDocs.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(6):
                    it=QtWidgets.QTableWidgetItem(str(row[column]))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableDocs.setItem(tablerow, column, it)

                tablerow+=1

            self.tableDocs.verticalHeader().hide()
            self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


        self.retranslateUi(App_Documentation)
        self.Button_NewDoc.clicked.connect(self.CreateDoc)
        self.Button_ImportDoc.clicked.connect(self.ImportDoc)
        self.Button_EditDoc.clicked.connect(self.EditDoc)
        self.Button_QueryDoc.clicked.connect(self.query_documents)
        self.Button_Profile.clicked.connect(self.showMenu)
        QtCore.QMetaObject.connectSlotsByName(App_Documentation)


    def retranslateUi(self, App_Documentation):
        _translate = QtCore.QCoreApplication.translate
        App_Documentation.setWindowTitle(_translate("App_Documentation", "ERP EIPSA"))
        self.HeaderName.setText(_translate("App_Documentation", self.name))
        self.Button_NewDoc.setText(_translate("App_Documentation", "    Crear Documento"))
        self.Button_ImportDoc.setText(_translate("App_Documentation", "    Importar Docum."))
        self.Button_EditDoc.setText(_translate("App_Documentation", "    Editar Docum."))
        self.Button_QueryDoc.setText(_translate("App_Documentation", "    Consultar Docum."))
        self.tableDocs.setSortingEnabled(True)
        item = self.tableDocs.horizontalHeaderItem(0)
        item.setText(_translate("App_Documentation", "N¬∫ Doc Eipsa"))
        item = self.tableDocs.horizontalHeaderItem(1)
        item.setText(_translate("App_Documentation", "N¬∫ Pedido"))
        item = self.tableDocs.horizontalHeaderItem(2)
        item.setText(_translate("App_Documentation", "T√≠tulo"))
        item = self.tableDocs.horizontalHeaderItem(3)
        item.setText(_translate("App_Documentation", "Estado"))
        item = self.tableDocs.horizontalHeaderItem(4)
        item.setText(_translate("App_Documentation", "Revisi√≥n"))
        item = self.tableDocs.horizontalHeaderItem(5)
        item.setText(_translate("App_Documentation", "Fecha"))


    def CreateDoc(self):
        self.createdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_Doc_Window()
        self.ui.setupUi(self.createdoc_window)
        self.createdoc_window.show()


    def ImportDoc(self):
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()

        # File dialog to select Excel file
        # Tk().withdraw()  # Ocultar la ventana principal de tkinter
            excel_file = askopenfilename(title="Seleccionar archivo Excel")

        # Saving Excel in Pandas Dataframe
            df = pd.read_excel(excel_file)

        # Reading each row and inserting data in table
            for index, row in df.iterrows():
            # Creating SQL sentence
                values=[str(value) for value in row.values]

                query = "SELECT * FROM documentation WHERE num_doc_eipsa = %s"
                cur.execute(query, (values[0],))
                results=cur.fetchall()
                match=list(filter(lambda x:values[0] in x, results))

                if len(match)>0:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Nuevo Documento")
                    dlg.setText(f"El n√∫mero de documento '{values[0]}' ya existe y no ser√° importado. Por favor, ed√≠talo y vuelve a importarlo")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon

                else:
                    query = "SELECT id FROM document_type WHERE doc_type = %s"
                    cur.execute(query, (values[4],))
                # get results from query
                    resultado = cur.fetchone()
                # get id from table
                    id_doctype = resultado[0]
                #inserting values to BBDD
                    values[4]=str(id_doctype)
                    values = "', '".join(values)
                    sql_insertion = f"INSERT INTO documentation VALUES ('{values}')"
                # Executing SQL sentence
                    cur.execute(sql_insertion)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Importar Documentos")
            dlg.setText("Importaci√≥n completada")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()
            del dlg, new_icon

        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


    def EditDoc(self):
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        if not createConnection(user_database, password_database):
            sys.exit()

        self.editdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditDoc_Window()
        self.ui.setupUi(self.editdoc_window)
        self.editdoc_window.show()


    def query_documents(self):
        self.querydoc_menu=QtWidgets.QMainWindow()
        self.ui=Ui_QueryDoc_Window()
        self.ui.setupUi(self.querydoc_menu)
        self.querydoc_menu.show()


    def showMenu(self):
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contrase√±a")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))


    def editpassword(self):
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()


    def update_table(self):
        delay_date=QtCore.QDate.currentDate().addDays(-10)
        commands_documentation = ("""
                    SELECT "num_doc_eipsa","num_order","doc_title","state","revision",TO_CHAR("state_date", 'DD-MM-YYYY')
                    FROM documentation
                    WHERE ("state_date" < %s::date
                    AND
                    ("state" = 'Enviado'
                    OR
                    "state" = 'Comentado'
                    ))
                    ORDER BY "num_doc_eipsa"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_documentation,(delay_date.toString(QtCore.Qt.DateFormat.ISODate),))
            results=cur.fetchall()
            self.tableDocs.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(6):
                    it=QtWidgets.QTableWidgetItem(str(row[column]))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableDocs.setItem(tablerow, column, it)

                tablerow+=1

            self.tableDocs.verticalHeader().hide()
            self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    App_Documentation = QtWidgets.QMainWindow()
    ui = Ui_App_Documentation()
    ui.setupUi(App_Documentation)
    App_Documentation.show()
    sys.exit(app.exec())
