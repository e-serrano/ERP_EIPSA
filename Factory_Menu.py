# Form implementation generated from reading ui file 'EditOffer_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6 import QtCore, QtGui, QtWidgets
import os
import configparser
from Database_Connection import createConnection

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_Factory_Menu(QtWidgets.QMainWindow):
    """
    UI class for the Clock In Menu window.
    """
    def __init__(self, username):
        """
        Initializes the main window, setting up the user interface and storing user-specific details.

        Args:
            username (str): The username of the user.
        """
        super().__init__()
        self.username = username
        self.setupUi(self)

    def setupUi(self, Factory_Menu):
        """
        Sets up the user interface for the Factory_Menu.

        Args:
            Factory_Menu (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        Factory_Menu.setObjectName("Factory_Menu")
        Factory_Menu.setMinimumSize(QtCore.QSize(300, 600))
        Factory_Menu.setMaximumSize(QtCore.QSize(300, 600))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Factory_Menu.setWindowIcon(icon)
        Factory_Menu.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}"
)
        self.centralwidget = QtWidgets.QWidget(parent=Factory_Menu)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        
        self.Button_Times = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Times.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Times.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Times.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Times.setObjectName("Button_Times")
        self.gridLayout_2.addWidget(self.Button_Times, 1, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem1, 2, 0, 1, 1)
        self.Button_Editdb = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Editdb.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Editdb.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Editdb.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Editdb.setObjectName("Button_Editdb")
        self.gridLayout_2.addWidget(self.Button_Editdb, 3, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 4, 0, 1, 1)
        self.Button_Verification = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Verification.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Verification.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Verification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Verification.setObjectName("Button_Verification")
        self.gridLayout_2.addWidget(self.Button_Verification, 5, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem3, 6, 0, 1, 1)
        self.Button_ReportNC = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ReportNC.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_ReportNC.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_ReportNC.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_ReportNC.setObjectName("Button_ReportNC")
        self.gridLayout_2.addWidget(self.Button_ReportNC, 7, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem4, 8, 0, 1, 1)
        self.Button_Nuclear = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Nuclear.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Nuclear.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Nuclear.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Nuclear.setObjectName("Button_Nuclear")
        self.gridLayout_2.addWidget(self.Button_Nuclear, 9, 0, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem5, 10, 0, 1, 1)
        self.Button_Revisions = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Revisions.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Revisions.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Revisions.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Revisions.setObjectName("Button_Revisions")
        self.gridLayout_2.addWidget(self.Button_Revisions, 11, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem6, 12, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(140, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setEnabled(True)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.horizontalLayout.addWidget(self.Button_Cancel)
        self.gridLayout_2.addLayout(self.horizontalLayout, 13, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem3, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Factory_Menu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Factory_Menu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 300, 22))
        self.menubar.setObjectName("menubar")
        Factory_Menu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Factory_Menu)
        self.statusbar.setObjectName("statusbar")
        Factory_Menu.setStatusBar(self.statusbar)
        Factory_Menu.setWindowFlags(QtCore.Qt.WindowType.WindowMinimizeButtonHint)


        self.retranslateUi(Factory_Menu)
        self.Button_Cancel.clicked.connect(Factory_Menu.close) # type: ignore
        self.Button_Times.clicked.connect(self.times)
        self.Button_Editdb.clicked.connect(self.dbmanufedit)
        self.Button_Verification.clicked.connect(self.query_test)
        self.Button_ReportNC.clicked.connect(self.nc_report)
        self.Button_Nuclear.clicked.connect(self.nuclear_annex)
        self.Button_Revisions.clicked.connect(self.revisions)
        QtCore.QMetaObject.connectSlotsByName(Factory_Menu)


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, Factory_Menu):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        Factory_Menu.setWindowTitle(_translate("Factory_Menu", "Fábrica"))
        self.Button_Times.setText(_translate("Factory_Menu", "Tiempos Fab."))
        self.Button_Editdb.setText(_translate("Factory_Menu", "Personal/Operaciones"))
        self.Button_Verification.setText(_translate("Factory_Menu", "Verificación"))
        self.Button_ReportNC.setText(_translate("Factory_Menu", "Informes NC"))
        self.Button_Nuclear.setText(_translate("Factory_Menu", "Anexos Nuclear"))
        self.Button_Revisions.setText(_translate("Factory_Menu", "Revisiones Fábrica"))
        self.Button_Cancel.setText(_translate("Factory_Menu", "Cancelar"))

# Function to open window of nc reports
    def nc_report(self):
        """
        Opens a window for viewing NC reports from the database.
        """
        from NC_Report_Window import Ui_NC_Report_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_nc = createConnection(user_database, password_database)
        if not db_nc:
            sys.exit()

        self.nc_window = Ui_NC_Report_Window(db_nc, self.username)
        self.nc_window.showMaximized()

# Function to open fabrication times summary
    def times(self):
        print('tiempos')

# Function to generate nuclear annexes
    def nuclear_annex(self):
        """
        Prompts the user for various inputs to generate nuclear annexes and exports them to an Excel document.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Anexos Nucleares')
        dlg.setLabelText('Inserte pedido:')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Anexos Nucleares')
        dlg2.setLabelText('CODIGO A.N.A.:')

        dlg3 = QtWidgets.QInputDialog()
        new_icon3 = QtGui.QIcon()
        new_icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg3.setWindowIcon(new_icon3)
        dlg3.setWindowTitle('Anexos Nucleares')
        dlg3.setLabelText('PDO A.N.A.:')

        dlg4 = QtWidgets.QInputDialog()
        new_icon4 = QtGui.QIcon()
        new_icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg4.setWindowIcon(new_icon4)
        dlg4.setWindowTitle('Anexos Nucleares')
        dlg4.setLabelText('Linea:')

        while True:
            annex, ok = QtWidgets.QInputDialog.getItem(self, "Anexos Nucleares", "Seleccióna un tipo de anexo:", ['Anexo A', 'Anexo B', 'Anexo C'], 0, False)
            if ok and annex:
                annex_type = annex
                if annex_type != '':
                    while True:
                        clickedButton = dlg.exec()
                        if clickedButton == 1:
                            numorder = dlg.textValue()
                            if numorder != '':
                                while True:
                                    clickedButton2 = dlg2.exec()
                                    if clickedButton2 == 1:
                                        ana_code = dlg2.textValue()
                                        if ana_code != '':
                                            while True:
                                                clickedButton3 = dlg3.exec()
                                                if clickedButton3 == 1:
                                                    ana_order = dlg3.textValue()
                                                    if ana_order != '':
                                                        while True:
                                                            clickedButton4 = dlg4.exec()
                                                            if clickedButton4 == 1:
                                                                line_number = dlg4.textValue()
                                                                if line_number != '':
                                                                    from Excel_Export_Templates import nuclear_annexes
                                                                    excel_to_export = nuclear_annexes(annex_type, numorder, ana_code, ana_order, line_number)
                                                                    excel_to_export.save_excel_doc()
                                                                    break
                                                                dlg_error = QtWidgets.QMessageBox()
                                                                new_icon = QtGui.QIcon()
                                                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                                dlg_error.setWindowIcon(new_icon)
                                                                dlg_error.setWindowTitle("Anexos Nucleares")
                                                                dlg_error.setText("La línea no puede estar vacía")
                                                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                                                dlg_error.exec()
                                                                del dlg_error,new_icon
                                                            else:
                                                                break
                                                        break
                                                    dlg_error = QtWidgets.QMessageBox()
                                                    new_icon = QtGui.QIcon()
                                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                    dlg_error.setWindowIcon(new_icon)
                                                    dlg_error.setWindowTitle("Anexos Nucleares")
                                                    dlg_error.setText("El pedido A.N.A. no puede estar vacío")
                                                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                                    dlg_error.exec()
                                                    del dlg_error,new_icon
                                                else:
                                                    break
                                            break
                                        dlg_error = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg_error.setWindowIcon(new_icon)
                                        dlg_error.setWindowTitle("Anexos Nucleares")
                                        dlg_error.setText("El código A.N.A. no puede estar vacío")
                                        dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                        dlg_error.exec()
                                        del dlg_error,new_icon
                                    else:
                                        break
                                break
                            dlg_error = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_error.setWindowIcon(new_icon)
                            dlg_error.setWindowTitle("Anexos Nucleares")
                            dlg_error.setText("El número de pedido no puede estar vacío")
                            dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_error.exec()
                            del dlg_error,new_icon
                        else:
                            break
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Anexos Nucleares")
                dlg_error.setText("Selecciona un anexo")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to show window with tables of all tests
    def query_test(self):
        """
        Prompts the user to enter an order number and displays a window with the corresponding test tables.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Verificación')
        dlg.setLabelText('Introduce un pedido:')

        while True:
            clickedButton = dlg.exec()
            if clickedButton == 1:
                numorder = dlg.textValue()
                if numorder != '':
                    from Verif_Order_Window import Ui_Verif_Order_Window
                    self.testquery_window=QtWidgets.QMainWindow()
                    self.ui=Ui_Verif_Order_Window(self.username, numorder)
                    self.ui.setupUi(self.testquery_window)
                    self.testquery_window.showMaximized()
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Verificación")
                dlg_error.setText("El pedido no puede estar vacío. Introduce un valor válido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to edit database tables of manufacturing section
    def dbmanufedit(self):
        """
        Opens the database manufacturing editing window.
        """
        from DBManufEditReg_Window import Ui_DBEditRegManuf_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_manuf = createConnection(user_database, password_database)
        if not db_manuf:
            sys.exit()

        self.dbedit_window=Ui_DBEditRegManuf_Window(db_manuf)
        self.dbedit_window.show()

# Function to open menu with different types of revisions
    def revisions(self):
        """
        Initializes and displays the revisions menu for the current user.
        """
        from Verif_Revisions_Menu import Ui_Verif_Revisions_Menu
        self.revisions_menu=QtWidgets.QMainWindow()
        self.ui=Ui_Verif_Revisions_Menu(self.username)
        self.ui.setupUi(self.revisions_menu)
        self.revisions_menu.show()



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Factory_Menu = QtWidgets.QMainWindow()
    ui = Ui_Factory_Menu('j.martinez')
    ui.setupUi(Factory_Menu)
    Factory_Menu.show()
    sys.exit(app.exec())
