# Form implementation generated from reading ui file 'Invoice_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QUrl
from PyQt6 import QtSql
from PyQt6.QtCore import Qt
import re
from config import config
import configparser
from Database_Connection import createConnection_name, createConnection
import psycopg2
import os
from tkinter.filedialog import asksaveasfilename, askopenfilename
import pandas as pd
from PDF_Viewer import PDF_Viewer


basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"

class CustomTableWidgetInvoice(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

    #     scroll_menu = QtWidgets.QScrollArea()
    #     scroll_menu.setWidgetResizable(True)
    #     scroll_widget = QtWidgets.QWidget(scroll_menu)
    #     scroll_menu.setWidget(scroll_widget)
    #     scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

    #     checkboxes = []

    #     select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
    #     if column_index in self.checkbox_states:
    #         select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
    #     else:
    #         select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
    #     scroll_layout.addWidget(select_all_checkbox)
    #     checkboxes.append(select_all_checkbox)

    #     unique_values = self.get_unique_values(column_index)
    #     filtered_values = self.get_filtered_values()

    #     for value in sorted(unique_values):
    #         checkbox = QtWidgets.QCheckBox(value)
    #         if select_all_checkbox.isChecked(): 
    #             checkbox.setCheckState(QtCore.Qt.CheckState(2))
    #         else:
    #             if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
    #                 checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
    #             elif filtered_values is None or value in filtered_values[column_index]:
    #                 checkbox.setCheckState(QtCore.Qt.CheckState(2))
    #             else:
    #                 checkbox.setCheckState(QtCore.Qt.CheckState(0))
    #         scroll_layout.addWidget(checkbox)
    #         checkboxes.append(checkbox)

    #     select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

    #     for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
    #         checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # # Action for drop down menu and adding scroll area as widget
    #     action_scroll_menu = QtWidgets.QWidgetAction(menu)
    #     action_scroll_menu.setDefaultWidget(scroll_menu)
    #     menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column_index == 3:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

# Function to sort column based on special datatypes
    def custom_sort(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class CustomTableWidgetRecord(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        self.sortByColumn(column_index, sortOrder)

# Function to sort column based on special datatypes
    def custom_sort(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class MultiLineDelegate(QtWidgets.QStyledItemDelegate):
    """
    A delegate class that allows editing of table cells using a multi-line QTextEdit widget. This delegate is useful for
    displaying and editing text in table views that require multi-line input.
    """
    def createEditor(self, parent, option, index):
        """
        Creates a QTextEdit widget for multi-line editing and centers the text within the editor.

        Args:
            parent: The parent widget for the editor.
            option: The style options for the item.
            index: The index of the item being edited.

        Returns:
            QTextEdit: The multi-line editor widget.
        """
        editor = QtWidgets.QTextEdit(parent)
        editor.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        return editor

    def setEditorData(self, editor, index):
        """
        Loads the data from the model into the QTextEdit editor for editing.

        Args:
            editor: The QTextEdit widget for editing.
            index: The index of the item in the model being edited.
        """
        value = index.data(QtCore.Qt.ItemDataRole.EditRole)
        if isinstance(value, str):
            editor.setPlainText(value)

    def setModelData(self, editor, model, index):
        """
        Saves the data from the QTextEdit editor back into the model.

        Args:
            editor: The QTextEdit widget used for editing.
            model: The data model where the edited data will be stored.
            index: The index of the item being edited.
        """
        model.setData(index, editor.toPlainText(), QtCore.Qt.ItemDataRole.EditRole)

    def updateEditorGeometry(self, editor, option, index):
        """
        Updates the geometry of the editor to match the size of the table cell.

        Args:
            editor: The QTextEdit widget used for editing.
            option: The style options for the item, including geometry.
            index: The index of the item being edited.
        """
        editor.setGeometry(option.rect)

class CustomProxyModel(QtCore.QSortFilterProxyModel): 
    """
    A custom proxy model that filters table rows based on expressions set for specific columns.

    Attributes:
        _filters (dict): A dictionary to store filter expressions for columns.
        header_names (dict): A dictionary to store header names for the table.

    Properties:
        filters: Getter for the current filter dictionary.

    """
    def __init__(self, parent=None):
        """
        Get the current filter expressions applied to columns.

        Returns:
            dict: Dictionary of column filters.
        """
        super().__init__(parent)
        self._filters = dict()
        self.header_names = {}

    @property
    def filters(self):
        """
        Get the current filter expressions applied to columns.

        Returns:
            dict: Dictionary of column filters.
        """
        return self._filters

    def setFilter(self, expresion, column, action_name=None, exact_match=False):
        """
        Apply a filter expression to a specific column, or remove it if necessary.

        Args:
            expresion (str): The filter expression.
            column (int): The index of the column to apply the filter to.
            action_name (str, optional): Name of the action, can be empty. Defaults to None.
            exact_match (bool, optional): If True, use exact matching for the filter. Defaults to False.
        """
        if expresion or expresion == '':
            if column in self.filters:
                if action_name or action_name == '':
                    self.filters[column].remove(expresion)
                else:
                    self.filters[column].append((expresion, exact_match))
            else:
                self.filters[column] = [(expresion, exact_match)]
        elif column in self.filters:
            if action_name or action_name == '':
                self.filters[column].remove(expresion)
                if not self.filters[column]:
                    del self.filters[column]
            else:
                del self.filters[column]
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        """
        Check if a row passes the filter criteria based on the column filters.

        Args:
            source_row (int): The row number in the source model.
            source_parent (QModelIndex): The parent index of the row.

        Returns:
            bool: True if the row meets the filter criteria, False otherwise.
        """
        for column, expresions in self.filters.items():
            text = self.sourceModel().index(source_row, column, source_parent).data()

            if isinstance(text, QtCore.QDate): #Check if filters are QDate. If True, convert to text
                text = text.toString("yyyy-MM-dd")

            match_found = False 

            for expresion, exact_match in expresions:
                if expresion == '':  # If expression is empty, match empty cells
                    if text == '':
                        break

                if exact_match:
                    if text in expresion:  # Verificar si `text` está en la lista `expresion`
                        match_found = True
                        break
                
                elif re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', expresion):
                    expresion = QtCore.QDate.fromString(expresion, "dd/MM/yyyy")
                    expresion = expresion.toString("yyyy-MM-dd")
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        match_found = True
                        break

                else:
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        match_found = True
                        break

            if not match_found:
                return False
        return True

class CustomProxyModel_relational(QtCore.QSortFilterProxyModel):
    """
    A custom proxy model that filters table rows based on expressions set for specific columns.

    Attributes:
        _filters (dict): A dictionary to store filter expressions for columns.
        header_names (dict): A dictionary to store header names for the table.

    Properties:
        filters: Getter for the current filter dictionary.

    """
    def __init__(self, column_display_mapping, parent=None):
        """
        Get the current filter expressions applied to columns.

        Args:
            column_display_mapping (dict): Dictionary to map origin column index to column index to be displayed.

        Returns:
            dict: Dictionary of column filters.
        """
        super().__init__(parent)
        self.column_display_mapping = column_display_mapping 
        self._filters = dict()
        self.header_names = {}

    @property
    def filters(self):
        """
        Get the current filter expressions applied to columns.

        Returns:
            dict: Dictionary of column filters.
        """
        return self._filters

    def setFilter(self, expresion, column, action_name=None, exact_match=False):
        """
        Apply a filter expression to a specific column, or remove it if necessary.

        Args:
            expresion (str): The filter expression.
            column (int): The index of the column to apply the filter to.
            action_name (str, optional): Name of the action, can be empty. Defaults to None.
            exact_match (bool, optional): If True, use exact matching for the filter. Defaults to False.
        """
        if expresion or expresion == '':
            if column in self.filters:
                if action_name or action_name == '':
                    self.filters[column].remove(expresion)
                else:
                    self.filters[column].append((expresion, exact_match))
            else:
                self.filters[column] = [(expresion, exact_match)]
        elif column in self.filters:
            if action_name or action_name == '':
                self.filters[column].remove(expresion)
                if not self.filters[column]:
                    del self.filters[column]
            else:
                del self.filters[column]
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        """
        Check if a row passes the filter criteria based on the column filters.

        Args:
            source_row (int): The row number in the source model.
            source_parent (QModelIndex): The parent index of the row.

        Returns:
            bool: True if the row meets the filter criteria, False otherwise.
        """
        for column, expresions in self.filters.items():
            text = self.sourceModel().index(source_row, column, source_parent).data()

            if isinstance(text, QtCore.QDate): #Check if filters are QDate. If True, convert to text
                text = text.toString("yyyy-MM-dd")

            match_found = False 

            for expresion, exact_match in expresions:
                if expresion == '':  # If expression is empty, match empty cells
                    if text == '':
                        break

                if exact_match:
                    if text in expresion:  # Verificar si `text` está en la lista `expresion`
                        match_found = True
                        break
                
                elif re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', expresion):
                    expresion = QtCore.QDate.fromString(expresion, "dd/MM/yyyy")
                    expresion = expresion.toString("yyyy-MM-dd")
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        match_found = True
                        break

                else:
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        match_found = True
                        break

            if not match_found:
                return False
        return True

    def data(self, index, role=Qt.ItemDataRole.DisplayRole):
        """
        Override the data method to handle relational columns correctly when using a QSortFilterProxyModel.

        Args:
            index (QModelIndex): The index in the source model.
            role (Qt.ItemDataRole): The role for which data is requested.

        Returns:
            QVariant: The data for the given role and index, with support for relational columns.
        """
        # Get the source model (assumed to be QSqlRelationalTableModel)
        source_model = self.sourceModel()

        if isinstance(source_model, QtSql.QSqlRelationalTableModel):
            # Check if the column has a relation
            relation = source_model.relation(index.column())
            if relation.isValid() and role == Qt.ItemDataRole.DisplayRole:
                # Get the related model for the column
                related_model = source_model.relationModel(index.column())

                # Get the related index using the value from the source model's column
                related_value = source_model.data(source_model.index(index.row(), index.column()), Qt.ItemDataRole.EditRole)

                # Get the column index to display from the mapping
                display_column_index = self.column_display_mapping.get(index.column())

                if display_column_index is not None:
                    # Look up the related display value using the mapped display_column_index
                    related_index = related_model.match(
                        related_model.index(0, 0),  # Match the first column (id column)
                        Qt.ItemDataRole.EditRole, 
                        related_value, 
                        1,  # Only one match expected
                        QtCore.Qt.MatchFlag.MatchExactly
                    )

                    if related_index:
                        return related_model.data(related_model.index(related_index[0].row(), display_column_index), role)

        # Fall back to the default behavior if it's not a relational column
        return super().data(index, role)

class EditableTableModel(QtSql.QSqlTableModel):
    """
    A custom SQL table model that supports editable columns, headers, and special flagging behavior based on user permissions.

    Signals:
        updateFailed (str): Signal emitted when an update to the model fails.
    """
    updateFailed = QtCore.pyqtSignal(str)

    def __init__(self, username, parent=None, column_range=None, database=None):
        """
        Initialize the model with user permissions and optional database and column range.

        Args:
            username (str): The username for permission-based actions.
            parent (QObject, optional): Parent object for the model. Defaults to None.
            column_range (list, optional): A list specifying the range of columns. Defaults to None.
        """
        super().__init__(parent, database)
        self.column_range = column_range
        self.username = username

    def setQuery(self, query):
        """
        Set the SQL query for the model.

        Args:
            query (QSqlQuery): The query to populate the model.
        """
        super().setQuery(query)

    def setAllColumnHeaders(self, headers):
        """
        Set headers for all columns in the model.

        Args:
            headers (list): A list of header names.
        """
        for column, header in enumerate(headers):
            self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIndividualColumnHeader(self, column, header):
        """
        Set the header for a specific column.

        Args:
            column (int): The column index.
            header (str): The header name.
        """
        self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIconColumnHeader(self, column, icon):
        """
        Set an icon in the header for a specific column.

        Args:
            column (int): The column index.
            icon (QIcon): The icon to display in the header.
        """
        self.setHeaderData(column, QtCore.Qt.Orientation.Horizontal, icon, Qt.ItemDataRole.DecorationRole)

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        """
        Retrieve the header data for a specific section of the model.

        Args:
            section (int): The section index (column or row).
            orientation (Qt.Orientation): The orientation (horizontal or vertical).
            role (Qt.ItemDataRole, optional): The role for the header data. Defaults to DisplayRole.

        Returns:
            QVariant: The header data for the specified section.
        """
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return super().headerData(section, orientation, role)
        return super().headerData(section, orientation, role)

    def flags(self, index):
        """
        Get the item flags for a given index, controlling editability and selection based on user permissions.

        Args:
            index (QModelIndex): The index of the item.

        Returns:
            Qt.ItemFlags: The flags for the specified item.
        """
        flags = super().flags(index)
        if index.column() in [0, 1, 7, 8]:
                flags &= ~Qt.ItemFlag.ItemIsEditable
                return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled
        else:
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable

    def getColumnHeaders(self, visible_columns):
        """
        Retrieve the headers for the specified visible columns.

        Args:
            visible_columns (list): List of column indices that are visible.

        Returns:
            list: A list of column headers for the visible columns.
        """
        column_headers = [self.headerData(col, Qt.Orientation.Horizontal) for col in visible_columns]
        return column_headers

class EditableTableModel_Invoice(QtSql.QSqlRelationalTableModel):
    """
    A custom SQL table model that supports editable columns, headers, and special flagging behavior based on user permissions.

    Signals:
        updateFailed (str): Signal emitted when an update to the model fails.
    """
    updateFailed = QtCore.pyqtSignal(str)

    def __init__(self, username, parent=None, column_range=None, database=None):
        """
        Initialize the model with user permissions and optional database and column range.

        Args:
            username (str): The username for permission-based actions.
            parent (QObject, optional): Parent object for the model. Defaults to None.
            column_range (list, optional): A list specifying the range of columns. Defaults to None.
        """
        super().__init__(parent, database)
        self.column_range = column_range
        self.username = username

    def setQuery(self, query):
        """
        Set the SQL query for the model.

        Args:
            query (QSqlQuery): The query to populate the model.
        """
        super().setQuery(query)

    def setAllColumnHeaders(self, headers):
        """
        Set headers for all columns in the model.

        Args:
            headers (list): A list of header names.
        """
        for column, header in enumerate(headers):
            self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIndividualColumnHeader(self, column, header):
        """
        Set the header for a specific column.

        Args:
            column (int): The column index.
            header (str): The header name.
        """
        self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIconColumnHeader(self, column, icon):
        """
        Set an icon in the header for a specific column.

        Args:
            column (int): The column index.
            icon (QIcon): The icon to display in the header.
        """
        self.setHeaderData(column, QtCore.Qt.Orientation.Horizontal, icon, Qt.ItemDataRole.DecorationRole)

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        """
        Retrieve the header data for a specific section of the model.

        Args:
            section (int): The section index (column or row).
            orientation (Qt.Orientation): The orientation (horizontal or vertical).
            role (Qt.ItemDataRole, optional): The role for the header data. Defaults to DisplayRole.

        Returns:
            QVariant: The header data for the specified section.
        """
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return super().headerData(section, orientation, role)
        return super().headerData(section, orientation, role)

    def flags(self, index):
        """
        Get the item flags for a given index, controlling editability and selection based on user permissions.

        Args:
            index (QModelIndex): The index of the item.

        Returns:
            Qt.ItemFlags: The flags for the specified item.
        """
        flags = super().flags(index)
        if index.column() in [0]:
                flags &= ~Qt.ItemFlag.ItemIsEditable
                return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled
        else:
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable

    def getColumnHeaders(self, visible_columns):
        """
        Retrieve the headers for the specified visible columns.

        Args:
            visible_columns (list): List of column indices that are visible.

        Returns:
            list: A list of column headers for the visible columns.
        """
        column_headers = [self.headerData(col, Qt.Orientation.Horizontal) for col in visible_columns]
        return column_headers

class ComboBoxDelegate_Relational(QtSql.QSqlRelationalDelegate):
    def __init__(self, column_to_display, parent=None):
        """
        Initializes the delegate with index column to be displayed in QComboBox

        Args:
            column_to_display (int): Index column to be displayed in QComboBox
            parent (QWidget, optional): Parent Widget. Defaults to None.
        """
        super().__init__(parent)
        self.column_to_display = column_to_display

    def createEditor(self, parent, option, index):
        """
        Create the editor for a relational column, typically a QComboBox.

        Args:
            parent (QWidget): The parent widget.
            option (QStyleOptionViewItem): The option for the item.
            index (QModelIndex): The index of the item being edited.

        Returns:
            QWidget: The editor widget, a QComboBox for relational columns.
        """
        combo_box = QtWidgets.QComboBox(parent)

        # Obtain model from index
        source_model = index.model().sourceModel()
        
        # Checking relational model
        if isinstance(source_model, QtSql.QSqlRelationalTableModel):
            # Establish relational model
            relation_model = source_model.relationModel(index.column())
            if relation_model:
                # Fill combobox
                for row in range(relation_model.rowCount()):
                    combo_box.addItem(relation_model.data(relation_model.index(row, self.column_to_display)),  # display name
                    relation_model.data(relation_model.index(row, 0)))  # Store ID

        return combo_box

    def setModelData(self, editor, model, index):
        """
        Set the model data from the editor.

        Args:
            editor (QWidget): The editor widget (QComboBox for relational columns).
            model (QAbstractItemModel): The model to update.
            index (QModelIndex): The index in the model to update.
        """
        # Get the source model from the proxy
        if isinstance(model, QtCore.QSortFilterProxyModel):
            source_index = model.mapToSource(index)  # Mapea al índice fuente
            source_model = model.sourceModel()
        else:
            source_index = index
            source_model = model

        selected_foreign_key = editor.currentData()

        # Update source model
        success = source_model.setData(source_index, selected_foreign_key, Qt.ItemDataRole.EditRole)

        # Confirm changes
        if isinstance(source_model, QtSql.QSqlRelationalTableModel):
            if source_model.submitAll():
                print("Changes saved to database")
            else:
                print("Failed to save changes to database")

        # Invalidate filter to update view
        if isinstance(model, QtCore.QSortFilterProxyModel):
            model.invalidateFilter()

class EditableComboBoxDelegate(QtWidgets.QStyledItemDelegate):
    """
    A delegate for editing combobox items in a view.

    Attributes:
        options (list): List of options to populate the combobox.
    """
    def __init__(self, parent=None, options=None):
        """
        Initializes the EditableComboBoxDelegate with the specified options.

        Args:
            parent (QtWidgets.QWidget, optional): Parent widget.
            options (list, optional): List of options for the combobox.
        """
        super().__init__(parent)
        self.options = options

    def createEditor(self, parent, option, index):
        """
        Creates an editor for the combobox.

        Args:
            parent (QtWidgets.QWidget): Parent widget.
            option (QtWidgets.QStyleOptionViewItem): Style options for the item.
            index (QtCore.QModelIndex): Index of the item in the model.

        Returns:
            QtWidgets.QComboBox: The created combobox editor.
        """
        editor = QtWidgets.QComboBox(parent)
        editor.setEditable(True)
        return editor

    def setEditorData(self, editor, index):
        """
        Sets the data for the combobox editor.

        Args:
            editor (QtWidgets.QComboBox): The combobox editor.
            index (QtCore.QModelIndex): Index of the item in the model.
        """
        text = index.data(Qt.ItemDataRole.DisplayRole)
        editor.addItems(self.options)
        editor.setEditText(text)

    def setModelData(self, editor, model, index):
        """
        Updates the model with the data from the combobox editor.

        Args:
            editor (QtWidgets.QComboBox): The combobox editor.
            model (QtGui.QAbstractItemModel): The model to update.
            index (QtCore.QModelIndex): Index of the item in the model.
        """
        model.setData(index, editor.currentText(), Qt.ItemDataRole.EditRole)

class Ui_InvoiceNew_Window(QtWidgets.QMainWindow):
    """
    Represents the main window for creating or editing invoices in the application.

    Attributes:
        db: The database connection used to interact with invoice data.
        username: The username of the currently logged-in user.
        numinvoice: The number of the invoice being created or edited.
        model: The data model for managing the editable table of invoice items.
        proxy: A proxy model used for sorting and filtering table data.
        checkbox_states: A dictionary that tracks the states of checkboxes in the UI.
        dict_valuesuniques: A dictionary storing unique values for filtering purposes.
        dict_ordersort: A dictionary storing the sorting order of columns.
        hiddencolumns: A list of columns that are hidden from view.
        action_checkbox_map: A mapping of checkboxes to specific actions in the UI.
        checkbox_filters: A dictionary storing filters applied based on checkbox selections.
    """
    def __init__(self, db, username=None, num_invoice=None):
        """
        Initializes the Ui_InvoiceNew_Window with the given database connection, username, and invoice number.

        Args:
            db: The database connection used to interact with the invoice data.
            username: The username of the currently logged-in user (optional).
            num_invoice: The number of the invoice being created or edited (optional).
        """
        super(Ui_InvoiceNew_Window, self).__init__()
        self.numinvoice = num_invoice
        self.db = db
        self.username = username
        self.model_records = EditableTableModel(self.username, database=db)
        self.model_invoice = EditableTableModel_Invoice(self.username, database=db)
        self.column_display_mapping = {4: 2, 11: 1}
        self.proxy_records = CustomProxyModel()
        self.proxy_invoices = CustomProxyModel_relational(self.column_display_mapping,self)
        self.checkbox_states = {}
        self.dict_valuesuniques = {}
        self.dict_ordersort = {}
        self.hiddencolumns = []
        self.action_checkbox_map = {}
        self.checkbox_filters = {}
        self.pdf_viewer = PDF_Viewer()
        # self.model_records.dataChanged.connect(self.saveChanges)
        self.setupUi(self)

    def closeEvent(self, event):
        """
        Handles the close event to clean up resources.

        Args:
            event (QtGui.QCloseEvent): The close event.
        """
        if self.model_records:
            self.model_records.clear()
        if self.model_invoice:
            self.model_invoice.clear()
        self.closeConnection()

    def closeConnection(self):
        """
        Closes the database connection and cleans up resources.
        """
        self.tableRecords.setModel(None)
        del self.model_records
        # self.tableInvoice.setModel(None)
        # del self.model_invoice
        if self.db:
            self.db.close()
            del self.db
            if QtSql.QSqlDatabase.contains("facturation"):
                QtSql.QSqlDatabase.removeDatabase("facturation")

    def setupUi(self, Invoice_Window):
        """
        Sets up the user interface for the Invoice_Window.

        Args:
            Invoice_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        Invoice_Window.setObjectName("Invoice_Window")
        Invoice_Window.resize(1476, 927)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Invoice_Window.setWindowIcon(icon)
        Invoice_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"QMenu::item:selected {background-color: rgb(3, 174, 236);}")
        self.centralwidget = QtWidgets.QWidget(parent=Invoice_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setStyleSheet(".QFrame {\n"
"    border: 2px solid black;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.layout_vertical = QtWidgets.QVBoxLayout()
        self.splitter = QtWidgets.QSplitter(QtCore.Qt.Orientation.Vertical)
        self.scrollArea = QtWidgets.QScrollArea(parent=self.frame)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_Date = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Date.setMinimumSize(QtCore.QSize(100, 25))
        self.label_Date.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Date.setFont(font)
        self.label_Date.setObjectName("label_Date")
        self.gridLayout_4.addWidget(self.label_Date, 1, 0, 1, 1)
        self.Date_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Date_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Date_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Date_Invoice.setFont(font)
        self.Date_Invoice.setObjectName("Date_Invoice")
        self.gridLayout_4.addWidget(self.Date_Invoice, 1, 1, 1, 1)
        self.label_Client = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Client.setMinimumSize(QtCore.QSize(95, 25))
        self.label_Client.setMaximumSize(QtCore.QSize(95, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Client.setFont(font)
        self.label_Client.setObjectName("label_Client")
        self.gridLayout_4.addWidget(self.label_Client, 1, 2, 1, 1)
        self.Client_Invoice = QtWidgets.QComboBox(parent=self.scrollAreaWidgetContents)
        self.Client_Invoice.setMinimumSize(QtCore.QSize(300, 25))
        self.Client_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Client_Invoice.setFont(font)
        self.Client_Invoice.setObjectName("Client_Invoice")
        self.gridLayout_4.addWidget(self.Client_Invoice, 1, 3, 1, 1)
        self.label_NumInvoice = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_NumInvoice.setMinimumSize(QtCore.QSize(100, 25))
        self.label_NumInvoice.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumInvoice.setFont(font)
        self.label_NumInvoice.setObjectName("label_NumInvoice")
        self.gridLayout_4.addWidget(self.label_NumInvoice, 1, 4, 1, 1)
        self.InvoiceNumber_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.InvoiceNumber_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.InvoiceNumber_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.InvoiceNumber_Invoice.setFont(font)
        self.InvoiceNumber_Invoice.setObjectName("InvoiceNumber_Invoice")
        self.gridLayout_4.addWidget(self.InvoiceNumber_Invoice, 1, 5, 1, 1)
        self.label_DelivNote = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_DelivNote.setMinimumSize(QtCore.QSize(150, 25))
        self.label_DelivNote.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DelivNote.setFont(font)
        self.label_DelivNote.setObjectName("label_DelivNote")
        self.gridLayout_4.addWidget(self.label_DelivNote, 1, 6, 1, 2)
        self.DelivNote_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.DelivNote_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.DelivNote_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivNote_Invoice.setFont(font)
        self.DelivNote_Invoice.setObjectName("DelivNote_Invoice")
        self.gridLayout_4.addWidget(self.DelivNote_Invoice, 1, 8, 1, 1)
        self.label_TheirRef = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_TheirRef.setMinimumSize(QtCore.QSize(50, 25))
        self.label_TheirRef.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_TheirRef.setFont(font)
        self.label_TheirRef.setObjectName("label_TheirRef")
        self.gridLayout_4.addWidget(self.label_TheirRef, 2, 0, 1, 1)
        self.TheirRef_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TheirRef_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.TheirRef_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TheirRef_Invoice.setFont(font)
        self.TheirRef_Invoice.setObjectName("TheirRef_Invoice")
        self.gridLayout_4.addWidget(self.TheirRef_Invoice, 2, 1, 1, 1)
        self.label_Destination = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Destination.setMinimumSize(QtCore.QSize(100, 25))
        self.label_Destination.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Destination.setFont(font)
        self.label_Destination.setObjectName("label_Destination")
        self.gridLayout_4.addWidget(self.label_Destination, 2, 2, 1, 1)
        self.Destination_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Destination_Invoice.setFont(font)
        self.Destination_Invoice.setObjectName("Destination_Invoice")
        self.gridLayout_4.addWidget(self.Destination_Invoice, 2, 3, 1, 1)
        self.label_Comments = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Comments.setMinimumSize(QtCore.QSize(95, 25))
        self.label_Comments.setMaximumSize(QtCore.QSize(95, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Comments.setFont(font)
        self.label_Comments.setObjectName("label_Comments")
        self.gridLayout_4.addWidget(self.label_Comments, 2, 4, 1, 1)
        self.Comment_Invoice = QtWidgets.QTextEdit(parent=self.scrollAreaWidgetContents)
        self.Comment_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.Comment_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Comment_Invoice.setFont(font)
        self.Comment_Invoice.setObjectName("Comment_Invoice")
        self.gridLayout_4.addWidget(self.Comment_Invoice, 2, 5, 1, 4)
        self.label_OurRef = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_OurRef.setMinimumSize(QtCore.QSize(50, 25))
        self.label_OurRef.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_OurRef.setFont(font)
        self.label_OurRef.setObjectName("label_OurRef")
        self.gridLayout_4.addWidget(self.label_OurRef, 3, 0, 1, 1)
        self.OurRef_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.OurRef_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.OurRef_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        self.OurRef_Invoice.setObjectName("OurRef_Invoice")
        self.gridLayout_4.addWidget(self.OurRef_Invoice, 3, 1, 1, 1)
        self.label_Transport = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Transport.setMinimumSize(QtCore.QSize(150, 0))
        self.label_Transport.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Transport.setFont(font)
        self.label_Transport.setObjectName("label_Transport")
        self.gridLayout_4.addWidget(self.label_Transport, 3, 2, 1, 1)
        self.Transport_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Transport_Invoice.setFont(font)
        self.Transport_Invoice.setObjectName("Transport_Invoice")
        self.gridLayout_4.addWidget(self.Transport_Invoice, 3, 3, 1, 1)
        self.label_Application = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Application.setMinimumSize(QtCore.QSize(0, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Application.setFont(font)
        self.label_Application.setObjectName("label_Application")
        self.gridLayout_4.addWidget(self.label_Application, 3, 4, 1, 1)
        self.Application_Invoice = QtWidgets.QComboBox(parent=self.scrollAreaWidgetContents)
        self.Application_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Application_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Application_Invoice.setFont(font)
        self.Application_Invoice.setObjectName("Application_Invoice")
        self.gridLayout_4.addWidget(self.Application_Invoice, 3, 5, 1, 1)
        self.label_DestCountry = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_DestCountry.setMinimumSize(QtCore.QSize(150, 25))
        self.label_DestCountry.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DestCountry.setFont(font)
        self.label_DestCountry.setObjectName("label_DestCountry")
        self.gridLayout_4.addWidget(self.label_DestCountry, 3, 6, 1, 2)
        self.DestCountry_Invoice = QtWidgets.QComboBox(parent=self.scrollAreaWidgetContents)
        self.DestCountry_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.DestCountry_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DestCountry_Invoice.setFont(font)
        self.DestCountry_Invoice.setObjectName("DestCountry_Invoice")
        self.gridLayout_4.addWidget(self.DestCountry_Invoice, 3, 8, 1, 1)
        self.label_ClientGroup = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ClientGroup.setFont(font)
        self.label_ClientGroup.setObjectName("label_ClientGroup")
        self.label_ClientGroup.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_4.addWidget(self.label_ClientGroup, 3, 9, 1, 1)
        self.label_Details = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Details.setMinimumSize(QtCore.QSize(95, 25))
        self.label_Details.setMaximumSize(QtCore.QSize(95, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Details.setFont(font)
        self.label_Details.setObjectName("label_Details")
        self.gridLayout_4.addWidget(self.label_Details, 4, 0, 1, 1)
        self.Button_AddReg = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_AddReg.setMinimumSize(QtCore.QSize(150, 30))
        self.Button_AddReg.setMaximumSize(QtCore.QSize(150, 30))
        self.Button_AddReg.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_AddReg.setAutoDefault(True)
        self.Button_AddReg.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_AddReg.setObjectName("Button_AddReg")
        self.Button_AddReg.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_AddReg, 4, 1, 1, 1)
        self.Button_ImportReg = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_ImportReg.setMinimumSize(QtCore.QSize(150, 30))
        self.Button_ImportReg.setMaximumSize(QtCore.QSize(150, 30))
        self.Button_ImportReg.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_ImportReg.setAutoDefault(True)
        self.Button_ImportReg.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_ImportReg.setObjectName("Button_ImportReg")
        self.Button_ImportReg.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_ImportReg, 4, 2, 1, 1)
        self.AgInterm = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.AgInterm.setMinimumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.AgInterm.setFont(font)
        self.AgInterm.setReadOnly(True)
        self.AgInterm.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.AgInterm.setObjectName("AgInterm")
        self.gridLayout_4.addWidget(self.AgInterm, 4, 3, 1, 1)
        self.AgIntermOk = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.AgIntermOk.setMinimumSize(QtCore.QSize(150, 25))
        self.AgIntermOk.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.AgIntermOk.setFont(font)
        self.AgIntermOk.setReadOnly(True)
        self.AgIntermOk.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.AgIntermOk.setObjectName("AgIntermOk")
        self.gridLayout_4.addWidget(self.AgIntermOk, 4, 4, 1, 1)
        self.AgIntermState = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.AgIntermState.setMinimumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.AgIntermState.setFont(font)
        self.AgIntermState.setReadOnly(True)
        self.AgIntermState.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.AgIntermState.setObjectName("AgIntermState")
        self.gridLayout_4.addWidget(self.AgIntermState, 4, 5, 1, 1)
        self.label_ClientGroup = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_ClientGroup.setFont(font)
        self.label_ClientGroup.setObjectName("label_ClientGroup")
        # self.label_ClientGroup.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_4.addWidget(self.label_ClientGroup, 4, 6, 1, 1)
        self.Button_InsertInvoice = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_InsertInvoice.setMinimumSize(QtCore.QSize(0, 30))
        self.Button_InsertInvoice.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.Button_InsertInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_InsertInvoice.setAutoDefault(True)
        self.Button_InsertInvoice.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_InsertInvoice.setObjectName("Button_InsertInvoice")
        self.Button_InsertInvoice.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_InsertInvoice, 4, 8, 1, 2)
        self.tableRecords = QtWidgets.QTableView(parent=self.scrollAreaWidgetContents)
        self.tableRecords.setObjectName("tableRecords")
        self.tableRecords.setMinimumSize(QtCore.QSize(16777215, 350))
        # self.tableRecords.setMaximumSize(QtCore.QSize(16777215, 250))
        self.gridLayout_4.addWidget(self.tableRecords, 8, 0, 1, 10)
        self.label_Qty_Elements = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Qty_Elements.setMinimumSize(QtCore.QSize(0, 25))
        self.label_Qty_Elements.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Qty_Elements.setFont(font)
        self.label_Qty_Elements.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_Qty_Elements.setObjectName("label_Qty_Elements")
        self.gridLayout_4.addWidget(self.label_Qty_Elements, 9, 0, 1, 1)
        self.Qty_Elements = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Qty_Elements.setMinimumSize(QtCore.QSize(0, 25))
        self.Qty_Elements.setMaximumSize(QtCore.QSize(150, 25))
        self.Qty_Elements.setReadOnly(True)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Qty_Elements.setFont(font)
        self.Qty_Elements.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
        self.Qty_Elements.setObjectName("Qty_Elements")
        self.gridLayout_4.addWidget(self.Qty_Elements, 9, 1, 1, 1)
        self.label_IDInvoice = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_IDInvoice.setMinimumSize(QtCore.QSize(150, 25))
        self.label_IDInvoice.setMaximumSize(QtCore.QSize(150, 16777215))
        self.label_IDInvoice.setObjectName("label_IDInvoice")
        self.label_IDInvoice.setText('labelID')
        self.label_IDInvoice.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_4.addWidget(self.label_IDInvoice, 9, 2, 1, 1)
        self.label_Total = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Total.setMinimumSize(QtCore.QSize(150, 25))
        self.label_Total.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Total.setFont(font)
        self.label_Total.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
        self.label_Total.setObjectName("label_Total")
        self.gridLayout_4.addWidget(self.label_Total, 9, 5, 1, 1)
        self.TotalEur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TotalEur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.TotalEur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TotalEur_Invoice.setFont(font)
        self.TotalEur_Invoice.setReadOnly(True)
        self.TotalEur_Invoice.setObjectName("TotalEur_Invoice")
        self.gridLayout_4.addWidget(self.TotalEur_Invoice, 9, 6, 1, 1)
        self.label_1 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_1.setMinimumSize(QtCore.QSize(10, 25))
        self.label_1.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_1.setFont(font)
        self.label_1.setObjectName("label_1")
        self.gridLayout_4.addWidget(self.label_1, 9, 7, 1, 1)
        self.TotalDollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TotalDollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.TotalDollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TotalDollar_Invoice.setFont(font)
        self.TotalDollar_Invoice.setReadOnly(True)
        self.TotalDollar_Invoice.setObjectName("TotalDollar_Invoice")
        self.gridLayout_4.addWidget(self.TotalDollar_Invoice, 9, 8, 1, 1)
        self.label_2 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_2.setMinimumSize(QtCore.QSize(10, 25))
        self.label_2.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout_4.addWidget(self.label_2, 9, 9, 1, 1)
        self.label_GrossWeight = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_GrossWeight.setMinimumSize(QtCore.QSize(0, 25))
        self.label_GrossWeight.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_GrossWeight.setFont(font)
        self.label_GrossWeight.setObjectName("label_GrossWeight")
        self.gridLayout_4.addWidget(self.label_GrossWeight, 10, 0, 1, 1)
        self.GrossWeight_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.GrossWeight_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.GrossWeight_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.GrossWeight_Invoice.setFont(font)
        self.GrossWeight_Invoice.setObjectName("GrossWeight_Invoice")
        self.gridLayout_4.addWidget(self.GrossWeight_Invoice, 10, 1, 1, 2)
        self.TxtCon1_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon1_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon1_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon1_Invoice.setFont(font)
        self.TxtCon1_Invoice.setObjectName("TxtCon1_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon1_Invoice, 10, 3, 1, 3)
        self.Con1Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con1Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con1Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con1Eur_Invoice.setFont(font)
        self.Con1Eur_Invoice.setObjectName("Con1Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con1Eur_Invoice, 10, 6, 1, 1)
        self.label_3 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_3.setMinimumSize(QtCore.QSize(10, 25))
        self.label_3.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout_4.addWidget(self.label_3, 10, 7, 1, 1)
        self.Con1Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con1Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con1Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con1Dollar_Invoice.setFont(font)
        self.Con1Dollar_Invoice.setObjectName("Con1Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con1Dollar_Invoice, 10, 8, 1, 1)
        self.label_4 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_4.setMinimumSize(QtCore.QSize(10, 25))
        self.label_4.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout_4.addWidget(self.label_4, 10, 9, 1, 1)
        self.label_NetWeight = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_NetWeight.setMinimumSize(QtCore.QSize(0, 25))
        self.label_NetWeight.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NetWeight.setFont(font)
        self.label_NetWeight.setObjectName("label_NetWeight")
        self.gridLayout_4.addWidget(self.label_NetWeight, 11, 0, 1, 1)
        self.NetWeight_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.NetWeight_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.NetWeight_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.NetWeight_Invoice.setFont(font)
        self.NetWeight_Invoice.setObjectName("NetWeight_Invoice")
        self.gridLayout_4.addWidget(self.NetWeight_Invoice, 11, 1, 1, 2)
        self.TxtCon2_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon2_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon2_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon2_Invoice.setFont(font)
        self.TxtCon2_Invoice.setObjectName("TxtCon2_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon2_Invoice, 11, 3, 1, 3)
        self.Con2Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con2Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con2Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con2Eur_Invoice.setFont(font)
        self.Con2Eur_Invoice.setObjectName("Con2Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con2Eur_Invoice, 11, 6, 1, 1)
        self.label_5 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_5.setMinimumSize(QtCore.QSize(10, 25))
        self.label_5.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.gridLayout_4.addWidget(self.label_5, 11, 7, 1, 1)
        self.Con2Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con2Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con2Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con2Dollar_Invoice.setFont(font)
        self.Con2Dollar_Invoice.setObjectName("Con2Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con2Dollar_Invoice, 11, 8, 1, 1)
        self.label_6 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_6.setMinimumSize(QtCore.QSize(10, 25))
        self.label_6.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_2")
        self.gridLayout_4.addWidget(self.label_6, 11, 9, 1, 1)
        self.label_Dimensions = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Dimensions.setMinimumSize(QtCore.QSize(0, 25))
        self.label_Dimensions.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Dimensions.setFont(font)
        self.label_Dimensions.setObjectName("label_Dimensions")
        self.gridLayout_4.addWidget(self.label_Dimensions, 12, 0, 1, 1)
        self.Dimensions_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Dimensions_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.Dimensions_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Dimensions_Invoice.setFont(font)
        self.Dimensions_Invoice.setObjectName("Dimensions_Invoice")
        self.gridLayout_4.addWidget(self.Dimensions_Invoice, 12, 1, 1, 2)
        self.TxtCon3_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon3_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon3_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon3_Invoice.setFont(font)
        self.TxtCon3_Invoice.setObjectName("TxtCon3_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon3_Invoice, 12, 3, 1, 3)
        self.Con3Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con3Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con3Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con3Eur_Invoice.setFont(font)
        self.Con3Eur_Invoice.setObjectName("Con3Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con3Eur_Invoice, 12, 6, 1, 1)
        self.label_7 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_7.setMinimumSize(QtCore.QSize(10, 25))
        self.label_7.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.gridLayout_4.addWidget(self.label_7, 12, 7, 1, 1)
        self.Con3Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con3Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con3Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con3Dollar_Invoice.setFont(font)
        self.Con3Dollar_Invoice.setObjectName("Con3Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con3Dollar_Invoice, 12, 8, 1, 1)
        self.label_8 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_8.setMinimumSize(QtCore.QSize(10, 25))
        self.label_8.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout_4.addWidget(self.label_8, 12, 9, 1, 1)
        self.label_MercType = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_MercType.setMinimumSize(QtCore.QSize(0, 25))
        self.label_MercType.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_MercType.setFont(font)
        self.label_MercType.setObjectName("label_MercType")
        self.gridLayout_4.addWidget(self.label_MercType, 13, 0, 1, 1)
        self.MercType_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.MercType_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.MercType_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.MercType_Invoice.setFont(font)
        self.MercType_Invoice.setObjectName("MercType_Invoice")
        self.gridLayout_4.addWidget(self.MercType_Invoice, 13, 1, 1, 2)
        self.TxtCon4_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon4_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon4_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon4_Invoice.setFont(font)
        self.TxtCon4_Invoice.setObjectName("TxtCon4_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon4_Invoice, 13, 3, 1, 3)
        self.Con4Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con4Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con4Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con4Eur_Invoice.setFont(font)
        self.Con4Eur_Invoice.setObjectName("Con4Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con4Eur_Invoice, 13, 6, 1, 1)
        self.label_9 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_9.setMinimumSize(QtCore.QSize(10, 25))
        self.label_9.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.gridLayout_4.addWidget(self.label_9, 13, 7, 1, 1)
        self.Con4Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con4Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con4Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con4Dollar_Invoice.setFont(font)
        self.Con4Dollar_Invoice.setObjectName("Con4Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con4Dollar_Invoice, 13, 8, 1, 1)
        self.label_10 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_10.setMinimumSize(QtCore.QSize(10, 25))
        self.label_10.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.gridLayout_4.addWidget(self.label_10, 13, 9, 1, 1)
        self.TxtCon5_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon5_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon5_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon5_Invoice.setFont(font)
        self.TxtCon5_Invoice.setObjectName("TxtCon5_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon5_Invoice, 14, 3, 1, 3)
        self.Con5Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con5Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con5Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con5Eur_Invoice.setFont(font)
        self.Con5Eur_Invoice.setObjectName("Con5Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con5Eur_Invoice, 14, 6, 1, 1)
        self.label_11 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_11.setMinimumSize(QtCore.QSize(10, 25))
        self.label_11.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.gridLayout_4.addWidget(self.label_11, 14, 7, 1, 1)
        self.Con5Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con5Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con5Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con5Dollar_Invoice.setFont(font)
        self.Con5Dollar_Invoice.setObjectName("Con5Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con5Dollar_Invoice, 14, 8, 1, 1)
        self.label_12 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_12.setMinimumSize(QtCore.QSize(10, 25))
        self.label_12.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.gridLayout_4.addWidget(self.label_12, 14, 9, 1, 1)
        self.label_ValCot = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_ValCot.setMinimumSize(QtCore.QSize(0, 25))
        self.label_ValCot.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ValCot.setFont(font)
        self.label_ValCot.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_ValCot.setObjectName("label_ValCot")
        self.gridLayout_4.addWidget(self.label_ValCot, 15, 0, 1, 1)
        self.ValCotDollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.ValCotDollar_Invoice.setMinimumSize(QtCore.QSize(100, 25))
        self.ValCotDollar_Invoice.setMaximumSize(QtCore.QSize(100, 25))
        self.ValCotDollar_Invoice.setObjectName("ValCotDollar_Invoice")
        self.gridLayout_4.addWidget(self.ValCotDollar_Invoice, 15, 1, 1, 1)
        self.label_14 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_14.setMinimumSize(QtCore.QSize(0, 25))
        self.label_14.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.gridLayout_4.addWidget(self.label_14, 15, 2, 1, 1)
        self.AditData1_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.AditData1_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.AditData1_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AditData1_Invoice.setFont(font)
        self.AditData1_Invoice.setObjectName("AditData1_Invoice")
        self.gridLayout_4.addWidget(self.AditData1_Invoice, 15, 3, 1, 3)
        self.label_TaxBase = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_TaxBase.setMinimumSize(QtCore.QSize(150, 25))
        self.label_TaxBase.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_TaxBase.setFont(font)
        self.label_TaxBase.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_TaxBase.setObjectName("label_TaxBase")
        self.gridLayout_4.addWidget(self.label_TaxBase, 15, 6, 1, 1)
        self.TaxBase_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TaxBase_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.TaxBase_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TaxBase_Invoice.setFont(font)
        self.TaxBase_Invoice.setReadOnly(True)
        self.TaxBase_Invoice.setObjectName("TaxBase_Invoice")
        self.gridLayout_4.addWidget(self.TaxBase_Invoice, 15, 7, 1, 2)
        self.label_13 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_13.setMinimumSize(QtCore.QSize(10, 25))
        self.label_13.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.gridLayout_4.addWidget(self.label_13, 15, 9, 1, 1)
        self.label_PayDate = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_PayDate.setMinimumSize(QtCore.QSize(0, 25))
        self.label_PayDate.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_PayDate.setFont(font)
        self.label_PayDate.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_PayDate.setObjectName("label_PayDate")
        self.gridLayout_4.addWidget(self.label_PayDate, 16, 0, 1, 1)
        self.PayDate_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.PayDate_Invoice.setMinimumSize(QtCore.QSize(100, 25))
        self.PayDate_Invoice.setMaximumSize(QtCore.QSize(100, 25))
        self.PayDate_Invoice.setObjectName("PayDate_Invoice")
        self.gridLayout_4.addWidget(self.PayDate_Invoice, 16, 1, 1, 1)
        self.AditData2_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.AditData2_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.AditData2_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AditData2_Invoice.setFont(font)
        self.AditData2_Invoice.setObjectName("AditData2_Invoice")
        self.gridLayout_4.addWidget(self.AditData2_Invoice, 16, 3, 1, 3)
        self.label_IVA = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_IVA.setMinimumSize(QtCore.QSize(150, 25))
        self.label_IVA.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_IVA.setFont(font)
        self.label_IVA.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_IVA.setObjectName("label_IVA")
        self.gridLayout_4.addWidget(self.label_IVA, 16, 6, 1, 1)
        self.IVACL_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.IVACL_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.IVACL_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.IVACL_Invoice.setFont(font)
        self.IVACL_Invoice.setObjectName("IVACL_Invoice")
        self.gridLayout_4.addWidget(self.IVACL_Invoice, 16, 7, 1, 2)
        self.Button_FactEuro = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_FactEuro.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_FactEuro.setAutoDefault(True)
        self.Button_FactEuro.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_FactEuro.setObjectName("Button_FactEuro")
        self.Button_FactEuro.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_FactEuro, 17, 1, 1, 1)
        self.Button_FactDollar = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_FactDollar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_FactDollar.setAutoDefault(True)
        self.Button_FactDollar.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_FactDollar.setObjectName("Button_FactDollar")
        self.Button_FactDollar.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_FactDollar, 18, 1, 1, 1)
        self.Button_DelivNote = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_DelivNote.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_DelivNote.setAutoDefault(True)
        self.Button_DelivNote.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_DelivNote.setObjectName("Button_DelivNote")
        self.Button_DelivNote.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_DelivNote, 19, 1, 1, 1)
        self.frame_2 = QtWidgets.QFrame(parent=self.scrollAreaWidgetContents)
        self.frame_2.setStyleSheet(".QFrame {\n"
"    border: 1px solid black;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_ClAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_ClAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_ClAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ClAlb.setFont(font)
        self.label_ClAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_ClAlb.setObjectName("label_ClAlb")
        self.gridLayout_3.addWidget(self.label_ClAlb, 0, 0, 1, 1)
        self.ClAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.ClAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.ClAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.ClAlb_Invoice.setFont(font)
        self.ClAlb_Invoice.setObjectName("ClAlb_Invoice")
        self.gridLayout_3.addWidget(self.ClAlb_Invoice, 0, 1, 1, 5)
        self.label_DateAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_DateAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_DateAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DateAlb.setFont(font)
        self.label_DateAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_DateAlb.setObjectName("label_DateAlb")
        self.gridLayout_3.addWidget(self.label_DateAlb, 2, 0, 1, 1)
        self.DateAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.DateAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.DateAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DateAlb_Invoice.setFont(font)
        self.DateAlb_Invoice.setObjectName("DateAlb_Invoice")
        self.gridLayout_3.addWidget(self.DateAlb_Invoice, 2, 1, 1, 1)
        self.label_AtteAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_AtteAlb.setMinimumSize(QtCore.QSize(50, 25))
        self.label_AtteAlb.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_AtteAlb.setFont(font)
        self.label_AtteAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_AtteAlb.setObjectName("label_AtteAlb")
        self.gridLayout_3.addWidget(self.label_AtteAlb, 2, 2, 1, 1)
        self.AtteAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.AtteAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.AtteAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AtteAlb_Invoice.setFont(font)
        self.AtteAlb_Invoice.setObjectName("AtteAlb_Invoice")
        self.gridLayout_3.addWidget(self.AtteAlb_Invoice, 2, 3, 1, 1)
        self.label_DestAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_DestAlb.setMinimumSize(QtCore.QSize(50, 25))
        self.label_DestAlb.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DestAlb.setFont(font)
        self.label_DestAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_DestAlb.setObjectName("label_DestAlb")
        self.gridLayout_3.addWidget(self.label_DestAlb, 2, 4, 1, 1)
        self.DestAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.DestAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.DestAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DestAlb_Invoice.setFont(font)
        self.DestAlb_Invoice.setObjectName("DestAlb_Invoice")
        self.gridLayout_3.addWidget(self.DestAlb_Invoice, 2, 5, 1, 1)
        self.label_AddressAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_AddressAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_AddressAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_AddressAlb.setFont(font)
        self.label_AddressAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_AddressAlb.setObjectName("label_AddressAlb")
        self.gridLayout_3.addWidget(self.label_AddressAlb, 4, 0, 1, 1)
        self.AddressAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.AddressAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.AddressAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AddressAlb_Invoice.setFont(font)
        self.AddressAlb_Invoice.setObjectName("AddressAlb_Invoice")
        self.gridLayout_3.addWidget(self.AddressAlb_Invoice, 4, 1, 1, 3)
        self.label_ZCAlb = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ZCAlb.setFont(font)
        self.label_ZCAlb.setObjectName("label_ZCAlb")
        self.gridLayout_3.addWidget(self.label_ZCAlb, 4, 4, 1, 1)
        self.ZCAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.ZCAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.ZCAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ZCAlb_Invoice.setFont(font)
        self.ZCAlb_Invoice.setObjectName("ZCAlb_Invoice")
        self.gridLayout_3.addWidget(self.ZCAlb_Invoice, 4, 5, 1, 1)
        self.label_CityAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_CityAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_CityAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_CityAlb.setFont(font)
        self.label_CityAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_CityAlb.setObjectName("label_CityAlb")
        self.gridLayout_3.addWidget(self.label_CityAlb, 5, 0, 1, 1)
        self.CityAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.CityAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.CityAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CityAlb_Invoice.setFont(font)
        self.CityAlb_Invoice.setObjectName("CityAlb_Invoice")
        self.gridLayout_3.addWidget(self.CityAlb_Invoice, 5, 1, 1, 1)
        self.label_ProvinceAlb = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ProvinceAlb.setFont(font)
        self.label_ProvinceAlb.setObjectName("label_ProvinceAlb")
        self.gridLayout_3.addWidget(self.label_ProvinceAlb, 5, 2, 1, 1)
        self.ProvinceAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.ProvinceAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.ProvinceAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ProvinceAlb_Invoice.setFont(font)
        self.ProvinceAlb_Invoice.setObjectName("ProvinceAlb_Invoice")
        self.gridLayout_3.addWidget(self.ProvinceAlb_Invoice, 5, 3, 1, 1)
        self.label_CountryAlb = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_CountryAlb.setFont(font)
        self.label_CountryAlb.setObjectName("label_CountryAlb")
        self.gridLayout_3.addWidget(self.label_CountryAlb, 5, 4, 1, 1)
        self.CountryAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.CountryAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.CountryAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CountryAlb_Invoice.setFont(font)
        self.CountryAlb_Invoice.setObjectName("CountryAlb_Invoice")
        self.gridLayout_3.addWidget(self.CountryAlb_Invoice, 5, 5, 1, 1)
        self.label_ObsAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_ObsAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_ObsAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ObsAlb.setFont(font)
        self.label_ObsAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_ObsAlb.setObjectName("label_ObsAlb")
        self.gridLayout_3.addWidget(self.label_ObsAlb, 6, 0, 1, 1)
        self.ObsAlb_Invoice = QtWidgets.QTextEdit(parent=self.frame_2)
        self.ObsAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.ObsAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ObsAlb_Invoice.setFont(font)
        self.ObsAlb_Invoice.setObjectName("ObsAlb_Invoice")
        self.gridLayout_3.addWidget(self.ObsAlb_Invoice, 6, 1, 1, 5)
        self.gridLayout_4.addWidget(self.frame_2, 17, 3, 3, 7)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.splitter.addWidget(self.scrollArea)
        # self.tableInvoice = QtWidgets.QTableView(parent=self.frame)
        self.tableInvoice = CustomTableWidgetInvoice()
        self.tableInvoice.setObjectName("tableInvoice")
        self.tableInvoice.setMinimumSize(QtCore.QSize(16777215, 250))
        # self.tableInvoice.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.tableInvoice.setColumnCount(15)
        for i in range(15):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableInvoice.setHorizontalHeaderItem(i, item)
        self.tableInvoice.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.splitter.addWidget(self.tableInvoice)
        self.layout_vertical.addWidget(self.splitter)
        self.gridLayout_bottom = QtWidgets.QGridLayout()
        self.gridLayout_bottom.setObjectName("gridLayout_bottom")
        self.Button_New= QtWidgets.QPushButton(parent=self.frame)
        self.Button_New.setMinimumSize(QtCore.QSize(30, 25))
        self.Button_New.setMaximumSize(QtCore.QSize(30, 25))
        self.Button_New.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_New.setAutoDefault(True)
        self.Button_New.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_New.setObjectName("Button_New")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Add_White.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_New.setIcon(icon3)
        self.Button_New.setIconSize(QtCore.QSize(20, 20))
        self.Button_New.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_bottom.addWidget(self.Button_New, 0, 0, 1, 1)
        self.Button_Up= QtWidgets.QPushButton(parent=self.frame)
        self.Button_Up.setMinimumSize(QtCore.QSize(30, 25))
        self.Button_Up.setMaximumSize(QtCore.QSize(30, 25))
        self.Button_Up.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Up.setAutoDefault(True)
        self.Button_Up.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Up.setObjectName("Button_Up")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Arrow_Up.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Up.setIcon(icon3)
        self.Button_Up.setIconSize(QtCore.QSize(20, 20))
        self.Button_Up.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_bottom.addWidget(self.Button_Up, 0, 1, 1, 1)
        self.Button_Down= QtWidgets.QPushButton(parent=self.frame)
        self.Button_Down.setMinimumSize(QtCore.QSize(30, 25))
        self.Button_Down.setMaximumSize(QtCore.QSize(30, 25))
        self.Button_Down.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Down.setAutoDefault(True)
        self.Button_Down.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Down.setObjectName("Button_Down")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Arrow_Down.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Down.setIcon(icon3)
        self.Button_Down.setIconSize(QtCore.QSize(20, 20))
        self.Button_Down.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_bottom.addWidget(self.Button_Down, 0, 2, 1, 1)

        self.Button_SearchInvoice= QtWidgets.QPushButton(parent=self.frame)
        self.Button_SearchInvoice.setMinimumSize(QtCore.QSize(30, 25))
        self.Button_SearchInvoice.setMaximumSize(QtCore.QSize(30, 25))
        self.Button_SearchInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_SearchInvoice.setAutoDefault(True)
        self.Button_SearchInvoice.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_SearchInvoice.setObjectName("Button_SearchInvoice")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_SearchInvoice.setIcon(icon4)
        self.Button_SearchInvoice.setIconSize(QtCore.QSize(20, 20))
        self.Button_SearchInvoice.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_bottom.addWidget(self.Button_SearchInvoice, 0, 3, 1, 1)
#         self.label_filter = QtWidgets.QLabel(parent=self.frame)
#         self.label_filter.setMinimumSize(QtCore.QSize(50, 25))
#         self.label_filter.setMaximumSize(QtCore.QSize(50, 25))
#         font = QtGui.QFont()
#         font.setPointSize(11)
#         font.setBold(True)
#         self.label_filter.setFont(font)
#         self.label_filter.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
#         self.label_filter.setObjectName("label_filter")
#         self.gridLayout_bottom.addWidget(self.label_filter, 0, 3, 1, 1)
#         self.Filter_Invoice = QtWidgets.QLineEdit(parent=self.frame)
#         self.Filter_Invoice.setMinimumSize(QtCore.QSize(100, 25))
#         self.Filter_Invoice.setMaximumSize(QtCore.QSize(100, 25))
#         self.Filter_Invoice.setObjectName("Filter_Invoice")
#         self.gridLayout_bottom.addWidget(self.Filter_Invoice, 0, 4, 1, 1)
#         self.Button_AcceptFilter = QtWidgets.QPushButton(parent=self.frame)
#         self.Button_AcceptFilter.setMinimumSize(QtCore.QSize(30, 25))
#         self.Button_AcceptFilter.setMaximumSize(QtCore.QSize(30, 25))
#         self.Button_AcceptFilter.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
#         self.Button_AcceptFilter.setAutoDefault(True)
#         self.Button_AcceptFilter.setStyleSheet("QPushButton {\n"
# "background-color: #33bdef;\n"
# "  border: 1px solid transparent;\n"
# "  border-radius: 3px;\n"
# "  color: #fff;\n"
# "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
# "  font-size: 15px;\n"
# "  font-weight: 800;\n"
# "  line-height: 1.15385;\n"
# "  margin: 0;\n"
# "  outline: none;\n"
# "  padding: 8px .8em;\n"
# "  text-align: center;\n"
# "  text-decoration: none;\n"
# "  vertical-align: baseline;\n"
# "  white-space: nowrap;\n"
# "}\n"
# "\n"
# "QPushButton:hover {\n"
# "    background-color: #019ad2;\n"
# "    border-color: rgb(0, 0, 0);\n"
# "}\n"
# "\n"
# "QPushButton:pressed {\n"
# "    background-color: rgb(1, 140, 190);\n"
# "    border-color: rgb(255, 255, 255);\n"
# "}\n"
# "\n"
# "QPushButton:focus{\n"
# "    background-color: #019ad2;\n"
# "    border-color: rgb(0, 0, 0);\n"
# "}\n"
# "\n"
# "QPushButton:focus:pressed {\n"
# "    background-color: rgb(1, 140, 190);\n"
# "    border-color: rgb(255, 255, 255);\n"
# "}")
#         self.Button_AcceptFilter.setObjectName("Button_AcceptFilter")
#         icon1 = QtGui.QIcon()
#         icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Check.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#         self.Button_AcceptFilter.setIcon(icon1)
#         self.Button_AcceptFilter.setIconSize(QtCore.QSize(20, 20))
#         self.Button_AcceptFilter.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
#         self.gridLayout_bottom.addWidget(self.Button_AcceptFilter, 0, 5, 1, 1)
#         self.Button_DeleteFilter = QtWidgets.QPushButton(parent=self.frame)
#         self.Button_DeleteFilter.setMinimumSize(QtCore.QSize(30, 25))
#         self.Button_DeleteFilter.setMaximumSize(QtCore.QSize(30, 25))
#         self.Button_DeleteFilter.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
#         self.Button_DeleteFilter.setAutoDefault(True)
#         self.Button_DeleteFilter.setStyleSheet("QPushButton {\n"
# "background-color: #33bdef;\n"
# "  border: 1px solid transparent;\n"
# "  border-radius: 3px;\n"
# "  color: #fff;\n"
# "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
# "  font-size: 15px;\n"
# "  font-weight: 800;\n"
# "  line-height: 1.15385;\n"
# "  margin: 0;\n"
# "  outline: none;\n"
# "  padding: 8px .8em;\n"
# "  text-align: center;\n"
# "  text-decoration: none;\n"
# "  vertical-align: baseline;\n"
# "  white-space: nowrap;\n"
# "}\n"
# "\n"
# "QPushButton:hover {\n"
# "    background-color: #019ad2;\n"
# "    border-color: rgb(0, 0, 0);\n"
# "}\n"
# "\n"
# "QPushButton:pressed {\n"
# "    background-color: rgb(1, 140, 190);\n"
# "    border-color: rgb(255, 255, 255);\n"
# "}\n"
# "\n"
# "QPushButton:focus{\n"
# "    background-color: #019ad2;\n"
# "    border-color: rgb(0, 0, 0);\n"
# "}\n"
# "\n"
# "QPushButton:focus:pressed {\n"
# "    background-color: rgb(1, 140, 190);\n"
# "    border-color: rgb(255, 255, 255);\n"
# "}")
#         self.Button_DeleteFilter.setObjectName("Button_DeleteFilter")
#         icon2 = QtGui.QIcon()
#         icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Delete.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#         self.Button_DeleteFilter.setIcon(icon2)
#         self.Button_DeleteFilter.setIconSize(QtCore.QSize(20, 20))
#         self.Button_DeleteFilter.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
#         self.gridLayout_bottom.addWidget(self.Button_DeleteFilter, 0, 6, 1, 1)
        self.label_filter_xxx = QtWidgets.QLabel(parent=self.frame)
        self.label_filter_xxx.setMinimumSize(QtCore.QSize(0, 25))
        self.label_filter_xxx.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_filter_xxx.setFont(font)
        self.label_filter_xxx.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_filter_xxx.setObjectName("label_filter_xxx")
        self.gridLayout_bottom.addWidget(self.label_filter_xxx, 0, 7, 1, 1)
        self.gridLayout_2.addLayout(self.layout_vertical,0,0,1,1)
        self.gridLayout_2.addLayout(self.gridLayout_bottom,1,0,1,1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Invoice_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Invoice_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1476, 22))
        self.menubar.setObjectName("menubar")
        Invoice_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Invoice_Window)
        self.statusbar.setObjectName("statusbar")
        Invoice_Window.setStatusBar(self.statusbar)
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableInvoice.setSortingEnabled(False)
        self.tableInvoice.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")

        self.retranslateUi(Invoice_Window)
        QtCore.QMetaObject.connectSlotsByName(Invoice_Window)

        commands_clients = "SELECT * FROM purch_fact.clients ORDER BY name"
        commands_destcountry = "SELECT * FROM purch_fact.destination_country ORDER BY name"
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_clients)
            results_clients=cur.fetchall()
            cur.execute(commands_destcountry)
            results_destcountry=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_clients=[x[2] for x in results_clients]
        list_destcountry=[x[1] for x in results_destcountry]

        list_clients.insert(0, '')
        list_destcountry.insert(0, '')

    # Adding items to comboboxes
        self.Client_Invoice.addItems(list_clients)
        self.DestCountry_Invoice.addItems(sorted(list_destcountry))
        self.Application_Invoice.addItems(['','CAUDAL','NIVELES','OTROS','TEMPERATURA'])

    # Adding function when changing combobox value
        self.Client_Invoice.currentTextChanged.connect(self.clientchange)
        self.DestCountry_Invoice.currentTextChanged.connect(self.destcountrychange)

    # Adding functions to buttons
        self.Button_AddReg.clicked.connect(self.addrecord)
        self.Button_ImportReg.clicked.connect(self.import_tags)

        self.Button_InsertInvoice.clicked.connect(self.import_invoice)

        self.Button_FactEuro.clicked.connect(self.submiteuroinvoice)
        self.Button_FactDollar.clicked.connect(self.submitdollarinvoice)
        self.Button_DelivNote.clicked.connect(self.generate_delivnote)

        self.Button_New.clicked.connect(lambda: self.createinvoice())
        self.Button_Up.clicked.connect(self.go_top)
        self.Button_Down.clicked.connect(self.go_bottom)
        self.Button_SearchInvoice.clicked.connect(lambda: self.search_invoice(Invoice_Window))

        # self.Button_AcceptFilter.clicked.connect(self.filterinvoicetable)
        # self.Filter_Invoice.returnPressed.connect(self.filterinvoicetable)
        # self.Button_DeleteFilter.clicked.connect(self.loadinvoicetable)

        # self.Filter_Invoice.textChanged.connect(self.position_table)

    # Adding function when editing the value of currency change €/$
        self.ValCotDollar_Invoice.returnPressed.connect(self.calculate_totalorder)
        self.ValCotDollar_Invoice.editingFinished.connect(self.calculate_totalorder)

    # Adding function when editing the value of aditional concepts
        self.Date_Invoice.editingFinished.connect(self.save_data_on_database)
        self.InvoiceNumber_Invoice.editingFinished.connect(self.save_data_on_database)
        self.DelivNote_Invoice.editingFinished.connect(self.save_data_on_database)
        self.TheirRef_Invoice.editingFinished.connect(self.save_data_on_database)
        self.Destination_Invoice.editingFinished.connect(self.save_data_on_database)
        # self.Comment_Invoice.editingFinished.connect(self.save_data_on_database)
        self.OurRef_Invoice.editingFinished.connect(self.save_data_on_database)
        self.Transport_Invoice.editingFinished.connect(self.save_data_on_database)
        self.PayDate_Invoice.editingFinished.connect(self.save_data_on_database)

        self.Con1Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con2Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con3Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con4Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con5Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con1Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con2Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con3Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con4Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con5Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)

        # delete_action_record = QtGui.QAction("Eliminar Fila", self)
        # delete_action_record.triggered.connect(lambda: self.delete_register(self.tableRecords, "purch_fact.invoice_detail"))

        # self.context_menu_row = QtWidgets.QMenu(self)
        # self.context_menu_row.addAction(delete_action_record)
        
        # self.tableRecords.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)
        # self.tableRecords.addActions([delete_action_record])

        self.loadinvoicetable()

        self.label_IDInvoice.setText('NUEVA')
        self.Destination_Invoice.setText('S/ALMACEN')
        self.Transport_Invoice.setText('N/MEDIOS')
        self.DestCountry_Invoice.setCurrentText('ESPAÑA')

        if self.numinvoice is not None:
            commands_querytableinvoice = ("""
                        SELECT invoice."id"
                        FROM purch_fact.invoice_header AS invoice
                        WHERE invoice."num_invoice" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_querytableinvoice, (self.numinvoice,))
                results_invoices=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.label_IDInvoice.setText(str(results_invoices[0][0]))

            # self.Filter_Invoice.textChanged.connect(self.position_table(self.numinvoice))

            self.loadforminvoice(None, self.label_IDInvoice.text())

# Function to translate and updates the text of various UI elements
    def retranslateUi(self, Invoice_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        Invoice_Window.setWindowTitle(_translate("Invoice_Window", "Factura"))
        self.label_1.setText(_translate("Invoice_Window", "€"))
        self.label_3.setText(_translate("Invoice_Window", "€"))
        self.label_5.setText(_translate("Invoice_Window", "€"))
        self.label_7.setText(_translate("Invoice_Window", "€"))
        self.label_9.setText(_translate("Invoice_Window", "€"))
        self.label_11.setText(_translate("Invoice_Window", "€"))
        self.label_13.setText(_translate("Invoice_Window", "€"))
        self.label_2.setText(_translate("Invoice_Window", "$"))
        self.label_4.setText(_translate("Invoice_Window", "$"))
        self.label_6.setText(_translate("Invoice_Window", "$"))
        self.label_8.setText(_translate("Invoice_Window", "$"))
        self.label_10.setText(_translate("Invoice_Window", "$"))
        self.label_12.setText(_translate("Invoice_Window", "$"))
        self.label_14.setText(_translate("Invoice_Window", "$"))
        self.label_MercType.setText(_translate("Invoice_Window", "Tipo Mercad.:"))
        self.label_TheirRef.setText(_translate("Invoice_Window", "S/Ref:"))
        self.label_Details.setText(_translate("Invoice_Window", "Detalle:"))
        self.label_TaxBase.setText(_translate("Invoice_Window", "Base Imponible:"))
        self.label_Transport.setText(_translate("Invoice_Window", "Transporte:"))
        self.label_Comments.setText(_translate("Invoice_Window", "Comentario:"))
        self.label_DelivNote.setText(_translate("Invoice_Window", "Nº Albarán:"))
        self.label_NumInvoice.setText(_translate("Invoice_Window", "Nº Factura:"))
        self.label_OurRef.setText(_translate("Invoice_Window", "N/Ref:"))
        self.label_ValCot.setText(_translate("Invoice_Window", "Cot. 1€ ="))
        self.label_Date.setText(_translate("Invoice_Window", "Fecha Fct.:"))
        self.label_IDInvoice.setText(_translate("Invoice_Window", ""))
        self.label_IVA.setText(_translate("Invoice_Window", "IVA CL:"))
        self.label_Destination.setText(_translate("Invoice_Window", "Destino:"))
        self.label_GrossWeight.setText(_translate("Invoice_Window", "Peso Bruto:"))
        self.label_Client.setText(_translate("Invoice_Window", "Cliente:"))
        self.label_DestCountry.setText(_translate("Invoice_Window", "País Dest:"))
        self.label_Total.setText(_translate("Invoice_Window", "Total:"))
        self.label_PayDate.setText(_translate("Invoice_Window", "Fch PAGO:"))
        self.label_Application.setText(_translate("Invoice_Window", "Aplicación:"))
        self.label_NetWeight.setText(_translate("Invoice_Window", "Peso Neto:"))
        self.label_Dimensions.setText(_translate("Invoice_Window", "Dimensiones:"))
        self.label_ClAlb.setText(_translate("Invoice_Window", "Cl. Alb:"))
        self.label_DateAlb.setText(_translate("Invoice_Window", "Fch Alb:"))
        self.label_AtteAlb.setText(_translate("Invoice_Window", "Atte:"))
        self.label_DestAlb.setText(_translate("Invoice_Window", "Dest.:"))
        self.label_AddressAlb.setText(_translate("Invoice_Window", "Dirección:"))
        self.label_CityAlb.setText(_translate("Invoice_Window", "Ciudad:"))
        self.label_ObsAlb.setText(_translate("Invoice_Window", "Obs:"))
        self.label_ProvinceAlb.setText(_translate("Invoice_Window", "Provincia:"))
        self.label_ZCAlb.setText(_translate("Invoice_Window", "C.P.:"))
        self.label_CountryAlb.setText(_translate("Invoice_Window", "País:"))
        self.label_Qty_Elements.setText(_translate("Invoice_Window", "Nº Elementos:"))
        # self.label_filter.setText(_translate("Invoice_Window", "Filtrar:"))
        self.Button_InsertInvoice.setText(_translate("Invoice_Window", "Insertar Facturas"))
        self.Button_AddReg.setText(_translate("Invoice_Window", "Agregar"))
        self.Button_ImportReg.setText(_translate("Invoice_Window", "Importar"))
        self.Button_DelivNote.setText(_translate("Invoice_Window", "Albarán"))
        self.Button_FactDollar.setText(_translate("Invoice_Window", "Fact.$"))
        self.Button_FactEuro.setText(_translate("Invoice_Window", "Fact. €"))

        item = self.tableInvoice.horizontalHeaderItem(0)
        item.setText(_translate("Invoice_Window", "ID"))
        item = self.tableInvoice.horizontalHeaderItem(1)
        item.setText(_translate("Invoice_Window", "Nº Factura"))
        item = self.tableInvoice.horizontalHeaderItem(2)
        item.setText(_translate("Invoice_Window", "Nº Albarán"))
        item = self.tableInvoice.horizontalHeaderItem(3)
        item.setText(_translate("Invoice_Window", "Fecha Factura"))
        item = self.tableInvoice.horizontalHeaderItem(4)
        item.setText(_translate("Invoice_Window", "Cliente"))
        item = self.tableInvoice.horizontalHeaderItem(5)
        item.setText(_translate("Invoice_Window", "N/Ref."))
        item = self.tableInvoice.horizontalHeaderItem(6)
        item.setText(_translate("Invoice_Window", "S/Ref."))
        item = self.tableInvoice.horizontalHeaderItem(7)
        item.setText(_translate("Invoice_Window", "Comentarios"))
        item = self.tableInvoice.horizontalHeaderItem(8)
        item.setText(_translate("Invoice_Window", "Aplicación"))
        item = self.tableInvoice.horizontalHeaderItem(9)
        item.setText(_translate("Invoice_Window", "País Destino"))
        item = self.tableInvoice.horizontalHeaderItem(10)
        item.setText(_translate("Invoice_Window", "Fecha Albarán"))
        item = self.tableInvoice.horizontalHeaderItem(11)
        item.setText(_translate("Invoice_Window", "Grupo Cliente"))
        item = self.tableInvoice.horizontalHeaderItem(12)
        item.setText(_translate("Invoice_Window", "Fecha Pago"))
        item = self.tableInvoice.horizontalHeaderItem(13)
        item.setText(_translate("Invoice_Window", "Dimensiones"))
        item = self.tableInvoice.horizontalHeaderItem(14)
        item.setText(_translate("Invoice_Window", "Fecha Envío"))

# Function to save changes into database
    def saveChanges(self):
        """
        Saves changes made to the data models and updates unique values for each column.
        """
        if self.model_records.submitAll():
            print("Cambios guardados correctamente.")
        else:
            print(f"Error al guardar cambios: {self.model_records.lastError().text()}")

        for column in range(self.model_records.columnCount()):
            list_valuesUnique = []
            for row in range(self.model_records.rowCount()):
                value = self.model_records.record(row).value(column)
                if value not in list_valuesUnique:
                    if isinstance(value, QtCore.QDate):
                        value = value.toString("dd/MM/yyyy")
                    list_valuesUnique.append(str(value))
                    if value not in self.checkbox_states[column]:
                        self.checkbox_states[column][value] = True
            self.dict_valuesuniques[column] = list_valuesUnique

        if self.model_invoice.submitAll():
            print("Cambios guardados correctamente.")
        else:
            print(f"Error al guardar cambios: {self.model_invoice.lastError().text()}")

        for column in range(self.model_invoice.columnCount()):
            list_valuesUnique = []
            for row in range(self.model_invoice.rowCount()):
                value = self.model_invoice.record(row).value(column)
                if value not in list_valuesUnique:
                    if isinstance(value, QtCore.QDate):
                        value = value.toString("dd/MM/yyyy")
                    list_valuesUnique.append(str(value))
                    if value not in self.checkbox_states[column]:
                        self.checkbox_states[column][value] = True
            self.dict_valuesuniques[column] = list_valuesUnique

        self.calculate_elements()
        self.calculate_totalorder()

# Function to save invoice data on database
    def save_data_on_database(self):
        id_invoice = self.label_IDInvoice.text()
        if id_invoice == 'NUEVA':
            invoice_date = self.Date_Invoice.text() if self.Date_Invoice.text() != '' else None
            self.createinvoice(invoice_date)
            id_invoice = self.label_IDInvoice.text()

        if id_invoice != '':
            invoice_date = self.Date_Invoice.text() if self.Date_Invoice.text() != '' else None
            client = self.Client_Invoice.currentText()
            invoice_number = self.InvoiceNumber_Invoice.text()
            delivnote_number = self.DelivNote_Invoice.text()
            if invoice_number != '' and delivnote_number == '':
                delivnote_number = invoice_number.split('-')[1]
                self.DelivNote_Invoice.setText(delivnote_number)
            their_ref = self.TheirRef_Invoice.text()
            destination = self.Destination_Invoice.text()
            comment = self.Comment_Invoice.toPlainText()
            our_ref = self.OurRef_Invoice.text()
            transport = self.Transport_Invoice.text()
            application = self.Application_Invoice.currentText()
            destination_country = self.DestCountry_Invoice.currentText()
            gross_weight = self.GrossWeight_Invoice.text()
            net_weight = self.NetWeight_Invoice.text()
            dimensions = self.Dimensions_Invoice.text()
            merc_type = self.MercType_Invoice.text()
            paydate = self.PayDate_Invoice.text() if self.PayDate_Invoice.text() != '' else None
            txtcon1 = self.TxtCon1_Invoice.text()
            txtcon2 = self.TxtCon2_Invoice.text()
            txtcon3 = self.TxtCon3_Invoice.text()
            txtcon4 = self.TxtCon4_Invoice.text()
            txtcon5 = self.TxtCon5_Invoice.text()
            con1_euro = self.Con1Eur_Invoice.text() if self.Con1Eur_Invoice.text() != '' else None
            con2_euro = self.Con2Eur_Invoice.text() if self.Con2Eur_Invoice.text() != '' else None
            con3_euro = self.Con3Eur_Invoice.text() if self.Con3Eur_Invoice.text() != '' else None
            con4_euro = self.Con4Eur_Invoice.text() if self.Con4Eur_Invoice.text() != '' else None
            con5_euro = self.Con5Eur_Invoice.text() if self.Con5Eur_Invoice.text() != '' else None
            con1_dollar = self.Con1Dollar_Invoice.text() if self.Con1Dollar_Invoice.text() != '' else None
            con2_dollar = self.Con2Dollar_Invoice.text() if self.Con2Dollar_Invoice.text() != '' else None
            con3_dollar = self.Con3Dollar_Invoice.text() if self.Con3Dollar_Invoice.text() != '' else None
            con4_dollar = self.Con4Dollar_Invoice.text() if self.Con4Dollar_Invoice.text() != '' else None
            con5_dollar = self.Con5Dollar_Invoice.text() if self.Con5Dollar_Invoice.text() != '' else None
            data_adic1 = self.AditData1_Invoice.text()
            data_adic2 = self.AditData2_Invoice.text()
            tax_base_amount = float(self.TaxBase_Invoice.text()) if self.TaxBase_Invoice.text() != '' else None
            iva = self.IVACL_Invoice.text() if self.IVACL_Invoice.text() != '' else None
            cl_delivnote = self.ClAlb_Invoice.text()
            date_delivnote = self.DateAlb_Invoice.text() if self.DateAlb_Invoice.text() != '' else None
            atte_delivnote = self.AtteAlb_Invoice.text()
            dest_delivnote = self.DestAlb_Invoice.text()
            address_delivnote = self.AddressAlb_Invoice.text()
            zc_delivnote = self.ZCAlb_Invoice.text()
            city_delivnote = self.CityAlb_Invoice.text()
            province_delivnote = self.ProvinceAlb_Invoice.text()
            country_delivnote = self.CountryAlb_Invoice.text()
            obs_delivnote = self.ObsAlb_Invoice.toPlainText()
            total_qty_elements = self.Qty_Elements.text() if self.Qty_Elements.text() != '' else None
            client_group = self.label_ClientGroup.text() if self.label_ClientGroup.text() != '' else None
            
            destination_dispatch = "FACTURA" if delivnote_number == '-' else None
            date_dispatch = "-" if delivnote_number == '-' else None

            commands_clientsid = ("""
                            SELECT clients.id
                            FROM purch_fact.clients AS clients
                            WHERE clients.name = %s
                            """)
            commands_destcountryid = ("""
                            SELECT dest_country.id
                            FROM purch_fact.destination_country AS dest_country
                            WHERE dest_country.name = %s
                            """)

            commands_submit_invoice = ("""
                            UPDATE purch_fact.invoice_header
                            SET "num_invoice" = %s, "num_delivnote" = %s, "date_invoice" = %s, "id_client" = %s, "our_ref" = %s, "their_ref" = %s,
                            "invoice_comments" = %s, "destination" = %s, "transport" = %s, "application" = %s, "id_dest_country" = %s,
                            "gross_weight" = %s, "net_weight" = %s, "dimensions" = %s, "merc_type" = %s, "pay_date" = %s,
                            "txtcon1" = %s, "txtcon2" = %s, "txtcon3" = %s, "txtcon4" = %s, "txtcon5" = %s,
                            "con1_euro" = %s, "con2_euro" = %s, "con3_euro" = %s, "con4_euro" = %s, "con5_euro" = %s,
                            "con1_dollar" = %s, "con2_dollar" = %s, "con3_dollar" = %s, "con4_dollar" = %s, "con5_dollar" = %s,
                            "data_adic1" = %s, "data_adic2" = %s, "iva" = %s, "cl_delivnote" = %s,
                            "date_delivnote" = %s, "atte_delivnote" = %s, "dest_delivnote" = %s, "address_delivnote" = %s, "zc_delivnote" = %s,
                            "city_delivnote" = %s, "province_delivnote" = %s, "country_delivnote" = %s, "obs_delivnote" = %s, "tax_base_amount" = %s,
                            "total_qty_elements" = %s, "client_group" = %s, "destination_dispatch" = %s, "date_dispatch" = %s
                            WHERE "id" = %s""")
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_clientsid, (client,))
                results_clients_id=cur.fetchall()
                id_client = results_clients_id[0][0] if len(results_clients_id) != 0 else None

                cur.execute(commands_destcountryid, (destination_country,))
                results_destcountry_id=cur.fetchall()
                id_dest_country = results_destcountry_id[0][0] if len(results_destcountry_id) != 0 else None

                data = (invoice_number, delivnote_number, invoice_date, id_client, our_ref, their_ref,
                        comment, destination, transport, application, id_dest_country,
                        gross_weight, net_weight, dimensions, merc_type, paydate,
                        txtcon1, txtcon2, txtcon3, txtcon4, txtcon5,
                        con1_euro, con2_euro, con3_euro, con4_euro, con5_euro,
                        con1_dollar, con2_dollar, con3_dollar, con4_dollar, con5_dollar,
                        data_adic1, data_adic2, iva, cl_delivnote,
                        date_delivnote, atte_delivnote, dest_delivnote, address_delivnote, zc_delivnote,
                        city_delivnote, province_delivnote, country_delivnote, obs_delivnote, tax_base_amount,
                        total_qty_elements, client_group, destination_dispatch, date_dispatch, id_invoice)
                cur.execute(commands_submit_invoice, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("8Ha ocurrido el siguiente error:\n"
                            + str(error))
                print(error)
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            # self.loadinvoicetable()

# Function to create new invoice
    def createinvoice(self, invoice_date=None):
        """
        Creates a new entry in database after validating form inputs.
        """
        commands_insert_invoice = ("""
                        INSERT INTO purch_fact.invoice_header ("num_invoice","date_invoice")
                        VALUES (%s,%s)
                        """)
        query_idinvoice = "SELECT id, num_invoice FROM purch_fact.invoice_header ORDER BY id"
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(query_idinvoice)
            result_idorder = cur.fetchall()

            idinvoice = int(result_idorder[-1][0]) + 1
            numinvoice = result_idorder[-1][1].split("/")[0] + "/" + '{:03}'.format(int(result_idorder[-1][1].split("/")[1]) + 1)

            data = (numinvoice,invoice_date,)
            cur.execute(commands_insert_invoice, data)

        # get id from table
            self.label_IDInvoice.setText(str(idinvoice))
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.loadinvoicetable()
        self.loadrecordstable()
        self.loadforminvoice(None, idinvoice)

# Function to submit euro invoice
    def submiteuroinvoice(self):
        """
        Submit the information to the invoice and generates the pdf of the corresponding invoice in euros
        """
        self.calculate_elements()
        self.calculate_totalorder()
        id_invoice = self.label_IDInvoice.text()

        try:
            if id_invoice == '':
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Emitir Factura")
                dlg.setText("Selecciona una factura")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon
            else:
                gross_weight = self.GrossWeight_Invoice.text()
                net_weight = self.NetWeight_Invoice.text()
                dimensions = self.Dimensions_Invoice.text()
                merc_type = self.MercType_Invoice.text()
                txtcon1 = self.TxtCon1_Invoice.text()
                txtcon2 = self.TxtCon2_Invoice.text()
                txtcon3 = self.TxtCon3_Invoice.text()
                txtcon4 = self.TxtCon4_Invoice.text()
                txtcon5 = self.TxtCon5_Invoice.text()
                con1_euro = self.Con1Eur_Invoice.text() if self.Con1Eur_Invoice.text() != '' else None
                con2_euro = self.Con2Eur_Invoice.text() if self.Con2Eur_Invoice.text() != '' else None
                con3_euro = self.Con3Eur_Invoice.text() if self.Con3Eur_Invoice.text() != '' else None
                con4_euro = self.Con4Eur_Invoice.text() if self.Con4Eur_Invoice.text() != '' else None
                con5_euro = self.Con5Eur_Invoice.text() if self.Con5Eur_Invoice.text() != '' else None
                data_adic1 = self.AditData1_Invoice.text()
                data_adic2 = self.AditData2_Invoice.text()
                tax_base_amount = float(self.TaxBase_Invoice.text()) if self.TaxBase_Invoice.text() != '' else None
                iva = self.IVACL_Invoice.text() if self.IVACL_Invoice.text() != '' else None
                cl_delivnote = self.ClAlb_Invoice.text()
                date_delivnote = self.DateAlb_Invoice.text() if self.DateAlb_Invoice.text() != '' else None
                atte_delivnote = self.AtteAlb_Invoice.text()
                dest_delivnote = self.DestAlb_Invoice.text()
                address_delivnote = self.AddressAlb_Invoice.text()
                zc_delivnote = self.ZCAlb_Invoice.text()
                city_delivnote = self.CityAlb_Invoice.text()
                province_delivnote = self.ProvinceAlb_Invoice.text()
                country_delivnote = self.CountryAlb_Invoice.text()
                obs_delivnote = self.ObsAlb_Invoice.toPlainText()
                total_qty_elements = self.Qty_Elements.text()

                commands_submit_invoice = ("""
                                UPDATE purch_fact.invoice_header
                                SET "gross_weight" = %s, "net_weight" = %s, "dimensions" = %s, "merc_type" = %s,
                                "txtcon1" = %s, "txtcon2" = %s, "txtcon3" = %s, "txtcon4" = %s, "txtcon5" = %s,
                                "con1_euro" = %s, "con2_euro" = %s, "con3_euro" = %s, "con4_euro" = %s, "con5_euro" = %s,
                                "data_adic1" = %s, "data_adic2" = %s, "iva" = %s, "cl_delivnote" = %s,
                                "date_delivnote" = %s, "atte_delivnote" = %s, "dest_delivnote" = %s, "address_delivnote" = %s, "zc_delivnote" = %s,
                                "city_delivnote" = %s, "province_delivnote" = %s, "country_delivnote" = %s, "obs_delivnote" = %s, "tax_base_amount" = %s,
                                "total_qty_elements" = %s
                                WHERE "id" = %s""")
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands one by one
                    data = (gross_weight, net_weight, dimensions, merc_type,
                            txtcon1, txtcon2, txtcon3, txtcon4, txtcon5,
                            con1_euro, con2_euro, con3_euro, con4_euro, con5_euro,
                            data_adic1, data_adic2, iva, cl_delivnote,
                            date_delivnote, atte_delivnote, dest_delivnote, address_delivnote, zc_delivnote,
                            city_delivnote, province_delivnote, country_delivnote, obs_delivnote, tax_base_amount,
                            total_qty_elements, id_invoice)
                    cur.execute(commands_submit_invoice, data)

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Factura en euros emitida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                dlg_yes_no = QtWidgets.QMessageBox()
                new_icon_yes_no = QtGui.QIcon()
                new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_yes_no.setWindowIcon(new_icon_yes_no)
                dlg_yes_no.setWindowTitle("ERP EIPSA")
                dlg_yes_no.setText("¿Quieres imprimir la factura?\n")
                dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                result = dlg_yes_no.exec()

                if result == QtWidgets.QMessageBox.StandardButton.Yes:
                    from PDF_Styles import client_invoice
                    while True:
                        answer, ok = QtWidgets.QInputDialog.getItem(self, "Albarán", "¿Con logo?:", ['Sí', 'No'], 0, False)
                        if ok and answer:
                            if answer == 'Sí':
                                pdf = client_invoice(id_invoice, 'Yes')
                            else:
                                pdf = client_invoice(id_invoice, 'No')
                            pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
                            pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
                            pdf.set_auto_page_break(auto=True, margin=2)
                            pdf.add_page()
                            pdf.alias_nb_pages()

                            id_list=[]

                            for row in range(self.proxy_records.rowCount()):
                                first_column_value = self.proxy_records.data(self.proxy_records.index(row, 0))
                                id_list.append(first_column_value)

                            for element in id_list:
                                for row in range(self.model_records.rowCount()):
                                    if self.model_records.data(self.model_records.index(row, 0)) == element:
                                        target_row = row
                                        break
                                if target_row is not None:
                                    position_text = str(self.model_records.data(self.model_records.index(target_row, 2)))
                                    quantity_text = str(self.model_records.data(self.model_records.index(target_row, 3)))
                                    description_text = str(self.model_records.data(self.model_records.index(target_row, 4)))
                                    length_description=len(description_text)

                                pdf.set_x(1.5)
                                y_position = pdf.get_y()
                                pdf.set_font('DejaVuSansCondensed', '', 9)
                                pdf.cell(1, 0.53, position_text, align='C')
                                pdf.cell(0.2, 0.53, "")
                                pdf.cell(1.25, 0.53, quantity_text, align='C')
                                pdf.cell(0.2, 0.53, "")
                                x_position = pdf.get_x()
                                pdf.multi_cell(11.5, 0.53, description_text, align='J')
                                y_position_multicell = pdf.get_y()
                                pdf.set_y(y_position)
                                pdf.set_x(x_position + 11.7)
                                pdf.set_font('DejaVuSansCondensed', size=9)
                                pdf.cell(0.2, 0.53, "")
                                pdf.cell(1.94, 0.53, str('{:,.2f}'.format(float(self.model_records.data(self.model_records.index(target_row, 5))))).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                                pdf.cell(0.2, 0.53, "")
                                pdf.cell(2.05, 0.53, str('{:,.2f}'.format(float(self.model_records.data(self.model_records.index(target_row, 7))))).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                                pdf.set_font('Helvetica', size=9)
                                pdf.ln(1.5)
                                y_position = y_position_multicell

                                if pdf.page_no()<=1:
                                    mark0=9.9
                                    pdf.set_line_width(0.05)
                                    pdf.line(1.3, y_position, 1.3, mark0)
                                    pdf.line(20.4, y_position, 20.4, mark0)
                                    pdf.set_line_width(0.01)
                                    pdf.line(2.6, y_position, 2.6, mark0)
                                    pdf.line(4.05, y_position, 4.05, mark0)
                                    pdf.line(15.95, y_position, 15.95, mark0)
                                    pdf.line(18.1, y_position, 18.1, mark0)

                                else:
                                    mark0 = 3.8
                                    pdf.set_line_width(0.05)
                                    pdf.line(1.3, y_position, 1.3, mark0)
                                    pdf.line(20.4, y_position, 20.4, mark0)
                                    pdf.set_line_width(0.01)
                                    pdf.line(2.6, y_position, 2.6, mark0)
                                    pdf.line(4.05, y_position, 4.05, mark0)
                                    pdf.line(15.95, y_position, 15.95, mark0)
                                    pdf.line(18.1, y_position, 18.1, mark0)

                                if y_position > 26:
                                    if length_description <75:
                                        mark2=0
                                    elif 75<=length_description <=150:
                                        mark2 = 0.5
                                    else:
                                        mark2 = 1.5

                                    pdf.set_line_width(0.05)
                                    pdf.line(1.3, y_position + mark2, 1.3, 25)
                                    pdf.line(20.4, y_position + mark2, 20.4, 25)
                                    pdf.set_line_width(0.01)
                                    pdf.line(2.6, y_position + mark2, 2.6, 25)
                                    pdf.line(4.05, y_position + mark2, 4.05, 25)
                                    pdf.line(15.95, y_position + mark2, 15.95, 25)
                                    pdf.line(18.1, y_position + mark2, 18.1, 25)

                            x_position = pdf.get_x()
                            y_position = y_position_multicell
                            pdf.set_xy(x_position, y_position)
                            pdf.set_line_width(0.05)
                            pdf.line(1.3,y_position,20.4,y_position)

                            pdf.cell(14, 0.6, "")
                            pdf.set_font('Helvetica', 'B', 9)
                            pdf.cell(2.3, 0.6, "Total Materiales:", align='R')

                            pdf.set_font('DejaVuSansCondensed', size=9)
                            pdf.cell(3, 0.6, '{:,.2f}'.format(float(self.TotalEur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                            pdf.ln(1)
                            pdf.set_font('DejaVuSansCondensed', '', 8)
                            pdf.cell(14, 0.50, "")

                            if txtcon1 == '':
                                pdf.cell(2.3, 0.50, '', align='R')
                                pdf.cell(3, 0.5, '', align='R')
                            else:
                                pdf.cell(2.3, 0.50, txtcon1, align='R')
                                pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con1Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                            pdf.ln(0.5)
                            pdf.cell(14, 0.50, "")

                            if txtcon2 == '':
                                pdf.cell(2.3, 0.50, '', align='R')
                                pdf.cell(3, 0.5, '', align='R')
                            else:
                                pdf.cell(2.3, 0.50, txtcon2, align='R')
                                pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con2Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                            pdf.ln(0.5)
                            pdf.cell(14, 0.50, "")

                            if txtcon3 == '':
                                pdf.cell(2.3, 0.50, '', align='R')
                                pdf.cell(3, 0.5, '', align='R')
                            else:
                                pdf.cell(2.3, 0.50, txtcon3, align='R')
                                pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con3Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                            pdf.ln(0.5)
                            pdf.cell(14, 0.50, "")

                            if txtcon4 == '':
                                pdf.cell(2.3, 0.50, '', align='R')
                                pdf.cell(3, 0.5, '', align='R')
                            else:
                                pdf.cell(2.3, 0.50, txtcon4, align='R')
                                pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con4Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                            pdf.ln(0.5)
                            pdf.cell(14, 0.50, "")

                            if txtcon5 == '':
                                pdf.cell(2.3, 0.50, '', align='R')
                                pdf.cell(3, 0.5, '', align='R')
                            else:
                                pdf.cell(2.3, 0.50, txtcon5, align='R')
                                pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con5Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                            pdf.ln(1)
                            pdf.set_font('Helvetica', 'B', 9)
                            pdf.cell(14, 0.50, "")
                            pdf.cell(2.3, 0.50, "Base Imponible:", align='R')
                            pdf.set_font('DejaVuSansCondensed-Bold', size=9)
                            pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.TaxBase_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                            pdf.ln(0.5)
                            pdf.set_font('Helvetica', 'B', 9)
                            pdf.cell(12.95, 0.50, "")

                            if iva is not None:
                                pdf.cell(2.3, 0.50, "IVA:", align='R')
                                pdf.set_font('DejaVuSansCondensed-Bold', size=9)
                                iva_amount = float(iva) * float(self.TaxBase_Invoice.text()) / 100
                                pdf.cell(1.5, 0.5, str(iva) + ' %', align='L')
                                pdf.cell(2.55, 0.5, '{:,.2f}'.format(float(iva_amount)).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                            else:
                                pdf.cell(2.3, 0.50, "", align='R')
                                iva_amount = 0
                                pdf.cell(1.5, 0.5, '', align='L')
                                pdf.cell(2.55, 0.5, '', align='R')

                            pdf.ln(0.7)
                            pdf.cell(14, 0.50, "")
                            pdf.set_font('Helvetica', 'B', 11)
                            pdf.set_line_width(0.05)
                            pdf.cell(5.3, 0.6, "Total:",1, align='L')
                            pdf.set_font('DejaVuSansCondensed-Bold', size=11)
                            total_invoice = float(self.TaxBase_Invoice.text()) + iva_amount
                            pdf.cell(0, 0.6, '{:,.2f}'.format(float(total_invoice)).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                            pdf.ln(1)

                            pdf_buffer = pdf.output()

                            temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp_invoice.pdf"))))

                            with open(temp_file_path, "wb") as temp_file:
                                temp_file.write(pdf_buffer)

                            pdf.close()

                            self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
                            self.pdf_viewer.showMaximized()
                            
                            break
                        else:
                            break

                del dlg_yes_no, new_icon_yes_no

                self.loadinvoicetable()

        except Exception as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("1Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon

# Function to submit dollar invoice
    def submitdollarinvoice(self):
        """
        Submit the information to the invoice and generates the pdf of the corresponding invoice in dollars
        """
        self.calculate_elements()
        id_invoice = self.label_IDInvoice.text()
        valcotdollar = self.ValCotDollar_Invoice.text()

        if id_invoice == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Emitir Factura")
            dlg.setText("Selecciona una factura")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif valcotdollar == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Emitir Factura")
            dlg.setText("Introduce un valor de cambio €-$")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            self.calculate_totalorder()
            gross_weight = self.GrossWeight_Invoice.text()
            net_weight = self.NetWeight_Invoice.text()
            dimensions = self.Dimensions_Invoice.text()
            merc_type = self.MercType_Invoice.text()
            txtcon1 = self.TxtCon1_Invoice.text()
            txtcon2 = self.TxtCon2_Invoice.text()
            txtcon3 = self.TxtCon3_Invoice.text()
            txtcon4 = self.TxtCon4_Invoice.text()
            txtcon5 = self.TxtCon5_Invoice.text()
            con1_dollar = self.Con1Dollar_Invoice.text().replace('.',',') if self.Con1Dollar_Invoice.text() != '' else None
            con2_dollar = self.Con2Dollar_Invoice.text().replace('.',',') if self.Con2Dollar_Invoice.text() != '' else None
            con3_dollar = self.Con3Dollar_Invoice.text().replace('.',',') if self.Con3Dollar_Invoice.text() != '' else None
            con4_dollar = self.Con4Dollar_Invoice.text().replace('.',',') if self.Con4Dollar_Invoice.text() != '' else None
            con5_dollar = self.Con5Dollar_Invoice.text().replace('.',',') if self.Con5Dollar_Invoice.text() != '' else None
            data_adic1 = self.AditData1_Invoice.text()
            data_adic2 = self.AditData2_Invoice.text()
            tax_base_amount = self.TaxBase_Invoice.text().replace('.',',') if self.TaxBase_Invoice.text() != '' else None
            iva = self.IVACL_Invoice.text() if self.IVACL_Invoice.text() != '' else None
            cl_delivnote = self.ClAlb_Invoice.text()
            date_delivnote = self.DateAlb_Invoice.text() if self.DateAlb_Invoice.text() != '' else None
            atte_delivnote = self.AtteAlb_Invoice.text()
            dest_delivnote = self.DestAlb_Invoice.text()
            address_delivnote = self.AddressAlb_Invoice.text()
            zc_delivnote = self.ZCAlb_Invoice.text()
            city_delivnote = self.CityAlb_Invoice.text()
            province_delivnote = self.ProvinceAlb_Invoice.text()
            country_delivnote = self.CountryAlb_Invoice.text()
            obs_delivnote = self.ObsAlb_Invoice.toPlainText()
            total_qty_elements = self.Qty_Elements.text()

            commands_submit_invoice = ("""
                            UPDATE purch_fact.invoice_header
                            SET "gross_weight" = %s, "net_weight" = %s, "dimensions" = %s, "merc_type" = %s,
                            "txtcon1" = %s, "txtcon2" = %s, "txtcon3" = %s, "txtcon4" = %s, "txtcon5" = %s,
                            "con1_dollar" = %s, "con2_dollar" = %s, "con3_dollar" = %s, "con4_dollar" = %s, "con5_dollar" = %s,
                            "data_adic1" = %s, "data_adic2" = %s, "iva" = %s, "cl_delivnote" = %s,
                            "date_delivnote" = %s, "atte_delivnote" = %s, "dest_delivnote" = %s, "address_delivnote" = %s, "zc_delivnote" = %s,
                            "city_delivnote" = %s, "province_delivnote" = %s, "country_delivnote" = %s, "obs_delivnote" = %s, "tax_base_amount" = %s,
                            "total_qty_elements" = %s
                            WHERE "id" = %s""")
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                data = (gross_weight, net_weight, dimensions, merc_type,
                        txtcon1, txtcon2, txtcon3, txtcon4, txtcon5,
                        con1_dollar, con2_dollar, con3_dollar, con4_dollar, con5_dollar,
                        data_adic1, data_adic2, iva, cl_delivnote,
                        date_delivnote, atte_delivnote, dest_delivnote, address_delivnote, zc_delivnote,
                        city_delivnote, province_delivnote, country_delivnote, obs_delivnote, tax_base_amount,
                        total_qty_elements, id_invoice)
                cur.execute(commands_submit_invoice, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Factura en euros emitida con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            dlg_yes_no = QtWidgets.QMessageBox()
            new_icon_yes_no = QtGui.QIcon()
            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg_yes_no.setWindowIcon(new_icon_yes_no)
            dlg_yes_no.setWindowTitle("ERP EIPSA")
            dlg_yes_no.setText("¿Quieres imprimir la factura?\n")
            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
            result = dlg_yes_no.exec()

            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                from PDF_Styles import client_invoice
                while True:
                    answer, ok = QtWidgets.QInputDialog.getItem(self, "Albarán", "¿Con logo?:", ['Sí', 'No'], 0, False)
                    if ok and answer:
                        if answer == 'Sí':
                            pdf = client_invoice(id_invoice, 'Yes')
                        else:
                            pdf = client_invoice(id_invoice, 'No')
                        pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
                        pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
                        pdf.set_auto_page_break(auto=True, margin=2)
                        pdf.add_page()
                        pdf.alias_nb_pages()

                        id_list=[]

                        for row in range(self.proxy_records.rowCount()):
                            first_column_value = self.proxy_records.data(self.proxy_records.index(row, 0))
                            id_list.append(first_column_value)

                        for element in id_list:
                            for row in range(self.model_records.rowCount()):
                                if self.model_records.data(self.model_records.index(row, 0)) == element:
                                    target_row = row
                                    break
                            if target_row is not None:
                                position_text = str(self.model_records.data(self.model_records.index(target_row, 2)))
                                quantity_text = str(self.model_records.data(self.model_records.index(target_row, 3)))
                                description_text = str(self.model_records.data(self.model_records.index(target_row, 4)))
                                length_description=len(description_text)

                            pdf.set_x(1.5)
                            y_position = pdf.get_y()
                            pdf.set_font('Helvetica', '', 9)
                            pdf.cell(1, 0.53, position_text, align='C')
                            pdf.cell(0.2, 0.53, "")
                            pdf.cell(1.25, 0.53, quantity_text, align='C')
                            pdf.cell(0.2, 0.53, "")
                            x_position = pdf.get_x()
                            pdf.multi_cell(11.5, 0.53, description_text, align='J')
                            pdf.set_y(y_position)
                            pdf.set_x(x_position + 11.7)
                            pdf.set_font('DejaVuSansCondensed', size=9)
                            pdf.cell(0.2, 0.53, "")
                            pdf.cell(1.94, 0.53, str('{:,.2f}'.format(float(self.model_records.data(self.model_records.index(target_row, 5))))).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                            pdf.cell(0.2, 0.53, "")
                            pdf.cell(2.05, 0.53, str('{:,.2f}'.format(float(self.model_records.data(self.model_records.index(target_row, 7))))).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                            pdf.set_font('Helvetica', size=9)
                            pdf.ln(1.5)
                            y_position = pdf.get_y()

                            if pdf.page_no()<=1:
                                mark0=9.9
                                pdf.set_line_width(0.05)
                                pdf.line(1.3, y_position, 1.3, mark0)
                                pdf.line(20.4, y_position, 20.4, mark0)
                                pdf.set_line_width(0.01)
                                pdf.line(2.6, y_position, 2.6, mark0)
                                pdf.line(4.05, y_position, 4.05, mark0)
                                pdf.line(15.95, y_position, 15.95, mark0)
                                pdf.line(18.1, y_position, 18.1, mark0)

                            else:
                                mark0 = 3.8
                                pdf.set_line_width(0.05)
                                pdf.line(1.3, y_position, 1.3, mark0)
                                pdf.line(20.4, y_position, 20.4, mark0)
                                pdf.set_line_width(0.01)
                                pdf.line(2.6, y_position, 2.6, mark0)
                                pdf.line(4.05, y_position, 4.05, mark0)
                                pdf.line(15.95, y_position, 15.95, mark0)
                                pdf.line(18.1, y_position, 18.1, mark0)

                            if y_position > 26:
                                if length_description <75:
                                    mark2=0
                                elif 75<=length_description <=150:
                                    mark2 = 0.5
                                else:
                                    mark2 = 1.5

                                pdf.set_line_width(0.05)
                                pdf.line(1.3, y_position + mark2, 1.3, 25)
                                pdf.line(20.4, y_position + mark2, 20.4, 25)
                                pdf.set_line_width(0.01)
                                pdf.line(2.6, y_position + mark2, 2.6, 25)
                                pdf.line(4.05, y_position + mark2, 4.05, 25)
                                pdf.line(15.95, y_position + mark2, 15.95, 25)
                                pdf.line(18.1, y_position + mark2, 18.1, 25)

                        x_position = pdf.get_x()
                        y_position = pdf.get_y()
                        pdf.set_line_width(0.05)
                        pdf.line(1.3,y_position,20.4,y_position)

                        pdf.cell(14, 0.6, "")
                        pdf.set_font('Helvetica', 'B', 9)
                        pdf.cell(2.3, 0.6, "Total Materiales:", align='R')

                        pdf.set_font('DejaVuSansCondensed', size=9)
                        pdf.cell(3, 0.6, '{:,.2f}'.format(float(self.TotalEur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                        pdf.ln(1)
                        pdf.set_font('Helvetica', '', 8)
                        pdf.cell(14, 0.50, "")

                        if txtcon1 == '':
                            pdf.cell(2.3, 0.50, '', align='R')
                            pdf.cell(3, 0.5, '', align='R')
                        else:
                            pdf.cell(2.3, 0.50, txtcon1, align='R')
                            pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con1Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                        pdf.ln(0.5)
                        pdf.cell(14, 0.50, "")

                        if txtcon2 == '':
                            pdf.cell(2.3, 0.50, '', align='R')
                            pdf.cell(3, 0.5, '', align='R')
                        else:
                            pdf.cell(2.3, 0.50, txtcon2, align='R')
                            pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con2Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                        pdf.ln(0.5)
                        pdf.cell(14, 0.50, "")

                        if txtcon3 == '':
                            pdf.cell(2.3, 0.50, '', align='R')
                            pdf.cell(3, 0.5, '', align='R')
                        else:
                            pdf.cell(2.3, 0.50, txtcon3, align='R')
                            pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con3Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                        pdf.ln(0.5)
                        pdf.cell(14, 0.50, "")

                        if txtcon4 == '':
                            pdf.cell(2.3, 0.50, '', align='R')
                            pdf.cell(3, 0.5, '', align='R')
                        else:
                            pdf.cell(2.3, 0.50, txtcon4, align='R')
                            pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con4Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                        pdf.ln(0.5)
                        pdf.cell(14, 0.50, "")

                        if txtcon5 == '':
                            pdf.cell(2.3, 0.50, '', align='R')
                            pdf.cell(3, 0.5, '', align='R')
                        else:
                            pdf.cell(2.3, 0.50, txtcon5, align='R')
                            pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con5Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                        pdf.ln(1)
                        pdf.set_font('Helvetica', 'B', 9)
                        pdf.cell(14, 0.50, "")
                        pdf.cell(2.3, 0.50, "Base Imponible:", align='R')
                        pdf.set_font('DejaVuSansCondensed-Bold', size=9)
                        pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.TaxBase_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                        pdf.ln(0.5)
                        pdf.set_font('Helvetica', 'B', 9)
                        pdf.cell(12.95, 0.50, "")
                        

                        if iva is not None:
                            pdf.cell(2.3, 0.50, "IVA:", align='R')
                            pdf.set_font('DejaVuSansCondensed-Bold', size=9)
                            iva_amount = int(iva) * float(self.TaxBase_Invoice.text()) / 100
                            pdf.cell(1.5, 0.5, str(iva) + ' %', align='L')
                            pdf.cell(2.55, 0.5, '{:,.2f}'.format(float(iva_amount)).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                        else:
                            pdf.cell(2.3, 0.50, "", align='R')
                            iva_amount = 0
                            pdf.cell(1.5, 0.5, '', align='L')
                            pdf.cell(2.55, 0.5, '', align='R')

                        pdf.ln(0.7)
                        pdf.cell(14, 0.50, "")
                        pdf.set_font('Helvetica', 'B', 11)
                        pdf.set_line_width(0.05)
                        pdf.cell(5.3, 0.6, "Total:",1, align='L')
                        pdf.set_font('DejaVuSansCondensed-Bold', size=11)
                        total_invoice = float(self.TaxBase_Invoice.text()) + iva_amount
                        pdf.cell(0, 0.6, '{:,.2f}'.format(float(total_invoice)).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                        pdf.ln(1)

                        pdf_buffer = pdf.output()

                        temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp_invoice.pdf"))))

                        with open(temp_file_path, "wb") as temp_file:
                            temp_file.write(pdf_buffer)

                        pdf.close()

                        self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
                        self.pdf_viewer.showMaximized()
                        
                        break
                    else:
                        break

            del dlg_yes_no, new_icon_yes_no

            self.loadinvoicetable()

# Function to search invoice
    def search_invoice(self, Invoice_Window):
        """
        Opens the 'search_invoice' window. Sets up the UI for the user.
        """
        from InvoiceSearch_Window import Ui_InvoiceSearch_Window
        self.invoicesearch_window=QtWidgets.QMainWindow()
        self.ui=Ui_InvoiceSearch_Window(self.username)
        self.ui.setupUi(self.invoicesearch_window)
        self.invoicesearch_window.show()
        # Invoice_Window.close()

# Function to load invoice table
    def loadinvoicetable_editable(self):
        """
        Queries the database for invoices, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        self.model_invoice.setTable("purch_fact.invoice_header")
        # self.tableInvoice.setModel(None)
        self.model_invoice.setRelation(4, QtSql.QSqlRelation("purch_fact.clients", "id", "name"))
        self.model_invoice.setRelation(11, QtSql.QSqlRelation("purch_fact.destination_country", "id", "name"))
        self.model_invoice.setSort(1, QtCore.Qt.SortOrder.DescendingOrder)
        self.model_invoice.select()

        self.proxy_invoices.setSourceModel(self.model_invoice)
        self.tableInvoice.setModel(self.proxy_invoices)

    # Change all column names
        headers = ["ID", "Nº Factura", "Nº Albarán", "Fecha Factura", "Cliente", "N/Ref.", "S/Ref.", "Comentarios", "Destino", "Transporte", "Aplicación",
                    "País Destino", "Peso Bruto", "Peso Neto", "Dimensiones", "Tipo Merc.", "Concepto 1", "Concepto 2", "Concepto 3", "Concepto 4", "Concepto 5",
                    "€ Con. 1", "€ Con. 2", "€ Con. 3", "€ Con. 4", "€ Con. 5", "$ Con. 1", "$ Con. 2", "$ Con. 3", "$ Con. 4", "$ Con. 5", " Cot. €-$",
                    "Dato Adic 1", "Dato Adic 2", "Total Elementos", "Base Imponible", "IVA",
                    "Cliente Albarán", "Fecha Albarán", "Atte. Albarán", "Destino Albarán", "Dirección Albarán", "CP Albarán",
                    "Ciudad Albarán", "Provincia Albarán", "País Albarán", "Notas Albarán", "Agente", "Fecha Agente", "Estado Agente", "Grupo Cliente", "Fecha Pago",
                    "Destino Despacho", "Cajas Despacho", "Peso Despacho", "Descripción Despacho", "Transporte Despacho", "Fecha Despacho",
                    "Fecha Envío Factura", "Método Envío Factura", "Estado Factura"]
        self.model_invoice.setAllColumnHeaders(headers)

        self.tableInvoice.setItemDelegate(AlignDelegate(self.tableInvoice))
        delegate = MultiLineDelegate(self.tableRecords)
        self.tableInvoice.setItemDelegateForColumn(7, delegate)
        self.tableInvoice.setItemDelegateForColumn(4,ComboBoxDelegate_Relational(2,self.tableInvoice))
        self.tableInvoice.setItemDelegateForColumn(11,ComboBoxDelegate_Relational(1,self.tableInvoice))
        self.tableInvoice.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableInvoice.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableInvoice.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid black;}")
        self.tableInvoice.setObjectName("tableInvoice")
        self.tableInvoice.setSortingEnabled(False)
        self.tableInvoice.horizontalHeader().sectionDoubleClicked.connect(lambda logicalIndex: self.on_view_horizontalHeader_sectionClicked(logicalIndex, self.tableInvoice, self.model_invoice, self.proxy_invoices))

        self.tableInvoice.hideColumn(0)
        self.tableInvoice.hideColumn(8)
        self.tableInvoice.hideColumn(9)
        for i in range (12,38):
            self.tableInvoice.hideColumn(i)
        for i in range (39,50):
            self.tableInvoice.hideColumn(i)
        for i in range (52, self.model_invoice.columnCount()):
            self.tableInvoice.hideColumn(i)

    # Getting the unique values for each column of the model
        for column in range(self.model_invoice.columnCount()):
            list_valuesUnique = []
            if column not in self.checkbox_states:
                self.checkbox_states[column] = {}
                self.checkbox_states[column]["Seleccionar todo"] = True
                for row in range(self.model_invoice.rowCount()):
                    value = self.model_invoice.record(row).value(column)
                    if value not in list_valuesUnique:
                        if isinstance(value, QtCore.QDate):
                            value = value.toString("dd/MM/yyyy")
                        list_valuesUnique.append(str(value))
                        self.checkbox_states[column][value] = True
                self.dict_valuesuniques[column] = list_valuesUnique

        list_aplications = ['CAUDAL','TEMPERATURA','NIVELES', 'OTROS']
        self.combo_itemtype = EditableComboBoxDelegate(self.tableInvoice, list_aplications)
        self.tableInvoice.setItemDelegateForColumn(10, self.combo_itemtype)
        
        self.model_invoice.dataChanged.connect(self.saveChanges)
        self.tableInvoice.selectionModel().currentChanged.connect(self.load_data)

# Function to load invoice table
    def loadinvoicetable(self):
        commands_invoice = """SELECT fact.id, fact.num_invoice, fact.num_delivnote, TO_CHAR(fact.date_invoice,'DD/MM/YYYY'),
                            client.name, fact.our_ref, fact.their_ref,
                            fact.invoice_comments, fact.application, country.name,
                            TO_CHAR(fact.date_delivnote,'DD/MM/YYYY'), fact.client_group, TO_CHAR(fact.pay_date,'DD/MM/YYYY'),
                            fact.weight_dispatch, fact.date_dispatch
                            FROM purch_fact.invoice_header AS fact
                            LEFT OUTER JOIN purch_fact.clients AS client ON fact.id_client = client.id
                            LEFT OUTER JOIN purch_fact.destination_country AS country ON fact.id_dest_country = country.id
                            ORDER BY fact.num_invoice ASC"""

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_invoice)
            results_invoice=cur.fetchall()

            self.tableInvoice.setRowCount(len(results_invoice))
            
            tablerow=0

        # fill the Qt Table with the query results
            for row in results_invoice:
                for column in range(15):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableInvoice.setItem(tablerow, column, it)

                self.tableInvoice.setItemDelegateForRow(tablerow, AlignDelegate(self.tableInvoice))
                tablerow+=1

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("1Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableInvoice.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableInvoice.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableInvoice.horizontalHeader().setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableInvoice.horizontalHeader().setSectionResizeMode(13, QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableInvoice.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.tableInvoice.verticalHeader().hide()

        self.tableInvoice.hideColumn(0)

        self.tableInvoice.currentCellChanged.connect(self.loadforminvoice)
        self.tableInvoice.cellClicked.connect(self.loadforminvoice)

# Function to filter invoice table
    def filterinvoicetable(self):
        """
        Queries the database for filtered invoices, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        filter = self.Filter_Invoice.text()
        commands_querytableinvoice = ("""
                        SELECT invoice."id", invoice."num_invoice", invoice."num_delivnote", TO_CHAR(invoice."date_invoice",'DD-MM-YYYY'),
                        clients."name", invoice."our_ref", invoice."their_ref", invoice."obs_delivnote", TO_CHAR(invoice."date_delivnote",'DD-MM-YYYY'),
                        invoice."application", dest_country."name", TO_CHAR(invoice."pay_date",'DD-MM-YYYY'), invoice."client_group"
                        FROM purch_fact.invoice_header AS invoice
                        JOIN purch_fact.clients AS clients ON invoice."id_client" = clients."id"
                        JOIN purch_fact.destination_country AS dest_country ON invoice."id_dest_country" = dest_country."id"
                        WHERE invoice."num_invoice" LIKE ('%%'||%s||'%%')
                        ORDER BY invoice."id"
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytableinvoice, (filter,))
            results_invoices=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableInvoice.setRowCount(len(results_invoices))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10))

    # fill the Qt Table with the query results
        for row in results_invoices:
            for column in range(13):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableInvoice.setItem(tablerow, column, it)

            self.tableInvoice.setItemDelegateForRow(tablerow, AlignDelegate(self.tableInvoice))
            tablerow+=1

        self.tableInvoice.verticalHeader().hide()
        self.tableInvoice.setSortingEnabled(False)
        self.tableInvoice.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

# Function to load records table
    def loadrecordstable(self):
        """
        Queries the database for items based on invoice number, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        id_invoice = self.label_IDInvoice.text()

        self.model_records.setTable("purch_fact.invoice_detail")
        self.tableRecords.setModel(None)
        self.tableRecords.setModel(self.proxy_records)
        self.model_records.setFilter(f"invoice_header_id = '{id_invoice}'")
        self.model_records.setSort(0, QtCore.Qt.SortOrder.AscendingOrder)
        self.model_records.select()

        self.proxy_records.setSourceModel(self.model_records)
        self.tableRecords.setModel(self.proxy_records)

    # Change all column names
        headers = ["ID", "ID Factura", "Item", "Cantidad", "Descripción", "Precio Un. (€)", "Precio Un. ($)", "Precio Tot. (€)", "Precio Tot. ($)"]
        self.model_records.setAllColumnHeaders(headers)

        columns_number = self.model_records.columnCount()
        for column in range(columns_number):
            self.tableRecords.setItemDelegateForColumn(column, None)

        self.tableRecords.setItemDelegate(AlignDelegate(self.tableRecords))
        delegate = MultiLineDelegate(self.tableRecords)
        self.tableRecords.setItemDelegateForColumn(4, delegate)
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableRecords.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableRecords.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableRecords.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid black;}")
        self.tableRecords.setObjectName("tableRecords")
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().sectionDoubleClicked.connect(lambda logicalIndex: self.on_view_horizontalHeader_sectionClicked(logicalIndex, self.tableRecords, self.model_records, self.proxy_records))
        self.gridLayout_4.addWidget(self.tableRecords, 8, 0, 1, 10)

        self.tableRecords.hideColumn(0)
        self.tableRecords.hideColumn(1)

    # Getting the unique values for each column of the model
        for column in range(self.model_records.columnCount()):
            list_valuesUnique = []
            if column not in self.checkbox_states:
                self.checkbox_states[column] = {}
                self.checkbox_states[column]["Seleccionar todo"] = True
                for row in range(self.model_records.rowCount()):
                    value = self.model_records.record(row).value(column)
                    if value not in list_valuesUnique:
                        if isinstance(value, QtCore.QDate):
                            value = value.toString("dd/MM/yyyy")
                        list_valuesUnique.append(str(value))
                        self.checkbox_states[column][value] = True
                self.dict_valuesuniques[column] = list_valuesUnique

        self.calculate_totalorder()
        self.calculate_elements()

        self.model_records.dataChanged.connect(self.saveChanges)

# Function when header is clicked
    def on_view_horizontalHeader_sectionClicked(self, logicalIndex, table, model, proxy):
        """
        Displays a menu when a column header is clicked. The menu includes options for sorting, filtering, and managing column visibility.
        
        Args:
            logicalIndex (int): Index of the clicked column.
            table (QtWidgets.QTableView): The table view displaying the data.
            model (QtGui.QStandardItemModel): The model associated with the table.
            proxy (QtCore.QSortFilterProxyModel): The proxy model used for filtering and sorting.
        """
        self.logicalIndex = logicalIndex
        self.menuValues = QtWidgets.QMenu(self)
        self.signalMapper = QtCore.QSignalMapper(table)

        valuesUnique_view = []
        for row in range(table.model().rowCount()):
            index = table.model().index(row, self.logicalIndex)
            value = index.data(Qt.ItemDataRole.DisplayRole)
            if value not in valuesUnique_view:
                if isinstance(value, QtCore.QDate):
                    value = value.toString("dd/MM/yyyy")
                valuesUnique_view.append(value)

        actionSortAscending = QtGui.QAction("Ordenar Ascendente", table)
        actionSortAscending.triggered.connect(lambda: self.on_actionSortAscending_triggered(table))
        self.menuValues.addAction(actionSortAscending)
        actionSortDescending = QtGui.QAction("Ordenar Descendente", table)
        actionSortDescending.triggered.connect(lambda: self.on_actionSortDescending_triggered(table))
        self.menuValues.addAction(actionSortDescending)
        self.menuValues.addSeparator()

        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro", table)
        actionDeleteFilterColumn.triggered.connect(lambda: self.on_actionDeleteFilterColumn_triggered(table, model, proxy))
        self.menuValues.addAction(actionDeleteFilterColumn)
        self.menuValues.addSeparator()

        actionTextFilter = QtGui.QAction("Buscar...", table)
        actionTextFilter.triggered.connect(lambda: self.on_actionTextFilter_triggered(model, proxy))
        self.menuValues.addAction(actionTextFilter)
        self.menuValues.addSeparator()

        scroll_menu = QtWidgets.QScrollArea()
        if self.username == 'm.gil':
            scroll_menu.setStyleSheet("background-color: #121212; color: rgb(255, 255, 255)")
        else:
            scroll_menu.setStyleSheet("background-color: rgb(255, 255, 255)")
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkbox_all_widget = QtWidgets.QCheckBox("Seleccionar todo")

        if not self.checkbox_states[self.logicalIndex]["Seleccionar todo"] == True:
            checkbox_all_widget.setChecked(False)
        else:
            checkbox_all_widget.setChecked(True)

        checkbox_all_widget.toggled.connect(lambda checked, name='Seleccionar todo': self.on_select_all_toggled(checked, name, model))

        scroll_layout.addWidget(checkbox_all_widget)
        self.action_checkbox_map["Seleccionar todo"] = checkbox_all_widget

        if len(self.dict_ordersort) != 0 and self.logicalIndex in self.dict_ordersort:
            list_uniquevalues = sorted(list(set(self.dict_valuesuniques[self.logicalIndex])))
        else:
            list_uniquevalues = sorted(list(set(valuesUnique_view)))

        for actionName in list_uniquevalues:
            checkbox_widget = QtWidgets.QCheckBox(str(actionName))

            if self.logicalIndex not in self.checkbox_filters:
                checkbox_widget.setChecked(True)
            elif actionName not in self.checkbox_filters[self.logicalIndex]:
                checkbox_widget.setChecked(False)
            else:
                checkbox_widget.setChecked(True)

            checkbox_widget.toggled.connect(lambda checked, name=actionName: self.on_checkbox_toggled(checked, name, model))

            scroll_layout.addWidget(checkbox_widget)
            self.action_checkbox_map[actionName] = checkbox_widget

        action_scroll_menu = QtWidgets.QWidgetAction(self.menuValues)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        self.menuValues.addAction(action_scroll_menu)

        self.menuValues.addSeparator()

        accept_button = QtGui.QAction("ACEPTAR", table)
        accept_button.triggered.connect(lambda: self.menu_acceptbutton_triggered(proxy))

        cancel_button = QtGui.QAction("CANCELAR", table)
        cancel_button.triggered.connect(self.menu_cancelbutton_triggered)

        self.menuValues.addAction(accept_button)
        self.menuValues.addAction(cancel_button)

        if self.username == 'm.gil':
            self.menuValues.setStyleSheet("QMenu { color: white; }"
                                            "QMenu { background-color: #121212; }"
                                            "QMenu::item:selected { background-color: #33bdef; }"
                                            "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")
        else:
            self.menuValues.setStyleSheet("QMenu { color: black; }"
                                            "QMenu { background-color: rgb(255, 255, 255); }"
                                            "QMenu::item:selected { background-color: #33bdef; }"
                                            "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        headerPos = table.mapToGlobal(table.horizontalHeader().pos())

        posY = headerPos.y() + table.horizontalHeader().height()
        scrollX = table.horizontalScrollBar().value()
        xInView = table.horizontalHeader().sectionViewportPosition(logicalIndex)
        posX = headerPos.x() + xInView - scrollX

        self.menuValues.exec(QtCore.QPoint(posX, posY))

# Function when cancel button of menu is clicked
    def menu_cancelbutton_triggered(self):
        """
        Hides the menu when the cancel button is clicked.
        """
        self.menuValues.hide()

# Function when accept button of menu is clicked
    def menu_acceptbutton_triggered(self, proxy):
        """
        Applies the selected filters and updates the table model with the new filters.
        
        Args:
            proxy (QtCore.QSortFilterProxyModel): The proxy model used for filtering and sorting.
        """
        for column, filters in self.checkbox_filters.items():
            if filters:
                proxy.setFilter(filters, column)
            else:
                proxy.setFilter(None, column)

        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

# Function when select all checkbox is clicked
    def on_select_all_toggled(self, checked, action_name, model):
        """
        Toggles the state of all checkboxes in the filter menu when the 'Select All' checkbox is toggled.
        
        Args:
            checked (bool): The checked state of the 'Select All' checkbox.
            action_name (str): The name of the action (usually 'Select All').
            model (QtGui.QStandardItemModel): The model associated with the table.
        """
        filterColumn = self.logicalIndex
        imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
        icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))

        if checked:
            for checkbox_name, checkbox_widget in self.action_checkbox_map.items():
                checkbox_widget.setChecked(checked)
                self.checkbox_states[self.logicalIndex][checkbox_name] = checked

            if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map.values()):
                model.setIconColumnHeader(filterColumn, icono)
            else:
                model.setIconColumnHeader(filterColumn, "")

        else:
            for checkbox_name, checkbox_widget in self.action_checkbox_map.items():
                checkbox_widget.setChecked(checked)
                self.checkbox_states[self.logicalIndex][checkbox_widget.text()] = checked

# Function when checkbox of header menu is clicked
    def on_checkbox_toggled(self, checked, action_name, model):
        """
        Updates the filter state when an individual checkbox is toggled.
        
        Args:
            checked (bool): The checked state of the checkbox.
            action_name (str): The name of the checkbox.
            model (QtGui.QStandardItemModel): The model associated with the table.
        """
        filterColumn = self.logicalIndex
        imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
        icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))

        if checked:
            if filterColumn not in self.checkbox_filters:
                self.checkbox_filters[filterColumn] = [action_name]
            else:
                if action_name not in self.checkbox_filters[filterColumn]:
                    self.checkbox_filters[filterColumn].append(action_name)
        else:
            if filterColumn in self.checkbox_filters and action_name in self.checkbox_filters[filterColumn]:
                self.checkbox_filters[filterColumn].remove(action_name)

        if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map.values()):
            model.setIconColumnHeader(filterColumn, '')
        else:
            model.setIconColumnHeader(filterColumn, icono)

# Function to delete individual column filter
    def on_actionDeleteFilterColumn_triggered(self, table, model, proxy):
        """
        Removes the filter from the selected column and updates the table model.
        
        Args:
            table (QtWidgets.QTableView): The table view displaying the data.
            model (QtGui.QStandardItemModel): The model associated with the table.
            proxy (QtCore.QSortFilterProxyModel): The proxy model used for filtering and sorting.
        """
        filterColumn = self.logicalIndex
        if filterColumn in proxy.filters:
            del proxy.filters[filterColumn]
        model.setIconColumnHeader(filterColumn, "")
        proxy.invalidateFilter()

        table.setModel(None)
        table.setModel(proxy)

        if filterColumn in self.checkbox_filters:
            del self.checkbox_filters[filterColumn]

        self.checkbox_states[self.logicalIndex].clear()
        self.checkbox_states[self.logicalIndex]["Seleccionar todo"] = True
        for row in range(table.model().rowCount()):
            value = model.record(row).value(filterColumn)
            if isinstance(value, QtCore.QDate):
                value = value.toString("dd/MM/yyyy")
            self.checkbox_states[self.logicalIndex][str(value)] = True

        table.horizontalHeader().setSectionResizeMode(8,QtWidgets.QHeaderView.ResizeMode.Stretch)

# Function to order column ascending
    def on_actionSortAscending_triggered(self, table):
        """
        Sorts the selected column in ascending order.
        
        Args:
            table (QtWidgets.QTableView): The table view displaying the data.
        """
        sortColumn = self.logicalIndex
        sortOrder = Qt.SortOrder.AscendingOrder
        table.sortByColumn(sortColumn, sortOrder)

# Function to order column descending
    def on_actionSortDescending_triggered(self, table):
        """
        Sorts the selected column in descending order.
        
        Args:
            table (QtWidgets.QTableView): The table view displaying the data.
        """
        sortColumn = self.logicalIndex
        sortOrder = Qt.SortOrder.DescendingOrder
        table.sortByColumn(sortColumn, sortOrder)

# Function when text is searched
    def on_actionTextFilter_triggered(self, model, proxy):
        """
        Opens a dialog to enter a text filter and applies it to the selected column.
        
        Args:
            model (QtGui.QStandardItemModel): The model associated with the table.
            proxy (QtCore.QSortFilterProxyModel): The proxy model used for filtering and sorting.
        """
        filterColumn = self.logicalIndex
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle("Buscar")
        clickedButton = dlg.exec()

        if clickedButton == 1:
            stringAction = dlg.textValue()
            if re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', stringAction):
                stringAction=QtCore.QDate.fromString(stringAction,"dd/MM/yyyy")
                stringAction=stringAction.toString("yyyy-MM-dd")

            filterString = QtCore.QRegularExpression(stringAction, QtCore.QRegularExpression.PatternOption(0))
            # del self.proxy_records.filters[filterColumn]
            proxy.setFilter([stringAction], filterColumn)

            imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
            icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))
            model.setIconColumnHeader(filterColumn, icono)

# Function to load invoice form
    def loadforminvoice(self, current_row, ID_invoice=None, current=None):
        """
        Loads the invoice details from the database and populates the corresponding fields in the form. 

        Args:
            item (QTableWidgetItem, optional): Table item containing the row of the invoice. Defaults to None.
            ID_invoice (str, optional): ID of the invoice to load if no table item is provided. Defaults to None.
        """
        # self.block_signals(True)

        # if current is None:
        #     invoice_id = ID_invoice
        #     source_index = self.obtain_source_index(ID_invoice)
        #     if source_index is None:
        #         return
        # else:
        #     source_index = self.proxy_invoices.mapToSource(current)

        # invoice_id = self.model_invoice.data(self.model_invoice.index(source_index.row(), 0))

        # self.InvoiceNumber_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 1)))
        # self.DelivNote_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 2)))
        # self.Date_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 3)).toString("dd/MM/yyyy"))
        # self.Client_Invoice.setCurrentText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 4)))
        # self.OurRef_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 5)))
        # self.TheirRef_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 6)))
        # self.Comment_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 7)))
        # self.Destination_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 8)))
        # self.Transport_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 9)))
        # self.Application_Invoice.setCurrentText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 10)))
        # self.DestCountry_Invoice.setCurrentText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 11)))
        # self.GrossWeight_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 12)))
        # self.NetWeight_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 13)))
        # self.Dimensions_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 14)))
        # self.MercType_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 15)))
        # self.TxtCon1_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 16)))
        # self.TxtCon2_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 17)))
        # self.TxtCon3_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 18)))
        # self.TxtCon4_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 19)))
        # self.TxtCon5_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 20)))
        # self.Con1Eur_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 21))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 21)) is not None else '')
        # self.Con2Eur_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 22))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 22)) is not None else '')
        # self.Con3Eur_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 23))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 23)) is not None else '')
        # self.Con4Eur_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 24))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 24)) is not None else '')
        # self.Con5Eur_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 25))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 25)) is not None else '')
        # self.Con1Dollar_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 26))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 26)) is not None else '')
        # self.Con2Dollar_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 27))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 27)) is not None else '')
        # self.Con3Dollar_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 28))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 28)) is not None else '')
        # self.Con4Dollar_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 29))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 29)) is not None else '')
        # self.Con5Dollar_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 30))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 30)) is not None else '')
        # self.ValCotDollar_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 31))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 31)) is not None else '')
        # self.AditData1_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 32)))
        # self.AditData2_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 33)))
        # self.Qty_Elements.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 34))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 34)) is not None else '')
        # self.TaxBase_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 35)).replace(".","").replace(",",".")[:self.model_invoice.data(self.model_invoice.index(source_index.row(), 35)).find(" €")]) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 35)) is not None else '')
        # self.IVACL_Invoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 36))) if self.model_invoice.data(self.model_invoice.index(source_index.row(), 36)) is not None else '')
        # self.ClAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 37)))
        # self.DateAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 38)).toString("dd/MM/yyyy"))
        # self.AtteAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 39)))
        # self.DestAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 40)))
        # self.AddressAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 41)))
        # self.ZCAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 42)))
        # self.CityAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 43)))
        # self.ProvinceAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 44)))
        # self.CountryAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 45)))
        # self.ObsAlb_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 46)))
        # self.AgInterm.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 47)))
        # self.AgIntermOk.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 48)).toString("dd/MM/yyyy"))
        # self.AgIntermState.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 49)))
        # self.label_ClientGroup.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 50)))
        # self.PayDate_Invoice.setText(self.model_invoice.data(self.model_invoice.index(source_index.row(), 51)).toString("dd/MM/yyyy"))

        # self.block_signals(False)
        
        # self.label_IDInvoice.setText(str(invoice_id))

        if current_row is not None:
            self.block_signals(True)
            data_order=[]

            item_text=self.tableInvoice.item(current_row, 0).text()
            data_order.append(item_text)

            self.label_IDInvoice.setText(data_order[0])

            commands_querytableinvoices = ("""
                            SELECT invoice.num_invoice, invoice.num_delivnote, TO_CHAR(invoice.date_invoice,'DD/MM/YYYY'), client.name,
                            invoice.our_ref, invoice.their_ref, invoice.invoice_comments, invoice.destination, invoice.transport,
                            invoice.application, country.name, invoice.gross_weight, invoice.net_weight, invoice.dimensions,
                            invoice.merc_type, invoice.txtcon1, invoice.txtcon2, invoice.txtcon3, invoice.txtcon4, invoice.txtcon5,
                            invoice.con1_euro, invoice.con2_euro, invoice.con3_euro, invoice.con4_euro, invoice.con5_euro,
                            invoice.con1_dollar, invoice.con2_dollar, invoice.con3_dollar, invoice.con4_dollar, invoice.con5_dollar,
                            invoice.cot_euro_dollar, invoice.data_adic1, invoice.data_adic2, invoice.total_qty_elements, invoice.tax_base_amount,
                            invoice.iva, invoice.cl_delivnote, TO_CHAR(invoice.date_delivnote,'DD/MM/YYYY'), invoice.atte_delivnote, invoice.dest_delivnote,
                            invoice.address_delivnote, invoice.zc_delivnote, invoice.city_delivnote, invoice.province_delivnote, invoice.country_delivnote,
                            invoice.obs_delivnote, invoice.client_group, TO_CHAR(invoice.pay_date,'DD/MM/YYYY'),
                            invoice.aginterm, TO_CHAR(invoice.aginterm_ok,'DD/MM/YYYY'), invoice.aginterm_state
                            FROM purch_fact.invoice_header AS invoice
                            LEFT OUTER JOIN purch_fact.clients AS client ON invoice.id_client = client.id
                            LEFT OUTER JOIN purch_fact.destination_country AS country ON invoice.id_dest_country = country.id
                            WHERE invoice.id = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_querytableinvoices,(data_order[0],))
                results_invoices=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("2Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.InvoiceNumber_Invoice.setText(str(results_invoices[0][0]))
            self.DelivNote_Invoice.setText(str(results_invoices[0][1]) if results_invoices[0][1] is not None else '')
            self.Date_Invoice.setText(str(results_invoices[0][2]) if results_invoices[0][2] is not None else '')
            self.Client_Invoice.setCurrentText(str(results_invoices[0][3]) if results_invoices[0][3] is not None else '')
            self.OurRef_Invoice.setText(str(results_invoices[0][4]) if results_invoices[0][4] is not None else '')
            self.TheirRef_Invoice.setText(str(results_invoices[0][5]) if results_invoices[0][5] is not None else '')
            self.Comment_Invoice.setText(str(results_invoices[0][6]) if results_invoices[0][6] is not None else '')
            self.Destination_Invoice.setText(str(results_invoices[0][7]) if results_invoices[0][7] is not None else '')
            self.Transport_Invoice.setText(str(results_invoices[0][8]) if results_invoices[0][8] is not None else '')
            self.Application_Invoice.setCurrentText(str(results_invoices[0][9]) if results_invoices[0][9] is not None else '')
            self.DestCountry_Invoice.setCurrentText(str(results_invoices[0][10]) if results_invoices[0][10] is not None else '')
            self.GrossWeight_Invoice.setText(str(results_invoices[0][11]) if results_invoices[0][11] is not None else '')
            self.NetWeight_Invoice.setText(str(results_invoices[0][12]) if results_invoices[0][12] is not None else '')
            self.Dimensions_Invoice.setText(str(results_invoices[0][13]) if results_invoices[0][13] is not None else '')
            self.MercType_Invoice.setText(str(results_invoices[0][14]) if results_invoices[0][14] is not None else '')
            self.TxtCon1_Invoice.setText(str(results_invoices[0][15]) if results_invoices[0][15] is not None else '')
            self.TxtCon2_Invoice.setText(str(results_invoices[0][16]) if results_invoices[0][16] is not None else '')
            self.TxtCon3_Invoice.setText(str(results_invoices[0][17]) if results_invoices[0][17] is not None else '')
            self.TxtCon4_Invoice.setText(str(results_invoices[0][18]) if results_invoices[0][18] is not None else '')
            self.TxtCon5_Invoice.setText(str(results_invoices[0][19]) if results_invoices[0][19] is not None else '')
            self.Con1Eur_Invoice.setText(str(results_invoices[0][20]) if results_invoices[0][20] is not None else '')
            self.Con2Eur_Invoice.setText(str(results_invoices[0][21]) if results_invoices[0][21] is not None else '')
            self.Con3Eur_Invoice.setText(str(results_invoices[0][22]) if results_invoices[0][22] is not None else '')
            self.Con4Eur_Invoice.setText(str(results_invoices[0][23]) if results_invoices[0][23] is not None else '')
            self.Con5Eur_Invoice.setText(str(results_invoices[0][24]) if results_invoices[0][24] is not None else '')
            self.Con1Dollar_Invoice.setText(str(results_invoices[0][25]) if results_invoices[0][25] is not None else '')
            self.Con2Dollar_Invoice.setText(str(results_invoices[0][26]) if results_invoices[0][26] is not None else '')
            self.Con3Dollar_Invoice.setText(str(results_invoices[0][27]) if results_invoices[0][27] is not None else '')
            self.Con4Dollar_Invoice.setText(str(results_invoices[0][28]) if results_invoices[0][28] is not None else '')
            self.Con5Dollar_Invoice.setText(str(results_invoices[0][29]) if results_invoices[0][29] is not None else '')
            self.ValCotDollar_Invoice.setText(str(results_invoices[0][30]) if results_invoices[0][30] is not None else '')
            self.AditData1_Invoice.setText(str(results_invoices[0][31]) if results_invoices[0][31] is not None else '')
            self.AditData2_Invoice.setText(str(results_invoices[0][32]) if results_invoices[0][32] is not None else '')
            self.Qty_Elements.setText(str(results_invoices[0][33]) if results_invoices[0][33] is not None else '')
            self.TaxBase_Invoice.setText(str(results_invoices[0][34].replace(".","").replace(",",".")[:results_invoices[0][34].find(" €")]) if results_invoices[0][34] is not None else '')
            self.IVACL_Invoice.setText(str(results_invoices[0][35]) if results_invoices[0][35] is not None else '')
            self.ClAlb_Invoice.setText(str(results_invoices[0][36]) if results_invoices[0][36] is not None else '')
            self.DateAlb_Invoice.setText(str(results_invoices[0][37]) if results_invoices[0][37] is not None else '')
            self.AtteAlb_Invoice.setText(str(results_invoices[0][38]) if results_invoices[0][38] is not None else '')
            self.DestAlb_Invoice.setText(str(results_invoices[0][39]) if results_invoices[0][39] is not None else '')
            self.AddressAlb_Invoice.setText(str(results_invoices[0][40]) if results_invoices[0][40] is not None else '')
            self.ZCAlb_Invoice.setText(str(results_invoices[0][41]) if results_invoices[0][41] is not None else '')
            self.CityAlb_Invoice.setText(str(results_invoices[0][42]) if results_invoices[0][42] is not None else '')
            self.ProvinceAlb_Invoice.setText(str(results_invoices[0][43]) if results_invoices[0][43] is not None else '')
            self.CountryAlb_Invoice.setText(str(results_invoices[0][44]) if results_invoices[0][44] is not None else '')
            self.ObsAlb_Invoice.setText(str(results_invoices[0][45]) if results_invoices[0][45] is not None else '')
            self.label_ClientGroup.setText(str(results_invoices[0][46]) if results_invoices[0][46] is not None else '')
            self.PayDate_Invoice.setText(str(results_invoices[0][47]) if results_invoices[0][47] is not None else '')
            self.AgInterm.setText(str(results_invoices[0][48]) if results_invoices[0][48] is not None else '')
            self.AgIntermOk.setText(str(results_invoices[0][49]) if results_invoices[0][49] is not None else '')
            self.AgIntermState.setText(str(results_invoices[0][50]) if results_invoices[0][50] is not None else '')

        self.loadrecordstable()
        self.destcountrychange()

        self.block_signals(False)

# Function to add record
    def addrecord(self):
        """
        Inserts a new empty entry into the machines_workshop table.
        Commits the changes to the database and handles any errors.
        """
        id_invoice = self.label_IDInvoice.text()

        if id_invoice == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona una factura para añadir registros")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            dlg3 = QtWidgets.QInputDialog()
            new_icon3 = QtGui.QIcon()
            new_icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg3.setWindowIcon(new_icon3)
            dlg3.setWindowTitle('Facturación')
            dlg3.setLabelText('Introduce cuantos equipos quieres introducir:')
            
            while True:
                clickedButton3 = dlg3.exec()
                if clickedButton3 == 1:
                    qty = dlg3.textValue()
                    if qty != '' and (qty.isdigit() and int(qty) > 0):
                        conn = None
                        try:
                        # read the connection parameters
                            params = config()
                        # connect to the PostgreSQL server
                            conn = psycopg2.connect(**params)
                            cur = conn.cursor()

                        # execution of commands
                            for i in range(int(qty)):
                                commands_insert_record = ("""
                                    INSERT INTO purch_fact.invoice_detail ("invoice_header_id")
                                    VALUES (%s)
                                    """)
                                data = (id_invoice,)
                                cur.execute(commands_insert_record, data)

                        # close communication with the PostgreSQL database server
                            cur.close()
                        # commit the changes
                            conn.commit()

                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("Facturación")
                            dlg.setText("Datos insertados con éxito")
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            dlg.exec()
                            del dlg,new_icon

                        except (Exception, psycopg2.DatabaseError) as error:
                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("ERP EIPSA")
                            dlg.setText("Ha ocurrido el siguiente error:\n"
                                        + str(error))
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                            dlg.exec()
                            del dlg, new_icon
                        finally:
                            if conn is not None:
                                conn.close()
                        break
                    dlg_error = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg_error.setWindowIcon(new_icon)
                    dlg_error.setWindowTitle("Facturación")
                    dlg_error.setText("La cantidad no puede estar vacía o no es un valor válido")
                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg_error.exec()
                    del dlg_error,new_icon
                else:
                    break

            self.loadrecordstable()

# Function to calculate the order total amount
    def calculate_totalorder(self):
        """
        Calculates the total values for euro and dollar amounts in the invoice based on the data in the table model.
        """
        total_euro = 0
        for row in range(self.model_records.rowCount()):
            item = self.model_records.data(self.model_records.index(row, 7))
            if item is not None:
                value = item if item != None else 0
                total_euro += float(value)
        self.TotalEur_Invoice.setText('{:.2f}'.format(total_euro))

        total_dollar = 0
        for row in range(self.model_records.rowCount()):
            item = self.model_records.data(self.model_records.index(row, 8))
            if item is not None:
                value = item if item != None else 0
                total_dollar += float(value)
        total_dollar = total_dollar
        self.TotalDollar_Invoice.setText('{:.2f}'.format(total_dollar))

        total_tax_base_euro = float(self.TotalEur_Invoice.text()) + float(self.Con1Eur_Invoice.text() if self.Con1Eur_Invoice.text() != '' else 0) + float(self.Con2Eur_Invoice.text() if self.Con2Eur_Invoice.text() != '' else 0) + float(self.Con3Eur_Invoice.text() if self.Con3Eur_Invoice.text() != '' else 0) + float(self.Con4Eur_Invoice.text() if self.Con4Eur_Invoice.text() != '' else 0) + float(self.Con5Eur_Invoice.text() if self.Con5Eur_Invoice.text() != '' else 0)
        total_tax_base_dolar =float(self.TotalDollar_Invoice.text()) + float(self.Con1Dollar_Invoice.text() if self.Con1Dollar_Invoice.text() != '' else 0) + float(self.Con2Dollar_Invoice.text() if self.Con2Dollar_Invoice.text() != '' else 0) + float(self.Con3Dollar_Invoice.text() if self.Con3Dollar_Invoice.text() != '' else 0) + float(self.Con4Dollar_Invoice.text() if self.Con4Dollar_Invoice.text() != '' else 0) + float(self.Con5Dollar_Invoice.text() if self.Con5Dollar_Invoice.text() != '' else 0)

        total_tax_base =  total_tax_base_euro if float(self.TotalEur_Invoice.text()) != 0.00 else total_tax_base_dolar * float(self.ValCotDollar_Invoice.text() if self.ValCotDollar_Invoice.text() != '' else 0)
        self.TaxBase_Invoice.setText('{:.2f}'.format(total_tax_base))

        # self.save_data_on_database()

# Function to calculate the total number of elements
    def calculate_elements(self):
        """
        Calculates the total number of elements in the table by summing up the values in the third column.
        """
        total_elements = 0
        for row in range(self.model_records.rowCount()):
            item = self.model_records.data(self.model_records.index(row, 3)) #self.tableRecords.item(row, 2)
            if item is not None:
                value = item #item.text()
                total_elements += int(value)
        self.Qty_Elements.setText(str(total_elements))

# Function when client combobox is changed
    def clientchange(self):
        """
        Updates the client information (intermediary agent, client group, IVA, IBAN, and BIC) based on the selected client.
        """
        client_name = self.Client_Invoice.currentText()

        commands_clientsdata = ("""
                        SELECT clients.inter_agent, clients.group_client, iva.iva_value, banks.iban, banks.bic
                        FROM purch_fact.clients AS clients
                        JOIN purch_fact.iva ON (clients.iva_id = iva.id)
                        JOIN purch_fact.banks ON (clients.bank_id = banks.id)
                        WHERE clients.name = %s
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_clientsdata,(client_name,))
            results_clientsdata=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            # self.AgInterm.setText(results_clientsdata[0][0])
            if len(results_clientsdata) != 0:
                self.label_ClientGroup.setText(results_clientsdata[0][1])
                self.IVACL_Invoice.setText(results_clientsdata[0][2] if results_clientsdata[0][2] not in ['COM', 'EXENTO', 'EXP'] else '0')
                self.AditData1_Invoice.setText(results_clientsdata[0][3])
                self.AditData2_Invoice.setText(results_clientsdata[0][4])
            else:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Este cliente no tiene un banco asignado\n"
                            + "Los datos correspondientes no se cargarán")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        # self.save_data_on_database()

# Function when destination country combobox is changed
    def destcountrychange(self):
        """
        Updates the intermediary agent information based on the selected destination country.
        """
        dest_country_name = self.DestCountry_Invoice.currentText()

        if dest_country_name != '':
            commands_destcountry = ("""
                            SELECT dest_country.agent
                            FROM purch_fact.destination_country AS dest_country
                            WHERE dest_country.name = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_destcountry,(dest_country_name,))
                results_destcountrydata=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                self.AgInterm.setText(results_destcountrydata[0][0])
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()
        else:
            self.AgInterm.setText('')
        # self.save_data_on_database()

# Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableInvoice.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableInvoice.horizontalHeader().height()
        popup_pos = self.tableInvoice.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableInvoice.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to generate delivery note
    def generate_delivnote(self):
        """
        Generates the pdf of the corresponding delivery note
        """
        invoice_id = self.label_IDInvoice.text()

        if invoice_id == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona una factura")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            from PDF_Styles import delivery_note
            while True:
                answer, ok = QtWidgets.QInputDialog.getItem(self, "Albarán", "¿Con logo?:", ['Sí', 'No'], 0, False)
                if ok and answer:
                    if answer == 'Sí':
                        pdf = delivery_note(invoice_id, 'Yes')
                    else:
                        pdf = delivery_note(invoice_id, 'No')
                    pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
                    pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))

                    pdf.set_auto_page_break(auto=True, margin=2)
                    pdf.add_page()
                    pdf.alias_nb_pages()

                    id_list=[]

                    for row in range(self.proxy_records.rowCount()):
                        first_column_value = self.proxy_records.data(self.proxy_records.index(row, 0))
                        id_list.append(first_column_value)

                    for element in id_list:
                        for row in range(self.model_records.rowCount()):
                            if self.model_records.data(self.model_records.index(row, 0)) == element:
                                target_row = row
                                break
                        if target_row is not None:
                            position_text = str(self.model_records.data(self.model_records.index(target_row, 2)))
                            quantity_text = str(self.model_records.data(self.model_records.index(target_row, 3)))
                            description_text = str(self.model_records.data(self.model_records.index(target_row, 4)))
                            length_description=len(description_text)

                            pdf.set_x(1.5)
                            pdf.set_font('DejaVuSansCondensed', '', 9)
                            pdf.cell(1, 0.53, position_text, align='C')
                            pdf.cell(0.2, 0.53, "")
                            pdf.cell(1.25, 0.53, quantity_text, align='C')
                            pdf.cell(0.2, 0.53, "")
                            pdf.multi_cell(16.2, 0.53, description_text, align='J')

                            y_position = pdf.get_y()
                            if pdf.page_no()<=1:
                                mark0=9.6
                                pdf.set_line_width(0.05)
                                pdf.line(1.3, y_position, 1.3, mark0)
                                pdf.line(20.4, y_position, 20.4, mark0)
                                pdf.set_line_width(0.01)
                                pdf.line(2.6, y_position, 2.6, mark0)
                                pdf.line(4.05, y_position, 4.05, mark0)

                            else:
                                mark0 = 3.8
                                pdf.set_line_width(0.05)
                                pdf.line(1.3, y_position, 1.3, mark0)
                                pdf.line(20.4, y_position, 20.4, mark0)
                                pdf.set_line_width(0.01)
                                pdf.line(2.6, y_position, 2.6, mark0)
                                pdf.line(4.05, y_position, 4.05, mark0)

                            if y_position > 26:
                                if length_description <75:
                                    mark2=0
                                elif 75<=length_description <=150:
                                    mark2 = 0.5
                                else:
                                    mark2 = 1.5

                                pdf.set_line_width(0.05)
                                pdf.line(1.3, y_position + mark2, 1.3, 25)
                                pdf.line(20.4, y_position + mark2, 20.4, 25)
                                pdf.set_line_width(0.01)
                                pdf.line(2.6, y_position + mark2, 2.6, 25)
                                pdf.line(4.05, y_position + mark2, 4.05, 25)

                    y_position = pdf.get_y()
                    pdf.set_line_width(0.05)
                    pdf.line(1.3,y_position,20.4,y_position)

                    pdf_buffer = pdf.output()

                    temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp_delivnote.pdf"))))

                    with open(temp_file_path, "wb") as temp_file:
                        temp_file.write(pdf_buffer)

                    pdf.close()

                    self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
                    self.pdf_viewer.showMaximized()

                    break
                else:
                    break

# Function to import data into and existing table from and Excel where first row is column name
    def import_tags(self):
        """
        Imports data from an Excel file into the database for the current invoice.
        """
        id_invoice = self.label_IDInvoice.text()
        table_name='purch_fact.invoice_detail'

        if id_invoice == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona una factura para importar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            fname = askopenfilename(filetypes=[("Archivos de Excel", "*.xlsx")],
                                title="Seleccionar archivo Excel")
            if fname:
                params = config()
                conn = psycopg2.connect(**params)
                cursor = conn.cursor()

            #Importing excel file into dataframe
                df_table = pd.read_excel(fname, na_values=['N/A'], keep_default_na=False)
                df_table.insert(0, 'invoice_header_id', id_invoice)
                df_table = df_table.astype(str)
                df_table.replace('nan', 'N/A', inplace=True)

                try:
            # Loop through each row of the DataFrame and insert the data into the table
                    for index, row in df_table.iterrows():
                        # Create a list of pairs (column_name, column_value) for each column with value
                            columns_values = [(column, row[column]) for column in df_table.columns if not pd.isnull(row[column])]

                        # Creating string for columns names
                            columns = ', '.join([column for column, _ in columns_values])

                        # Creating string for columns values. For money/amount values, dots are replaced for commas to avoid insertion problems
                            values = ', '.join(['NULL' if value == '' and column in ['price','price_usd'] else "'{}'".format(value.replace('\'', '\'\'')) for column, value in columns_values])

                        # Creating insertion query and executing it
                            sql_insertion = f"INSERT INTO {table_name} ({columns}) VALUES ({values})"
                            cursor.execute(sql_insertion)

                    cursor.close()
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Datos importados con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                    self.loadrecordstable()

                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

# Function to delete register of database
    def delete_register(self, table, name):
        """
        Deletes selected records from the specified table.

        Args:
            table (QtWidgets.QTableView): The table widget from which records are selected.
            name (str): The name of the table from which records will be deleted.
        """
        selection_model = table.selectionModel()

        if not selection_model.hasSelection():
            return

        model = table.model()

        id_values = []
        selected_indexes = selection_model.selectedRows()
        for index in selected_indexes:
            # Obtaining first columns values
            item_index = model.index(index.row(), 0)
            if item_index.isValid():
                value = model.data(item_index)
                id_values.append(value)

        if len(id_values) != 0:
            dlg_yes_no = QtWidgets.QMessageBox()
            new_icon_yes_no = QtGui.QIcon()
            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg_yes_no.setWindowIcon(new_icon_yes_no)
            dlg_yes_no.setWindowTitle("ERP EIPSA")
            dlg_yes_no.setText("¿Estás seguro de que deseas eliminar los registros?\n")
            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
            result = dlg_yes_no.exec()
            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    for id_value in id_values:
                        commands_delete = f"""DELETE FROM {name} WHERE id = '{id_value}'"""
                        cur.execute(commands_delete)

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Facturación")
                    dlg.setText("Registros eliminados con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                    self.loadrecordstable()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

            del dlg_yes_no, new_icon_yes_no

    def load_item_records(self, current:QtCore.QModelIndex):
        source_index = self.proxy_invoices.mapToSource(current)
        self.label_IDInvoice.setText(str(self.model_invoice.data(self.model_invoice.index(source_index.row(), 0))))
        self.loadrecordstable()

    def load_data(self, current:QtCore.QModelIndex):
        self.load_item_records(current)
        self.loadforminvoice(current)

# Function to lock or unlock signals of QLineEdits while loading data
    def block_signals(self, block):
        """Lock or unlock signals of QLineEdits while loading data"""
        self.InvoiceNumber_Invoice.blockSignals(block)
        self.DelivNote_Invoice.blockSignals(block)
        self.Date_Invoice.blockSignals(block)
        self.Client_Invoice.blockSignals(block)
        self.OurRef_Invoice.blockSignals(block)
        self.TheirRef_Invoice.blockSignals(block)
        self.Comment_Invoice.blockSignals(block)
        self.Destination_Invoice.blockSignals(block)
        self.Transport_Invoice.blockSignals(block)
        self.Application_Invoice.blockSignals(block)
        self.DestCountry_Invoice.blockSignals(block)
        self.GrossWeight_Invoice.blockSignals(block)
        self.NetWeight_Invoice.blockSignals(block)
        self.Dimensions_Invoice.blockSignals(block)
        self.MercType_Invoice.blockSignals(block)
        self.TxtCon1_Invoice.blockSignals(block)
        self.TxtCon2_Invoice.blockSignals(block)
        self.TxtCon3_Invoice.blockSignals(block)
        self.TxtCon4_Invoice.blockSignals(block)
        self.TxtCon5_Invoice.blockSignals(block)
        self.Con1Eur_Invoice.blockSignals(block)
        self.Con2Eur_Invoice.blockSignals(block)
        self.Con3Eur_Invoice.blockSignals(block)
        self.Con4Eur_Invoice.blockSignals(block)
        self.Con5Eur_Invoice.blockSignals(block)
        self.Con1Dollar_Invoice.blockSignals(block)
        self.Con2Dollar_Invoice.blockSignals(block)
        self.Con3Dollar_Invoice.blockSignals(block)
        self.Con4Dollar_Invoice.blockSignals(block)
        self.Con5Dollar_Invoice.blockSignals(block)
        self.AditData1_Invoice.blockSignals(block)
        self.AditData2_Invoice.blockSignals(block)
        self.Qty_Elements.blockSignals(block)
        self.TaxBase_Invoice.blockSignals(block)
        self.IVACL_Invoice.blockSignals(block)
        self.ClAlb_Invoice.blockSignals(block)
        self.DateAlb_Invoice.blockSignals(block)
        self.AtteAlb_Invoice.blockSignals(block)
        self.DestAlb_Invoice.blockSignals(block)
        self.AddressAlb_Invoice.blockSignals(block)
        self.ZCAlb_Invoice.blockSignals(block)
        self.CityAlb_Invoice.blockSignals(block)
        self.ProvinceAlb_Invoice.blockSignals(block)
        self.CountryAlb_Invoice.blockSignals(block)
        self.ObsAlb_Invoice.blockSignals(block)
        self.AgInterm.blockSignals(block)
        self.AgIntermOk.blockSignals(block)
        self.AgIntermState.blockSignals(block)
        self.PayDate_Invoice.blockSignals(block)

    def obtain_source_index(self, ID_invoice):
        for row in range(self.model_invoice.rowCount()):
            index = self.model_invoice.index(row, 0)
            if self.model_invoice.data(index) == ID_invoice:
                return index

        return None

# Function to move table to specific item by text search
    def position_table(self, invoice_tocheck = None):
        """
        Selects and scrolls to the row in the Invoice Header table based on the input position.
        """
        if invoice_tocheck is None:
            text_position = self.Filter_Invoice.text()
        else:
            text_position = invoice_tocheck

        self.tableInvoice.clearSelection()

        for i in range(self.tableInvoice.rowCount()):
            item = self.tableInvoice.item(i, 1)
            if item is not None and text_position.upper() in item.text().upper():
                item.setSelected(True)
                self.tableInvoice.scrollToItem(item)
                self.loadforminvoice(item.row())
                return

# Function to go to first register
    def go_top(self):
        """
        Selects and scrolls to the first row
        """
        item = self.tableInvoice.item(0, 1)
        item.setSelected(True)
        self.tableInvoice.scrollToItem(item)
        self.loadforminvoice(item.row())

# Function to go to last register
    def go_bottom(self):
        """
        Selects and scrolls to the last row
        """
        last_row = self.tableInvoice.rowCount() - 1

        item = self.tableInvoice.item(last_row, 1)
        item.setSelected(True)
        self.tableInvoice.scrollToItem(item)
        self.loadforminvoice(item.row())

# Function to import invoices from excel
    def import_invoice(self):
        import_file = askopenfilename(filetypes=[("Excel files", "*.xlsx")])

        if import_file:
            df_invoice = pd.read_excel(import_file, na_values=['N/A'], keep_default_na=False)

        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM purch_fact.clients")
            results_clients = cursor.fetchall()

            table_clients = pd.DataFrame(results_clients, columns=['id_client', 'name'])

            df_invoice = df_invoice.merge(table_clients, left_on='client', right_on='name', how='left')
        # Deleting column with client name
            df_invoice = df_invoice.drop(columns=['client','name'])

            df_invoice['destination'] = 'S/ALMACEN'
            df_invoice['transport'] = 'N/MEDIOS'
            df_invoice['id_dest_country'] = 1

            try:
        # Loop through each row of the DataFrame and insert the data into the table
                for index, row in df_invoice.iterrows():
                    # Create a list of pairs (column_name, column_value) for each column with value
                        columns_values = [(column, row[column]) for column in df_invoice.columns if not pd.isnull(row[column])]

                    # Creating string for columns names
                        columns = ', '.join([column for column, _ in columns_values])

                    # Creating string for columns values. For money/amount values, dots are replaced for commas to avoid insertion problems
                        values = ', '.join(['NULL' if value == '' and column in ['date_invoice'] else "'{}'".format(value) for column, value in columns_values])

                    # Creating insertion query and executing it
                        sql_insertion = f"INSERT INTO purch_fact.invoice_header ({columns}) VALUES ({values})"
                        cursor.execute(sql_insertion)

                cursor.close()
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Datos importados con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText(error)
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadinvoicetable()





if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    config_obj = configparser.ConfigParser()
    config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
    dbparam = config_obj["postgresql"]
    # set your parameters for the database connection URI using the keys from the configfile.ini
    user_database = dbparam["user"]
    password_database = dbparam["password"]

    db = createConnection_name(user_database, password_database, 'facturation')
    if not db:
        sys.exit()

    InvoiceNew_Window = Ui_InvoiceNew_Window(db, 'm.sahuquillo')
    InvoiceNew_Window.show()
    sys.exit(app.exec())
