# Form implementation generated from reading ui file 'Invoice_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import os
from tkinter.filedialog import asksaveasfilename

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"

class CustomTableWidgetInvoice(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())


    def filter_by_text(self, column_index):
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        if column_index == 3:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)


    def custom_sort(self, column, order):
    # Obtén la cantidad de filas en la tabla
        row_count = self.rowCount()

        # Crea una lista de índices ordenados según las fechas
        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        # Si el orden es descendente, invierte la lista
        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guarda el estado actual de las filas ocultas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        # Actualiza las filas en la tabla en el orden ordenado
        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class CustomTableWidgetRecord(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())


    def filter_by_text(self, column_index):
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)


    def custom_sort(self, column, order):
    # Obtén la cantidad de filas en la tabla
        row_count = self.rowCount()

        # Crea una lista de índices ordenados según las fechas
        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        # Si el orden es descendente, invierte la lista
        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guarda el estado actual de las filas ocultas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        # Actualiza las filas en la tabla en el orden ordenado
        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_InvoiceNew_Window(object):
    def __init__(self, num_invoice=None):
        self.numinvoice=num_invoice
    
    def setupUi(self, Invoice_Window):
        Invoice_Window.setObjectName("Invoice_Window")
        Invoice_Window.resize(1476, 927)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Invoice_Window.setWindowIcon(icon)
        Invoice_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.centralwidget = QtWidgets.QWidget(parent=Invoice_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame_3 = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_3.setStyleSheet(".QFrame {\n"
"    border: 2px solid black;\n"
"}")
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.frame_3)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1417, 968))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_4.setObjectName("gridLayout_4")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_4.addItem(spacerItem, 0, 0, 1, 1)
        self.label_Date = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Date.setMinimumSize(QtCore.QSize(100, 25))
        self.label_Date.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Date.setFont(font)
        self.label_Date.setObjectName("label_Date")
        self.gridLayout_4.addWidget(self.label_Date, 1, 0, 1, 1)
        self.Date_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Date_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Date_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Date_Invoice.setFont(font)
        self.Date_Invoice.setObjectName("Date_Invoice")
        self.gridLayout_4.addWidget(self.Date_Invoice, 1, 1, 1, 1)
        self.label_Client = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Client.setMinimumSize(QtCore.QSize(95, 25))
        self.label_Client.setMaximumSize(QtCore.QSize(95, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Client.setFont(font)
        self.label_Client.setObjectName("label_Client")
        self.gridLayout_4.addWidget(self.label_Client, 1, 2, 1, 1)
        self.Client_Invoice = QtWidgets.QComboBox(parent=self.scrollAreaWidgetContents)
        self.Client_Invoice.setMinimumSize(QtCore.QSize(300, 25))
        self.Client_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Client_Invoice.setFont(font)
        self.Client_Invoice.setObjectName("Client_Invoice")
        self.gridLayout_4.addWidget(self.Client_Invoice, 1, 3, 1, 1)
        self.label_NumInvoice = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_NumInvoice.setMinimumSize(QtCore.QSize(100, 25))
        self.label_NumInvoice.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumInvoice.setFont(font)
        self.label_NumInvoice.setObjectName("label_NumInvoice")
        self.gridLayout_4.addWidget(self.label_NumInvoice, 1, 4, 1, 1)
        self.InvoiceNumber_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.InvoiceNumber_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.InvoiceNumber_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.InvoiceNumber_Invoice.setFont(font)
        self.InvoiceNumber_Invoice.setObjectName("InvoiceNumber_Invoice")
        self.gridLayout_4.addWidget(self.InvoiceNumber_Invoice, 1, 5, 1, 1)
        self.label_DelivNote = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_DelivNote.setMinimumSize(QtCore.QSize(150, 25))
        self.label_DelivNote.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DelivNote.setFont(font)
        self.label_DelivNote.setObjectName("label_DelivNote")
        self.gridLayout_4.addWidget(self.label_DelivNote, 1, 6, 1, 2)
        self.DelivNote_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.DelivNote_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.DelivNote_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivNote_Invoice.setFont(font)
        self.DelivNote_Invoice.setObjectName("DelivNote_Invoice")
        self.gridLayout_4.addWidget(self.DelivNote_Invoice, 1, 8, 1, 1)
        self.label_TheirRef = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_TheirRef.setMinimumSize(QtCore.QSize(50, 25))
        self.label_TheirRef.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_TheirRef.setFont(font)
        self.label_TheirRef.setObjectName("label_TheirRef")
        self.gridLayout_4.addWidget(self.label_TheirRef, 2, 0, 1, 1)
        self.TheirRef_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TheirRef_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.TheirRef_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TheirRef_Invoice.setFont(font)
        self.TheirRef_Invoice.setObjectName("TheirRef_Invoice")
        self.gridLayout_4.addWidget(self.TheirRef_Invoice, 2, 1, 1, 1)
        self.label_Destination = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Destination.setMinimumSize(QtCore.QSize(100, 25))
        self.label_Destination.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Destination.setFont(font)
        self.label_Destination.setObjectName("label_Destination")
        self.gridLayout_4.addWidget(self.label_Destination, 2, 2, 1, 1)
        self.Destination_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Destination_Invoice.setFont(font)
        self.Destination_Invoice.setObjectName("Destination_Invoice")
        self.gridLayout_4.addWidget(self.Destination_Invoice, 2, 3, 1, 1)
        self.label_Comments = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Comments.setMinimumSize(QtCore.QSize(95, 25))
        self.label_Comments.setMaximumSize(QtCore.QSize(95, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Comments.setFont(font)
        self.label_Comments.setObjectName("label_Comments")
        self.gridLayout_4.addWidget(self.label_Comments, 2, 4, 1, 1)
        self.Comment_Invoice = QtWidgets.QTextEdit(parent=self.scrollAreaWidgetContents)
        self.Comment_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.Comment_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Comment_Invoice.setFont(font)
        self.Comment_Invoice.setObjectName("Comment_Invoice")
        self.gridLayout_4.addWidget(self.Comment_Invoice, 2, 5, 1, 4)
        self.label_OurRef = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_OurRef.setMinimumSize(QtCore.QSize(50, 25))
        self.label_OurRef.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_OurRef.setFont(font)
        self.label_OurRef.setObjectName("label_OurRef")
        self.gridLayout_4.addWidget(self.label_OurRef, 3, 0, 1, 1)
        self.OurRef_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.OurRef_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.OurRef_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        self.OurRef_Invoice.setObjectName("OurRef_Invoice")
        self.gridLayout_4.addWidget(self.OurRef_Invoice, 3, 1, 1, 1)
        self.label_Transport = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Transport.setMinimumSize(QtCore.QSize(150, 0))
        self.label_Transport.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Transport.setFont(font)
        self.label_Transport.setObjectName("label_Transport")
        self.gridLayout_4.addWidget(self.label_Transport, 3, 2, 1, 1)
        self.Transport_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Transport_Invoice.setFont(font)
        self.Transport_Invoice.setObjectName("Transport_Invoice")
        self.gridLayout_4.addWidget(self.Transport_Invoice, 3, 3, 1, 1)
        self.label_Application = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Application.setMinimumSize(QtCore.QSize(0, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Application.setFont(font)
        self.label_Application.setObjectName("label_Application")
        self.gridLayout_4.addWidget(self.label_Application, 3, 4, 1, 1)
        self.Application_Invoice = QtWidgets.QComboBox(parent=self.scrollAreaWidgetContents)
        self.Application_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Application_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Application_Invoice.setFont(font)
        self.Application_Invoice.setObjectName("Application_Invoice")
        self.gridLayout_4.addWidget(self.Application_Invoice, 3, 5, 1, 1)
        self.label_DestCountry = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_DestCountry.setMinimumSize(QtCore.QSize(150, 25))
        self.label_DestCountry.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DestCountry.setFont(font)
        self.label_DestCountry.setObjectName("label_DestCountry")
        self.gridLayout_4.addWidget(self.label_DestCountry, 3, 6, 1, 2)
        self.DestCountry_Invoice = QtWidgets.QComboBox(parent=self.scrollAreaWidgetContents)
        self.DestCountry_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.DestCountry_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DestCountry_Invoice.setFont(font)
        self.DestCountry_Invoice.setObjectName("DestCountry_Invoice")
        self.gridLayout_4.addWidget(self.DestCountry_Invoice, 3, 8, 1, 1)
        self.label_ClientGroup = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ClientGroup.setFont(font)
        self.label_ClientGroup.setObjectName("label_ClientGroup")
        self.label_ClientGroup.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_4.addWidget(self.label_ClientGroup, 3, 9, 1, 1)
        self.Button_CreateInvoice = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_CreateInvoice.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_CreateInvoice.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_CreateInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_CreateInvoice.setAutoDefault(True)
        self.Button_CreateInvoice.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_CreateInvoice.setObjectName("Button_CreateInvoice")
        self.Button_CreateInvoice.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_CreateInvoice, 1, 9, 1, 1)
        self.Button_EditInvoice = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_EditInvoice.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_EditInvoice.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_EditInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_EditInvoice.setAutoDefault(True)
        self.Button_EditInvoice.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_EditInvoice.setObjectName("Button_EditInvoice")
        self.Button_EditInvoice.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_EditInvoice, 2, 9, 1, 1)
        # self.line_horizontal = QtWidgets.QFrame(parent=self.scrollAreaWidgetContents)
        # self.line_horizontal.setObjectName("line_horizontal")
        # self.line_horizontal.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        # self.line_horizontal.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        # self.gridLayout_4.addWidget(self.line_horizontal, 4, 0, 1, 10)
        self.label_Item = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Item.setMinimumSize(QtCore.QSize(50, 25))
        self.label_Item.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Item.setFont(font)
        self.label_Item.setObjectName("label_Item")
        self.gridLayout_4.addWidget(self.label_Item, 5, 0, 1, 1)
        self.label_Qty = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Qty.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Qty.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Qty.setFont(font)
        self.label_Qty.setObjectName("label_Qty")
        self.gridLayout_4.addWidget(self.label_Qty, 5, 1, 1, 1)
        self.label_Description = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Description.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Description.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Description.setFont(font)
        self.label_Description.setObjectName("label_Description")
        self.gridLayout_4.addWidget(self.label_Description, 5, 2, 1, 1)
        self.Description_Invoice = QtWidgets.QTextEdit(parent=self.scrollAreaWidgetContents)
        self.Description_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Description_Invoice.setFont(font)
        self.Description_Invoice.setObjectName("Description_Invoice")
        self.gridLayout_4.addWidget(self.Description_Invoice, 5, 3, 2, 1)
        self.label_UnitValueEur = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_UnitValueEur.setMinimumSize(QtCore.QSize(80, 25))
        self.label_UnitValueEur.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_UnitValueEur.setFont(font)
        self.label_UnitValueEur.setObjectName("label_UnitValueEur")
        self.gridLayout_4.addWidget(self.label_UnitValueEur, 5, 4, 1, 1)
        self.label_UnitValueDollar = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_UnitValueDollar.setMinimumSize(QtCore.QSize(80, 25))
        self.label_UnitValueDollar.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_UnitValueDollar.setFont(font)
        self.label_UnitValueDollar.setObjectName("label_UnitValueDollar")
        self.gridLayout_4.addWidget(self.label_UnitValueDollar, 5, 5, 1, 1)
        self.AgInterm = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.AgInterm.setFont(font)
        self.AgInterm.setReadOnly(True)
        self.AgInterm.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.AgInterm.setObjectName("AgInterm")
        self.gridLayout_4.addWidget(self.AgInterm, 5, 8, 1, 1)
        self.AgIntermOk = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.AgIntermOk.setFont(font)
        self.AgIntermOk.setReadOnly(True)
        self.AgIntermOk.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.AgIntermOk.setObjectName("AgIntermOk")
        self.gridLayout_4.addWidget(self.AgIntermOk, 6, 8, 1, 1)
        self.AgIntermState = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.AgIntermState.setFont(font)
        self.AgIntermState.setReadOnly(True)
        self.AgIntermState.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.AgIntermState.setObjectName("AgIntermState")
        self.gridLayout_4.addWidget(self.AgIntermState, 7, 8, 1, 1)
        self.Button_SearchInvoice = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_SearchInvoice.setMinimumSize(QtCore.QSize(0, 35))
        self.Button_SearchInvoice.setMaximumSize(QtCore.QSize(16777215, 500))
        self.Button_SearchInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_SearchInvoice.setAutoDefault(True)
        self.Button_SearchInvoice.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_SearchInvoice.setObjectName("Button_SearchInvoice")
        self.Button_SearchInvoice.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_SearchInvoice, 5, 9, 3, 1)
        self.Item_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Item_Invoice.setMinimumSize(QtCore.QSize(100, 30))
        self.Item_Invoice.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Item_Invoice.setFont(font)
        self.Item_Invoice.setObjectName("Item_Invoice")
        self.gridLayout_4.addWidget(self.Item_Invoice, 6, 0, 1, 1)
        self.Qty_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Qty_Invoice.setMinimumSize(QtCore.QSize(100, 30))
        self.Qty_Invoice.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Qty_Invoice.setFont(font)
        self.Qty_Invoice.setObjectName("Qty_Invoice")
        self.gridLayout_4.addWidget(self.Qty_Invoice, 6, 1, 1, 1)
        self.UnitValueEur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.UnitValueEur_Invoice.setMinimumSize(QtCore.QSize(80, 30))
        self.UnitValueEur_Invoice.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.UnitValueEur_Invoice.setFont(font)
        self.UnitValueEur_Invoice.setObjectName("UnitValueEur_Invoice")
        self.gridLayout_4.addWidget(self.UnitValueEur_Invoice, 6, 4, 1, 1)
        self.UnitValueDollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.UnitValueDollar_Invoice.setMinimumSize(QtCore.QSize(80, 30))
        self.UnitValueDollar_Invoice.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.UnitValueDollar_Invoice.setFont(font)
        self.UnitValueDollar_Invoice.setObjectName("UnitValueDollar_Invoice")
        self.gridLayout_4.addWidget(self.UnitValueDollar_Invoice, 6, 5, 1, 1)
        self.Button_AddReg = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_AddReg.setMinimumSize(QtCore.QSize(150, 30))
        self.Button_AddReg.setMaximumSize(QtCore.QSize(16777215, 30))
        self.Button_AddReg.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_AddReg.setAutoDefault(True)
        self.Button_AddReg.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_AddReg.setObjectName("Button_AddReg")
        self.Button_AddReg.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_AddReg, 5, 6, 1, 2)
        self.Button_EditReg = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_EditReg.setMinimumSize(QtCore.QSize(150, 30))
        self.Button_EditReg.setMaximumSize(QtCore.QSize(16777215, 30))
        self.Button_EditReg.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_EditReg.setAutoDefault(True)
        self.Button_EditReg.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_EditReg.setObjectName("Button_EditReg")
        self.Button_EditReg.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_EditReg, 6, 6, 1, 2)
        self.Button_DeleteReg = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_DeleteReg.setMinimumSize(QtCore.QSize(150, 30))
        self.Button_DeleteReg.setMaximumSize(QtCore.QSize(16777215, 30))
        self.Button_DeleteReg.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_DeleteReg.setAutoDefault(True)
        self.Button_DeleteReg.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_DeleteReg.setObjectName("Button_DeleteReg")
        self.Button_DeleteReg.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_DeleteReg, 7, 6, 1, 2)
        self.label_Details = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Details.setMinimumSize(QtCore.QSize(100, 25))
        self.label_Details.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Details.setFont(font)
        self.label_Details.setObjectName("label_Details")
        self.gridLayout_4.addWidget(self.label_Details, 7, 0, 1, 1)
        self.label_IDRecord = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_IDRecord.setObjectName("label_IDRecord")
        self.label_IDRecord.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_4.addWidget(self.label_IDRecord, 7, 4, 1, 1)
        self.label_IDInvoice = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_IDInvoice.setMinimumSize(QtCore.QSize(150, 25))
        self.label_IDInvoice.setMaximumSize(QtCore.QSize(150, 16777215))
        self.label_IDInvoice.setObjectName("label_IDInvoice")
        self.label_IDInvoice.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_4.addWidget(self.label_IDInvoice, 7, 5, 1, 1)
        self.tableRecords = CustomTableWidgetRecord()
        self.tableRecords.setMinimumSize(QtCore.QSize(0, 300))
        self.tableRecords.setMaximumSize(QtCore.QSize(16777215, 300))
        self.tableRecords.setObjectName("tableRecords")
        self.tableRecords.setColumnCount(8)
        self.tableRecords.setRowCount(0)
        for i in range(8):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableRecords.setHorizontalHeaderItem(i, item)
        self.gridLayout_4.addWidget(self.tableRecords, 8, 0, 1, 10)
        self.label_Qty_Elements = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Qty_Elements.setMinimumSize(QtCore.QSize(0, 25))
        self.label_Qty_Elements.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Qty_Elements.setFont(font)
        self.label_Qty_Elements.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_Qty_Elements.setObjectName("label_Qty_Elements")
        self.gridLayout_4.addWidget(self.label_Qty_Elements, 9, 0, 1, 1)
        self.Qty_Elements = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Qty_Elements.setMinimumSize(QtCore.QSize(0, 25))
        self.Qty_Elements.setMaximumSize(QtCore.QSize(150, 25))
        self.Qty_Elements.setReadOnly(True)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Qty_Elements.setFont(font)
        self.Qty_Elements.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.Qty_Elements.setObjectName("Qty_Elements")
        self.gridLayout_4.addWidget(self.Qty_Elements, 9, 1, 1, 1)
        self.label_Total = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Total.setMinimumSize(QtCore.QSize(150, 25))
        self.label_Total.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Total.setFont(font)
        self.label_Total.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_Total.setObjectName("label_Total")
        self.gridLayout_4.addWidget(self.label_Total, 9, 5, 1, 1)
        self.TotalEur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TotalEur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.TotalEur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TotalEur_Invoice.setFont(font)
        self.TotalEur_Invoice.setReadOnly(True)
        self.TotalEur_Invoice.setObjectName("TotalEur_Invoice")
        self.gridLayout_4.addWidget(self.TotalEur_Invoice, 9, 6, 1, 1)
        self.label_1 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_1.setMinimumSize(QtCore.QSize(10, 25))
        self.label_1.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_1.setFont(font)
        self.label_1.setObjectName("label_1")
        self.gridLayout_4.addWidget(self.label_1, 9, 7, 1, 1)
        self.TotalDollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TotalDollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.TotalDollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TotalDollar_Invoice.setFont(font)
        self.TotalDollar_Invoice.setReadOnly(True)
        self.TotalDollar_Invoice.setObjectName("TotalDollar_Invoice")
        self.gridLayout_4.addWidget(self.TotalDollar_Invoice, 9, 8, 1, 1)
        self.label_2 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_2.setMinimumSize(QtCore.QSize(10, 25))
        self.label_2.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout_4.addWidget(self.label_2, 9, 9, 1, 1)
        self.label_GrossWeight = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_GrossWeight.setMinimumSize(QtCore.QSize(0, 25))
        self.label_GrossWeight.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_GrossWeight.setFont(font)
        self.label_GrossWeight.setObjectName("label_GrossWeight")
        self.gridLayout_4.addWidget(self.label_GrossWeight, 10, 0, 1, 1)
        self.GrossWeight_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.GrossWeight_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.GrossWeight_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.GrossWeight_Invoice.setFont(font)
        self.GrossWeight_Invoice.setObjectName("GrossWeight_Invoice")
        self.gridLayout_4.addWidget(self.GrossWeight_Invoice, 10, 1, 1, 2)
        self.TxtCon1_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon1_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon1_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon1_Invoice.setFont(font)
        self.TxtCon1_Invoice.setObjectName("TxtCon1_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon1_Invoice, 10, 3, 1, 3)
        self.Con1Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con1Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con1Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con1Eur_Invoice.setFont(font)
        self.Con1Eur_Invoice.setObjectName("Con1Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con1Eur_Invoice, 10, 6, 1, 1)
        self.label_3 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_3.setMinimumSize(QtCore.QSize(10, 25))
        self.label_3.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout_4.addWidget(self.label_3, 10, 7, 1, 1)
        self.Con1Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con1Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con1Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con1Dollar_Invoice.setFont(font)
        self.Con1Dollar_Invoice.setObjectName("Con1Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con1Dollar_Invoice, 10, 8, 1, 1)
        self.label_4 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_4.setMinimumSize(QtCore.QSize(10, 25))
        self.label_4.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout_4.addWidget(self.label_4, 10, 9, 1, 1)
        self.label_NetWeight = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_NetWeight.setMinimumSize(QtCore.QSize(0, 25))
        self.label_NetWeight.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NetWeight.setFont(font)
        self.label_NetWeight.setObjectName("label_NetWeight")
        self.gridLayout_4.addWidget(self.label_NetWeight, 11, 0, 1, 1)
        self.NetWeight_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.NetWeight_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.NetWeight_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.NetWeight_Invoice.setFont(font)
        self.NetWeight_Invoice.setObjectName("NetWeight_Invoice")
        self.gridLayout_4.addWidget(self.NetWeight_Invoice, 11, 1, 1, 2)
        self.TxtCon2_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon2_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon2_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon2_Invoice.setFont(font)
        self.TxtCon2_Invoice.setObjectName("TxtCon2_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon2_Invoice, 11, 3, 1, 3)
        self.Con2Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con2Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con2Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con2Eur_Invoice.setFont(font)
        self.Con2Eur_Invoice.setObjectName("Con2Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con2Eur_Invoice, 11, 6, 1, 1)
        self.label_5 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_5.setMinimumSize(QtCore.QSize(10, 25))
        self.label_5.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.gridLayout_4.addWidget(self.label_5, 11, 7, 1, 1)
        self.Con2Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con2Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con2Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con2Dollar_Invoice.setFont(font)
        self.Con2Dollar_Invoice.setObjectName("Con2Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con2Dollar_Invoice, 11, 8, 1, 1)
        self.label_6 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_6.setMinimumSize(QtCore.QSize(10, 25))
        self.label_6.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_2")
        self.gridLayout_4.addWidget(self.label_6, 11, 9, 1, 1)
        self.label_Dimensions = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_Dimensions.setMinimumSize(QtCore.QSize(0, 25))
        self.label_Dimensions.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Dimensions.setFont(font)
        self.label_Dimensions.setObjectName("label_Dimensions")
        self.gridLayout_4.addWidget(self.label_Dimensions, 12, 0, 1, 1)
        self.Dimensions_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Dimensions_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.Dimensions_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Dimensions_Invoice.setFont(font)
        self.Dimensions_Invoice.setObjectName("Dimensions_Invoice")
        self.gridLayout_4.addWidget(self.Dimensions_Invoice, 12, 1, 1, 2)
        self.TxtCon3_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon3_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon3_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon3_Invoice.setFont(font)
        self.TxtCon3_Invoice.setObjectName("TxtCon3_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon3_Invoice, 12, 3, 1, 3)
        self.Con3Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con3Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con3Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con3Eur_Invoice.setFont(font)
        self.Con3Eur_Invoice.setObjectName("Con3Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con3Eur_Invoice, 12, 6, 1, 1)
        self.label_7 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_7.setMinimumSize(QtCore.QSize(10, 25))
        self.label_7.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.gridLayout_4.addWidget(self.label_7, 12, 7, 1, 1)
        self.Con3Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con3Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con3Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con3Dollar_Invoice.setFont(font)
        self.Con3Dollar_Invoice.setObjectName("Con3Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con3Dollar_Invoice, 12, 8, 1, 1)
        self.label_8 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_8.setMinimumSize(QtCore.QSize(10, 25))
        self.label_8.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout_4.addWidget(self.label_8, 12, 9, 1, 1)
        self.label_MercType = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_MercType.setMinimumSize(QtCore.QSize(0, 25))
        self.label_MercType.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_MercType.setFont(font)
        self.label_MercType.setObjectName("label_MercType")
        self.gridLayout_4.addWidget(self.label_MercType, 13, 0, 1, 1)
        self.MercType_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.MercType_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.MercType_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.MercType_Invoice.setFont(font)
        self.MercType_Invoice.setObjectName("MercType_Invoice")
        self.gridLayout_4.addWidget(self.MercType_Invoice, 13, 1, 1, 2)
        self.TxtCon4_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon4_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon4_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon4_Invoice.setFont(font)
        self.TxtCon4_Invoice.setObjectName("TxtCon4_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon4_Invoice, 13, 3, 1, 3)
        self.Con4Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con4Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con4Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con4Eur_Invoice.setFont(font)
        self.Con4Eur_Invoice.setObjectName("Con4Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con4Eur_Invoice, 13, 6, 1, 1)
        self.label_9 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_9.setMinimumSize(QtCore.QSize(10, 25))
        self.label_9.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.gridLayout_4.addWidget(self.label_9, 13, 7, 1, 1)
        self.Con4Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con4Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con4Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con4Dollar_Invoice.setFont(font)
        self.Con4Dollar_Invoice.setObjectName("Con4Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con4Dollar_Invoice, 13, 8, 1, 1)
        self.label_10 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_10.setMinimumSize(QtCore.QSize(10, 25))
        self.label_10.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.gridLayout_4.addWidget(self.label_10, 13, 9, 1, 1)
        self.TxtCon5_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TxtCon5_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.TxtCon5_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TxtCon5_Invoice.setFont(font)
        self.TxtCon5_Invoice.setObjectName("TxtCon5_Invoice")
        self.gridLayout_4.addWidget(self.TxtCon5_Invoice, 14, 3, 1, 3)
        self.Con5Eur_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con5Eur_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con5Eur_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con5Eur_Invoice.setFont(font)
        self.Con5Eur_Invoice.setObjectName("Con5Eur_Invoice")
        self.gridLayout_4.addWidget(self.Con5Eur_Invoice, 14, 6, 1, 1)
        self.label_11 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_11.setMinimumSize(QtCore.QSize(10, 25))
        self.label_11.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.gridLayout_4.addWidget(self.label_11, 14, 7, 1, 1)
        self.Con5Dollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.Con5Dollar_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.Con5Dollar_Invoice.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Con5Dollar_Invoice.setFont(font)
        self.Con5Dollar_Invoice.setObjectName("Con5Dollar_Invoice")
        self.gridLayout_4.addWidget(self.Con5Dollar_Invoice, 14, 8, 1, 1)
        self.label_12 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_12.setMinimumSize(QtCore.QSize(10, 25))
        self.label_12.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.gridLayout_4.addWidget(self.label_12, 14, 9, 1, 1)
        self.label_ValCot = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_ValCot.setMinimumSize(QtCore.QSize(0, 25))
        self.label_ValCot.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ValCot.setFont(font)
        self.label_ValCot.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_ValCot.setObjectName("label_ValCot")
        self.gridLayout_4.addWidget(self.label_ValCot, 15, 0, 1, 1)
        self.ValCotDollar_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.ValCotDollar_Invoice.setMinimumSize(QtCore.QSize(100, 25))
        self.ValCotDollar_Invoice.setMaximumSize(QtCore.QSize(100, 25))
        self.ValCotDollar_Invoice.setObjectName("ValCotDollar_Invoice")
        self.gridLayout_4.addWidget(self.ValCotDollar_Invoice, 15, 1, 1, 1)
        self.label_14 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_14.setMinimumSize(QtCore.QSize(0, 25))
        self.label_14.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.gridLayout_4.addWidget(self.label_14, 15, 2, 1, 1)
        self.AditData3_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.AditData3_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.AditData3_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AditData3_Invoice.setFont(font)
        self.AditData3_Invoice.setObjectName("AditData3_Invoice")
        self.gridLayout_4.addWidget(self.AditData3_Invoice, 15, 3, 1, 3)
        self.label_TaxBase = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_TaxBase.setMinimumSize(QtCore.QSize(150, 25))
        self.label_TaxBase.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_TaxBase.setFont(font)
        self.label_TaxBase.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_TaxBase.setObjectName("label_TaxBase")
        self.gridLayout_4.addWidget(self.label_TaxBase, 15, 6, 1, 1)
        self.TaxBase_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.TaxBase_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.TaxBase_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TaxBase_Invoice.setFont(font)
        self.TaxBase_Invoice.setReadOnly(True)
        self.TaxBase_Invoice.setObjectName("TaxBase_Invoice")
        self.gridLayout_4.addWidget(self.TaxBase_Invoice, 15, 7, 1, 2)
        self.label_13 = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_13.setMinimumSize(QtCore.QSize(10, 25))
        self.label_13.setMaximumSize(QtCore.QSize(10, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.gridLayout_4.addWidget(self.label_13, 15, 9, 1, 1)
        self.label_PayDate = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_PayDate.setMinimumSize(QtCore.QSize(0, 25))
        self.label_PayDate.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_PayDate.setFont(font)
        self.label_PayDate.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_PayDate.setObjectName("label_PayDate")
        self.gridLayout_4.addWidget(self.label_PayDate, 16, 0, 1, 1)
        self.PayDate_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.PayDate_Invoice.setMinimumSize(QtCore.QSize(100, 25))
        self.PayDate_Invoice.setMaximumSize(QtCore.QSize(100, 25))
        self.PayDate_Invoice.setReadOnly(True)
        self.PayDate_Invoice.setObjectName("PayDate_Invoice")
        self.gridLayout_4.addWidget(self.PayDate_Invoice, 16, 1, 1, 1)
        self.AditData4_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.AditData4_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.AditData4_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AditData4_Invoice.setFont(font)
        self.AditData4_Invoice.setObjectName("AditData4_Invoice")
        self.gridLayout_4.addWidget(self.AditData4_Invoice, 16, 3, 1, 3)
        self.label_IVA = QtWidgets.QLabel(parent=self.scrollAreaWidgetContents)
        self.label_IVA.setMinimumSize(QtCore.QSize(150, 25))
        self.label_IVA.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_IVA.setFont(font)
        self.label_IVA.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_IVA.setObjectName("label_IVA")
        self.gridLayout_4.addWidget(self.label_IVA, 16, 6, 1, 1)
        self.IVACL_Invoice = QtWidgets.QLineEdit(parent=self.scrollAreaWidgetContents)
        self.IVACL_Invoice.setMinimumSize(QtCore.QSize(150, 25))
        self.IVACL_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.IVACL_Invoice.setFont(font)
        self.IVACL_Invoice.setObjectName("IVACL_Invoice")
        self.gridLayout_4.addWidget(self.IVACL_Invoice, 16, 7, 1, 2)
        self.Button_FactEuro = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_FactEuro.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_FactEuro.setAutoDefault(True)
        self.Button_FactEuro.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_FactEuro.setObjectName("Button_FactEuro")
        self.Button_FactEuro.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_FactEuro, 17, 1, 1, 1)
        self.Button_FactDollar = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_FactDollar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_FactDollar.setAutoDefault(True)
        self.Button_FactDollar.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_FactDollar.setObjectName("Button_FactDollar")
        self.Button_FactDollar.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_FactDollar, 18, 1, 1, 1)
        self.Button_DelivNote = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.Button_DelivNote.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_DelivNote.setAutoDefault(True)
        self.Button_DelivNote.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_DelivNote.setObjectName("Button_DelivNote")
        self.Button_DelivNote.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_4.addWidget(self.Button_DelivNote, 19, 1, 1, 1)
        self.frame_2 = QtWidgets.QFrame(parent=self.scrollAreaWidgetContents)
        self.frame_2.setStyleSheet(".QFrame {\n"
"    border: 1px solid black;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_ClAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_ClAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_ClAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ClAlb.setFont(font)
        self.label_ClAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_ClAlb.setObjectName("label_ClAlb")
        self.gridLayout_3.addWidget(self.label_ClAlb, 0, 0, 1, 1)
        self.ClAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.ClAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.ClAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.ClAlb_Invoice.setFont(font)
        self.ClAlb_Invoice.setObjectName("ClAlb_Invoice")
        self.gridLayout_3.addWidget(self.ClAlb_Invoice, 0, 1, 1, 5)
        self.label_DateAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_DateAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_DateAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DateAlb.setFont(font)
        self.label_DateAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_DateAlb.setObjectName("label_DateAlb")
        self.gridLayout_3.addWidget(self.label_DateAlb, 2, 0, 1, 1)
        self.DateAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.DateAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.DateAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DateAlb_Invoice.setFont(font)
        self.DateAlb_Invoice.setObjectName("DateAlb_Invoice")
        self.gridLayout_3.addWidget(self.DateAlb_Invoice, 2, 1, 1, 1)
        self.label_AtteAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_AtteAlb.setMinimumSize(QtCore.QSize(50, 25))
        self.label_AtteAlb.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_AtteAlb.setFont(font)
        self.label_AtteAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_AtteAlb.setObjectName("label_AtteAlb")
        self.gridLayout_3.addWidget(self.label_AtteAlb, 2, 2, 1, 1)
        self.AtteAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.AtteAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.AtteAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AtteAlb_Invoice.setFont(font)
        self.AtteAlb_Invoice.setObjectName("AtteAlb_Invoice")
        self.gridLayout_3.addWidget(self.AtteAlb_Invoice, 2, 3, 1, 1)
        self.label_DestAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_DestAlb.setMinimumSize(QtCore.QSize(50, 25))
        self.label_DestAlb.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DestAlb.setFont(font)
        self.label_DestAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_DestAlb.setObjectName("label_DestAlb")
        self.gridLayout_3.addWidget(self.label_DestAlb, 2, 4, 1, 1)
        self.DestAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.DestAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.DestAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DestAlb_Invoice.setFont(font)
        self.DestAlb_Invoice.setObjectName("DestAlb_Invoice")
        self.gridLayout_3.addWidget(self.DestAlb_Invoice, 2, 5, 1, 1)
        self.label_AddressAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_AddressAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_AddressAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_AddressAlb.setFont(font)
        self.label_AddressAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_AddressAlb.setObjectName("label_AddressAlb")
        self.gridLayout_3.addWidget(self.label_AddressAlb, 4, 0, 1, 1)
        self.AddressAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.AddressAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.AddressAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.AddressAlb_Invoice.setFont(font)
        self.AddressAlb_Invoice.setObjectName("AddressAlb_Invoice")
        self.gridLayout_3.addWidget(self.AddressAlb_Invoice, 4, 1, 1, 3)
        self.label_ZCAlb = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ZCAlb.setFont(font)
        self.label_ZCAlb.setObjectName("label_ZCAlb")
        self.gridLayout_3.addWidget(self.label_ZCAlb, 4, 4, 1, 1)
        self.ZCAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.ZCAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.ZCAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ZCAlb_Invoice.setFont(font)
        self.ZCAlb_Invoice.setObjectName("ZCAlb_Invoice")
        self.gridLayout_3.addWidget(self.ZCAlb_Invoice, 4, 5, 1, 1)
        self.label_CityAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_CityAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_CityAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_CityAlb.setFont(font)
        self.label_CityAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_CityAlb.setObjectName("label_CityAlb")
        self.gridLayout_3.addWidget(self.label_CityAlb, 5, 0, 1, 1)
        self.CityAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.CityAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.CityAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CityAlb_Invoice.setFont(font)
        self.CityAlb_Invoice.setObjectName("CityAlb_Invoice")
        self.gridLayout_3.addWidget(self.CityAlb_Invoice, 5, 1, 1, 1)
        self.label_ProvinceAlb = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ProvinceAlb.setFont(font)
        self.label_ProvinceAlb.setObjectName("label_ProvinceAlb")
        self.gridLayout_3.addWidget(self.label_ProvinceAlb, 5, 2, 1, 1)
        self.ProvinceAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.ProvinceAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.ProvinceAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ProvinceAlb_Invoice.setFont(font)
        self.ProvinceAlb_Invoice.setObjectName("ProvinceAlb_Invoice")
        self.gridLayout_3.addWidget(self.ProvinceAlb_Invoice, 5, 3, 1, 1)
        self.label_CountryAlb = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_CountryAlb.setFont(font)
        self.label_CountryAlb.setObjectName("label_CountryAlb")
        self.gridLayout_3.addWidget(self.label_CountryAlb, 5, 4, 1, 1)
        self.CountryAlb_Invoice = QtWidgets.QLineEdit(parent=self.frame_2)
        self.CountryAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.CountryAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CountryAlb_Invoice.setFont(font)
        self.CountryAlb_Invoice.setObjectName("CountryAlb_Invoice")
        self.gridLayout_3.addWidget(self.CountryAlb_Invoice, 5, 5, 1, 1)
        self.label_ObsAlb = QtWidgets.QLabel(parent=self.frame_2)
        self.label_ObsAlb.setMinimumSize(QtCore.QSize(75, 25))
        self.label_ObsAlb.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ObsAlb.setFont(font)
        self.label_ObsAlb.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_ObsAlb.setObjectName("label_ObsAlb")
        self.gridLayout_3.addWidget(self.label_ObsAlb, 6, 0, 1, 1)
        self.ObsAlb_Invoice = QtWidgets.QTextEdit(parent=self.frame_2)
        self.ObsAlb_Invoice.setMinimumSize(QtCore.QSize(0, 25))
        self.ObsAlb_Invoice.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ObsAlb_Invoice.setFont(font)
        self.ObsAlb_Invoice.setObjectName("ObsAlb_Invoice")
        self.gridLayout_3.addWidget(self.ObsAlb_Invoice, 6, 1, 1, 5)
        self.gridLayout_4.addWidget(self.frame_2, 17, 3, 3, 7)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.scrollArea)
        self.tableInvoice = CustomTableWidgetInvoice()
        self.tableInvoice.setMaximumSize(QtCore.QSize(16777215, 225))
        self.tableInvoice.setObjectName("tableInvoice")
        self.tableInvoice.setColumnCount(13)
        self.tableInvoice.setRowCount(0)
        for i in range(13):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableInvoice.setHorizontalHeaderItem(i, item)
        self.verticalLayout_2.addWidget(self.tableInvoice)
        self.gridLayout_bottom = QtWidgets.QGridLayout()
        self.gridLayout_bottom.setObjectName("gridLayout_bottom")
        self.verticalLayout_2.addLayout(self.gridLayout_bottom)

        self.label_filter = QtWidgets.QLabel(parent=self.frame_3)
        self.label_filter.setMinimumSize(QtCore.QSize(100, 25))
        self.label_filter.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_filter.setFont(font)
        self.label_filter.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_filter.setObjectName("label_filter")
        self.gridLayout_bottom.addWidget(self.label_filter, 0, 0, 1, 1)
        self.Filter_Invoice = QtWidgets.QLineEdit(parent=self.frame_3)
        self.Filter_Invoice.setMinimumSize(QtCore.QSize(100, 25))
        self.Filter_Invoice.setMaximumSize(QtCore.QSize(100, 25))
        self.Filter_Invoice.setObjectName("Filter_Invoice")
        self.gridLayout_bottom.addWidget(self.Filter_Invoice, 0, 1, 1, 1)

        self.Button_AcceptFilter = QtWidgets.QPushButton(parent=self.frame_3)
        self.Button_AcceptFilter.setMinimumSize(QtCore.QSize(30, 25))
        self.Button_AcceptFilter.setMaximumSize(QtCore.QSize(30, 25))
        self.Button_AcceptFilter.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_AcceptFilter.setAutoDefault(True)
        self.Button_AcceptFilter.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_AcceptFilter.setObjectName("Button_AcceptFilter")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Check.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_AcceptFilter.setIcon(icon1)
        self.Button_AcceptFilter.setIconSize(QtCore.QSize(20, 20))
        self.Button_AcceptFilter.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_bottom.addWidget(self.Button_AcceptFilter, 0, 3, 1, 1)
        self.Button_DeleteFilter = QtWidgets.QPushButton(parent=self.frame_3)
        self.Button_DeleteFilter.setMinimumSize(QtCore.QSize(30, 25))
        self.Button_DeleteFilter.setMaximumSize(QtCore.QSize(30, 25))
        self.Button_DeleteFilter.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_DeleteFilter.setAutoDefault(True)
        self.Button_DeleteFilter.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_DeleteFilter.setObjectName("Button_DeleteFilter")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Delete.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_DeleteFilter.setIcon(icon2)
        self.Button_DeleteFilter.setIconSize(QtCore.QSize(20, 20))
        self.Button_DeleteFilter.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_bottom.addWidget(self.Button_DeleteFilter, 0, 4, 1, 1)
        self.label_filter_xxx = QtWidgets.QLabel(parent=self.frame_3)
        self.label_filter_xxx.setMinimumSize(QtCore.QSize(0, 25))
        self.label_filter_xxx.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_filter_xxx.setFont(font)
        self.label_filter_xxx.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_filter_xxx.setObjectName("label_filter_xxx")
        self.gridLayout_bottom.addWidget(self.label_filter_xxx, 0, 5, 1, 1)
        self.gridLayout.addWidget(self.frame_3, 0, 0, 1, 1)
        Invoice_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Invoice_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1476, 22))
        self.menubar.setObjectName("menubar")
        Invoice_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Invoice_Window)
        self.statusbar.setObjectName("statusbar")
        Invoice_Window.setStatusBar(self.statusbar)
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableInvoice.setSortingEnabled(False)
        self.tableInvoice.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")

        self.retranslateUi(Invoice_Window)
        QtCore.QMetaObject.connectSlotsByName(Invoice_Window)

        commands_clients = "SELECT * FROM purch_fact.clients_test ORDER BY name"
        commands_destcountry = "SELECT * FROM purch_fact.destination_country ORDER BY id"
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_clients)
            results_clients=cur.fetchall()
            cur.execute(commands_destcountry)
            results_destcountry=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_clients=[x[2] for x in results_clients]
        list_destcountry=[x[1] for x in results_destcountry]

    # Adding items to comboboxes
        self.Client_Invoice.addItems(list_clients)
        self.DestCountry_Invoice.addItems(sorted(list_destcountry))
        self.Application_Invoice.addItems(['CAUDAL','NIVELES','OTROS','TEMPERATURA'])
    # Adding function when changing combobox value
        self.Client_Invoice.currentIndexChanged.connect(self.clientchange)
        self.DestCountry_Invoice.currentIndexChanged.connect(self.destcountrychange)
    # Adding functions to tables
        self.tableRecords.horizontalHeader().sectionClicked.connect(self.on_headerrecords_section_clicked)
        self.tableInvoice.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.tableInvoice.itemClicked.connect(self.loadforminvoice)
        self.tableRecords.itemClicked.connect(self.loadformrecords)
    # Adding functions to buttons
        self.Button_CreateInvoice.clicked.connect(self.createinvoice)
        self.Button_EditInvoice.clicked.connect(self.modifyinvoice)
        self.Button_AddReg.clicked.connect(self.addrecord)
        self.Button_EditReg.clicked.connect(self.modifyrecord)
        self.Button_DeleteReg.clicked.connect(self.deleterecord)
        self.Button_FactEuro.clicked.connect(self.submiteuroinvoice)
        self.Button_FactDollar.clicked.connect(self.submitdollarinvoice)
        self.Button_DelivNote.clicked.connect(self.generate_delivnote)
        self.Button_AcceptFilter.clicked.connect(self.filterinvoicetable)
        self.Filter_Invoice.returnPressed.connect(self.filterinvoicetable)
        self.Button_DeleteFilter.clicked.connect(self.loadinvoicetable)
        self.Button_SearchInvoice.clicked.connect(lambda: self.search_invoice(Invoice_Window))
    # Adding function when editing the value of currency change €/$
        self.ValCotDollar_Invoice.returnPressed.connect(self.calculate_totalorder)
        self.ValCotDollar_Invoice.editingFinished.connect(self.calculate_totalorder)
    # Adding function when editing the value of aditional concepts
        self.Con1Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con2Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con3Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con4Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con5Eur_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con1Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con2Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con3Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con4Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)
        self.Con5Dollar_Invoice.editingFinished.connect(self.calculate_totalorder)

        self.loadinvoicetable()

        if self.numinvoice is not None:
            commands_querytableinvoice = ("""
                        SELECT invoice."id_invoice"
                        FROM purch_fact.invoice_header AS invoice
                        WHERE invoice."num_invoice" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_querytableinvoice, (self.numinvoice,))
                results_invoices=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()
            
            self.label_IDInvoice.setText(str(results_invoices[0][0]))

            self.loadforminvoice(None, self.label_IDInvoice.text())


    def retranslateUi(self, Invoice_Window):
        _translate = QtCore.QCoreApplication.translate
        Invoice_Window.setWindowTitle(_translate("Invoice_Window", "Factura"))
        self.label_1.setText(_translate("Invoice_Window", "€"))
        self.label_3.setText(_translate("Invoice_Window", "€"))
        self.label_5.setText(_translate("Invoice_Window", "€"))
        self.label_7.setText(_translate("Invoice_Window", "€"))
        self.label_9.setText(_translate("Invoice_Window", "€"))
        self.label_11.setText(_translate("Invoice_Window", "€"))
        self.label_13.setText(_translate("Invoice_Window", "€"))
        self.label_2.setText(_translate("Invoice_Window", "$"))
        self.label_4.setText(_translate("Invoice_Window", "$"))
        self.label_6.setText(_translate("Invoice_Window", "$"))
        self.label_8.setText(_translate("Invoice_Window", "$"))
        self.label_10.setText(_translate("Invoice_Window", "$"))
        self.label_12.setText(_translate("Invoice_Window", "$"))
        self.label_14.setText(_translate("Invoice_Window", "$"))
        self.label_MercType.setText(_translate("Invoice_Window", "Tipo Mercad.:"))
        self.label_TheirRef.setText(_translate("Invoice_Window", "S/Ref:"))
        self.label_Details.setText(_translate("Invoice_Window", "Detalle:"))
        self.label_Description.setText(_translate("Invoice_Window", "Descripción:"))
        self.label_TaxBase.setText(_translate("Invoice_Window", "Base Imponible:"))
        self.label_Transport.setText(_translate("Invoice_Window", "Transporte:"))
        self.label_Comments.setText(_translate("Invoice_Window", "Comentario:"))
        self.label_DelivNote.setText(_translate("Invoice_Window", "Nº Albarán:"))
        self.label_NumInvoice.setText(_translate("Invoice_Window", "Nº Factura:"))
        self.label_OurRef.setText(_translate("Invoice_Window", "N/Ref:"))
        self.label_ValCot.setText(_translate("Invoice_Window", "Cot. 1€ ="))
        self.label_Date.setText(_translate("Invoice_Window", "Fecha Fct.:"))
        self.label_IDInvoice.setText(_translate("Invoice_Window", ""))
        self.label_UnitValueEur.setText(_translate("Invoice_Window", "Val. Un.(€):"))
        self.label_UnitValueDollar.setText(_translate("Invoice_Window", "Val. Un.($):"))
        self.label_IDRecord.setText(_translate("Invoice_Window", ""))
        self.label_IVA.setText(_translate("Invoice_Window", "IVA CL:"))
        self.label_Destination.setText(_translate("Invoice_Window", "Destino:"))
        self.label_GrossWeight.setText(_translate("Invoice_Window", "Peso Bruto:"))
        self.label_Client.setText(_translate("Invoice_Window", "Cliente:"))
        self.label_14.setText(_translate("Invoice_Window", "$"))
        self.label_DestCountry.setText(_translate("Invoice_Window", "País Dest:"))
        self.label_Total.setText(_translate("Invoice_Window", "Total:"))
        self.label_Qty.setText(_translate("Invoice_Window", "Cantidad:"))
        self.label_PayDate.setText(_translate("Invoice_Window", "Fch PAGO:"))
        self.label_Application.setText(_translate("Invoice_Window", "Aplicación:"))
        self.label_Item.setText(_translate("Invoice_Window", "Item:"))
        self.label_NetWeight.setText(_translate("Invoice_Window", "Peso Neto:"))
        self.label_Dimensions.setText(_translate("Invoice_Window", "Dimensiones:"))
        self.label_ClAlb.setText(_translate("Invoice_Window", "Cl. Alb:"))
        self.label_DateAlb.setText(_translate("Invoice_Window", "Fch Alb:"))
        self.label_AtteAlb.setText(_translate("Invoice_Window", "Atte:"))
        self.label_DestAlb.setText(_translate("Invoice_Window", "Dest.:"))
        self.label_AddressAlb.setText(_translate("Invoice_Window", "Dirección:"))
        self.label_CityAlb.setText(_translate("Invoice_Window", "Ciudad:"))
        self.label_ObsAlb.setText(_translate("Invoice_Window", "Obs:"))
        self.label_ProvinceAlb.setText(_translate("Invoice_Window", "Provincia:"))
        self.label_ZCAlb.setText(_translate("Invoice_Window", "C.P.:"))
        self.label_CountryAlb.setText(_translate("Invoice_Window", "País:"))
        self.label_Qty_Elements.setText(_translate("Invoice_Window", "Nº Elementos:"))
        self.label_filter.setText(_translate("Invoice_Window", "Filtrar:"))
        self.Button_CreateInvoice.setText(_translate("Invoice_Window", "Crear Factura"))
        self.Button_EditInvoice.setText(_translate("Invoice_Window", "Editar Factura"))
        self.Button_SearchInvoice.setText(_translate("Invoice_Window", "Buscar Factura"))
        self.Button_AddReg.setText(_translate("Invoice_Window", "Agregar"))
        self.Button_EditReg.setText(_translate("Invoice_Window", "Editar"))
        self.Button_DeleteReg.setText(_translate("Invoice_Window", "Eliminar"))
        self.Button_DelivNote.setText(_translate("Invoice_Window", "Albarán"))
        self.Button_FactDollar.setText(_translate("Invoice_Window", "Fact.$"))
        self.Button_FactEuro.setText(_translate("Invoice_Window", "Fact. €"))
        item = self.tableRecords.horizontalHeaderItem(0)
        item.setText(_translate("Invoice_Window", "ID"))
        item = self.tableRecords.horizontalHeaderItem(1)
        item.setText(_translate("Invoice_Window", "Item"))
        item = self.tableRecords.horizontalHeaderItem(2)
        item.setText(_translate("Invoice_Window", "Cantidad"))
        item = self.tableRecords.horizontalHeaderItem(3)
        item.setText(_translate("Invoice_Window", "Descripción"))
        item = self.tableRecords.horizontalHeaderItem(4)
        item.setText(_translate("Invoice_Window", "Valor Unit. €"))
        item = self.tableRecords.horizontalHeaderItem(5)
        item.setText(_translate("Invoice_Window", "Sbtot. €"))
        item = self.tableRecords.horizontalHeaderItem(6)
        item.setText(_translate("Invoice_Window", "Valor Unit. $"))
        item = self.tableRecords.horizontalHeaderItem(7)
        item.setText(_translate("Invoice_Window", "Sbtot. $"))
        item = self.tableInvoice.horizontalHeaderItem(0)
        item.setText(_translate("Invoice_Window", "ID"))
        item = self.tableInvoice.horizontalHeaderItem(1)
        item.setText(_translate("Invoice_Window", "Nº Factura"))
        item = self.tableInvoice.horizontalHeaderItem(2)
        item.setText(_translate("Invoice_Window", "Nº Albarán"))
        item = self.tableInvoice.horizontalHeaderItem(3)
        item.setText(_translate("Invoice_Window", "Fecha Fact."))
        item = self.tableInvoice.horizontalHeaderItem(4)
        item.setText(_translate("Invoice_Window", "Cliente"))
        item = self.tableInvoice.horizontalHeaderItem(5)
        item.setText(_translate("Invoice_Window", "N/Ref"))
        item = self.tableInvoice.horizontalHeaderItem(6)
        item.setText(_translate("Invoice_Window", "S/Ref"))
        item = self.tableInvoice.horizontalHeaderItem(7)
        item.setText(_translate("Invoice_Window", "Obs."))
        item = self.tableInvoice.horizontalHeaderItem(8)
        item.setText(_translate("Invoice_Window", "Fecha Alb."))
        item = self.tableInvoice.horizontalHeaderItem(9)
        item.setText(_translate("Invoice_Window", "Aplicación"))
        item = self.tableInvoice.horizontalHeaderItem(10)
        item.setText(_translate("Invoice_Window", "País Destino"))
        item = self.tableInvoice.horizontalHeaderItem(11)
        item.setText(_translate("Invoice_Window", "Fecha Pago"))
        item = self.tableInvoice.horizontalHeaderItem(12)
        item.setText(_translate("Invoice_Window", "Grupo"))


# Function to create new invoice
    def createinvoice(self):
        invoice_date = self.Date_Invoice.text()
        invoice_number = self.InvoiceNumber_Invoice.text()
        client_name = self.Client_Invoice.currentText()
        delivnote_number = self.DelivNote_Invoice.text()
        their_ref = self.TheirRef_Invoice.text()
        comments = self.Comment_Invoice.toPlainText()
        destination = self.Destination_Invoice.text()
        transport = self.Transport_Invoice.text()
        our_ref = self.OurRef_Invoice.text()
        application = self.Application_Invoice.currentText()
        dest_country = self.DestCountry_Invoice.currentText()
        aginterm = self.AgInterm.text()
        group = self.label_ClientGroup.text()

        commands_clientsid = ("""
                        SELECT clients.id
                        FROM purch_fact.clients_test AS clients
                        WHERE clients.name = %s
                        """)
        commands_destcountryid = ("""
                        SELECT dest_country.id
                        FROM purch_fact.destination_country AS dest_country
                        WHERE dest_country.name = %s
                        """)
        commands_insert_invoice = ("""
                        INSERT INTO purch_fact.invoice_header (
                        "num_invoice", "date_invoice", "id_client", "num_delivnote", "their_ref",
                        "invoice_comments", "destination", "transport", "our_ref", "application",
                        "id_dest_country", "aginterm", "client_group")
                        VALUES (%s, %s, %s, %s, %s,
                        %s, %s, %s, %s, %s,
                        %s, %s, %s)
                        """)
        query_idinvoice = "SELECT id_invoice FROM purch_fact.invoice_header ORDER BY id_invoice"
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_clientsid, (client_name,))
            results_clients_id=cur.fetchall()
            client_id = results_clients_id[0][0]

            cur.execute(commands_destcountryid, (dest_country,))
            results_destcountry_id=cur.fetchall()
            destcountry_id = results_destcountry_id[0][0]

            data = (invoice_number, invoice_date, client_id, delivnote_number, their_ref,
                        comments, destination, transport, our_ref, application,
                        destcountry_id, aginterm, group,)
            cur.execute(commands_insert_invoice, data)

            cur.execute(query_idinvoice)
            result_idorder = cur.fetchall()

        # get id from table
            idinvoice = result_idorder[-1][0]
            self.label_IDInvoice.setText(str(idinvoice))
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Factura creada con éxito")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()
            del dlg, new_icon

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.loadinvoicetable()


# Function to modify invoice data
    def modifyinvoice(self):
        id_invoice = self.label_IDInvoice.text()

        if id_invoice == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona una factura para modificar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon
        else:
            invoice_date = self.Date_Invoice.text()
            invoice_number = self.InvoiceNumber_Invoice.text()
            client_name = self.Client_Invoice.currentText()
            delivnote_number = self.DelivNote_Invoice.text()
            their_ref = self.TheirRef_Invoice.text()
            comments = self.Comment_Invoice.toPlainText()
            destination = self.Destination_Invoice.text()
            transport = self.Transport_Invoice.text()
            our_ref = self.OurRef_Invoice.text()
            application = self.Application_Invoice.currentText()
            dest_country = self.DestCountry_Invoice.currentText()
            aginterm = self.AgInterm.text()
            group = self.label_ClientGroup.text()
            gross_weight = self.GrossWeight_Invoice.text()
            net_weight = self.NetWeight_Invoice.text()
            dimensions = self.Dimensions_Invoice.text()
            merc_type = self.MercType_Invoice.text()
            txtcon1 = self.TxtCon1_Invoice.text()
            txtcon2 = self.TxtCon2_Invoice.text()
            txtcon3 = self.TxtCon3_Invoice.text()
            txtcon4 = self.TxtCon4_Invoice.text()
            txtcon5 = self.TxtCon5_Invoice.text()
            con1_euro = self.Con1Eur_Invoice.text().replace('.',',') if self.Con1Eur_Invoice.text() != '' else None
            con2_euro = self.Con2Eur_Invoice.text().replace('.',',') if self.Con2Eur_Invoice.text() != '' else None
            con3_euro = self.Con3Eur_Invoice.text().replace('.',',') if self.Con3Eur_Invoice.text() != '' else None
            con4_euro = self.Con4Eur_Invoice.text().replace('.',',') if self.Con4Eur_Invoice.text() != '' else None
            con5_euro = self.Con5Eur_Invoice.text().replace('.',',') if self.Con5Eur_Invoice.text() != '' else None
            con1_dollar = self.Con1Dollar_Invoice.text().replace('.',',') if self.Con1Dollar_Invoice.text() != '' else None
            con2_dollar = self.Con2Dollar_Invoice.text().replace('.',',') if self.Con2Dollar_Invoice.text() != '' else None
            con3_dollar = self.Con3Dollar_Invoice.text().replace('.',',') if self.Con3Dollar_Invoice.text() != '' else None
            con4_dollar = self.Con4Dollar_Invoice.text().replace('.',',') if self.Con4Dollar_Invoice.text() != '' else None
            con5_dollar = self.Con5Dollar_Invoice.text().replace('.',',') if self.Con5Dollar_Invoice.text() != '' else None
            data_adic3 = self.AditData3_Invoice.text()
            data_adic4 = self.AditData4_Invoice.text()
            tax_base_amount = self.TaxBase_Invoice.text().replace('.',',') if self.TaxBase_Invoice.text() != '' else None
            iva = self.IVACL_Invoice.text() if self.IVACL_Invoice.text() != '' else None
            cl_delivnote = self.ClAlb_Invoice.text()
            date_delivnote = self.DateAlb_Invoice.text() if self.DateAlb_Invoice.text() != '' else None
            atte_delivnote = self.AtteAlb_Invoice.text()
            dest_delivnote = self.DestAlb_Invoice.text()
            address_delivnote = self.AddressAlb_Invoice.text()
            zc_delivnote = self.ZCAlb_Invoice.text()
            city_delivnote = self.CityAlb_Invoice.text()
            province_delivnote = self.ProvinceAlb_Invoice.text()
            country_delivnote = self.CountryAlb_Invoice.text()
            obs_delivnote = self.ObsAlb_Invoice.toPlainText()
            total_qty_elements = self.Qty_Elements.text()

            commands_clientsid = ("""
                        SELECT clients.id
                        FROM purch_fact.clients_test AS clients
                        WHERE clients.name = %s
                        """)
            commands_destcountryid = ("""
                            SELECT dest_country.id
                            FROM purch_fact.destination_country AS dest_country
                            WHERE dest_country.name = %s
                            """)
            commands_modify_invoice = ("""
                            UPDATE purch_fact.invoice_header
                            SET "num_invoice" = %s, "date_invoice" = %s, "id_client" = %s, "num_delivnote" = %s, "their_ref" = %s,
                            "invoice_comments" = %s, "destination" = %s, "transport" = %s, "our_ref" = %s, "application" = %s,
                            "id_dest_country" = %s, "aginterm" = %s, "client_group" = %s,
                            "gross_weight" = %s, "net_weight" = %s, "dimensions" = %s, "merc_type" = %s,
                            "txtcon1" = %s, "txtcon2" = %s, "txtcon3" = %s, "txtcon4" = %s, "txtcon5" = %s,
                            "con1_euro" = %s, "con2_euro" = %s, "con3_euro" = %s, "con4_euro" = %s, "con5_euro" = %s,
                            "con1_dollar" = %s, "con2_dollar" = %s, "con3_dollar" = %s, "con4_dollar" = %s, "con5_dollar" = %s,
                            "data_adic3" = %s, "data_adic4" = %s, "iva" = %s, "cl_delivnote" = %s,
                            "date_delivnote" = %s, "atte_delivnote" = %s, "dest_delivnote" = %s, "address_delivnote" = %s, "zc_delivnote" = %s,
                            "city_delivnote" = %s, "province_delivnote" = %s, "country_delivnote" = %s, "obs_delivnote" = %s, "tax_base_amount" = %s,
                            "total_qty_elements" = %s
                            WHERE "id_invoice" = %s""")
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_clientsid, (client_name,))
                results_clients_id=cur.fetchall()
                id_client = results_clients_id[0][0]

                cur.execute(commands_destcountryid, (dest_country,))
                results_destcountry_id=cur.fetchall()
                id_dest_country = results_destcountry_id[0][0]

                data = (invoice_number, invoice_date, id_client, delivnote_number, their_ref,
                        comments, destination, transport, our_ref, application,
                        id_dest_country, aginterm, group,
                        gross_weight, net_weight, dimensions, merc_type,
                        txtcon1, txtcon2, txtcon3, txtcon4, txtcon5,
                        con1_euro, con2_euro, con3_euro, con4_euro, con5_euro,
                        con1_dollar, con2_dollar, con3_dollar, con4_dollar, con5_dollar,
                        data_adic3, data_adic4, iva, cl_delivnote,
                        date_delivnote, atte_delivnote, dest_delivnote, address_delivnote, zc_delivnote,
                        city_delivnote, province_delivnote, country_delivnote, obs_delivnote, tax_base_amount,
                        total_qty_elements, id_invoice)
                cur.execute(commands_modify_invoice, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Factura editada con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

        self.loadinvoicetable()


# Function to submit euro invoice
    def submiteuroinvoice(self):
        self.calculate_totalorder()
        id_invoice = self.label_IDInvoice.text()

        if id_invoice == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Emitir Factura")
            dlg.setText("Selecciona una factura")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            gross_weight = self.GrossWeight_Invoice.text()
            net_weight = self.NetWeight_Invoice.text()
            dimensions = self.Dimensions_Invoice.text()
            merc_type = self.MercType_Invoice.text()
            txtcon1 = self.TxtCon1_Invoice.text()
            txtcon2 = self.TxtCon2_Invoice.text()
            txtcon3 = self.TxtCon3_Invoice.text()
            txtcon4 = self.TxtCon4_Invoice.text()
            txtcon5 = self.TxtCon5_Invoice.text()
            con1_euro = self.Con1Eur_Invoice.text().replace('.',',') if self.Con1Eur_Invoice.text() != '' else None
            con2_euro = self.Con2Eur_Invoice.text().replace('.',',') if self.Con2Eur_Invoice.text() != '' else None
            con3_euro = self.Con3Eur_Invoice.text().replace('.',',') if self.Con3Eur_Invoice.text() != '' else None
            con4_euro = self.Con4Eur_Invoice.text().replace('.',',') if self.Con4Eur_Invoice.text() != '' else None
            con5_euro = self.Con5Eur_Invoice.text().replace('.',',') if self.Con5Eur_Invoice.text() != '' else None
            data_adic3 = self.AditData3_Invoice.text()
            data_adic4 = self.AditData4_Invoice.text()
            tax_base_amount = self.TaxBase_Invoice.text().replace('.',',') if self.TaxBase_Invoice.text() != '' else None
            iva = self.IVACL_Invoice.text() if self.IVACL_Invoice.text() != '' else None
            cl_delivnote = self.ClAlb_Invoice.text()
            date_delivnote = self.DateAlb_Invoice.text() if self.DateAlb_Invoice.text() != '' else None
            atte_delivnote = self.AtteAlb_Invoice.text()
            dest_delivnote = self.DestAlb_Invoice.text()
            address_delivnote = self.AddressAlb_Invoice.text()
            zc_delivnote = self.ZCAlb_Invoice.text()
            city_delivnote = self.CityAlb_Invoice.text()
            province_delivnote = self.ProvinceAlb_Invoice.text()
            country_delivnote = self.CountryAlb_Invoice.text()
            obs_delivnote = self.ObsAlb_Invoice.toPlainText()
            total_qty_elements = self.Qty_Elements.text()

            commands_submit_invoice = ("""
                            UPDATE purch_fact.invoice_header
                            SET "gross_weight" = %s, "net_weight" = %s, "dimensions" = %s, "merc_type" = %s,
                            "txtcon1" = %s, "txtcon2" = %s, "txtcon3" = %s, "txtcon4" = %s, "txtcon5" = %s,
                            "con1_euro" = %s, "con2_euro" = %s, "con3_euro" = %s, "con4_euro" = %s, "con5_euro" = %s,
                            "data_adic3" = %s, "data_adic4" = %s, "iva" = %s, "cl_delivnote" = %s,
                            "date_delivnote" = %s, "atte_delivnote" = %s, "dest_delivnote" = %s, "address_delivnote" = %s, "zc_delivnote" = %s,
                            "city_delivnote" = %s, "province_delivnote" = %s, "country_delivnote" = %s, "obs_delivnote" = %s, "tax_base_amount" = %s,
                            "total_qty_elements" = %s
                            WHERE "id_invoice" = %s""")
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                data = (gross_weight, net_weight, dimensions, merc_type,
                        txtcon1, txtcon2, txtcon3, txtcon4, txtcon5,
                        con1_euro, con2_euro, con3_euro, con4_euro, con5_euro,
                        data_adic3, data_adic4, iva, cl_delivnote,
                        date_delivnote, atte_delivnote, dest_delivnote, address_delivnote, zc_delivnote,
                        city_delivnote, province_delivnote, country_delivnote, obs_delivnote, tax_base_amount,
                        total_qty_elements, id_invoice)
                cur.execute(commands_submit_invoice, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Factura en euros emitida con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            dlg_yes_no = QtWidgets.QMessageBox()
            new_icon_yes_no = QtGui.QIcon()
            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg_yes_no.setWindowIcon(new_icon_yes_no)
            dlg_yes_no.setWindowTitle("ERP EIPSA")
            dlg_yes_no.setText("¿Quieres imprimir la factura?\n")
            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
            result = dlg_yes_no.exec()

            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                from PDF_Styles import client_invoice
                pdf = client_invoice(id_invoice)
                pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
                pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
                pdf.set_auto_page_break(auto=True, margin=2)
                pdf.add_page()
                pdf.alias_nb_pages()

                for row in range(self.tableRecords.rowCount()):
                    item_text = self.tableRecords.item(row, 1).text()
                    quantity_text = self.tableRecords.item(row, 2).text()
                    description_text = self.tableRecords.item(row, 3).text()
                    length_description=len(description_text)

                    pdf.set_x(1.5)
                    y_position = pdf.get_y()
                    pdf.set_font('Helvetica', '', 9)
                    pdf.cell(1, 0.53, item_text, align='C')
                    pdf.cell(0.2, 0.53, "")
                    pdf.cell(1.25, 0.53, quantity_text, align='C')
                    pdf.cell(0.2, 0.53, "")
                    x_position = pdf.get_x()
                    pdf.multi_cell(11.5, 0.53, description_text, align='J')
                    pdf.set_y(y_position)
                    pdf.set_x(x_position + 11.7)
                    pdf.set_font('DejaVuSansCondensed', size=9)
                    pdf.cell(0.2, 0.53, "")
                    pdf.cell(1.94, 0.53, '{:,.2f}'.format(float(self.tableRecords.item(row, 4).text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                    pdf.cell(0.2, 0.53, "")
                    pdf.cell(2.05, 0.53, '{:,.2f}'.format(float(self.tableRecords.item(row, 5).text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                    pdf.set_font('Helvetica', size=9)
                    pdf.ln(1.5)
                    y_position = pdf.get_y()

                    if pdf.page_no()<=1:
                        mark0=9.9
                        pdf.set_line_width(0.05)
                        pdf.line(1.3, y_position, 1.3, mark0)
                        pdf.line(20.4, y_position, 20.4, mark0)
                        pdf.set_line_width(0.01)
                        pdf.line(2.6, y_position, 2.6, mark0)
                        pdf.line(4.05, y_position, 4.05, mark0)
                        pdf.line(15.95, y_position, 15.95, mark0)
                        pdf.line(18.1, y_position, 18.1, mark0)

                    else:
                        mark0 = 3.8
                        pdf.set_line_width(0.05)
                        pdf.line(1.3, y_position, 1.3, mark0)
                        pdf.line(20.4, y_position, 20.4, mark0)
                        pdf.set_line_width(0.01)
                        pdf.line(2.6, y_position, 2.6, mark0)
                        pdf.line(4.05, y_position, 4.05, mark0)
                        pdf.line(15.95, y_position, 15.95, mark0)
                        pdf.line(18.1, y_position, 18.1, mark0)

                    if y_position > 26:
                        if length_description <75:
                            mark2=0
                        elif 75<=length_description <=150:
                            mark2 = 0.5
                        else:
                            mark2 = 1.5

                        pdf.set_line_width(0.05)
                        pdf.line(1.3, y_position + mark2, 1.3, 25)
                        pdf.line(20.4, y_position + mark2, 20.4, 25)
                        pdf.set_line_width(0.01)
                        pdf.line(2.6, y_position + mark2, 2.6, 25)
                        pdf.line(4.05, y_position + mark2, 4.05, 25)
                        pdf.line(15.95, y_position + mark2, 15.95, 25)
                        pdf.line(18.1, y_position + mark2, 18.1, 25)

                x_position = pdf.get_x()
                y_position = pdf.get_y()
                pdf.set_line_width(0.05)
                pdf.line(1.3,y_position,20.4,y_position)

                pdf.cell(14, 0.6, "")
                pdf.set_font('Helvetica', 'B', 9)
                pdf.cell(2.3, 0.6, "Total Materiales:", align='R')

                pdf.set_font('DejaVuSansCondensed', size=9)
                pdf.cell(3, 0.6, '{:,.2f}'.format(float(self.TotalEur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                pdf.ln(1)
                pdf.set_font('Helvetica', '', 8)
                pdf.cell(14, 0.50, "")

                if txtcon1 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon1, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con1Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                pdf.ln(0.5)
                pdf.cell(14, 0.50, "")

                if txtcon2 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon2, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con2Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                pdf.ln(0.5)
                pdf.cell(14, 0.50, "")

                if txtcon3 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon3, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con3Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                pdf.ln(0.5)
                pdf.cell(14, 0.50, "")

                if txtcon4 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon4, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con4Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                pdf.ln(0.5)
                pdf.cell(14, 0.50, "")

                if txtcon5 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon5, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con5Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')

                pdf.ln(1)
                pdf.set_font('Helvetica', 'B', 9)
                pdf.cell(14, 0.50, "")
                pdf.cell(2.3, 0.50, "Base Imponible:", align='R')
                pdf.set_font('DejaVuSansCondensed-Bold', size=9)
                pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.TaxBase_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                pdf.ln(0.5)
                pdf.set_font('Helvetica', 'B', 9)
                pdf.cell(12.95, 0.50, "")

                if iva is not None:
                    pdf.cell(2.3, 0.50, "IVA:", align='R')
                    pdf.set_font('DejaVuSansCondensed-Bold', size=9)
                    iva_amount = int(iva) * float(self.TaxBase_Invoice.text()) / 100
                    pdf.cell(1.5, 0.5, str(iva) + ' %', align='L')
                    pdf.cell(2.55, 0.5, '{:,.2f}'.format(float(iva_amount)).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                else:
                    pdf.cell(2.3, 0.50, "", align='R')
                    iva_amount = 0
                    pdf.cell(1.5, 0.5, '', align='L')
                    pdf.cell(2.55, 0.5, '', align='R')

                pdf.ln(0.7)
                pdf.cell(14, 0.50, "")
                pdf.set_font('Helvetica', 'B', 11)
                pdf.set_line_width(0.05)
                pdf.cell(5.3, 0.6, "Total:",1, align='L')
                pdf.set_font('DejaVuSansCondensed-Bold', size=11)
                total_invoice = float(self.TaxBase_Invoice.text()) + iva_amount
                pdf.cell(0, 0.6, '{:,.2f}'.format(float(total_invoice)).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' €', align='R')
                pdf.ln(1)

                output_path = asksaveasfilename(defaultextension=".pdf", filetypes=[("Archivos PDF", "*.pdf")], title="Guardar Factura Cliente")

                if output_path:
                    pdf.output(output_path)

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Imprimir Factura")
                    dlg.setText("PDF generado con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

            del dlg_yes_no, new_icon_yes_no

            self.loadinvoicetable()


# Function to submit dollar invoice
    def submitdollarinvoice(self):
        self.calculate_totalorder()
        id_invoice = self.label_IDInvoice.text()
        valcotdollar = self.ValCotDollar_Invoice.text()

        if id_invoice == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Emitir Factura")
            dlg.setText("Selecciona una factura")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif valcotdollar == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Emitir Factura")
            dlg.setText("Introduce un valor de cambio €-$")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            self.calculate_totalorder()
            gross_weight = self.GrossWeight_Invoice.text()
            net_weight = self.NetWeight_Invoice.text()
            dimensions = self.Dimensions_Invoice.text()
            merc_type = self.MercType_Invoice.text()
            txtcon1 = self.TxtCon1_Invoice.text()
            txtcon2 = self.TxtCon2_Invoice.text()
            txtcon3 = self.TxtCon3_Invoice.text()
            txtcon4 = self.TxtCon4_Invoice.text()
            txtcon5 = self.TxtCon5_Invoice.text()
            con1_dollar = self.Con1Dollar_Invoice.text().replace('.',',') if self.Con1Dollar_Invoice.text() != '' else None
            con2_dollar = self.Con2Dollar_Invoice.text().replace('.',',') if self.Con2Dollar_Invoice.text() != '' else None
            con3_dollar = self.Con3Dollar_Invoice.text().replace('.',',') if self.Con3Dollar_Invoice.text() != '' else None
            con4_dollar = self.Con4Dollar_Invoice.text().replace('.',',') if self.Con4Dollar_Invoice.text() != '' else None
            con5_dollar = self.Con5Dollar_Invoice.text().replace('.',',') if self.Con5Dollar_Invoice.text() != '' else None
            data_adic3 = self.AditData3_Invoice.text()
            data_adic4 = self.AditData4_Invoice.text()
            tax_base_amount = self.TaxBase_Invoice.text().replace('.',',') if self.TaxBase_Invoice.text() != '' else None
            iva = self.IVACL_Invoice.text() if self.IVACL_Invoice.text() != '' else None
            cl_delivnote = self.ClAlb_Invoice.text()
            date_delivnote = self.DateAlb_Invoice.text() if self.DateAlb_Invoice.text() != '' else None
            atte_delivnote = self.AtteAlb_Invoice.text()
            dest_delivnote = self.DestAlb_Invoice.text()
            address_delivnote = self.AddressAlb_Invoice.text()
            zc_delivnote = self.ZCAlb_Invoice.text()
            city_delivnote = self.CityAlb_Invoice.text()
            province_delivnote = self.ProvinceAlb_Invoice.text()
            country_delivnote = self.CountryAlb_Invoice.text()
            obs_delivnote = self.ObsAlb_Invoice.toPlainText()
            total_qty_elements = self.Qty_Elements.text()

            commands_submit_invoice = ("""
                            UPDATE purch_fact.invoice_header
                            SET "gross_weight" = %s, "net_weight" = %s, "dimensions" = %s, "merc_type" = %s,
                            "txtcon1" = %s, "txtcon2" = %s, "txtcon3" = %s, "txtcon4" = %s, "txtcon5" = %s,
                            "con1_dollar" = %s, "con2_dollar" = %s, "con3_dollar" = %s, "con4_dollar" = %s, "con5_dollar" = %s,
                            "data_adic3" = %s, "data_adic4" = %s, "iva" = %s, "cl_delivnote" = %s,
                            "date_delivnote" = %s, "atte_delivnote" = %s, "dest_delivnote" = %s, "address_delivnote" = %s, "zc_delivnote" = %s,
                            "city_delivnote" = %s, "province_delivnote" = %s, "country_delivnote" = %s, "obs_delivnote" = %s, "tax_base_amount" = %s,
                            "total_qty_elements" = %s
                            WHERE "id_invoice" = %s""")
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                data = (gross_weight, net_weight, dimensions, merc_type,
                        txtcon1, txtcon2, txtcon3, txtcon4, txtcon5,
                        con1_dollar, con2_dollar, con3_dollar, con4_dollar, con5_dollar,
                        data_adic3, data_adic4, iva, cl_delivnote,
                        date_delivnote, atte_delivnote, dest_delivnote, address_delivnote, zc_delivnote,
                        city_delivnote, province_delivnote, country_delivnote, obs_delivnote, tax_base_amount,
                        total_qty_elements, id_invoice)
                cur.execute(commands_submit_invoice, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Factura en euros emitida con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            dlg_yes_no = QtWidgets.QMessageBox()
            new_icon_yes_no = QtGui.QIcon()
            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg_yes_no.setWindowIcon(new_icon_yes_no)
            dlg_yes_no.setWindowTitle("ERP EIPSA")
            dlg_yes_no.setText("¿Quieres imprimir la factura?\n")
            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
            result = dlg_yes_no.exec()

            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                from PDF_Styles import client_invoice
                pdf = client_invoice(id_invoice)
                pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
                pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
                pdf.set_auto_page_break(auto=True, margin=2)
                pdf.add_page()
                pdf.alias_nb_pages()

                for row in range(self.tableRecords.rowCount()):
                    item_text = self.tableRecords.item(row, 1).text()
                    quantity_text = self.tableRecords.item(row, 2).text()
                    description_text = self.tableRecords.item(row, 3).text()
                    length_description=len(description_text)

                    pdf.set_x(1.5)
                    y_position = pdf.get_y()
                    pdf.set_font('Helvetica', '', 9)
                    pdf.cell(1, 0.53, item_text, align='C')
                    pdf.cell(0.2, 0.53, "")
                    pdf.cell(1.25, 0.53, quantity_text, align='C')
                    pdf.cell(0.2, 0.53, "")
                    x_position = pdf.get_x()
                    pdf.multi_cell(11.5, 0.53, description_text, align='J')
                    pdf.set_y(y_position)
                    pdf.set_x(x_position + 11.7)
                    pdf.set_font('DejaVuSansCondensed', size=9)
                    pdf.cell(0.2, 0.53, "")
                    pdf.cell(1.94, 0.53, '{:,.2f}'.format(float(self.tableRecords.item(row, 4).text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                    pdf.cell(0.2, 0.53, "")
                    pdf.cell(2.05, 0.53, '{:,.2f}'.format(float(self.tableRecords.item(row, 5).text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                    pdf.set_font('Helvetica', size=9)
                    pdf.ln(1.5)
                    y_position = pdf.get_y()

                    if pdf.page_no()<=1:
                        mark0=9.9
                        pdf.set_line_width(0.05)
                        pdf.line(1.3, y_position, 1.3, mark0)
                        pdf.line(20.4, y_position, 20.4, mark0)
                        pdf.set_line_width(0.01)
                        pdf.line(2.6, y_position, 2.6, mark0)
                        pdf.line(4.05, y_position, 4.05, mark0)
                        pdf.line(15.95, y_position, 15.95, mark0)
                        pdf.line(18.1, y_position, 18.1, mark0)

                    else:
                        mark0 = 3.8
                        pdf.set_line_width(0.05)
                        pdf.line(1.3, y_position, 1.3, mark0)
                        pdf.line(20.4, y_position, 20.4, mark0)
                        pdf.set_line_width(0.01)
                        pdf.line(2.6, y_position, 2.6, mark0)
                        pdf.line(4.05, y_position, 4.05, mark0)
                        pdf.line(15.95, y_position, 15.95, mark0)
                        pdf.line(18.1, y_position, 18.1, mark0)

                    if y_position > 26:
                        if length_description <75:
                            mark2=0
                        elif 75<=length_description <=150:
                            mark2 = 0.5
                        else:
                            mark2 = 1.5

                        pdf.set_line_width(0.05)
                        pdf.line(1.3, y_position + mark2, 1.3, 25)
                        pdf.line(20.4, y_position + mark2, 20.4, 25)
                        pdf.set_line_width(0.01)
                        pdf.line(2.6, y_position + mark2, 2.6, 25)
                        pdf.line(4.05, y_position + mark2, 4.05, 25)
                        pdf.line(15.95, y_position + mark2, 15.95, 25)
                        pdf.line(18.1, y_position + mark2, 18.1, 25)

                x_position = pdf.get_x()
                y_position = pdf.get_y()
                pdf.set_line_width(0.05)
                pdf.line(1.3,y_position,20.4,y_position)

                pdf.cell(14, 0.6, "")
                pdf.set_font('Helvetica', 'B', 9)
                pdf.cell(2.3, 0.6, "Total Materiales:", align='R')

                pdf.set_font('DejaVuSansCondensed', size=9)
                pdf.cell(3, 0.6, '{:,.2f}'.format(float(self.TotalEur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                pdf.ln(1)
                pdf.set_font('Helvetica', '', 8)
                pdf.cell(14, 0.50, "")

                if txtcon1 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon1, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con1Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                pdf.ln(0.5)
                pdf.cell(14, 0.50, "")

                if txtcon2 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon2, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con2Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                pdf.ln(0.5)
                pdf.cell(14, 0.50, "")

                if txtcon3 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon3, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con3Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                pdf.ln(0.5)
                pdf.cell(14, 0.50, "")

                if txtcon4 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon4, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con4Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                pdf.ln(0.5)
                pdf.cell(14, 0.50, "")

                if txtcon5 == '':
                    pdf.cell(2.3, 0.50, '', align='R')
                    pdf.cell(3, 0.5, '', align='R')
                else:
                    pdf.cell(2.3, 0.50, txtcon5, align='R')
                    pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.Con5Eur_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')

                pdf.ln(1)
                pdf.set_font('Helvetica', 'B', 9)
                pdf.cell(14, 0.50, "")
                pdf.cell(2.3, 0.50, "Base Imponible:", align='R')
                pdf.set_font('DejaVuSansCondensed-Bold', size=9)
                pdf.cell(3, 0.5, '{:,.2f}'.format(float(self.TaxBase_Invoice.text())).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                pdf.ln(0.5)
                pdf.set_font('Helvetica', 'B', 9)
                pdf.cell(12.95, 0.50, "")
                

                if iva is not None:
                    pdf.cell(2.3, 0.50, "IVA:", align='R')
                    pdf.set_font('DejaVuSansCondensed-Bold', size=9)
                    iva_amount = int(iva) * float(self.TaxBase_Invoice.text()) / 100
                    pdf.cell(1.5, 0.5, str(iva) + ' %', align='L')
                    pdf.cell(2.55, 0.5, '{:,.2f}'.format(float(iva_amount)).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                else:
                    pdf.cell(2.3, 0.50, "", align='R')
                    iva_amount = 0
                    pdf.cell(1.5, 0.5, '', align='L')
                    pdf.cell(2.55, 0.5, '', align='R')

                pdf.ln(0.7)
                pdf.cell(14, 0.50, "")
                pdf.set_font('Helvetica', 'B', 11)
                pdf.set_line_width(0.05)
                pdf.cell(5.3, 0.6, "Total:",1, align='L')
                pdf.set_font('DejaVuSansCondensed-Bold', size=11)
                total_invoice = float(self.TaxBase_Invoice.text()) + iva_amount
                pdf.cell(0, 0.6, '{:,.2f}'.format(float(total_invoice)).replace(',', ' ').replace('.', ',').replace(' ', '.') + ' $', align='R')
                pdf.ln(1)

                output_path = asksaveasfilename(defaultextension=".pdf", filetypes=[("Archivos PDF", "*.pdf")], title="Guardar Factura Cliente")

                if output_path:
                    pdf.output(output_path)

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Imprimir Factura")
                    dlg.setText("PDF generado con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

            del dlg_yes_no, new_icon_yes_no

            self.loadinvoicetable()


# Function to search invoice
    def search_invoice(self, Invoice_Window):
        from InvoiceSearch_Window import Ui_InvoiceSearch_Window
        self.invoicesearch_window=QtWidgets.QMainWindow()
        self.ui=Ui_InvoiceSearch_Window()
        self.ui.setupUi(self.invoicesearch_window)
        self.invoicesearch_window.show()
        Invoice_Window.close()


# Function to load invoice table
    def loadinvoicetable(self):
        commands_querytableinvoice = ("""
                        SELECT invoice."id_invoice", invoice."num_invoice", invoice."num_delivnote", TO_CHAR(invoice."date_invoice",'DD-MM-YYYY'),
                        clients."name", invoice."our_ref", invoice."their_ref", invoice."obs_delivnote", TO_CHAR(invoice."date_delivnote",'DD-MM-YYYY'),
                        invoice."application", dest_country."name", TO_CHAR(invoice."pay_date",'DD-MM-YYYY'), invoice."client_group"
                        FROM purch_fact.invoice_header AS invoice
                        JOIN purch_fact.clients_test AS clients ON invoice."id_client" = clients."id"
                        JOIN purch_fact.destination_country AS dest_country ON invoice."id_dest_country" = dest_country."id"
                        ORDER BY invoice."num_invoice"
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytableinvoice)
            results_invoices=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableInvoice.setRowCount(len(results_invoices))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10))

    # fill the Qt Table with the query results
        for row in results_invoices:
            for column in range(13):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableInvoice.setItem(tablerow, column, it)

            self.tableInvoice.setItemDelegateForRow(tablerow, AlignDelegate(self.tableInvoice))
            tablerow+=1

        self.tableInvoice.verticalHeader().hide()
        self.tableInvoice.setSortingEnabled(False)
        self.tableInvoice.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.calculate_totalorder()


# Function to filter invoice table
    def filterinvoicetable(self):
        filter = self.Filter_Invoice.text()
        commands_querytableinvoice = ("""
                        SELECT invoice."id_invoice", invoice."num_invoice", invoice."num_delivnote", TO_CHAR(invoice."date_invoice",'DD-MM-YYYY'),
                        clients."name", invoice."our_ref", invoice."their_ref", invoice."obs_delivnote", TO_CHAR(invoice."date_delivnote",'DD-MM-YYYY'),
                        invoice."application", dest_country."name", TO_CHAR(invoice."pay_date",'DD-MM-YYYY'), invoice."client_group"
                        FROM purch_fact.invoice_header AS invoice
                        JOIN purch_fact.clients_test AS clients ON invoice."id_client" = clients."id"
                        JOIN purch_fact.destination_country AS dest_country ON invoice."id_dest_country" = dest_country."id"
                        WHERE invoice."num_invoice" LIKE ('%%'||%s||'%%')
                        ORDER BY invoice."id_invoice"
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytableinvoice, (filter,))
            results_invoices=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableInvoice.setRowCount(len(results_invoices))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10))

    # fill the Qt Table with the query results
        for row in results_invoices:
            for column in range(13):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableInvoice.setItem(tablerow, column, it)

            self.tableInvoice.setItemDelegateForRow(tablerow, AlignDelegate(self.tableInvoice))
            tablerow+=1

        self.tableInvoice.verticalHeader().hide()
        self.tableInvoice.setSortingEnabled(False)
        self.tableInvoice.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


# Function to load records table
    def loadrecordstable(self):
        id_invoice = self.label_IDInvoice.text()

        commands_querytablerecords = ("""
                        SELECT detail."id_detail", detail."item", detail."quantity", detail."description", detail."price",
                        detail."quantity" * detail."price" AS "t_price_eur", detail."price_usd", detail."quantity" * detail."price_usd" AS "t_price_dollar"
                        FROM purch_fact.invoice_detail AS detail
                        WHERE detail."inv_head_id" = %s
                        ORDER BY detail."id_detail"
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytablerecords, (id_invoice,))
            results_records=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableRecords.setRowCount(len(results_records))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10))

    # fill the Qt Table with the query results
        for row in results_records:
            for column in range(8):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                # it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFlags(it.flags())
                it.setFont(font)
                self.tableRecords.setItem(tablerow, column, it)

            self.tableRecords.setItemDelegateForRow(tablerow, AlignDelegate(self.tableRecords))
            tablerow+=1

        self.tableRecords.verticalHeader().hide()
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableRecords.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableRecords.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)

        self.calculate_totalorder()
        self.calculate_elements()


# Function to load invoice form
    def loadforminvoice(self, item=None, ID_invoice=None):
        if item is None:
            invoice_id = ID_invoice
        else:
            invoice_id = self.tableInvoice.item(item.row(), 0).text()

        commands_query_invoice = ("""
                        SELECT "num_invoice", TO_CHAR("date_invoice", 'dd/MM/yyyy'), "id_client", "num_delivnote", "their_ref",
                        "invoice_comments", "destination", "transport", "our_ref", "application",
                        "id_dest_country", "gross_weight", "net_weight", "dimensions", "merc_type",
                        "txtcon1", "txtcon2", "txtcon3", "txtcon4", "txtcon5",
                        "con1_euro", "con2_euro", "con3_euro", "con4_euro", "con5_euro",
                        "con1_dollar", "con2_dollar", "con3_dollar", "con4_dollar", "con5_dollar",
                        "cot_euro_dollar", "data_adic3", "data_adic4", "iva", "cl_delivnote",
                        TO_CHAR("date_delivnote", 'dd/MM/yyyy'), "atte_delivnote", "dest_delivnote", "address_delivnote", "zc_delivnote",
                        "city_delivnote", "province_delivnote", "country_delivnote", "obs_delivnote", "aginterm",
                        "client_group", "aginterm_ok", "aginterm_state", "pay_date", "total_qty_elements",
                        "tax_base_amount"
                        FROM purch_fact.invoice_header
                        WHERE "id_invoice" = %s
                        """)
        commands_query_clients = ("""
                        SELECT clients.name
                        FROM purch_fact.clients_test AS clients
                        WHERE clients.id = %s
                        """)
        commands_query_destcountry = ("""
                        SELECT dest_country.name
                        FROM purch_fact.destination_country AS dest_country
                        WHERE dest_country.id = %s
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_query_invoice, (invoice_id,))
            results_query_invoice=cur.fetchall()

            self.label_IDInvoice.setText(invoice_id)

            self.InvoiceNumber_Invoice.setText(results_query_invoice[0][0])
            self.Date_Invoice.setText(results_query_invoice[0][1])

            client_id = results_query_invoice[0][2]
            cur.execute(commands_query_clients, (client_id,))
            results_client_id=cur.fetchall()
            self.Client_Invoice.setCurrentText(results_client_id[0][0])

            self.DelivNote_Invoice.setText(results_query_invoice[0][3])
            self.TheirRef_Invoice.setText(results_query_invoice[0][4])
            self.Comment_Invoice.setText(results_query_invoice[0][5])
            self.Destination_Invoice.setText(results_query_invoice[0][6])
            self.Transport_Invoice.setText(results_query_invoice[0][7])
            self.OurRef_Invoice.setText(results_query_invoice[0][8])
            self.Application_Invoice.setCurrentText(results_query_invoice[0][9])

            destcountry_id = results_query_invoice[0][10]
            cur.execute(commands_query_destcountry, (destcountry_id,))
            results_destcountry_id=cur.fetchall()
            self.DestCountry_Invoice.setCurrentText(results_destcountry_id[0][0])

            self.GrossWeight_Invoice.setText(results_query_invoice[0][11])
            self.NetWeight_Invoice.setText(results_query_invoice[0][12])
            self.Dimensions_Invoice.setText(results_query_invoice[0][13])
            self.MercType_Invoice.setText(results_query_invoice[0][14])
            self.TxtCon1_Invoice.setText(results_query_invoice[0][15])
            self.TxtCon2_Invoice.setText(results_query_invoice[0][16])
            self.TxtCon3_Invoice.setText(results_query_invoice[0][17])
            self.TxtCon4_Invoice.setText(results_query_invoice[0][18])
            self.TxtCon5_Invoice.setText(results_query_invoice[0][19])
            self.Con1Eur_Invoice.setText(str(results_query_invoice[0][20]) if results_query_invoice[0][20] is not None else '')
            self.Con2Eur_Invoice.setText(str(results_query_invoice[0][21]) if results_query_invoice[0][21] is not None else '')
            self.Con3Eur_Invoice.setText(str(results_query_invoice[0][22]) if results_query_invoice[0][22] is not None else '')
            self.Con4Eur_Invoice.setText(str(results_query_invoice[0][23]) if results_query_invoice[0][23] is not None else '')
            self.Con5Eur_Invoice.setText(str(results_query_invoice[0][24]) if results_query_invoice[0][24] is not None else '')
            self.Con1Dollar_Invoice.setText(str(results_query_invoice[0][25]) if results_query_invoice[0][25] is not None else '')
            self.Con2Dollar_Invoice.setText(str(results_query_invoice[0][26]) if results_query_invoice[0][26] is not None else '')
            self.Con3Dollar_Invoice.setText(str(results_query_invoice[0][27]) if results_query_invoice[0][27] is not None else '')
            self.Con4Dollar_Invoice.setText(str(results_query_invoice[0][28]) if results_query_invoice[0][28] is not None else '')
            self.Con5Dollar_Invoice.setText(str(results_query_invoice[0][29]) if results_query_invoice[0][29] is not None else '')
            self.ValCotDollar_Invoice.setText(str(results_query_invoice[0][30]) if results_query_invoice[0][30] is not None else '')
            self.AditData3_Invoice.setText(results_query_invoice[0][31])
            self.AditData4_Invoice.setText(results_query_invoice[0][32])
            self.IVACL_Invoice.setText(str(results_query_invoice[0][33]) if results_query_invoice[0][33] is not None else '')
            self.ClAlb_Invoice.setText(results_query_invoice[0][34])
            self.DateAlb_Invoice.setText(results_query_invoice[0][35])
            self.AtteAlb_Invoice.setText(results_query_invoice[0][36])
            self.DestAlb_Invoice.setText(results_query_invoice[0][37])
            self.AddressAlb_Invoice.setText(results_query_invoice[0][38])
            self.ZCAlb_Invoice.setText(results_query_invoice[0][39])
            self.CityAlb_Invoice.setText(results_query_invoice[0][40])
            self.ProvinceAlb_Invoice.setText(results_query_invoice[0][41])
            self.CountryAlb_Invoice.setText(results_query_invoice[0][42])
            self.ObsAlb_Invoice.setText(results_query_invoice[0][43])
            self.AgInterm.setText(results_query_invoice[0][44])
            self.label_ClientGroup.setText(results_query_invoice[0][45])
            self.AgIntermOk.setText(results_query_invoice[0][46])
            self.AgIntermState.setText(results_query_invoice[0][47])
            self.AgIntermState.setText(results_query_invoice[0][48])
            self.Qty_Elements.setText(str(results_query_invoice[0][49]) if results_query_invoice[0][49] is not None else '')
            self.TaxBase_Invoice.setText(str(results_query_invoice[0][50].replace(".","").replace(",",".")[:results_query_invoice[0][50].find(" €")]) if results_query_invoice[0][50] is not None else '')

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.loadrecordstable()


# Function to add record
    def addrecord(self):
        id_invoice = self.label_IDInvoice.text()
        item = self.Item_Invoice.text()
        quantity = self.Qty_Invoice.text()
        description = self.Description_Invoice.toPlainText()
        val_euro = self.UnitValueEur_Invoice.text() if self.UnitValueEur_Invoice.text() != '' else None
        val_dollar = self.UnitValueDollar_Invoice.text() if self.UnitValueDollar_Invoice.text() != '' else None

        if id_invoice == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona una factura para añadir registros")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif item == '' or (quantity == '' or description == ''):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Rellena los campos")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_insert_record = ("""
                        INSERT INTO purch_fact.invoice_detail (
                        "inv_head_id", "item", "quantity", "description", "price", "price_usd"
                        )
                        VALUES (%s, %s, %s, %s, %s, %s)
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                data = (id_invoice, item, quantity, description, val_euro, val_dollar,)
                cur.execute(commands_insert_record, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Registro añadido con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadrecordstable()


# Function to modify record
    def modifyrecord(self):
        id_record = self.label_IDRecord.text()
        item = self.Item_Invoice.text()
        quantity = self.Qty_Invoice.text()
        description = self.Description_Invoice.toPlainText()
        val_euro = self.UnitValueEur_Invoice.text() if self.UnitValueEur_Invoice.text() != '' else None
        val_dollar = self.UnitValueDollar_Invoice.text() if self.UnitValueDollar_Invoice.text() != '' else None

        if id_record == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona un registro para modificar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon
        else:
            commands_modify_record = ("""
                        UPDATE purch_fact.invoice_detail
                        SET "item" = %s, "quantity" = %s, "description" = %s, "price" = %s, "price_usd" = %s
                        WHERE "id_detail" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                data = (item, quantity, description, val_euro, val_dollar, id_record)
                cur.execute(commands_modify_record, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Registro editado con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadrecordstable()


# Function to delete record
    def deleterecord(self):
        id_record = self.label_IDRecord.text()

        if id_record == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona un registro para eliminar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_delete_record = ("""
                        DELETE FROM purch_fact.invoice_detail
                        WHERE "id_detail" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                data = (id_record,)
                cur.execute(commands_delete_record, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Registro eliminado con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadrecordstable()

            self.Item_Invoice.setText("")
            self.Qty_Invoice.setText("")
            self.Description_Invoice.setText("")
            self.UnitValueEur_Invoice.setText("")
            self.UnitValueDollar_Invoice.setText("")


# Function to load invoice form
    def loadformrecords(self, item):
        data_order=[]

        for column in range(8):
            item_text=self.tableRecords.item(item.row(), column).text()
            data_order.append(item_text)

        self.label_IDRecord.setText(data_order[0])
        self.Item_Invoice.setText(data_order[1])
        self.Qty_Invoice.setText(data_order[2])
        self.Description_Invoice.setText(data_order[3])
        self.UnitValueEur_Invoice.setText(data_order[4])
        self.UnitValueDollar_Invoice.setText(data_order[6])


# Function to calculate the order total amount
    def calculate_totalorder(self):
        # locale.setlocale(locale.LC_ALL, '')
        total_euro = 0
        for row in range(self.tableRecords.rowCount()):
            item = self.tableRecords.item(row, 5)
            if item is not None:
                value = item.text() if item.text() != '' else 0
                # value=value.replace(".","")
                # value=value.replace(",",".")
                # value=value[:value.find(" €")]
                total_euro += float(value)
        # total_euro = locale.format_string("%.2f", total_euro, grouping=True)
        self.TotalEur_Invoice.setText('{:.2f}'.format(total_euro))

        total_dollar = 0
        for row in range(self.tableRecords.rowCount()):
            item = self.tableRecords.item(row, 7)
            if item is not None:
                value = item.text() if item.text() != '' else 0
                # value=value.replace(".","")
                # value=value.replace(",",".")
                # value=value[:value.find(" €")]
                total_dollar += float(value)
        # total_dollar = locale.format_string("%.2f", total_dollar, grouping=True)
        total_dollar = total_dollar
        self.TotalDollar_Invoice.setText('{:.2f}'.format(total_dollar))

        total_tax_base_euro = float(self.TotalEur_Invoice.text()) + float(self.Con1Eur_Invoice.text() if self.Con1Eur_Invoice.text() != '' else 0) + float(self.Con2Eur_Invoice.text() if self.Con2Eur_Invoice.text() != '' else 0) + float(self.Con3Eur_Invoice.text() if self.Con3Eur_Invoice.text() != '' else 0) + float(self.Con4Eur_Invoice.text() if self.Con4Eur_Invoice.text() != '' else 0) + float(self.Con5Eur_Invoice.text() if self.Con5Eur_Invoice.text() != '' else 0)
        total_tax_base_dolar =float(self.TotalDollar_Invoice.text()) + float(self.Con1Dollar_Invoice.text() if self.Con1Dollar_Invoice.text() != '' else 0) + float(self.Con2Dollar_Invoice.text() if self.Con2Dollar_Invoice.text() != '' else 0) + float(self.Con3Dollar_Invoice.text() if self.Con3Dollar_Invoice.text() != '' else 0) + float(self.Con4Dollar_Invoice.text() if self.Con4Dollar_Invoice.text() != '' else 0) + float(self.Con5Dollar_Invoice.text() if self.Con5Dollar_Invoice.text() != '' else 0)

        total_tax_base =  total_tax_base_euro if float(self.TotalEur_Invoice.text()) != 0.00 else total_tax_base_dolar * float(self.ValCotDollar_Invoice.text() if self.ValCotDollar_Invoice.text() != '' else 0)
        self.TaxBase_Invoice.setText('{:.2f}'.format(total_tax_base))


# Function to calculate the total number of elements
    def calculate_elements(self):
        total_elements = 0
        for row in range(self.tableRecords.rowCount()):
            item = self.tableRecords.item(row, 2)
            if item is not None:
                value = item.text()
                total_elements += int(value)
        self.Qty_Elements.setText(str(total_elements))


# Function when client combobox is changed
    def clientchange(self):
        client_name = self.Client_Invoice.currentText()

        commands_clientsdata = ("""
                        SELECT clients.inter_agent, clients.group_client, iva.iva_value, banks.iban, banks.bic
                        FROM purch_fact.clients_test AS clients
                        JOIN purch_fact.iva ON (clients.iva_id = iva.id)
                        JOIN purch_fact.banks ON (clients.bank_id = banks.id)
                        WHERE clients.name = %s
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_clientsdata,(client_name,))
            results_clientsdata=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            # self.AgInterm.setText(results_clientsdata[0][0])
            self.label_ClientGroup.setText(results_clientsdata[0][1])
            self.IVACL_Invoice.setText(results_clientsdata[0][2] if results_clientsdata[0][2] not in ['COM', 'EXENTO', 'EXP'] else '0')
            self.AditData3_Invoice.setText(results_clientsdata[0][3])
            self.AditData4_Invoice.setText(results_clientsdata[0][4])

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


# Function when destination country combobox is changed
    def destcountrychange(self):
        dest_country_name = self.DestCountry_Invoice.currentText()

        commands_destcountry = ("""
                        SELECT dest_country.agent
                        FROM purch_fact.destination_country AS dest_country
                        WHERE dest_country.name = %s
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_destcountry,(dest_country_name,))
            results_destcountrydata=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.AgInterm.setText(results_destcountrydata[0][0])
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


# Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableInvoice.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableInvoice.horizontalHeader().height()
        popup_pos = self.tableInvoice.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableInvoice.show_unique_values_menu(logical_index, popup_pos, header_height)


# Function when clicking on table header
    def on_headerrecords_section_clicked(self, logical_index):
        header_pos = self.tableRecords.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableRecords.horizontalHeader().height()
        popup_pos = self.tableRecords.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableRecords.show_unique_values_menu(logical_index, popup_pos, header_height)


# Function to generate delivery note
    def generate_delivnote(self):
        invoice_id = self.label_IDInvoice.text()

        if invoice_id == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona una factura")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            from PDF_Styles import delivery_note
            pdf = delivery_note(invoice_id)
            pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
            pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))

            pdf.set_auto_page_break(auto=True, margin=2)
            pdf.add_page()
            pdf.alias_nb_pages()

            for row in range(self.tableRecords.rowCount()):
                position_text=self.tableRecords.item(row, 1).text()
                quantity_text=self.tableRecords.item(row, 2).text()
                description_text=self.tableRecords.item(row, 3).text()
                length_description=len(description_text)

                pdf.set_x(1.5)
                pdf.set_font('Helvetica', '', 9)
                pdf.cell(1, 0.53, position_text, align='C')
                pdf.cell(0.2, 0.53, "")
                pdf.cell(1.25, 0.53, quantity_text, align='C')
                pdf.cell(0.2, 0.53, "")
                pdf.multi_cell(16.2, 0.53, description_text, align='J')

                y_position = pdf.get_y()
                if pdf.page_no()<=1:
                    mark0=9.6
                    pdf.set_line_width(0.05)
                    pdf.line(1.3, y_position, 1.3, mark0)
                    pdf.line(20.4, y_position, 20.4, mark0)
                    pdf.set_line_width(0.01)
                    pdf.line(2.6, y_position, 2.6, mark0)
                    pdf.line(4.05, y_position, 4.05, mark0)

                else:
                    mark0 = 3.8
                    pdf.set_line_width(0.05)
                    pdf.line(1.3, y_position, 1.3, mark0)
                    pdf.line(20.4, y_position, 20.4, mark0)
                    pdf.set_line_width(0.01)
                    pdf.line(2.6, y_position, 2.6, mark0)
                    pdf.line(4.05, y_position, 4.05, mark0)

                if y_position > 26:
                    if length_description <75:
                        mark2=0
                    elif 75<=length_description <=150:
                        mark2 = 0.5
                    else:
                        mark2 = 1.5

                    pdf.set_line_width(0.05)
                    pdf.line(1.3, y_position + mark2, 1.3, 25)
                    pdf.line(20.4, y_position + mark2, 20.4, 25)
                    pdf.set_line_width(0.01)
                    pdf.line(2.6, y_position + mark2, 2.6, 25)
                    pdf.line(4.05, y_position + mark2, 4.05, 25)

            y_position = pdf.get_y()
            pdf.set_line_width(0.05)
            pdf.line(1.3,y_position,20.4,y_position)

            output_path = asksaveasfilename(defaultextension=".pdf", filetypes=[("Archivos PDF", "*.pdf")], title="Guardar Albarán Cliente")

            if output_path:
                pdf.output(output_path)

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Imprimir Albarán")
                dlg.setText("PDF generado con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg,new_icon


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Invoice_Window = QtWidgets.QMainWindow()
    ui = Ui_InvoiceNew_Window()
    ui.setupUi(Invoice_Window)
    Invoice_Window.show()
    sys.exit(app.exec())
