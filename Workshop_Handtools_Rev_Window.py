# Form implementation generated from reading ui file 'EditTags_Commercial_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6 import QtSql
from PyQt6.QtWidgets import QApplication
from PyQt6.QtCore import Qt, QDate, QUrl
from PyQt6.QtGui import QKeySequence, QTextDocument, QTextCursor
import re
import configparser
from Database_Connection import createConnection
from config import config
import psycopg2
import locale
import os
from datetime import *
import pandas as pd
from tkinter.filedialog import asksaveasfilename
from fpdf import FPDF
from PDF_Viewer import PDF_Viewer
from tkinter.filedialog import *
from PIL import Image, ExifTags

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


def imagen_to_base64(imagen):
    buffer = QtCore.QBuffer()
    buffer.open(QtCore.QIODevice.OpenModeFlag.WriteOnly)
    imagen.save(buffer, ".png")
    base64_data = buffer.data().toBase64().data().decode()
    return base64_data


class CheckboxWidget(QtWidgets.QWidget):
    def __init__(self, text):
        super().__init__()
        layout = QtWidgets.QHBoxLayout(self)
        self.checkbox = QtWidgets.QCheckBox(text)
        layout.addWidget(self.checkbox)

class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class EditableComboBoxDelegate(QtWidgets.QStyledItemDelegate):
    def __init__(self, parent=None, options=None):
        super().__init__(parent)
        self.options = options

    def createEditor(self, parent, option, index):
        editor = QtWidgets.QComboBox(parent)
        editor.setEditable(True)
        return editor

    def setEditorData(self, editor, index):
        text = index.data(Qt.ItemDataRole.DisplayRole)
        editor.addItems(self.options)
        editor.setEditText(text)

    def setModelData(self, editor, model, index):
        model.setData(index, editor.currentText(), Qt.ItemDataRole.EditRole)

class CustomProxyModel(QtCore.QSortFilterProxyModel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._filters = dict()
        self.header_names = {}

    @property
    def filters(self):
        return self._filters

    def setFilter(self, expresion, column, action_name=None):
        if expresion or expresion == '':
            if column in self.filters:
                if action_name or action_name == '':
                    self.filters[column].remove(expresion)
                else:
                    self.filters[column].append(expresion)
            else:
                self.filters[column] = [expresion]
        elif column in self.filters:
            if action_name or action_name == '':
                self.filters[column].remove(expresion)
                if not self.filters[column]:
                    del self.filters[column]
            else:
                del self.filters[column]
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        for column, expresions in self.filters.items():
            text = self.sourceModel().index(source_row, column, source_parent).data()

            if isinstance(text, QtCore.QDate): #Check if filters are QDate. If True, convert to text
                text = text.toString("yyyy-MM-dd")

            for expresion in expresions[0]:
                if expresion == '':  # If expression is empty, match empty cells
                    if text == '':
                        break

                elif re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', expresion):
                    expresion = QtCore.QDate.fromString(expresion, "dd/MM/yyyy")
                    expresion = expresion.toString("yyyy-MM-dd")
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        break

                else:
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        break
            else:
                return False
        return True
    
    def lessThan(self, left, right):
        left_value = self.sourceModel().data(left)
        right_value = self.sourceModel().data(right)

        if isinstance(left_value, str) and left_value.find('€') > 0:
            left_value = left_value.replace(' €','').replace('.','').replace(',','.')
            left_value = float(left_value)
        if isinstance(right_value, str) and right_value.find('€') > 0:
            right_value = right_value.replace(' €','').replace('.','').replace(',','.')
            right_value = float(right_value)

        return left_value < right_value

class EditableTableModel(QtSql.QSqlTableModel):
    updateFailed = QtCore.pyqtSignal(str)

    def __init__(self, parent=None, column_range=None):
        super().__init__(parent)
        self.column_range = column_range

    def setAllColumnHeaders(self, headers):
        for column, header in enumerate(headers):
            self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIndividualColumnHeader(self, column, header):
        self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIconColumnHeader(self, column, icon):
        self.setHeaderData(column, QtCore.Qt.Orientation.Horizontal, icon, Qt.ItemDataRole.DecorationRole)

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return super().headerData(section, orientation, role)
        return super().headerData(section, orientation, role)

    def flags(self, index):
        flags = super().flags(index)
        # return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable
        if index.column() in [0,1]:
            flags &= ~Qt.ItemFlag.ItemIsEditable
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled
        else:
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable

    def getColumnHeaders(self, visible_columns):
        column_headers = [self.headerData(col, Qt.Orientation.Horizontal) for col in visible_columns]
        return column_headers

class CustomPDF(FPDF):
    def fixed_height_multicell(self, w, total_h, txt, align_mc, border='LRB', fill=False):
        # Divide el texto en palabras
        words = txt.split()
        lines = []
        line = ''
        for word in words:
            # Si la longitud de la línea con la palabra añadida es mayor que el ancho de la celda
            if self.get_string_width(line + word + ' ') > w - 0.5:
                # Añade la línea a la lista de líneas y comienza una nueva línea
                lines.append(line)
                line = word + ' '
            else:
                # Añade la palabra a la línea actual
                line += word + ' '
        # Añade la última línea a la lista de líneas
        lines.append(line)
        
        # Calcula la altura de cada línea para que la altura total sea igual a total_h
        line_height = total_h / len(lines)

        # Guarda la posición actual
        x, y = self.get_x(), self.get_y()

        for line in lines:
            # Imprime cada línea con la altura calculada
            self.multi_cell(w, line_height, line, border, align_mc, fill)
            self.set_x(x)

        # Asegura que la altura total sea 2.75 cm
        self.set_xy(x, y + total_h)

class Ui_Workshop_Handtools_Rev_Window(QtWidgets.QMainWindow):
    def __init__(self, db, username, handtool_id):
        super().__init__()
        self.model = EditableTableModel()
        self.proxy = CustomProxyModel()
        self.db = db
        self.handtool_id = handtool_id
        self.checkbox_states = {}
        self.dict_valuesuniques = {}
        self.dict_ordersort = {}
        self.hiddencolumns = []
        self.variable = ''
        self.action_checkbox_map = {}
        self.checkbox_filters = {}
        self.username = username
        self.pdf_viewer = PDF_Viewer()
        self.setupUi(self)
        self.model.dataChanged.connect(self.saveChanges)

    def closeEvent(self, event):
    # Closing database connection
        if self.model:
            self.model.clear()
        self.closeConnection()

    def closeConnection(self):
    # Closing database connection
        self.tableRevisions.setModel(None)
        del self.model
        if self.db:
            self.db.close()
            del self.db
            if QtSql.QSqlDatabase.contains("handtool"):
                QtSql.QSqlDatabase.removeDatabase("handtool")

    def setupUi(self, Workshop_Handtools_Rev_Window):
        Workshop_Handtools_Rev_Window.setObjectName("Workshop_Handtools_Rev_Window")
        Workshop_Handtools_Rev_Window.resize(790, 595)
        Workshop_Handtools_Rev_Window.setMinimumSize(QtCore.QSize(790, 595))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Workshop_Handtools_Rev_Window.setWindowIcon(icon)
        if self.username == 'm.gil':
            Workshop_Handtools_Rev_Window.setStyleSheet(
            ".QFrame {border: 2px solid white;\n"
            "}\n"
            "QMenu::item:selected {background-color: rgb(3, 174, 236);}")
        else:
            Workshop_Handtools_Rev_Window.setStyleSheet(
            ".QFrame {border: 2px solid black;\n"
            "}\n"
            "QMenu::item:selected {background-color: rgb(3, 174, 236);}")
        self.centralwidget = QtWidgets.QWidget(parent=Workshop_Handtools_Rev_Window)
        if self.username == 'm.gil':
            self.centralwidget.setStyleSheet("background-color: #121212; color: rgb(255, 255, 255);")
        else:
            self.centralwidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setVerticalSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.hcab=QtWidgets.QHBoxLayout()
        self.hcab.setObjectName("hcab")
        self.toolDeleteFilter = QtWidgets.QToolButton(self.frame)
        self.toolDeleteFilter.setObjectName("DeleteFilter_Button")
        self.toolDeleteFilter.setToolTip("Borrar filtros")
        self.toolDeleteFilter.setIconSize(QtCore.QSize(25, 25))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Delete.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolDeleteFilter.setIcon(icon)
        self.hcab.addWidget(self.toolDeleteFilter)
        self.hcabspacer4=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer4)
        self.toolImages = QtWidgets.QToolButton(self.frame)
        self.toolImages.setObjectName("Image_Button")
        self.toolImages.setToolTip("Añadir Imagen")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Camera.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolImages.setIcon(icon)
        self.toolImages.setIconSize(QtCore.QSize(25, 25))
        self.hcab.addWidget(self.toolImages)
        self.hcabspacer3=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer3)
        self.toolAdd = QtWidgets.QToolButton(self.frame)
        self.toolAdd.setObjectName("Add_Button")
        self.toolAdd.setToolTip("Crear Nueva")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Add.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolAdd.setIcon(icon)
        self.toolAdd.setIconSize(QtCore.QSize(25, 25))
        self.hcab.addWidget(self.toolAdd)
        self.hcabspacer4=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer4)
        self.toolSaveChanges = QtWidgets.QToolButton(self.frame)
        self.toolSaveChanges.setObjectName("SaveChanges_Button")
        self.toolSaveChanges.setToolTip("Guardar")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Save.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolSaveChanges.setIcon(icon)
        self.toolSaveChanges.setIconSize(QtCore.QSize(25, 25))
        self.hcab.addWidget(self.toolSaveChanges)
        self.hcabspacer5=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer5)
        self.toolPDF = QtWidgets.QToolButton(self.frame)
        self.toolPDF.setObjectName("PDF_Button")
        self.toolPDF.setToolTip("Imprimir PDF")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Adobe_PDF.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolPDF.setIcon(icon)
        self.toolPDF.setIconSize(QtCore.QSize(25, 25))
        self.hcab.addWidget(self.toolPDF)

        if self.username == 'm.gil':
            self.toolDeleteFilter.setStyleSheet("border: 1px solid white;")
            self.toolImages.setStyleSheet("border: 1px solid white;")
            self.toolAdd.setStyleSheet("border: 1px solid white;")
            self.toolSaveChanges.setStyleSheet("border: 1px solid white;")
            self.toolPDF.setStyleSheet("border: 1px solid white;")

        self.hcabspacer6=QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer6)
        self.gridLayout_2.addLayout(self.hcab, 0, 0, 1, 1)

        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 1, 0, 1, 1)

        self.label_number = QtWidgets.QLabel(parent=self.frame)
        self.label_number.setMinimumSize(QtCore.QSize(40, 50))
        self.label_number.setMaximumSize(QtCore.QSize(400, 50))
        self.label_number.setObjectName("label_number")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_number.setFont(font)
        self.gridLayout_2.addWidget(self.label_number, 2, 0, 1, 1)

        self.label_name = QtWidgets.QLabel(parent=self.frame)
        self.label_name.setMinimumSize(QtCore.QSize(40, 50))
        self.label_name.setObjectName("label_name")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_name.setFont(font)
        self.gridLayout_2.addWidget(self.label_name, 2, 1, 1, 1)

        self.label_year = QtWidgets.QLabel(parent=self.frame)
        self.label_year.setMinimumSize(QtCore.QSize(40, 50))
        self.label_year.setObjectName("label_year")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_year.setFont(font)
        self.gridLayout_2.addWidget(self.label_year, 2, 2, 1, 1)

        self.label_location = QtWidgets.QLabel(parent=self.frame)
        self.label_location.setMinimumSize(QtCore.QSize(40, 50))
        self.label_location.setObjectName("label_location")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_location.setFont(font)
        self.gridLayout_2.addWidget(self.label_location, 2, 3, 1, 1)

        self.label_characteristics = QtWidgets.QLabel(parent=self.frame)
        self.label_characteristics.setMinimumSize(QtCore.QSize(40, 40))
        self.label_characteristics.setMaximumSize(QtCore.QSize(400, 40))
        self.label_characteristics.setText("CARACTERÍSTICAS:")
        self.label_characteristics.setObjectName("label_characteristics")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_characteristics.setFont(font)
        self.gridLayout_2.addWidget(self.label_characteristics, 3, 0, 1, 1)
        self.label_image = QtWidgets.QLabel(parent=self.frame)
        self.label_image.setMinimumSize(QtCore.QSize(40, 40))
        self.label_image.setText("FOTO MÁQUINA:")
        self.label_image.setObjectName("label_image")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_image.setFont(font)
        self.gridLayout_2.addWidget(self.label_image, 3, 1, 1, 2)
        self.label_revisions = QtWidgets.QLabel(parent=self.frame)
        self.label_revisions.setMinimumSize(QtCore.QSize(40, 40))
        self.label_revisions.setText("REVISIONES:")
        self.label_revisions.setObjectName("label_revisions")
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_revisions.setFont(font)
        self.gridLayout_2.addWidget(self.label_revisions, 3, 3, 1, 1)

        self.handtool_characteristics = QtWidgets.QTextEdit(parent=self.frame)
        self.handtool_characteristics.setMinimumSize(QtCore.QSize(40, 10))
        self.handtool_characteristics.setMaximumSize(QtCore.QSize(500, 16777215))
        self.handtool_characteristics.setObjectName("handtool_characteristics")
        self.gridLayout_2.addWidget(self.handtool_characteristics, 4, 0, 1, 1)

        self.handtool_image = QtWidgets.QLabel(parent=self.frame)
        self.handtool_image.setMinimumSize(QtCore.QSize(40, 10))
        self.handtool_image.setMaximumSize(QtCore.QSize(16777215, 1000))
        self.handtool_image.setText("")
        self.handtool_image.setObjectName("handtool_image")
        self.gridLayout_2.addWidget(self.handtool_image, 4, 1, 1, 2)

        self.tableRevisions=QtWidgets.QTableView(parent=self.frame)
        self.model = EditableTableModel()
        self.tableRevisions.setObjectName("tableHandtools")
        self.hLayout3 = QtWidgets.QHBoxLayout()
        self.hLayout3.setObjectName("hLayout3")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout3.addItem(spacerItem2)
        self.label_SumItems = QtWidgets.QLabel(parent=self.frame)
        self.label_SumItems.setMinimumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setMaximumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setText("")
        self.label_SumItems.setObjectName("label_SumItems")
        self.hLayout3.addWidget(self.label_SumItems)
        self.label_SumValue = QtWidgets.QLabel(parent=self.frame)
        self.label_SumValue.setMinimumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setMaximumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setText("")
        self.label_SumValue.setObjectName("label_SumValue")
        self.hLayout3.addWidget(self.label_SumValue)
        self.label_CountItems = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems.setMinimumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setMaximumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setText("")
        self.label_CountItems.setObjectName("label_CountItems")
        self.hLayout3.addWidget(self.label_CountItems)
        self.label_CountValue = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue.setMinimumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setMaximumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setText("")
        self.label_CountValue.setObjectName("label_CountValue")
        self.hLayout3.addWidget(self.label_CountValue)
        self.gridLayout_2.addLayout(self.hLayout3, 5, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Workshop_Handtools_Rev_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Workshop_Handtools_Rev_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 22))
        self.menubar.setObjectName("menubar")
        Workshop_Handtools_Rev_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Workshop_Handtools_Rev_Window)
        self.statusbar.setObjectName("statusbar")
        Workshop_Handtools_Rev_Window.setStatusBar(self.statusbar)

        self.retranslateUi(Workshop_Handtools_Rev_Window)
        QtCore.QMetaObject.connectSlotsByName(Workshop_Handtools_Rev_Window)

        self.model.dataChanged.connect(self.saveChanges)
        self.createContextMenu()

        delete_action = QtGui.QAction("Eliminar Fila", self)
        delete_action.triggered.connect(self.delete_register)

        self.context_menu_row = QtWidgets.QMenu(self)
        self.context_menu_row.addAction(delete_action)

        self.tableRevisions.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)
        self.tableRevisions.addActions([delete_action])

        self.toolAdd.clicked.connect(self.add_new)
        self.toolDeleteFilter.clicked.connect(self.delete_allFilters)
        self.toolImages.clicked.connect(self.add_images)
        self.toolSaveChanges.clicked.connect(self.save_information)
        self.toolPDF.clicked.connect(self.datasheet_pdf)

        self.query_revisions()
        self.load_data()


    def retranslateUi(self, Workshop_Handtools_Rev_Window):
        _translate = QtCore.QCoreApplication.translate
        Workshop_Handtools_Rev_Window.setWindowTitle(_translate("Workshop_Handtools_Rev_Window", "Revisiones Herramientas Taller"))
        self.tableRevisions.setSortingEnabled(True)


# Function to delete all filters when tool button is clicked
    def delete_allFilters(self):
        if self.proxy.rowCount() != 0:
            columns_number=self.model.columnCount()
            for index in range(columns_number):
                if index in self.proxy.filters:
                    del self.proxy.filters[index]
                self.model.setIconColumnHeader(index, '')

            self.checkbox_states = {}
            self.dict_valuesuniques = {}
            self.dict_ordersort = {}
            self.checkbox_filters = {}

            self.proxy.invalidateFilter()
            self.tableRevisions.setModel(None)
            self.tableRevisions.setModel(self.proxy)

            # Getting the unique values for each column of the model
            for column in range(self.model.columnCount()):
                list_valuesUnique = []
                if column not in self.checkbox_states:
                    self.checkbox_states[column] = {}
                    self.checkbox_states[column]['Seleccionar todo'] = True
                    for row in range(self.model.rowCount()):
                        value = self.model.record(row).value(column)
                        if value not in list_valuesUnique:
                            if isinstance(value, QtCore.QDate):
                                value=value.toString("dd/MM/yyyy")
                            list_valuesUnique.append(str(value))
                            self.checkbox_states[column][value] = True
                    self.dict_valuesuniques[column] = list_valuesUnique

            self.adjust_table()

# Function to save changes into database
    def saveChanges(self):
        self.model.submitAll()

        for column in range(self.model.columnCount()):
            list_valuesUnique = []
            for row in range(self.model.rowCount()):
                value = self.model.record(row).value(column)
                if value not in list_valuesUnique:
                    if isinstance(value, QtCore.QDate):
                        value=value.toString("dd/MM/yyyy")
                    list_valuesUnique.append(str(value))
                    if value not in self.checkbox_states[column]:
                        self.checkbox_states[column][value] = True
            self.dict_valuesuniques[column] = list_valuesUnique

# Function to load table and setting in the window
    def query_revisions(self):
        self.checkbox_states = {}
        self.dict_valuesuniques = {}
        self.dict_ordersort = {}
        self.hiddencolumns = []

        self.model.setTable("verification.handtools_workshop_revisions")
        self.model.setFilter(f"handtool_id = {self.handtool_id}")

        self.tableRevisions.setModel(None)
        self.tableRevisions.setModel(self.proxy)
        self.model.select()

        self.proxy.setSourceModel(self.model)
        self.tableRevisions.setModel(self.proxy)

        columns_number=self.model.columnCount()

        self.tableRevisions.setItemDelegate(AlignDelegate(self.tableRevisions))
        self.adjust_table()

        if self.username == 'm.gil':
            self.tableRevisions.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableRevisions.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid white;}")
            self.tableRevisions.verticalHeader().setStyleSheet("::section{font: 10pt; background-color: #121212; border: 0.5px solid white;}")
        else:
            self.tableRevisions.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid black;}")

        self.tableRevisions.setObjectName("tableHandtools")
        self.gridLayout_2.addWidget(self.tableRevisions, 4, 3, 1, 1)
        self.tableRevisions.setMinimumSize(QtCore.QSize(800,16777215))
        self.tableRevisions.setSortingEnabled(False)
        self.tableRevisions.hideColumn(0)

    # Change all column names
        headers_names = ["ID", "Nº Máquina", "Fecha Rev.", "Horas", "Descripción"]

        self.model.setAllColumnHeaders(headers_names)

    # Getting the unique values for each column of the model
        for column in range(self.model.columnCount()):
            list_valuesUnique = []
            if column not in self.checkbox_states:
                self.checkbox_states[column] = {}
                self.checkbox_states[column]['Seleccionar todo'] = True
                for row in range(self.model.rowCount()):
                    value = self.model.record(row).value(column)
                    if value not in list_valuesUnique:
                        if isinstance(value, QtCore.QDate):
                            value=value.toString("dd/MM/yyyy")
                        list_valuesUnique.append(str(value))
                        self.checkbox_states[column][value] = True
                self.dict_valuesuniques[column] = list_valuesUnique

        self.selection_model = self.tableRevisions.selectionModel()
        # self.selection_model.selectionChanged.connect(self.countSelectedCells)

        self.tableRevisions.horizontalHeader().sectionDoubleClicked.connect(self.on_view_horizontalHeader_sectionClicked)
        self.tableRevisions.horizontalHeader().customContextMenuRequested.connect(self.showColumnContextMenu)
        self.tableRevisions.horizontalHeader().setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)

        self.tableRevisions.sortByColumn(0, Qt.SortOrder.AscendingOrder)

# Function when header is clicked
    def on_view_horizontalHeader_sectionClicked(self, logicalIndex):
        self.logicalIndex = logicalIndex
        self.menuValues = QtWidgets.QMenu(self)
        self.signalMapper = QtCore.QSignalMapper(self.tableRevisions)

        valuesUnique_view = []
        for row in range(self.tableRevisions.model().rowCount()):
            index = self.tableRevisions.model().index(row, self.logicalIndex)
            value = index.data(Qt.ItemDataRole.DisplayRole)
            if value not in valuesUnique_view:
                if isinstance(value, QtCore.QDate):
                    value=value.toString("dd/MM/yyyy")
                valuesUnique_view.append(value)

        actionSortAscending = QtGui.QAction("Ordenar Ascendente", self.tableRevisions)
        actionSortAscending.triggered.connect(self.on_actionSortAscending_triggered)
        self.menuValues.addAction(actionSortAscending)
        actionSortDescending = QtGui.QAction("Ordenar Descendente", self.tableRevisions)
        actionSortDescending.triggered.connect(self.on_actionSortDescending_triggered)
        self.menuValues.addAction(actionSortDescending)
        self.menuValues.addSeparator()

        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro", self.tableRevisions)
        actionDeleteFilterColumn.triggered.connect(self.on_actionDeleteFilterColumn_triggered)
        self.menuValues.addAction(actionDeleteFilterColumn)
        self.menuValues.addSeparator()

        actionTextFilter = QtGui.QAction("Buscar...", self.tableRevisions)
        actionTextFilter.triggered.connect(self.on_actionTextFilter_triggered)
        self.menuValues.addAction(actionTextFilter)
        self.menuValues.addSeparator()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setStyleSheet("background-color: rgb(255, 255, 255)")
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkbox_all_widget = QtWidgets.QCheckBox('Seleccionar todo')

        if not self.checkbox_states[self.logicalIndex]['Seleccionar todo'] == True:
            checkbox_all_widget.setChecked(False)
        else:
            checkbox_all_widget.setChecked(True)
        
        checkbox_all_widget.toggled.connect(lambda checked, name='Seleccionar todo': self.on_select_all_toggled(checked, name))

        scroll_layout.addWidget(checkbox_all_widget)
        self.action_checkbox_map['Seleccionar todo'] = checkbox_all_widget

        if len(self.dict_ordersort) != 0 and self.logicalIndex in self.dict_ordersort:
            list_uniquevalues = sorted(list(set(self.dict_valuesuniques[self.logicalIndex])))
        else:
            list_uniquevalues = sorted(list(set(valuesUnique_view)))

        for actionName in list_uniquevalues:
            checkbox_widget = QtWidgets.QCheckBox(actionName)

            if self.logicalIndex not in self.checkbox_filters:
                checkbox_widget.setChecked(True)
            elif actionName not in self.checkbox_filters[self.logicalIndex]:
                checkbox_widget.setChecked(False)
            else:
                checkbox_widget.setChecked(True)

            checkbox_widget.toggled.connect(lambda checked, name=actionName: self.on_checkbox_toggled(checked, name))

            scroll_layout.addWidget(checkbox_widget)
            self.action_checkbox_map[actionName] = checkbox_widget

        action_scroll_menu = QtWidgets.QWidgetAction(self.menuValues)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        self.menuValues.addAction(action_scroll_menu)

        self.menuValues.addSeparator()

        accept_button = QtGui.QAction("ACEPTAR", self.tableRevisions)
        accept_button.triggered.connect(self.menu_acceptbutton_triggered)

        cancel_button = QtGui.QAction("CANCELAR", self.tableRevisions)
        cancel_button.triggered.connect(self.menu_cancelbutton_triggered)

        self.menuValues.addAction(accept_button)
        self.menuValues.addAction(cancel_button)

        self.menuValues.setStyleSheet("QMenu { color: black; }"
                                        "QMenu { background-color: rgb(255, 255, 255); }"
                                        "QMenu::item:selected { background-color: #33bdef; }"
                                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        headerPos = self.tableRevisions.mapToGlobal(self.tableRevisions.horizontalHeader().pos())        

        posY = headerPos.y() + self.tableRevisions.horizontalHeader().height()
        scrollX = self.tableRevisions.horizontalScrollBar().value()
        xInView = self.tableRevisions.horizontalHeader().sectionViewportPosition(logicalIndex)
        posX = headerPos.x() + xInView - scrollX

        self.menuValues.exec(QtCore.QPoint(posX, posY))

# Function when cancel button of menu is clicked
    def menu_cancelbutton_triggered(self):
        self.menuValues.hide()

# Function when accept button of menu is clicked
    def menu_acceptbutton_triggered(self):
        for column, filters in self.checkbox_filters.items():
            if filters:
                self.proxy.setFilter(filters, column)
            else:
                self.proxy.setFilter(None, column)

        self.adjust_table()

# Function when select all checkbox is clicked
    def on_select_all_toggled(self, checked, action_name):
        filterColumn = self.logicalIndex
        imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
        icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))

        if checked:
            for checkbox_name, checkbox_widget in self.action_checkbox_map.items():
                checkbox_widget.setChecked(checked)
                self.checkbox_states[self.logicalIndex][checkbox_name] = checked

            if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map.values()):
                self.model.setIconColumnHeader(filterColumn, icono)
            else:
                self.model.setIconColumnHeader(filterColumn, '')
        
        else:
            for checkbox_name, checkbox_widget in self.action_checkbox_map.items():
                checkbox_widget.setChecked(checked)
                self.checkbox_states[self.logicalIndex][checkbox_widget.text()] = checked

# Function when checkbox of header menu is clicked
    def on_checkbox_toggled(self, checked, action_name):
        filterColumn = self.logicalIndex
        imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
        icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))

        if checked:
            if filterColumn not in self.checkbox_filters:
                self.checkbox_filters[filterColumn] = [action_name]
            else:
                if action_name not in self.checkbox_filters[filterColumn]:
                    self.checkbox_filters[filterColumn].append(action_name)
        else:
            if filterColumn in self.checkbox_filters and action_name in self.checkbox_filters[filterColumn]:
                self.checkbox_filters[filterColumn].remove(action_name)

        if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map.values()):
            self.model.setIconColumnHeader(filterColumn, '')
        else:
            self.model.setIconColumnHeader(filterColumn, icono)

# Function to delete individual column filter
    def on_actionDeleteFilterColumn_triggered(self):
        filterColumn = self.logicalIndex
        if filterColumn in self.proxy.filters:
                del self.proxy.filters[filterColumn]
        self.model.setIconColumnHeader(filterColumn, '')
        self.proxy.invalidateFilter()

        self.tableRevisions.setModel(None)
        self.tableRevisions.setModel(self.proxy)

        if filterColumn in self.checkbox_filters:
            del self.checkbox_filters[filterColumn]

        self.checkbox_states[self.logicalIndex].clear()
        self.checkbox_states[self.logicalIndex]['Seleccionar todo'] = True
        for row in range(self.tableRevisions.model().rowCount()):
            value = self.model.record(row).value(filterColumn)
            if isinstance(value, QtCore.QDate):
                    value=value.toString("dd/MM/yyyy")
            self.checkbox_states[self.logicalIndex][str(value)] = True

        self.adjust_table()

# Function to order column ascending
    def on_actionSortAscending_triggered(self):
        sortColumn = self.logicalIndex
        sortOrder = Qt.SortOrder.AscendingOrder
        self.proxy.sort(sortColumn, sortOrder)

# Function to order column descending
    def on_actionSortDescending_triggered(self):
        sortColumn = self.logicalIndex
        sortOrder = Qt.SortOrder.DescendingOrder
        self.proxy.sortByColumn(sortColumn, sortOrder)

# Function when text is searched
    def on_actionTextFilter_triggered(self):
        filterColumn = self.logicalIndex
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Buscar')
        clickedButton=dlg.exec()

        if clickedButton == 1:
            stringAction = dlg.textValue()
            if re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', stringAction):
                stringAction=QtCore.QDate.fromString(stringAction,"dd/MM/yyyy")
                stringAction=stringAction.toString("yyyy-MM-dd")

            filterString = QtCore.QRegularExpression(stringAction, QtCore.QRegularExpression.PatternOption(0))
            # del self.proxy.filters[filterColumn]
            self.proxy.setFilter([stringAction], filterColumn)

            imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
            icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))
            self.model.setIconColumnHeader(filterColumn, icono)

# Function to hide column when action clicked
    def hide_column(self):
        filterColumn = self.logicalIndex
        self.tableRevisions.setColumnHidden(filterColumn, True)
        self.hiddencolumns.append(filterColumn)

# Function to show all hidden columns
    def show_columns(self):
        for column in self.hiddencolumns:
            self.tableRevisions.setColumnHidden(column, False)
        self.hiddencolumns.clear()

# Function to export data to excel
    def exporttoexcel(self):
        if self.proxy.rowCount() == 0:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Exportar")
            dlg.setText("No hay datos cargados")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            final_data = []

            visible_columns = [col for col in range(self.model.columnCount()) if not self.tableRevisions.isColumnHidden(col)]
            visible_headers = self.model.getColumnHeaders(visible_columns)
            for row in range(self.proxy.rowCount()):
                tag_data = []
                for column in visible_columns:
                    value = self.proxy.data(self.proxy.index(row, column))
                    if isinstance(value, QDate):
                        value = value.toString("dd/MM/yyyy")
                    tag_data.append(value)
                final_data.append(tag_data)

            final_data.insert(0, visible_headers)
            df = pd.DataFrame(final_data)
            df.columns = df.iloc[0]
            df = df[1:]

            output_path = asksaveasfilename(defaultextension=".xlsx", filetypes=[("Archivos de Excel", "*.xlsx")], title="Guardar archivo de Excel")
            if output_path:
                df.to_excel(output_path, index=False, header=True)

# Function to enable copy and paste cells
    def keyPressEvent(self, event):
        if event.matches(QKeySequence.StandardKey.Copy):
            if self.tableRevisions.selectionModel() != None:
                selected_indexes = self.tableRevisions.selectionModel().selectedIndexes()
                if selected_indexes:
                    clipboard = QApplication.clipboard()
                    text = self.get_selected_text(selected_indexes)
                    if isinstance(text, QtCore.QDate):
                        text=text.toString("dd/MM/yyyy")
                    clipboard.setText(text)

        elif event.matches(QKeySequence.StandardKey.Paste):
            if self.tableRevisions.selectionModel() != None:
                selected_indexes = self.tableRevisions.selectionModel().selectedIndexes()
                if selected_indexes:
                    clipboard = QApplication.clipboard()
                    text = clipboard.text()
                    for index in selected_indexes:
                        current_row = index.row()
                        current_column = index.column()
                        first_column_value = self.proxy.data(self.proxy.index(current_row, 0))
                        target_row = None
                        for row in range(self.model.rowCount()):
                            if self.model.data(self.model.index(row, 0)) == first_column_value:
                                target_row = row
                                break
                        if target_row is not None:
                            target_index = self.model.index(target_row, current_column)
                            self.model.setData(target_index, text, Qt.ItemDataRole.EditRole)
                    self.model.submitAll()

        super().keyPressEvent(event)

# Function to get the text of the selected cells
    def get_selected_text(self, indexes):
        if len(indexes) == 1:  # For only one cell selected
            index = indexes[0]
            cell_data = index.data(Qt.ItemDataRole.DisplayRole)
            return cell_data
        else:
            rows = set()
            cols = set()
            for index in indexes:
                rows.add(index.row())
                cols.add(index.column())

            text_doc = QTextDocument()
            cursor = QTextCursor(text_doc)

            for row in sorted(rows):
                for col in sorted(cols):
                    index = self.model.index(row, col)  
                    cell_data = index.data(Qt.ItemDataRole.DisplayRole)
                    cursor.insertText(str(cell_data))
                    cursor.insertText('\t')
                cursor.insertText('\n')

            return text_doc.toPlainText()

# Function to count selected cells and sum its values
    def countSelectedCells(self):
        if len(self.tableRevisions.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

            sum_value = sum([self.euro_string_to_float(str(ix.data())) if re.match(r'^[\d.,]+\sÇ$', str(ix.data())) else float(str(ix.data()).replace(',', '.')) if str(ix.data()).replace(',', '.').replace('.', '', 1).isdigit() else 0 for ix in self.tableRevisions.selectedIndexes()])
            count_value = len([ix for ix in self.tableRevisions.selectedIndexes() if ix.data() != ""])
            if sum_value > 0:
                self.label_SumItems.setText("Suma:")
                self.label_SumValue.setText(locale.format_string("%.2f", sum_value, grouping=True))
            if count_value > 0:
                self.label_CountItems.setText("Recuento:")
                self.label_CountValue.setText(str(count_value))
        else:
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

# Function to format money string values
    def euro_string_to_float(self, euro_str):
        match = re.match(r'^([\d.,]+)\s€$', euro_str)
        if match:
            number_str = match.group(1)
            number_str = number_str.replace('.', '').replace(',', '.')
            return float(number_str)
        else:
            return 0.0

# Function for creating context menu
    def createContextMenu(self):
        self.context_menu = QtWidgets.QMenu(self)
        hide_columns_action = self.context_menu.addAction("Ocultar Columnas")
        hide_columns_action.triggered.connect(self.hideSelectedColumns)

# Function to show context menu when right-click
    def showColumnContextMenu(self, pos):
        header = self.tableRevisions.horizontalHeader()
        column = header.logicalIndexAt(pos)
        self.context_menu.exec(self.tableRevisions.mapToGlobal(pos))

# Function to hide selected columns
    def hideSelectedColumns(self):
        selected_columns = set()
        header = self.tableRevisions.horizontalHeader()
        for index in header.selectionModel().selectedColumns():
            selected_columns.add(index.column())

        for column in selected_columns:
            self.tableRevisions.setColumnHidden(column, True)
            self.hiddencolumns.append(column)

        self.context_menu.close()

# Function to add a new line
    def add_new(self):
        commands_new=("""
                        INSERT INTO verification.handtools_workshop_revisions (handtool_id)
                        VALUES(%s)
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of principal command
            data=(self.handtool_id,)
            cur.execute(commands_new, data)
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.query_revisions()

# Function to adjust table size
    def adjust_table(self):
        self.tableRevisions.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableRevisions.horizontalHeader().setSectionResizeMode(4,QtWidgets.QHeaderView.ResizeMode.Stretch)

# Function to add images to handtools
    def add_images(self):
        images_path = askopenfilename(initialdir="//nas01/DATOS/Comunes/TALLER/MAQUINAS Y HERRAMIENTAS/Fotos Herramientas de Mano", filetypes=[("Archivos JPG", "*.jpg")],
                            title="Seleccionar imagen")

        if images_path:
            commands_insert = ("""
                    UPDATE verification."handtools_workshop"
                    SET "image" = %s
                    WHERE "id" = %s
                    """)

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_insert, (images_path, self.handtool_id,))

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Herramientas Taller")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon

            finally:
                if conn is not None:
                    conn.close()

            self.load_data()

# Function to add information to Handtools
    def save_information(self):
        commands_insert = ("""
                UPDATE verification."handtools_workshop"
                SET "characteristics" = %s
                WHERE "id" = %s
                """)

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_insert, (self.handtool_characteristics.toPlainText(), self.handtool_id,))

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Herramientas Taller")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon

        finally:
            if conn is not None:
                conn.close()

# Function to load data
    def load_data(self):
        query_handtool_data = ("""SELECT characteristics, image, brand, handtool_type, year, warehouse FROM verification.handtools_workshop WHERE id = %s""")

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_handtool_data, (self.handtool_id,))
            results_handtool=cur.fetchall()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        if results_handtool[0][1] is not None and results_handtool[0][1] != '':
            image_path = os.path.abspath(results_handtool[0][1])

            corrected_image = self.correct_image_orientation(image_path)

            from io import BytesIO
            image_bytes = BytesIO()
            corrected_image.save(image_bytes, format='PNG')
            image_bytes.seek(0)

            pixmap = QtGui.QPixmap()
            pixmap.loadFromData(image_bytes.read())

            self.handtool_image.setPixmap(pixmap)
            self.handtool_image.setScaledContents(True)


        self.handtool_characteristics.setText(results_handtool[0][0] if results_handtool[0][0] is not None else "")
        self.label_number.setText("NÚMERO: " + str(self.handtool_id))
        self.label_name.setText("NOMBRE: " + results_handtool[0][2] if results_handtool[0][2] is not None else "")
        self.label_year.setText("AÑO: " + results_handtool[0][4] if results_handtool[0][4] is not None else "")
        self.label_location.setText("NAVE: " + results_handtool[0][5] if results_handtool[0][5] is not None else "")

# Function to delete register of database
    def delete_register(self):
        selection_model = self.tableRevisions.selectionModel()

        if not selection_model.hasSelection():
            return

        model = self.tableRevisions.model()

        id_values = []
        selected_indexes = selection_model.selectedRows()
        for index in selected_indexes:
            # Obtaining first columns values
            item_index = model.index(index.row(), 0)
            if item_index.isValid():
                value = model.data(item_index)
                id_values.append(value)

        if len(id_values) != 0:
            dlg_yes_no = QtWidgets.QMessageBox()
            new_icon_yes_no = QtGui.QIcon()
            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg_yes_no.setWindowIcon(new_icon_yes_no)
            dlg_yes_no.setWindowTitle("ERP EIPSA")
            dlg_yes_no.setText("¿Estás seguro de que deseas eliminar los registros?\n")
            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
            result = dlg_yes_no.exec()
            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    commands_delete = ("""DELETE FROM verification.handtools_workshop_revisions
                                        WHERE id = %s""")
                    for id_value in id_values:
                        data = (id_value,)
                        cur.execute(commands_delete, data)

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Revisiones Herramientas")
                    dlg.setText("Registros eliminados con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                    self.query_revisions()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

            del dlg_yes_no, new_icon_yes_no

# Function to correct image orientation
    def correct_image_orientation(self,image_path):
        image = Image.open(image_path)
        
        try:
            for orientation in ExifTags.TAGS.keys():
                if ExifTags.TAGS[orientation] == 'Orientation':
                    break
            
            exif = image._getexif()

            if exif is not None:
                orientation = exif.get(orientation, 1)

                if orientation == 3:
                    image = image.rotate(180, expand=True)
                elif orientation == 6:
                    image = image.rotate(270, expand=True)
                elif orientation == 8:
                    image = image.rotate(90, expand=True)
        except (AttributeError, KeyError, IndexError):
            # No EXIF data, no need to correct orientation
            pass

        return image

# Function to print pdf
    def datasheet_pdf(self):
        query_handtool_data = ("""SELECT * FROM verification.handtools_workshop WHERE id = %s""")
        query_handtool_revision = ("""SELECT TO_CHAR(rev_date, 'DD/MM/YYYY'), hours, description FROM verification.handtools_workshop_revisions WHERE handtool_id = %s""")

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_handtool_data, (self.handtool_id,))
            results_handtool=cur.fetchall()

            cur.execute(query_handtool_revision, (self.handtool_id,))
            results_revisions=cur.fetchall()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        if len(results_handtool) != 0:
            pdf = CustomPDF('P', 'cm', 'A4')

            pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
            pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))

            pdf.set_auto_page_break(auto=True)
            pdf.set_margins(1.5, 1.5)

            pdf.add_page()

            pdf.image(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Eipsa Logo Blanco.png")), 13.6, 1.5, 6, 2.25)
            pdf.set_fill_color(0, 176, 240)
            pdf.set_font('Helvetica', 'B', 16)
            pdf.cell(12, 1, "FICHA DE HERRAMIENTA", border=1, align='C', fill=True)
            pdf.ln(1)
            pdf.set_fill_color(191, 191, 191)
            pdf.set_font('Helvetica', 'B', 9)
            pdf.cell(1, 0.5, "Num", border='LR', align='C', fill=True)
            pdf.cell(4.5, 0.5, "Marca", border='LR', align='C', fill=True)
            pdf.cell(4.5, 0.5, "Tipo", border='LR', align='C', fill=True)
            pdf.cell(1, 0.5, "Año", border='LR', align='C', fill=True)
            pdf.cell(1, 0.5, "Nave", border='LR', align='C', fill=True)
            pdf.ln(0.5)
            pdf.set_font('Helvetica', '', 9)
            pdf.cell(1, 0.5, str(results_handtool[0][0]), border='LRT', align='C')
            pdf.cell(4.5, 0.5, str(results_handtool[0][1]), border='LRT', align='C')
            pdf.cell(4.5, 0.5, str(results_handtool[0][2]), border='LRT', align='C')
            pdf.cell(1, 0.5, str(results_handtool[0][5]) if results_handtool[0][5] is not None else '', border='LRT', align='C')
            pdf.cell(1, 0.5, str(results_handtool[0][6]) if results_handtool[0][6] is not None else '', border='LRT', align='C')
            pdf.ln(0.5)
            pdf.set_font('Helvetica', 'B', 9)
            pdf.cell(5.5, 0.5, "Próxima Revisión", border='LRT', align='C', fill=True)
            pdf.set_font('Helvetica', '', 9)
            pdf.cell(6.5, 0.5, str(f"{str(results_handtool[0][4]).split('-')[2]}/{str(results_handtool[0][4]).split('-')[1]}/{str(results_handtool[0][4]).split('-')[0]}") if results_handtool[0][4] is not None else '', border='LRT', align='C')
            pdf.ln(0.5)
            pdf.set_font('Helvetica', 'B', 9)
            pdf.cell(18.1, 0.5, "CARACTERÍSTICAS", border=1, align='C', fill=True)
            pdf.ln(0.5)
            pdf.set_font('Helvetica', '', 9)

            if results_handtool[0][3] != '-':
                characteristics = str(results_handtool[0][3]).splitlines()
                for item in characteristics:
                    item = item.split(': ')
                    pdf.cell(5.5, 0.5, item[0] + ':', border=1, fill=True)
                    pdf.cell(5.5, 0.5, item[1], border='RB')
                    pdf.ln(0.5)

            if results_handtool[0][8] != '':
                image_path = os.path.abspath(results_handtool[0][8])
                corrected_image = self.correct_image_orientation(image_path)
                temp_image_path = r"\\nas01\DATOS\Comunes\EIPSA-ERP\Resources\pdfviewer\temp\temp_corrected_image.png"
                corrected_image.save(temp_image_path)
                pdf.image(temp_image_path, 12.6, 4.60, 7, 13)

            if len(results_revisions)>0:
                pdf.add_page()

                pdf.set_font('Helvetica', 'B', 9)
                pdf.cell(4.5, 0.5, "Fecha Revisión", border=1, align='C', fill=True)
                pdf.cell(3, 0.5, "Horas", border=1, align='C', fill=True)
                pdf.cell(10.5, 0.5, "Descripción", border=1, align='C', fill=True)
                pdf.ln(0.5)

                pdf.set_font('Helvetica', '', 9)
                for revision in results_revisions:
                    pdf.cell(4.5, 0.5, str(revision[0]), border=1, align='C')
                    pdf.cell(3, 0.5, str(revision[1]), border=1, align='C')
                    pdf.cell(10.5, 0.5, str(revision[2]), border=1, align='C')
                    pdf.ln(0.5)

            pdf_buffer = pdf.output()

            temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp.pdf"))))

            with open(temp_file_path, "wb") as temp_file:
                temp_file.write(pdf_buffer)

            self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Abre el PDF en el visor
            self.pdf_viewer.showMaximized()
        else:
            dlg_error = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg_error.setWindowIcon(new_icon)
            dlg_error.setWindowTitle("Máquinas")
            dlg_error.setText("No existe máquina con ese número")
            dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg_error.exec()
            del dlg_error,new_icon




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    config_obj = configparser.ConfigParser()
    config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
    dbparam = config_obj["postgresql"]
    # set your parameters for the database connection URI using the keys from the configfile.ini
    user_database = dbparam["user"]
    password_database = dbparam["password"]

    db = createConnection(user_database, password_database)
    if not db:
        sys.exit()

    Workshop_Handtools_Rev_Window = Ui_Workshop_Handtools_Rev_Window(db, 'm.gil', '73')
    Workshop_Handtools_Rev_Window.showMaximized()
    sys.exit(app.exec())