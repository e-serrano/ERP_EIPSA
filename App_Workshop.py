# Form implementation generated from reading ui file 'App_Workshop.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PasswordEdit_Window import Ui_EditPasswordWindow
from PyQt6.QtWidgets import QMenu
import os
import configparser
from config import config
import psycopg2
from Database_Connection import createConnection, createConnection_name
import sys

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_App_Workshop(object):
    """
    Main application window for the workshop app.

        Args:
        name (str): The name of the user.
        username (str): The username of the user.
    """
    def __init__(self, name, username):
        """
        Initializes the main window, setting up the user interface and storing user-specific details.

        Args:
            name (str): The name of the user.
            username (str): The username of the user.
        """
        self.name=name
        self.username=username


    def setupUi(self, App_Workshop):
        """
        Sets up the user interface components for the main application window.

        Args:
            App_Workshop (QtWidgets.QMainWindow): The main window object to set up.
        """
        App_Workshop.setObjectName("App_Workshop")
        App_Workshop.resize(945, 860)
        App_Workshop.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Workshop.setWindowIcon(icon)
        App_Workshop.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Workshop)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(int(220), int(52)))
        self.LogoIcon.setMaximumSize(QtCore.QSize(int(220), int(52)))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Logo.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        self.Button_Index_Drawings = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Index_Drawings.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Index_Drawings.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Index_Drawings.setToolTip('Índice Planos')
        self.Button_Index_Drawings.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Index_Drawings.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Index_Drawings.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Drawing_Index.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Index_Drawings.setIcon(icon6)
        self.Button_Index_Drawings.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_Index_Drawings.setObjectName("Button_Index_Drawings")
        self.Header.addWidget(self.Button_Index_Drawings)
        spacerItem7 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem7)
        self.Button_Palette_M = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Palette_M.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Palette_M.setMaximumSize(QtCore.QSize(50, 16777215))
        self.Button_Palette_M.setToolTip('Colores Materiales')
        self.Button_Palette_M.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Palette_M.setStyleSheet(
            "QPushButton{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(3, 174, 236);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(200, 200, 200);\n"
            "    border-radius: 10px;\n"
            "}"
        )
        self.Button_Palette_M.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Colour_Palette_M.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Palette_M.setIcon(icon7)
        self.Button_Palette_M.setIconSize(QtCore.QSize(40, 40))
        self.Button_Palette_M.setObjectName("Button_Palette_M")
        self.Header.addWidget(self.Button_Palette_M)
        spacerItem8 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem8)
        self.Button_Palette_T = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Palette_T.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Palette_T.setMaximumSize(QtCore.QSize(50, 16777215))
        self.Button_Palette_T.setToolTip('Colores Tornillería')
        self.Button_Palette_T.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Palette_T.setStyleSheet(
            "QPushButton{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(3, 174, 236);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(200, 200, 200);\n"
            "    border-radius: 10px;\n"
            "}"
        )
        self.Button_Palette_T.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Colour_Palette_T.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Palette_T.setIcon(icon8)
        self.Button_Palette_T.setIconSize(QtCore.QSize(40, 40))
        self.Button_Palette_T.setObjectName("Button_Palette_T")
        self.Header.addWidget(self.Button_Palette_T)
        spacerItem9 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem9)
        self.Button_Verification = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Verification.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Verification.setMaximumSize(QtCore.QSize(50, 16777215))
        self.Button_Verification.setToolTip('Verificación')
        self.Button_Verification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Verification.setStyleSheet(
            "QPushButton{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(3, 174, 236);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(200, 200, 200);\n"
            "    border-radius: 10px;\n"
            "}"
        )
        self.Button_Verification.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Eye.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Verification.setIcon(icon9)
        self.Button_Verification.setIconSize(QtCore.QSize(40, 40))
        self.Button_Verification.setObjectName("Button_Verification")
        self.Header.addWidget(self.Button_Verification)
        spacerItem5 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem5)
        self.Button_Machines = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Machines.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Machines.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Machines.setToolTip('Máquinas')
        self.Button_Machines.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'm.gil':
            self.Button_Machines.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_Machines.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_Machines.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Machines.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Machines.setIcon(icon10)
        self.Button_Machines.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_Machines.setObjectName("Button_Machines")
        self.Header.addWidget(self.Button_Machines)

        spacerItem8 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem8)
        self.Button_HandTools = QtWidgets.QPushButton(parent=self.frame)
        self.Button_HandTools.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_HandTools.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_HandTools.setToolTip('Herramientas de Mano')
        self.Button_HandTools.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'm.gil':
            self.Button_HandTools.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_HandTools.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_HandTools.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Handtool.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_HandTools.setIcon(icon11)
        self.Button_HandTools.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_HandTools.setObjectName("Button_HandTools")
        self.Header.addWidget(self.Button_HandTools)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem1)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(int(12))
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.Button_Notification = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Notification.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setToolTip('Notificaciones')
        self.Button_Notification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Notification.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Notification.setText("")
        self.Button_Notification.setIconSize(QtCore.QSize(40, 40))
        self.Button_Notification.setObjectName("Button_Notification")
        self.Header.addWidget(self.Button_Notification)
        spacerItem15 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem15)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(int(50), int(50)))
        self.Button_Profile.setMaximumSize(QtCore.QSize(int(50), int(50)))
        self.Button_Profile.setToolTip('Configuración')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/User.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem3 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem3)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(int(220), 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(int(220), 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_QueryTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryTag.setMinimumSize(QtCore.QSize(int(200), int(50)))
        self.Button_QueryTag.setMaximumSize(QtCore.QSize(int(200), int(50)))
        font = QtGui.QFont()
        font.setPointSize(int(12))
        font.setBold(True)
        self.Button_QueryTag.setFont(font)
        self.Button_QueryTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/TAG_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTag.setIcon(icon1)
        self.Button_QueryTag.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_QueryTag.setObjectName("Button_QueryTag")
        self.verticalLayout_3.addWidget(self.Button_QueryTag)
        self.Button_Manufacturing = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Manufacturing.setMinimumSize(QtCore.QSize(int(200), int(50)))
        self.Button_Manufacturing.setMaximumSize(QtCore.QSize(int(200), int(50)))
        font = QtGui.QFont()
        font.setPointSize(int(12))
        font.setBold(True)
        self.Button_Manufacturing.setFont(font)
        self.Button_Manufacturing.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Factory.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Manufacturing.setIcon(icon1)
        self.Button_Manufacturing.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_Manufacturing.setObjectName("Button_Manufacturing")
        self.verticalLayout_3.addWidget(self.Button_Manufacturing)
        self.Button_Assembly = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Assembly.setMinimumSize(QtCore.QSize(int(200), int(50)))
        self.Button_Assembly.setMaximumSize(QtCore.QSize(int(200), int(50)))
        font = QtGui.QFont()
        font.setPointSize(int(12))
        font.setBold(True)
        self.Button_Assembly.setFont(font)
        self.Button_Assembly.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Assembly.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Assembly.setIcon(icon3)
        self.Button_Assembly.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_Assembly.setObjectName("Button_Assembly")
        self.verticalLayout_3.addWidget(self.Button_Assembly)
        self.Button_Dispatch = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Dispatch.setMinimumSize(QtCore.QSize(int(200), int(50)))
        self.Button_Dispatch.setMaximumSize(QtCore.QSize(int(200), int(50)))
        font = QtGui.QFont()
        font.setPointSize(int(12))
        font.setBold(True)
        self.Button_Dispatch.setFont(font)
        self.Button_Dispatch.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Transport.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Dispatch.setIcon(icon4)
        self.Button_Dispatch.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_Dispatch.setObjectName("Button_Dispatch")
        self.verticalLayout_3.addWidget(self.Button_Dispatch)
        self.Button_Times = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Times.setMinimumSize(QtCore.QSize(int(200), int(50)))
        self.Button_Times.setMaximumSize(QtCore.QSize(int(200), int(50)))
        font = QtGui.QFont()
        font.setPointSize(int(12))
        font.setBold(True)
        self.Button_Times.setFont(font)
        self.Button_Times.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Clock.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Times.setIcon(icon5)
        self.Button_Times.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_Times.setObjectName("Button_Times")
        self.verticalLayout_3.addWidget(self.Button_Times)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem4)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.table = QtWidgets.QTableWidget(parent=self.frame)
        self.table.setMinimumSize(QtCore.QSize(int(650), int(280)))
        self.table.setObjectName("table")
        self.table.setColumnCount(0)
        self.table.setRowCount(0)
        self.table.verticalHeader().setVisible(False)
        self.MainLayout.addWidget(self.table)
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem5)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Workshop.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Workshop)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Workshop.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Workshop)
        self.statusbar.setObjectName("statusbar")
        App_Workshop.setStatusBar(self.statusbar)

        self.retranslateUi(App_Workshop)
        QtCore.QMetaObject.connectSlotsByName(App_Workshop)
        self.Button_QueryTag.clicked.connect(self.query_tag)
        self.Button_Manufacturing.clicked.connect(self.manufacture)
        self.Button_Assembly.clicked.connect(self.assembly)
        self.Button_Dispatch.clicked.connect(self.dispatch)
        self.Button_Times.clicked.connect(self.times)
        self.Button_Notification.clicked.connect(self.notifications)
        self.Button_Profile.clicked.connect(self.showMenu)
        self.Button_Index_Drawings.clicked.connect(self.index_drawing)

        self.Button_Palette_M.clicked.connect(self.colour_palette_M)
        self.Button_Palette_T.clicked.connect(self.colour_palette_T)
        self.Button_Verification.clicked.connect(self.verification)
        self.Button_Machines.clicked.connect(self.workshop_machines)
        self.Button_HandTools.clicked.connect(self.workshop_handtools)

        self.load_notifications()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, App_Workshop):
        """
        Translates and updates the text of various UI elements in the given App_Comercial.
        """
        _translate = QtCore.QCoreApplication.translate
        App_Workshop.setWindowTitle(_translate("App_Workshop", "ERP EIPSA - Taller"))
        self.HeaderName.setText(_translate("App_Workshop", self.name))
        self.Button_QueryTag.setText(_translate("App_Workshop", "    Consultar TAG(s)"))
        self.Button_Manufacturing.setText(_translate("App_Workshop", "    Fabricación"))
        self.Button_Assembly.setText(_translate("App_Workshop", "    Montaje"))
        self.Button_Dispatch.setText(_translate("App_Workshop", "   Despachos"))
        self.Button_Times.setText(_translate("App_Workshop", "    Tiempos"))
        self.table.setSortingEnabled(True)

# Function to open window to check notifications
    def notifications(self):
        """
        Opens a new window to show active notifications. 
        """
        from NotificationsHistory_Window import Ui_HistoryNotifications_Window
        self.notification_window=Ui_HistoryNotifications_Window(self.username)
        self.notification_window.show()
        self.notification_window.Button_Cancel.clicked.connect(self.load_notifications)

# Function to open window to check tags
    def query_tag(self):
        """
        Opens a window for querying tags.
        """
        from TAGEdit_Workshop_Window import Ui_EditTags_Workshop_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_tags_tech = createConnection(user_database, password_database)
        if not db_tags_tech:
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Workshop_Window(self.name, db_tags_tech)
        self.edit_tags_app.show()

# Function to open window with manufacture table
    def manufacture(self):
        """
        Opens the workshop window for manufacturing operations.
        """
        from Workshop_Window import Ui_Workshop_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        # Genera un nombre único para la conexión basado en el nombre de usuario y el contador
        db_manufacture = createConnection_name(user_database, password_database, 'workshop_connection')

        if not db_manufacture:
            sys.exit()

        self.workshop_window = Ui_Workshop_Window(db_manufacture, self.username)
        self.workshop_window.showMaximized()

# Function to open window with assembly table
    def assembly(self):
        """
        Opens the assembly window for managing assembly operations.
        """
        from Assembly_Window import Ui_Assembly_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_assembly = createConnection_name(user_database, password_database, 'assembly_connection')
        if not db_assembly:
            sys.exit()

        self.assembly_window = Ui_Assembly_Window(db_assembly, self.username)
        self.assembly_window.showMaximized()

# Function to open window with dispatch table
    def dispatch(self):
        """
        Opens the dispatch window for managing dispatch operations.
        """
        from Dispatch_Window import Ui_Dispatch_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_dispatch = createConnection(user_database, password_database)
        if not db_dispatch:
            sys.exit()

        self.dispatch_window = Ui_Dispatch_Window(db_dispatch)
        self.dispatch_window.show()

# Function to open window with manufacture times table
    def times(self):
        print('ordenes de compra')

# Function to show menu when Profile button is clicked 
    def showMenu(self):
        """
        Displays a context menu when the profile button is clicked. 
        Provides options to edit the password.
        """
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; font: 10px}"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contraseña")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))

# Function to open corresponding window when Edit Password option is clicked
    def editpassword(self):
        """
        Opens a new window for editing the user's password. 
        """
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()

# Function to load number of notifications
    def load_notifications(self):
        """
        Loads and displays notifications for the user from various tables in the 'notifications' schema.
        """
        query_tables_notifications = """SELECT table_name
                                FROM information_schema.tables
                                WHERE table_schema = 'notifications' AND table_type = 'BASE TABLE';"""
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_tables_notifications)
            results=cur.fetchall()
            tables_names=[x[0] for x in results]

            notifications = []

            for table in tables_names:
                commands_notifications = f" SELECT * FROM notifications.{table} WHERE username = '{self.username}' and state = 'Pendiente'"
                cur.execute(commands_notifications)
                results=cur.fetchall()

                for x in results:
                    notifications.append(x)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        if len(notifications) != 0:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Notif_on.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        else:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Notif_off.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Notification.setIcon(icon13)

# Function to open window to check order drawings
    def index_drawing(self):
        """
        Loads and displays the workshop drawing index window after establishing a database connection.
        """
        from WorkshopDrawingIndex_Window import Ui_WorkshopDrawingIndex_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_index = createConnection_name(user_database, password_database, 'drawing_index')
        if not db_index:
            sys.exit()

        self.index_drawing_window = Ui_WorkshopDrawingIndex_Window(db_index, self.username)
        self.index_drawing_window.showMaximized()

# Function to open colour palette table
    def colour_palette_M(self):
        """
        Opens the material colour palette table window.
        """
        from ColourPaletteM_Window import Ui_PaletteColourM_Window

        self.palettecolourm_window = QtWidgets.QMainWindow()
        self.ui = Ui_PaletteColourM_Window()
        self.ui.setupUi(self.palettecolourm_window)
        self.palettecolourm_window.show()

# Function to open bolts colour palette table
    def colour_palette_T(self):
        """
        Opens the bolts colour palette table window.
        """
        from ColourPaletteT_Window import Ui_PaletteColourT_Window

        self.palettecolourt_window = QtWidgets.QMainWindow()
        self.ui = Ui_PaletteColourT_Window()
        self.ui.setupUi(self.palettecolourt_window)
        self.palettecolourt_window.show()

# Function to open corresponding window when Verification button is clicked
    def verification(self):
        """
        Prompts the user to input an order number and displays the order verification window if valid.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Verificación')
        dlg.setLabelText('Introduce un pedido:')

        while True:
            clickedButton = dlg.exec()
            if clickedButton == 1:
                numorder = dlg.textValue()
                if numorder != '':
                    from Verif_Order_Window import Ui_Verif_Order_Window
                    self.testquery_window=QtWidgets.QMainWindow()
                    self.ui=Ui_Verif_Order_Window(self.username, numorder)
                    self.ui.setupUi(self.testquery_window)
                    self.testquery_window.showMaximized()
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Verificación")
                dlg_error.setText("El pedido no puede estar vacío. Introduce un valor válido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to open window with workshop machines
    def workshop_machines(self):
        """
        Opens the workshop machines window for managing workshop machinery.
        """
        from Workshop_Machines_Window import Ui_Workshop_Machines_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_machines = createConnection(user_database, password_database)
        if not db_machines:
            sys.exit()

        self.machines_window = Ui_Workshop_Machines_Window(db_machines, self.username)
        self.machines_window.showMaximized()

# Function to open window with workshop machines
    def workshop_handtools(self):
        """
        Opens the workshop handtools window for managing hand tools.
        """
        from Workshop_Handtools_Window import Ui_Workshop_Handtools_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_handtools = createConnection(user_database, password_database)
        if not db_handtools:
            sys.exit()

        self.handtool_window = Ui_Workshop_Handtools_Window(db_handtools, self.username)
        self.handtool_window.showMaximized()




# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     App_Workshop = QtWidgets.QMainWindow()
#     ui = Ui_App_Workshop()
#     ui.setupUi(App_Workshop)
#     App_Workshop.show()
#     sys.exit(app.exec())
