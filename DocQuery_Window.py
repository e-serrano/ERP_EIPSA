# Form implementation generated from reading ui file 'QueryDoc_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import psycopg2
from config import config
import pandas as pd
from PyQt6.QtWidgets import QFileDialog
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)

        if index.column() == 12:
            option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignLeft
        else:
            option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        if index.column() == 9:  # Check column and paint when apply
            value = index.data()

            if value == "Aprobado":  
                color = QtGui.QColor(146, 208, 80)  # Green
            elif value == "Eliminado":
                color = QtGui.QColor(255, 0, 0)  # Red
            else:
                color = QtGui.QColor(255, 255, 255)  # White for rest

            option.backgroundBrush = color


class Ui_QueryDoc_Window(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def setupUi(self, QueryDoc_Window):
        QueryDoc_Window.setObjectName("QueryDoc_Window")
        QueryDoc_Window.resize(845, 654)
        QueryDoc_Window.setMinimumSize(QtCore.QSize(1500, 790))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        QueryDoc_Window.setWindowIcon(icon)
        QueryDoc_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255)\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=QueryDoc_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setVerticalSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.hLayout1 = QtWidgets.QHBoxLayout()
        self.hLayout1.setObjectName("hLayout1")
        self.label_NumOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOrder.setMinimumSize(QtCore.QSize(110, 25))
        self.label_NumOrder.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumOrder.setFont(font)
        self.label_NumOrder.setObjectName("label_NumOrder")
        self.hLayout1.addWidget(self.label_NumOrder)
        self.NumOrder_QueryDoc = QtWidgets.QLineEdit(parent=self.frame)
        self.NumOrder_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.NumOrder_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.NumOrder_QueryDoc.setFont(font)
        self.NumOrder_QueryDoc.setObjectName("NumOrder_QueryDoc")
        self.hLayout1.addWidget(self.NumOrder_QueryDoc)
        self.label_Client = QtWidgets.QLabel(parent=self.frame)
        self.label_Client.setMinimumSize(QtCore.QSize(110, 25))
        self.label_Client.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Client.setFont(font)
        self.label_Client.setObjectName("label_Client")
        self.hLayout1.addWidget(self.label_Client)
        self.Client_QueryDoc = QtWidgets.QLineEdit(parent=self.frame)
        self.Client_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.Client_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Client_QueryDoc.setFont(font)
        self.Client_QueryDoc.setObjectName("Client_QueryDoc")
        self.hLayout1.addWidget(self.Client_QueryDoc)
        self.gridLayout_2.addLayout(self.hLayout1, 1, 0, 1, 1)
        self.hLayout2 = QtWidgets.QHBoxLayout()
        self.hLayout2.setObjectName("hLayout2")
        self.label_NumPO = QtWidgets.QLabel(parent=self.frame)
        self.label_NumPO.setMinimumSize(QtCore.QSize(110, 25))
        self.label_NumPO.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumPO.setFont(font)
        self.label_NumPO.setObjectName("label_NumPO")
        self.hLayout2.addWidget(self.label_NumPO)
        self.NumPo_QueryDoc = QtWidgets.QLineEdit(parent=self.frame)
        self.NumPo_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.NumPo_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.NumPo_QueryDoc.setFont(font)
        self.NumPo_QueryDoc.setObjectName("NumPo_QueryDoc")
        self.hLayout2.addWidget(self.NumPo_QueryDoc)
        self.label_TypeDoc = QtWidgets.QLabel(parent=self.frame)
        self.label_TypeDoc.setMinimumSize(QtCore.QSize(110, 25))
        self.label_TypeDoc.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_TypeDoc.setFont(font)
        self.label_TypeDoc.setObjectName("label_TypeDoc")
        self.hLayout2.addWidget(self.label_TypeDoc)
        self.TypeDoc_QueryDoc = QtWidgets.QComboBox(parent=self.frame)
        self.TypeDoc_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.TypeDoc_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TypeDoc_QueryDoc.setFont(font)
        self.TypeDoc_QueryDoc.setObjectName("TypeDoc_QueryDoc")
        self.hLayout2.addWidget(self.TypeDoc_QueryDoc)
        self.gridLayout_2.addLayout(self.hLayout2, 2, 0, 1, 1)
        self.hLayout3 = QtWidgets.QHBoxLayout()
        self.hLayout3.setObjectName("hLayout3")
        self.label_Material = QtWidgets.QLabel(parent=self.frame)
        self.label_Material.setMinimumSize(QtCore.QSize(110, 25))
        self.label_Material.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Material.setFont(font)
        self.label_Material.setObjectName("label_Material")
        self.hLayout3.addWidget(self.label_Material)
        self.Material_QueryDoc = QtWidgets.QComboBox(parent=self.frame)
        self.Material_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.Material_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Material_QueryDoc.setFont(font)
        self.Material_QueryDoc.setObjectName("Material_QueryDoc")
        self.hLayout3.addWidget(self.Material_QueryDoc)
        self.label_NumDocEipsa = QtWidgets.QLabel(parent=self.frame)
        self.label_NumDocEipsa.setMinimumSize(QtCore.QSize(110, 25))
        self.label_NumDocEipsa.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumDocEipsa.setFont(font)
        self.label_NumDocEipsa.setObjectName("label_NumDocEipsa")
        self.hLayout3.addWidget(self.label_NumDocEipsa)
        self.NumDocEipsa_QueryDoc = QtWidgets.QLineEdit(parent=self.frame)
        self.NumDocEipsa_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.NumDocEipsa_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.NumDocEipsa_QueryDoc.setFont(font)
        self.NumDocEipsa_QueryDoc.setObjectName("NumDocEipsa_QueryDoc")
        self.hLayout3.addWidget(self.NumDocEipsa_QueryDoc)
        self.gridLayout_2.addLayout(self.hLayout3, 3, 0, 1, 1)
        self.hLayout4 = QtWidgets.QHBoxLayout()
        self.hLayout4.setObjectName("hLayout4")
        self.label_NumDocClient = QtWidgets.QLabel(parent=self.frame)
        self.label_NumDocClient.setMinimumSize(QtCore.QSize(110, 25))
        self.label_NumDocClient.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumDocClient.setFont(font)
        self.label_NumDocClient.setObjectName("label_NumDocClient")
        self.hLayout4.addWidget(self.label_NumDocClient)
        self.NumDocClient_QueryDoc = QtWidgets.QLineEdit(parent=self.frame)
        self.NumDocClient_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.NumDocClient_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.NumDocClient_QueryDoc.setFont(font)
        self.NumDocClient_QueryDoc.setObjectName("NumDocClient_QueryDoc")
        self.hLayout4.addWidget(self.NumDocClient_QueryDoc)
        self.label_Critical = QtWidgets.QLabel(parent=self.frame)
        self.label_Critical.setMinimumSize(QtCore.QSize(110, 25))
        self.label_Critical.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Critical.setFont(font)
        self.label_Critical.setObjectName("label_Critical")
        self.hLayout4.addWidget(self.label_Critical)
        self.Critical_QueryDoc = QtWidgets.QComboBox(parent=self.frame)
        self.Critical_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.Critical_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Critical_QueryDoc.setFont(font)
        self.Critical_QueryDoc.setObjectName("Critical_QueryDoc")
        self.hLayout4.addWidget(self.Critical_QueryDoc)
        self.gridLayout_2.addLayout(self.hLayout4, 4, 0, 1, 1)
        self.hLayout5 = QtWidgets.QHBoxLayout()
        self.hLayout5.setObjectName("hLayout5")
        self.label_State = QtWidgets.QLabel(parent=self.frame)
        self.label_State.setMinimumSize(QtCore.QSize(110, 25))
        self.label_State.setMaximumSize(QtCore.QSize(110, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_State.setFont(font)
        self.label_State.setObjectName("label_State")
        self.hLayout5.addWidget(self.label_State)
        self.State_QueryDoc = QtWidgets.QComboBox(parent=self.frame)
        self.State_QueryDoc.setMinimumSize(QtCore.QSize(250, 25))
        self.State_QueryDoc.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.State_QueryDoc.setFont(font)
        self.State_QueryDoc.setObjectName("State_QueryDoc")
        self.hLayout5.addWidget(self.State_QueryDoc)
        self.gridLayout_2.addLayout(self.hLayout5, 5, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem1, 6, 0, 1, 1)
        self.hLayout6 = QtWidgets.QHBoxLayout()
        self.hLayout6.setObjectName("hLayout6")
        self.Button_Clean = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Clean.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Clean.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Clean.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.Button_Clean.setObjectName("Button_Clean")
        self.hLayout6.addWidget(self.Button_Clean)
        self.Button_Query = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Query.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Query.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Query.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.Button_Query.setObjectName("Button_Query")
        self.hLayout6.addWidget(self.Button_Query)
        self.Button_Export = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Export.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Export.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Export.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.Button_Export.setObjectName("Button_Export")
        self.hLayout6.addWidget(self.Button_Export)
        self.gridLayout_2.addLayout(self.hLayout6, 7, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 15, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 8, 0, 1, 1)
        self.tableQueryDoc = QtWidgets.QTableWidget(parent=self.frame)
        self.tableQueryDoc.setObjectName("tableQueryDoc")
        self.tableQueryDoc.setColumnCount(13)
        self.tableQueryDoc.setRowCount(0)
        for i in range(13):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableQueryDoc.setHorizontalHeaderItem(i, item)
        self.tableQueryDoc.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableQueryDoc.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.gridLayout_2.addWidget(self.tableQueryDoc, 8, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        QueryDoc_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=QueryDoc_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 845, 22))
        self.menubar.setObjectName("menubar")
        QueryDoc_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=QueryDoc_Window)
        self.statusbar.setObjectName("statusbar")
        QueryDoc_Window.setStatusBar(self.statusbar)


        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute("""SELECT * FROM product_type""")
            results_material=cur.fetchall()

            cur.execute("""SELECT * FROM document_type""")
            results_doctype=cur.fetchall()

            # cur.execute("""SELECT * FROM product_type""")
            # results_material=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_material=['']+list(set([x[1] for x in results_material]))
        self.Material_QueryDoc.addItems(sorted(list_material))

        list_typedoc=['']+[x[1] for x in results_doctype]
        self.TypeDoc_QueryDoc.addItems(sorted(list_typedoc))

        list_state=['','Aprobado','Comentado','Com. Menores','Com. Mayores','Eliminado','Enviado','Rechazado']
        self.State_QueryDoc.addItems(sorted(list_state))

        list_critical=['','No','Sí']
        self.Critical_QueryDoc.addItems(list_critical)

        self.retranslateUi(QueryDoc_Window)
        QtCore.QMetaObject.connectSlotsByName(QueryDoc_Window)
        self.Button_Clean.clicked.connect(self.clean_boxes) # type: ignore
        self.Button_Query.clicked.connect(self.query_doc) # type: ignore
        self.Button_Export.clicked.connect(self.export_to_excel)
        self.NumOrder_QueryDoc.returnPressed.connect(self.query_doc)
        self.NumPo_QueryDoc.returnPressed.connect(self.query_doc)
        self.Client_QueryDoc.returnPressed.connect(self.query_doc)
        self.Material_QueryDoc.currentIndexChanged.connect(self.query_doc)
        self.TypeDoc_QueryDoc.currentIndexChanged.connect(self.query_doc)
        self.NumDocClient_QueryDoc.returnPressed.connect(self.query_doc)
        self.NumDocEipsa_QueryDoc.returnPressed.connect(self.query_doc)
        self.State_QueryDoc.currentIndexChanged.connect(self.query_doc)
        self.Critical_QueryDoc.currentIndexChanged.connect(self.query_doc)


    def retranslateUi(self, QueryDoc_Window):
        _translate = QtCore.QCoreApplication.translate
        QueryDoc_Window.setWindowTitle(_translate("QueryDoc_Window", "Consultar Documentación"))
        self.label_NumOrder.setText(_translate("QueryDoc_Window", "Nº Pedido:"))
        self.label_NumPO.setText(_translate("QueryDoc_Window", "Nº PO:"))
        self.label_Client.setText(_translate("QueryDoc_Window", "Cliente:"))
        item = self.tableQueryDoc.horizontalHeaderItem(0)
        item.setText(_translate("QueryDoc_Window", "Nº Pedido"))
        item = self.tableQueryDoc.horizontalHeaderItem(1)
        item.setText(_translate("QueryDoc_Window", "Nº PO"))
        item = self.tableQueryDoc.horizontalHeaderItem(2)
        item.setText(_translate("QueryDoc_Window", "Cliente"))
        item = self.tableQueryDoc.horizontalHeaderItem(3)
        item.setText(_translate("QueryDoc_Window", "Material"))
        item = self.tableQueryDoc.horizontalHeaderItem(4)
        item.setText(_translate("QueryDoc_Window", "Nº Doc. Cliente"))
        item = self.tableQueryDoc.horizontalHeaderItem(5)
        item.setText(_translate("QueryDoc_Window", "Nº Doc. EIPSA"))
        item = self.tableQueryDoc.horizontalHeaderItem(6)
        item.setText(_translate("QueryDoc_Window", "Título"))
        item = self.tableQueryDoc.horizontalHeaderItem(7)
        item.setText(_translate("QueryDoc_Window", "Tipo Doc."))
        item = self.tableQueryDoc.horizontalHeaderItem(8)
        item.setText(_translate("QueryDoc_Window", "Crítico"))
        item = self.tableQueryDoc.horizontalHeaderItem(9)
        item.setText(_translate("QueryDoc_Window", "Estado"))
        item = self.tableQueryDoc.horizontalHeaderItem(10)
        item.setText(_translate("QueryDoc_Window", "Nº Revisión"))
        item = self.tableQueryDoc.horizontalHeaderItem(11)
        item.setText(_translate("QueryDoc_Window", "Fecha"))
        item = self.tableQueryDoc.horizontalHeaderItem(12)
        item.setText(_translate("QueryDoc_Window", "Historial"))
        self.label_State.setText(_translate("QueryDoc_Window", "Estado:"))
        self.label_Critical.setText(_translate("QueryDoc_Window", "Crítico:"))
        self.label_Material.setText(_translate("QueryDoc_Window", "Material:"))
        self.label_TypeDoc.setText(_translate("QueryDoc_Window", "Tipo Doc.:"))
        self.Button_Clean.setText(_translate("QueryDoc_Window", "Limpiar Filtros"))
        self.Button_Query.setText(_translate("QueryDoc_Window", "Buscar"))
        self.Button_Export.setText(_translate("QueryDoc_Window", "Exportar"))
        self.label_NumDocClient.setText(_translate("QueryDoc_Window", "Nº Doc. Cliente:"))
        self.label_NumDocEipsa.setText(_translate("QueryDoc_Window", "Nº Doc. EIPSA:"))


    def clean_boxes(self):
        self.NumOrder_QueryDoc.setText("")
        self.Client_QueryDoc.setText("")
        self.Material_QueryDoc.setCurrentText("")
        self.TypeDoc_QueryDoc.setCurrentText("")
        self.NumDocClient_QueryDoc.setText("")
        self.NumDocEipsa_QueryDoc.setText("")
        self.State_QueryDoc.setCurrentText("")
        self.Critical_QueryDoc.setCurrentText("")


    def query_doc(self):
        self.tableQueryDoc.setRowCount(0)
        numorder=self.NumOrder_QueryDoc.text()
        numpo=self.NumPo_QueryDoc.text()
        client=self.Client_QueryDoc.text()
        material=self.Material_QueryDoc.currentText()
        typedoc=self.TypeDoc_QueryDoc.currentText()
        numdocclient=self.NumDocClient_QueryDoc.text()
        numdoceipsa=self.NumDocEipsa_QueryDoc.text()
        state=self.State_QueryDoc.currentText()
        critical=self.Critical_QueryDoc.currentText()

        if ((numorder=="" or numorder==" ") and (numpo=="" or numpo==" ") and (client=="" or client==" ") and (material=="" or material==" ")
        and (typedoc=="" or typedoc==" ") and (numdocclient=="" or numdocclient==" ") and (numdoceipsa=="" or numdoceipsa==" ")
        and (state=="" or state==" ") and (critical=="" or critical==" ")):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Consultar Documentación")
            dlg.setText("Introduce un filtro en alguno de los campos")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            commands = ("""
                        SELECT documentation."num_order",orders."num_ref_order",offers."client",product_type."variable",documentation."num_doc_client",documentation."num_doc_eipsa",documentation."doc_title",document_type."doc_type",documentation."critical",documentation."state",documentation."revision",TO_CHAR(documentation."state_date", 'DD-MM-YYYY'),hist_doc."hist_rev_column"
                        FROM documentation
                        INNER JOIN orders ON (orders."num_order" = documentation."num_order")
                        INNER JOIN offers ON (offers."num_offer" = orders."num_offer")
                        INNER JOIN document_type ON (document_type."id" = documentation."doc_type_id")
                        LEFT JOIN hist_doc ON (hist_doc."num_doc_eipsa" = documentation."num_doc_eipsa")
                        INNER JOIN product_type ON (product_type."material" = offers."material")
                        WHERE
                        (
                        UPPER(documentation."num_order") LIKE UPPER('%%'||%s||'%%')
                        AND
                        UPPER(orders."num_ref_order") LIKE UPPER('%%'||%s||'%%')
                        AND
                        UPPER(offers."client") LIKE UPPER('%%'||%s||'%%')
                        AND
                        product_type."variable" LIKE '%%'||%s||'%%'
                        AND
                        document_type."doc_type" LIKE '%%'||%s||'%%'
                        AND
                        UPPER(documentation."num_doc_client") LIKE UPPER('%%'||%s||'%%')
                        AND
                        UPPER(documentation."num_doc_eipsa") LIKE UPPER('%%'||%s||'%%')
                        AND
                        documentation."state" LIKE '%%'||%s||'%%'
                        AND
                        documentation."critical" LIKE '%%'||%s||'%%'
                        )
                        ORDER BY documentation."num_order"
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                data=(numorder,numpo,client,material,typedoc,numdocclient,numdoceipsa,state,critical,)
                cur.execute(commands, data)
                results=cur.fetchall()
                self.tableQueryDoc.setRowCount(0)
                self.tableQueryDoc.setRowCount(len(results))
                tablerow=0

            # fill the Qt Table with the query results
                for row in results:
                    for column in range(13):
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableQueryDoc.setItem(tablerow, column, it)

                    tablerow+=1

                self.tableQueryDoc.verticalHeader().hide()
                self.tableQueryDoc.setSortingEnabled(True)
                self.tableQueryDoc.setItemDelegate(AlignDelegate(self.tableQueryDoc))
                self.tableQueryDoc.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
                for i in range(1,12):
                    self.tableQueryDoc.horizontalHeader().setSectionResizeMode(i,QtWidgets.QHeaderView.ResizeMode.Interactive)

                self.tableQueryDoc.itemDoubleClicked.connect(self.expand_cell)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()


    def expand_cell(self, item):
        if item.column() == 12:
            cell_content = item.text()
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Documentación")
            dlg.setText(cell_content)
            dlg.exec()


    def export_to_excel(self):
        file_name, _ = QFileDialog.getSaveFileName(self, "Guardar como Excel", "", "Archivos Excel (*.xlsx);;Todos los archivos (*)")

        if file_name:
            df = pd.DataFrame()
            for col in range(self.tableQueryDoc.columnCount()):
                header = self.tableQueryDoc.horizontalHeaderItem(col).text()
                column_data = [self.tableQueryDoc.item(row, col).text() for row in range(self.tableQueryDoc.rowCount())]
                df[header] = column_data

            with pd.ExcelWriter(file_name, engine='openpyxl') as writer:
                df.to_excel(writer, index=False)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    QueryDoc_Window = Ui_QueryDoc_Window()
    QueryDoc_Window.show()
    sys.exit(app.exec())