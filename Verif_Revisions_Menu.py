# Form implementation generated from reading ui file 'EditOrder_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6 import QtCore, QtGui, QtWidgets
import os
import configparser
from Database_Connection import createConnection

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_Verif_Revisions_Menu(QtWidgets.QMainWindow):
    """
    UI class for the Revisions Menu window.
    """
    def __init__(self, username):
        """
        Initializes the Ui_Verif_Revisions_Menu with the specified username.

        Args:
            username (str): username associated with the window.
        """
        super().__init__()
        self.username = username
        self.setupUi(self)

    def setupUi(self, Verif_Revisions_Menu):
        """
        Sets up the user interface for the Verif_Revisions_Menu.

        Args:
            Verif_Revisions_Menu (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        Verif_Revisions_Menu.setObjectName("Verif_Revisions_Menu")
        Verif_Revisions_Menu.resize(680, 425)
        Verif_Revisions_Menu.setMinimumSize(QtCore.QSize(280, 425))
        Verif_Revisions_Menu.setMaximumSize(QtCore.QSize(280, 425))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Verif_Revisions_Menu.setWindowIcon(icon)
        if self.username == 'm.gil':
            Verif_Revisions_Menu.setStyleSheet("QWidget {\n"
    "background-color: #121212;\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 8px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}"
    )
        else:
            Verif_Revisions_Menu.setStyleSheet("QWidget {\n"
    "background-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid black;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 8px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}"
    )
        self.centralwidget = QtWidgets.QWidget(parent=Verif_Revisions_Menu)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_Machines = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Machines.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Machines.setFont(font)
        self.Button_Machines.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Machines.setObjectName("Button_Machines")
        self.Button_Machines.setText("MÃ¡quinas")
        self.verticalLayout_3.addWidget(self.Button_Machines)
        self.Button_Tools = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Tools.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Tools.setFont(font)
        self.Button_Tools.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Tools.setObjectName("Button_Tools")
        self.Button_Tools.setText("Herramientas")
        self.verticalLayout_3.addWidget(self.Button_Tools)
        self.Button_Calibers = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Calibers.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Calibers.setFont(font)
        self.Button_Calibers.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Calibers.setObjectName("Button_Calibers")
        self.Button_Calibers.setText("Patrones y Calibres")
        self.verticalLayout_3.addWidget(self.Button_Calibers)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_Cancel.sizePolicy().hasHeightForWidth())
        self.Button_Cancel.setSizePolicy(sizePolicy)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(90, 30))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(90, 30))
        self.Button_Cancel.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Cancel.setStyleSheet("QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}"
)
        self.Button_Cancel.setAutoDefault(True)
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addLayout(self.verticalLayout_3, 0, 0, 1, 2)
        self.gridLayout_2.addWidget(self.Button_Cancel, 1, 1, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Verif_Revisions_Menu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Verif_Revisions_Menu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 680, 22))
        self.menubar.setObjectName("menubar")
        Verif_Revisions_Menu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Verif_Revisions_Menu)
        self.statusbar.setObjectName("statusbar")
        Verif_Revisions_Menu.setStatusBar(self.statusbar)
        Verif_Revisions_Menu.setWindowFlags(QtCore.Qt.WindowType.WindowMinimizeButtonHint)

        self.retranslateUi(Verif_Revisions_Menu)
        self.Button_Cancel.clicked.connect(Verif_Revisions_Menu.close) # type: ignore
        self.Button_Machines.clicked.connect(self.machines)
        self.Button_Tools.clicked.connect(self.tools)
        # self.Button_Calibers.clicked.connect(self.calibers)

        QtCore.QMetaObject.connectSlotsByName(Verif_Revisions_Menu)


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, Verif_Revisions_Menu):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        Verif_Revisions_Menu.setWindowTitle(_translate("Verif_Revisions_Menu", "Revisiones"))
        self.Button_Cancel.setText(_translate("Verif_Revisions_Menu", "Cancelar"))

# Function to open corresponding window when Hydrostatic Test button is clicked
    def hydrotest(self):
        """
        Opens the 'hydrotest' window. Sets up the UI for the user.
        """
        from TestHydro_Menu import Ui_TestHydro_Menu
        self.testhydro_menu=QtWidgets.QMainWindow()
        self.ui=Ui_TestHydro_Menu(self.username)
        self.ui.setupUi(self.testhydro_menu)
        self.testhydro_menu.show()

# Function to open corresponding window when Liquid Test button is clicked
    def liquidtest(self):
        """
        Opens the 'liquidtest' window. Sets up the UI for the user.
        """
        from TestLiquid_Menu import Ui_TestLiquid_Menu
        self.testliquid_menu=QtWidgets.QMainWindow()
        self.ui=Ui_TestLiquid_Menu(self.username)
        self.ui.setupUi(self.testliquid_menu)
        self.testliquid_menu.show()

# Function to open corresponding window when Hardness Test button is clicked
    def hardtest(self):
        """
        Opens the 'hardtest' window. Sets up the UI for the user.
        """
        from TestHard_Menu import Ui_TestHard_Menu
        self.testhard_menu=QtWidgets.QMainWindow()
        self.ui=Ui_TestHard_Menu(self.username)
        self.ui.setupUi(self.testhard_menu)
        self.testhard_menu.show()

#Function to open window with workshop machines
    def machines(self):
        """
        Opens the "Workshop Machines" window, establishes a database connection.
        """
        from Workshop_Machines_Window import Ui_Workshop_Machines_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_machines = createConnection(user_database, password_database)
        if not db_machines:
            sys.exit()

        self.machines_window = Ui_Workshop_Machines_Window(db_machines, self.username)
        self.machines_window.showMaximized()

# Function to open window with workshop machines
    def tools(self):
        """
        Opens the "Workshop Handtools" window, establishes a database connection.
        """
        from Workshop_Handtools_Window import Ui_Workshop_Handtools_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_handtools = createConnection(user_database, password_database)
        if not db_handtools:
            sys.exit()

        self.handtool_window = Ui_Workshop_Handtools_Window(db_handtools, self.username)
        self.handtool_window.showMaximized()





if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Verif_Revisions_Menu = QtWidgets.QMainWindow()
    ui = Ui_Verif_Revisions_Menu('m.gil')
    ui.setupUi(Verif_Revisions_Menu)
    Verif_Revisions_Menu.show()
    sys.exit(app.exec())
