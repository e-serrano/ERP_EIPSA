# Form implementation generated from reading ui file 'ClientOrder_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import tkinter as tk
import datetime
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if value is None:
            self.column_filters[column_index] = set()
        elif checked:
            self.column_filters[column_index].add(value)
        elif value in self.column_filters[column_index]:
            self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if filters and item_value not in filters:
                        show_row = False
                        break

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

    # Update hidden rows for this column
        if checked:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

    # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class AlignDelegate_records(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate_records, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        if index.column() == 4:  # Check column and paint if apply
            value = index.data()

            if float(value) < 0:  
                color = QtGui.QColor(255, 124, 128)  # Red if lower than 0
            else:
                color = QtGui.QColor(255, 255, 255)

            option.backgroundBrush = color


class Ui_ClientOrder_Window(object):
    def setupUi(self, ClientOrder_Window):
        ClientOrder_Window.setObjectName("ClientOrder_Window")
        ClientOrder_Window.resize(int(1664//1.5), int(604//1.5))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        ClientOrder_Window.setWindowIcon(icon)
        ClientOrder_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=ClientOrder_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_Client = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Client.setFont(font)
        self.label_Client.setObjectName("label_Client")
        self.gridLayout_2.addWidget(self.label_Client, 1, 1, 1, 1)
        self.Client_ClientOrder = QtWidgets.QComboBox(parent=self.frame)
        self.Client_ClientOrder.setMinimumSize(QtCore.QSize(int(500//1.5), int(25//1.5)))
        self.Client_ClientOrder.setMaximumSize(QtCore.QSize(int(500//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Client_ClientOrder.setFont(font)
        self.Client_ClientOrder.setObjectName("Client_ClientOrder")
        self.gridLayout_2.addWidget(self.Client_ClientOrder, 1, 2, 1, 2)
        self.label_Date = QtWidgets.QLabel(parent=self.frame)
        self.label_Date.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_Date.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Date.setFont(font)
        self.label_Date.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_Date.setObjectName("label_Date")
        self.gridLayout_2.addWidget(self.label_Date, 1, 4, 1, 1)
        self.Date_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Date_ClientOrder.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Date_ClientOrder.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Date_ClientOrder.setFont(font)
        self.Date_ClientOrder.setObjectName("Date_ClientOrder")
        self.gridLayout_2.addWidget(self.Date_ClientOrder, 1, 5, 1, 2)
        self.label_DelivTerm = QtWidgets.QLabel(parent=self.frame)
        self.label_DelivTerm.setMinimumSize(QtCore.QSize(int(105//1.5), int(25//1.5)))
        self.label_DelivTerm.setMaximumSize(QtCore.QSize(int(105//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_DelivTerm.setFont(font)
        self.label_DelivTerm.setObjectName("label_DelivTerm")
        self.gridLayout_2.addWidget(self.label_DelivTerm, 1, 7, 1, 1)
        self.DelivTerm_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivTerm_ClientOrder.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.DelivTerm_ClientOrder.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.DelivTerm_ClientOrder.setFont(font)
        self.DelivTerm_ClientOrder.setObjectName("DelivTerm_ClientOrder")
        self.gridLayout_2.addWidget(self.DelivTerm_ClientOrder, 1, 8, 1, 2)
        self.label_NumOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOrder.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.label_NumOrder.setMaximumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_NumOrder.setFont(font)
        self.label_NumOrder.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_NumOrder.setObjectName("label_NumOrder")
        self.gridLayout_2.addWidget(self.label_NumOrder, 1, 10, 1, 2)
        self.NumOrder_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.NumOrder_ClientOrder.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.NumOrder_ClientOrder.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.NumOrder_ClientOrder.setFont(font)
        self.NumOrder_ClientOrder.setObjectName("NumOrder_ClientOrder")
        self.gridLayout_2.addWidget(self.NumOrder_ClientOrder, 1, 12, 1, 2)
        self.label_Obs = QtWidgets.QLabel(parent=self.frame)
        self.label_Obs.setMinimumSize(QtCore.QSize(int(50//1.5), int(25//1.5)))
        self.label_Obs.setMaximumSize(QtCore.QSize(int(50//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Obs.setFont(font)
        self.label_Obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.label_Obs.setObjectName("label_Obs")
        self.gridLayout_2.addWidget(self.label_Obs, 2, 1, 1, 1)
        self.Notes_ClientOrder = QtWidgets.QTextEdit(parent=self.frame)
        self.Notes_ClientOrder.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.Notes_ClientOrder.setMaximumSize(QtCore.QSize(16777214, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Notes_ClientOrder.setFont(font)
        self.Notes_ClientOrder.setObjectName("Notes_ClientOrder")
        self.gridLayout_2.addWidget(self.Notes_ClientOrder, 2, 2, 1, 5)
        self.label_Supply = QtWidgets.QLabel(parent=self.frame)
        self.label_Supply.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_Supply.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Supply.setFont(font)
        self.label_Supply.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Supply.setObjectName("label_Supply")
        self.gridLayout_2.addWidget(self.label_Supply, 4, 1, 1, 1)
        self.Supply_ClientOrder = QtWidgets.QComboBox(parent=self.frame)
        self.Supply_ClientOrder.setMinimumSize(QtCore.QSize(int(500//1.5), int(25//1.5)))
        self.Supply_ClientOrder.setMaximumSize(QtCore.QSize(int(500//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Supply_ClientOrder.setFont(font)
        self.Supply_ClientOrder.setObjectName("Supply_ClientOrder")
        self.gridLayout_2.addWidget(self.Supply_ClientOrder, 5, 1, 1, 2)
        self.label_Stock = QtWidgets.QLabel(parent=self.frame)
        self.label_Stock.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_Stock.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Stock.setFont(font)
        self.label_Stock.setObjectName("label_Stock")
        self.gridLayout_2.addWidget(self.label_Stock, 4, 3, 1, 1)
        self.Stock_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Stock_ClientOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.Stock_ClientOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Stock_ClientOrder.setFont(font)
        self.Stock_ClientOrder.setReadOnly(True)
        self.Stock_ClientOrder.setObjectName("Stock_ClientOrder")
        self.gridLayout_2.addWidget(self.Stock_ClientOrder, 5, 3, 1, 1)
        self.label_StockDsp = QtWidgets.QLabel(parent=self.frame)
        self.label_StockDsp.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_StockDsp.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_StockDsp.setFont(font)
        self.label_StockDsp.setObjectName("label_StockDsp")
        self.gridLayout_2.addWidget(self.label_StockDsp, 4, 4, 1, 1)
        self.StockDsp_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.StockDsp_ClientOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.StockDsp_ClientOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.StockDsp_ClientOrder.setFont(font)
        self.StockDsp_ClientOrder.setReadOnly(True)
        self.StockDsp_ClientOrder.setObjectName("StockDsp_ClientOrder")
        self.gridLayout_2.addWidget(self.StockDsp_ClientOrder, 5, 4, 1, 1)
        self.label_StockVrt = QtWidgets.QLabel(parent=self.frame)
        self.label_StockVrt.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_StockVrt.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_StockVrt.setFont(font)
        self.label_StockVrt.setObjectName("label_StockVrt")
        self.gridLayout_2.addWidget(self.label_StockVrt, 4, 5, 1, 1)
        self.StockVrt_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.StockVrt_ClientOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.StockVrt_ClientOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.StockVrt_ClientOrder.setFont(font)
        self.StockVrt_ClientOrder.setReadOnly(True)
        self.StockVrt_ClientOrder.setObjectName("StockVrt_ClientOrder")
        self.gridLayout_2.addWidget(self.StockVrt_ClientOrder, 5, 5, 1, 1)
        self.label_Quantity = QtWidgets.QLabel(parent=self.frame)
        self.label_Quantity.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_Quantity.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Quantity.setFont(font)
        self.label_Quantity.setObjectName("label_Quantity")
        self.gridLayout_2.addWidget(self.label_Quantity, 6, 3, 1, 1)
        self.Quantity_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Quantity_ClientOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.Quantity_ClientOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Quantity_ClientOrder.setFont(font)
        self.Quantity_ClientOrder.setObjectName("Quantity_ClientOrder")
        self.gridLayout_2.addWidget(self.Quantity_ClientOrder, 7, 3, 1, 1)
        self.label_Deliv1 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv1.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_Deliv1.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Deliv1.setFont(font)
        self.label_Deliv1.setObjectName("label_Deliv1")
        self.gridLayout_2.addWidget(self.label_Deliv1, 6, 4, 1, 1)
        self.Deliv1_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv1_ClientOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.Deliv1_ClientOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Deliv1_ClientOrder.setFont(font)
        self.Deliv1_ClientOrder.setObjectName("Deliv1_ClientOrder")
        self.gridLayout_2.addWidget(self.Deliv1_ClientOrder, 7, 4, 1, 1)
        self.label_Deliv2 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv2.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_Deliv2.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Deliv2.setFont(font)
        self.label_Deliv2.setObjectName("label_Deliv2")
        self.gridLayout_2.addWidget(self.label_Deliv2, 6, 5, 1, 1)
        self.Deliv2_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv2_ClientOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.Deliv2_ClientOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Deliv2_ClientOrder.setFont(font)
        self.Deliv2_ClientOrder.setObjectName("Deliv2_ClientOrder")
        self.gridLayout_2.addWidget(self.Deliv2_ClientOrder, 7, 5, 1, 1)
        self.label_Deliv3 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv3.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_Deliv3.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Deliv3.setFont(font)
        self.label_Deliv3.setObjectName("label_Deliv3")
        self.gridLayout_2.addWidget(self.label_Deliv3, 6, 6, 1, 1)
        self.Deliv3_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv3_ClientOrder.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.Deliv3_ClientOrder.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Deliv3_ClientOrder.setFont(font)
        self.Deliv3_ClientOrder.setObjectName("Deliv3_ClientOrder")
        self.gridLayout_2.addWidget(self.Deliv3_ClientOrder, 7, 6, 1, 1)
        self.label_DateDeliv = QtWidgets.QLabel(parent=self.frame)
        self.label_DateDeliv.setMinimumSize(QtCore.QSize(int(105//1.5), int(25//1.5)))
        self.label_DateDeliv.setMaximumSize(QtCore.QSize(int(105//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setItalic(True)
        self.label_DateDeliv.setFont(font)
        self.label_DateDeliv.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_DateDeliv.setObjectName("label_DateDeliv")
        self.gridLayout_2.addWidget(self.label_DateDeliv, 6, 7, 1, 1)
        self.label_NoteDeliv = QtWidgets.QLabel(parent=self.frame)
        self.label_NoteDeliv.setMinimumSize(QtCore.QSize(int(105//1.5), int(25//1.5)))
        self.label_NoteDeliv.setMaximumSize(QtCore.QSize(int(105//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setItalic(True)
        self.label_NoteDeliv.setFont(font)
        self.label_NoteDeliv.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_NoteDeliv.setObjectName("label_NoteDeliv")
        self.gridLayout_2.addWidget(self.label_NoteDeliv, 7, 7, 1, 1)
        self.label_1Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_1Deliv.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.label_1Deliv.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setItalic(True)
        self.label_1Deliv.setFont(font)
        self.label_1Deliv.setObjectName("label_1Deliv")
        self.gridLayout_2.addWidget(self.label_1Deliv, 5, 8, 1, 1)
        self.DelivDate1_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate1_ClientOrder.setMinimumSize(QtCore.QSize(int(95//1.5), int(25//1.5)))
        self.DelivDate1_ClientOrder.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.DelivDate1_ClientOrder.setFont(font)
        self.DelivDate1_ClientOrder.setObjectName("DelivDate1_ClientOrder")
        self.gridLayout_2.addWidget(self.DelivDate1_ClientOrder, 6, 8, 1, 2)
        self.DelivNote1_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote1_ClientOrder.setMinimumSize(QtCore.QSize(int(95//1.5), int(25//1.5)))
        self.DelivNote1_ClientOrder.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.DelivNote1_ClientOrder.setFont(font)
        self.DelivNote1_ClientOrder.setObjectName("DelivNote1_ClientOrder")
        self.gridLayout_2.addWidget(self.DelivNote1_ClientOrder, 7, 8, 1, 2)
        self.label_2Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_2Deliv.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.label_2Deliv.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setItalic(True)
        self.label_2Deliv.setFont(font)
        self.label_2Deliv.setObjectName("label_2Deliv")
        self.gridLayout_2.addWidget(self.label_2Deliv, 5, 10, 1, 1)
        self.DelivDate2_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate2_ClientOrder.setMinimumSize(QtCore.QSize(int(95//1.5), int(25//1.5)))
        self.DelivDate2_ClientOrder.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.DelivDate2_ClientOrder.setFont(font)
        self.DelivDate2_ClientOrder.setObjectName("DelivDate2_ClientOrder")
        self.gridLayout_2.addWidget(self.DelivDate2_ClientOrder, 6, 10, 1, 2)
        self.DelivNote2_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote2_ClientOrder.setMinimumSize(QtCore.QSize(int(95//1.5), int(25//1.5)))
        self.DelivNote2_ClientOrder.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.DelivNote2_ClientOrder.setFont(font)
        self.DelivNote2_ClientOrder.setObjectName("DelivNote2_ClientOrder")
        self.gridLayout_2.addWidget(self.DelivNote2_ClientOrder, 7, 10, 1, 2)
        self.label_3Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_3Deliv.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.label_3Deliv.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setItalic(True)
        self.label_3Deliv.setFont(font)
        self.label_3Deliv.setObjectName("label_3Deliv")
        self.gridLayout_2.addWidget(self.label_3Deliv, 5, 12, 1, 1)
        self.DelivDate3_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate3_ClientOrder.setMinimumSize(QtCore.QSize(int(95//1.5), int(25//1.5)))
        self.DelivDate3_ClientOrder.setMaximumSize(QtCore.QSize(int(95//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.DelivDate3_ClientOrder.setFont(font)
        self.DelivDate3_ClientOrder.setObjectName("DelivDate3_ClientOrder")
        self.gridLayout_2.addWidget(self.DelivDate3_ClientOrder, 6, 12, 1, 2)
        self.DelivNote3_ClientOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote3_ClientOrder.setMinimumSize(QtCore.QSize(int(95//1.5), int(25//1.5)))
        self.DelivNote3_ClientOrder.setMaximumSize(QtCore.QSize(int(95//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.DelivNote3_ClientOrder.setFont(font)
        self.DelivNote3_ClientOrder.setObjectName("DelivNote3_ClientOrder")
        self.gridLayout_2.addWidget(self.DelivNote3_ClientOrder, 7, 12, 1, 2)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Check.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Deliv1 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv1.setMinimumSize(QtCore.QSize(int(25//1.5), int(25//1.5)))
        self.Button_Deliv1.setMaximumSize(QtCore.QSize(int(25//1.5), int(25//1.5)))
        self.Button_Deliv1.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Deliv1.setIcon(icon1)
        self.Button_Deliv1.setObjectName("Button_Deliv1")
        self.gridLayout_2.addWidget(self.Button_Deliv1, 5, 9, 1, 1)
        self.Button_Deliv2 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv2.setMinimumSize(QtCore.QSize(int(25//1.5), int(25//1.5)))
        self.Button_Deliv2.setMaximumSize(QtCore.QSize(int(25//1.5), int(25//1.5)))
        self.Button_Deliv2.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Deliv2.setIcon(icon1)
        self.Button_Deliv2.setObjectName("Button_Deliv2")
        self.gridLayout_2.addWidget(self.Button_Deliv2, 5, 11, 1, 1)
        self.Button_Deliv3 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv3.setMinimumSize(QtCore.QSize(int(25//1.5), int(25//1.5)))
        self.Button_Deliv3.setMaximumSize(QtCore.QSize(int(25//1.5), int(25//1.5)))
        self.Button_Deliv3.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Deliv3.setIcon(icon1)
        self.Button_Deliv3.setObjectName("Button_Deliv3")
        self.gridLayout_2.addWidget(self.Button_Deliv3, 5, 13, 1, 1)
        self.Button_CreateOrder = QtWidgets.QPushButton(parent=self.frame)
        self.Button_CreateOrder.setMinimumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_CreateOrder.setMaximumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_CreateOrder.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_CreateOrder.setObjectName("Button_CreateOrder")
        self.gridLayout_2.addWidget(self.Button_CreateOrder, 1, 17, 1, 1)
        self.Button_ModifyOrder = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyOrder.setMinimumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_ModifyOrder.setMaximumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_ModifyOrder.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_ModifyOrder.setObjectName("Button_ModifyOrder")
        self.gridLayout_2.addWidget(self.Button_ModifyOrder, 2, 17, 1, 1)
        self.Button_AddRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddRecord.setMinimumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_AddRecord.setMaximumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_AddRecord.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_AddRecord.setObjectName("Button_AddRecord")
        self.gridLayout_2.addWidget(self.Button_AddRecord, 5, 17, 1, 1)
        self.Button_ModifyRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyRecord.setMinimumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_ModifyRecord.setMaximumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_ModifyRecord.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_ModifyRecord.setObjectName("Button_ModifyRecord")
        self.gridLayout_2.addWidget(self.Button_ModifyRecord, 6, 17, 1, 1)
        self.Button_DeleteRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_DeleteRecord.setMinimumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_DeleteRecord.setMaximumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_DeleteRecord.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_DeleteRecord.setObjectName("Button_DeleteRecord")
        self.gridLayout_2.addWidget(self.Button_DeleteRecord, 7, 17, 1, 1)
        self.label_Details = QtWidgets.QLabel(parent=self.frame)
        self.label_Details.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_Details.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Details.setFont(font)
        self.label_Details.setObjectName("label_Details")
        self.gridLayout_2.addWidget(self.label_Details, 10, 1, 1, 1)
        self.tableRecord = CustomTableWidget()
        self.tableRecord.setObjectName("tableRecord")
        self.tableRecord.setColumnCount(10)
        self.tableRecord.setRowCount(0)
        for i in range(10):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(10//1.5))
            font.setBold(True)
            item.setFont(font)
            self.tableRecord.setHorizontalHeaderItem(i, item)
        self.gridLayout_2.addWidget(self.tableRecord, 15, 1, 1, 17)
        self.tableClientOrders = CustomTableWidget()
        self.tableClientOrders.setObjectName("tableClientOrders")
        self.tableClientOrders.setColumnCount(6)
        self.tableClientOrders.setRowCount(0)
        for i in range(6):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(10//1.5))
            font.setBold(True)
            item.setFont(font)
            self.tableClientOrders.setHorizontalHeaderItem(i, item)
        self.gridLayout_2.addWidget(self.tableClientOrders, 16, 1, 1, 17)
        self.label_IDOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_IDOrder.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_IDOrder.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        self.label_IDOrder.setObjectName("label_IDOrder")
        self.label_IDOrder.setText("")
        self.label_IDOrder.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_2.addWidget(self.label_IDOrder, 3, 1, 1, 1)
        self.label_IDRecord = QtWidgets.QLabel(parent=self.frame)
        self.label_IDRecord.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_IDRecord.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        self.label_IDRecord.setObjectName("label_ID")
        self.label_IDRecord.setText("")
        self.label_IDRecord.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_2.addWidget(self.label_IDRecord, 3, 2, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        ClientOrder_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=ClientOrder_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1664, 22))
        self.menubar.setObjectName("menubar")
        ClientOrder_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=ClientOrder_Window)
        self.statusbar.setObjectName("statusbar")
        ClientOrder_Window.setStatusBar(self.statusbar)
        self.tableRecord.setSortingEnabled(False)
        self.tableRecord.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableRecord.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableClientOrders.setSortingEnabled(False)
        self.tableClientOrders.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableClientOrders.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


        self.retranslateUi(ClientOrder_Window)
        QtCore.QMetaObject.connectSlotsByName(ClientOrder_Window)

        commands_clients = ("""
                        SELECT * 
                        FROM purch_fact.clients_test
                        ORDER BY purch_fact.clients_test.name
                        """)
        commands_supplies = ("""
                        SELECT * 
                        FROM purch_fact.supplies_test
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_clients)
            results_clients=cur.fetchall()
            cur.execute(commands_supplies)
            results_supplies=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_clients=[''] + [x[2] for x in results_clients]
        self.Client_ClientOrder.addItems(list_clients)

        list_supplies=[x[3] + ' | ' + x[4] for x in results_supplies]
        self.Supply_ClientOrder.addItems(sorted(list_supplies))

        self.tableClientOrders.itemClicked.connect(self.loadformorder)
        self.tableRecord.itemClicked.connect(self.loadformsupply)
        # # self.tableClients.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.Button_CreateOrder.clicked.connect(self.createorder)
        self.Button_ModifyOrder.clicked.connect(self.modifyorder)
        self.Button_AddRecord.clicked.connect(self.addrecord)
        self.Button_ModifyRecord.clicked.connect(self.modifyrecord)
        self.Button_DeleteRecord.clicked.connect(self.deleterecord)
        self.Button_Deliv1.clicked.connect(self.adddeliv1)
        self.Button_Deliv2.clicked.connect(self.adddeliv2)
        self.Button_Deliv3.clicked.connect(self.adddeliv3)
        self.Supply_ClientOrder.currentIndexChanged.connect(self.loadstocks)
        self.tableRecord.horizontalHeader().sectionClicked.connect(self.on_headerrecords_section_clicked)
        self.tableClientOrders.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.loadtableorders()


    def retranslateUi(self, ClientOrder_Window):
        _translate = QtCore.QCoreApplication.translate
        ClientOrder_Window.setWindowTitle(_translate("ClientOrder_Window", "Pedido Cliente"))
        self.label_NumOrder.setText(_translate("ClientOrder_Window", "Nº Pedido:"))
        self.label_Deliv3.setText(_translate("ClientOrder_Window", "Entrega 3:"))
        self.label_Client.setText(_translate("ClientOrder_Window", "Cliente:"))
        self.label_Obs.setText(_translate("ClientOrder_Window", "Obs:"))
        self.label_1Deliv.setText(_translate("ClientOrder_Window", "1ª Entrega"))
        self.label_DelivTerm.setText(_translate("ClientOrder_Window", "Plazo Entrega:"))
        self.Button_CreateOrder.setText(_translate("ClientOrder_Window", "Crear Pedido"))
        self.label_Supply.setText(_translate("ClientOrder_Window", "Insumo:"))
        item = self.tableRecord.horizontalHeaderItem(0)
        item.setText(_translate("ClientOrder_Window", "ID"))
        item = self.tableRecord.horizontalHeaderItem(1)
        item.setText(_translate("ClientOrder_Window", "Insumo"))
        item = self.tableRecord.horizontalHeaderItem(2)
        item.setText(_translate("ClientOrder_Window", "Descripción"))
        item = self.tableRecord.horizontalHeaderItem(3)
        item.setText(_translate("ClientOrder_Window", "Stock"))
        item = self.tableRecord.horizontalHeaderItem(4)
        item.setText(_translate("ClientOrder_Window", "Stock Dsp."))
        item = self.tableRecord.horizontalHeaderItem(5)
        item.setText(_translate("ClientOrder_Window", "Cantidad"))
        item = self.tableRecord.horizontalHeaderItem(6)
        item.setText(_translate("ClientOrder_Window", "Pendiente"))
        item = self.tableRecord.horizontalHeaderItem(7)
        item.setText(_translate("ClientOrder_Window", "Entrega 1"))
        item = self.tableRecord.horizontalHeaderItem(8)
        item.setText(_translate("ClientOrder_Window", "Entrega 2"))
        item = self.tableRecord.horizontalHeaderItem(9)
        item.setText(_translate("ClientOrder_Window", "Entrega 3"))
        self.label_Quantity.setText(_translate("ClientOrder_Window", "Cantidad:"))
        self.label_StockVrt.setText(_translate("ClientOrder_Window", "Stock Vrt.:"))
        self.label_StockDsp.setText(_translate("ClientOrder_Window", "Stock Dsp.:"))
        self.label_Stock.setText(_translate("ClientOrder_Window", "Stock:"))
        self.label_NoteDeliv.setText(_translate("ClientOrder_Window", "Albarán"))
        self.Button_AddRecord.setText(_translate("ClientOrder_Window", "Agregar Reg."))
        self.label_DateDeliv.setText(_translate("ClientOrder_Window", "Fecha"))
        self.label_Deliv1.setText(_translate("ClientOrder_Window", "Entrega 1:"))
        self.Button_ModifyOrder.setText(_translate("ClientOrder_Window", "Modificar Pedido"))
        self.label_Deliv2.setText(_translate("ClientOrder_Window", "Entrega 2:"))
        self.label_3Deliv.setText(_translate("ClientOrder_Window", "3ª Entrega"))
        self.label_Date.setText(_translate("ClientOrder_Window", "Fecha:"))
        self.Button_ModifyRecord.setText(_translate("ClientOrder_Window", "Modificar Reg."))
        self.Button_DeleteRecord.setText(_translate("ClientOrder_Window", "Eliminar Reg."))
        item = self.tableClientOrders.horizontalHeaderItem(0)
        item.setText(_translate("ClientOrder_Window", "ID"))
        item = self.tableClientOrders.horizontalHeaderItem(1)
        item.setText(_translate("ClientOrder_Window", "Nº Pedido"))
        item = self.tableClientOrders.horizontalHeaderItem(2)
        item.setText(_translate("ClientOrder_Window", "Cliente"))
        item = self.tableClientOrders.horizontalHeaderItem(3)
        item.setText(_translate("ClientOrder_Window", "Fecha Pedido"))
        item = self.tableClientOrders.horizontalHeaderItem(4)
        item.setText(_translate("ClientOrder_Window", "Plazo Entrega"))
        item = self.tableClientOrders.horizontalHeaderItem(5)
        item.setText(_translate("ClientOrder_Window", "Obs."))
        self.label_2Deliv.setText(_translate("ClientOrder_Window", "2ª Entrega"))
        self.label_Details.setText(_translate("ClientOrder_Window", "Detalle:"))


# Function to create client order
    def createorder(self):
        client_name=self.Client_ClientOrder.currentText()
        date=self.Date_ClientOrder.text()
        deliv_term=self.DelivTerm_ClientOrder.text()
        num_client_order=self.NumOrder_ClientOrder.text()
        notes=self.Notes_ClientOrder.toPlainText()

        if date=="" or (date==" " or (num_client_order==" " or num_client_order=="")):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Pedido")
            dlg.setText("Rellena la fecha y el número de pédido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Pedido")
            dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_neworder=("""
                            INSERT INTO purch_fact.client_ord_header_test (
                            client_id, order_date, delivery_date, client_order_num, notes
                            )
                            VALUES(%s,%s,%s,%s,%s)
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_client = "SELECT id FROM purch_fact.clients_test WHERE name = %s"
                cur.execute(query_client, (client_name,))
                result_client = cur.fetchone()

            # get id from table
                client_id = result_client[0] if result_client is not None else None
            # execution of principal command
                data=(client_id,date,deliv_term,num_client_order,notes,)
                cur.execute(commands_neworder, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Crear Pedido Cliente")
                dlg.setText("Pedido creado con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg,new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtableorders()

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_idorder = "SELECT id FROM purch_fact.client_ord_header_test ORDER BY id"
                cur.execute(query_idorder)
                result_idorder = cur.fetchall()

            # get id from table
                idorder = result_idorder[-1][0]
                self.label_IDOrder.setText(str(idorder))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()


# Function to modify client order data
    def modifyorder(self):
        id_order=self.label_IDOrder.text()
        client_name=self.Client_ClientOrder.currentText()
        date=self.Date_ClientOrder.text()
        deliv_term=self.DelivTerm_ClientOrder.text()
        num_client_order=self.NumOrder_ClientOrder.text()
        notes=self.Notes_ClientOrder.toPlainText()

        if id_order=="" or (date==" " or date==""):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Pedido")
            dlg.setText("Selecciona un pedido existente e introduce una fecha válida")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Pedido")
            dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            #SQL Query for updating values in database
            commands_updateorder = ("""
                        UPDATE purch_fact.client_ord_header_test
                        SET "client_id" = %s, "order_date" = %s, "delivery_date" = %s,
                        "client_order_num" = %s, "notes" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_client = "SELECT id FROM purch_fact.clients_test WHERE name = %s"
                cur.execute(query_client, (client_name,))
                result_client = cur.fetchone()

            # get id from table
                client_id = result_client[0] if result_client is not None else None
            # execution of principal command
                data=(client_id,date,deliv_term,num_client_order,notes,id_order,)
                cur.execute(commands_updateorder, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Modificar Pedido")
                dlg.setText("Pedido modificado con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg,new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtableorders()


# Function to create record
    def addrecord(self):
        order_id=self.label_IDOrder.text()
        supply_name=self.Supply_ClientOrder.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        quantity=self.Quantity_ClientOrder.text()
        deliv_quant_1=self.Deliv1_ClientOrder.text() if self.Deliv1_ClientOrder.text() not in [""," "] else 0
        deliv_quant_2=self.Deliv2_ClientOrder.text() if self.Deliv2_ClientOrder.text() not in [""," "] else 0
        deliv_quant_3=self.Deliv3_ClientOrder.text() if self.Deliv3_ClientOrder.text() not in [""," "] else 0

        if order_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("Por favor, para añadir registros elige un pedido existente o crea uno nuevo")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif quantity == "" or (quantity == "" or quantity == 0):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("Añade una cantidad válida de elementos")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            commands_newrecord = ("""
                                INSERT INTO purch_fact.client_ord_detail_test (
                                client_ord_header_test_id,supply_id,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3
                                )
                                VALUES (%s,%s,%s,%s,%s,%s)
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = "SELECT id, available_stock FROM purch_fact.supplies_test WHERE reference = %s"
                cur.execute(query_supplyid, (supply_name,))
                result_supplyid = cur.fetchone()

            # get id from table
                supply_id = result_supplyid[0]
                available_stock = result_supplyid[1]
                new_available_stock = str(float(available_stock) - float(quantity))

                query_available_stock = ("""UPDATE purch_fact.supplies_test
                                        SET "available_stock" = %s 
                                        WHERE "reference" = %s""")
                cur.execute(query_available_stock, (new_available_stock,supply_name,))
            # execution of principal command
                data=(order_id,supply_id,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3,)
                cur.execute(commands_newrecord, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablerecords()
            self.loadstocks()


# Function to modify record data
    def modifyrecord(self):
        record_id=self.label_IDRecord.text()
        supply_name=self.Supply_ClientOrder.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        quantity=self.Quantity_ClientOrder.text()
        deliv_quant_1=self.Deliv1_ClientOrder.text() if self.Deliv1_ClientOrder.text() not in [""," "] else 0
        deliv_quant_2=self.Deliv2_ClientOrder.text() if self.Deliv2_ClientOrder.text() not in [""," "] else 0
        deliv_quant_3=self.Deliv3_ClientOrder.text() if self.Deliv3_ClientOrder.text() not in [""," "] else 0

        if record_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Registros")
            dlg.setText("Selecciona un registro existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            commands_modifyrecord = ("""
                        UPDATE purch_fact.client_ord_detail_test
                        SET "supply_id" = %s, "quantity" = %s, "deliv_quant_1" = %s,
                        "deliv_quant_2" = %s, "deliv_quant_3" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = "SELECT id, available_stock FROM purch_fact.supplies_test WHERE reference = %s"
                cur.execute(query_supplyid, (supply_name,))
                result_supplyid = cur.fetchone()

                query_quantitysupply = "SELECT quantity FROM purch_fact.client_ord_detail_test WHERE id = %s"
                cur.execute(query_quantitysupply, (record_id,))
                result_quantity = cur.fetchone()
            # get id from table
                supply_id = result_supplyid[0]
                available_stock = result_supplyid[1]
                old_quantity = result_quantity[0]
                new_available_stock = str(float(available_stock) + float(old_quantity) - float(quantity))

                query_available_stock = ("""UPDATE purch_fact.supplies_test
                                        SET "available_stock" = %s 
                                        WHERE "reference" = %s""")
                cur.execute(query_available_stock, (new_available_stock,supply_name,))
            # execution of principal command
                data=(supply_id,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3,record_id,)
                cur.execute(commands_modifyrecord, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablerecords()
            self.loadstocks()


# Function to delete record data
    def deleterecord(self):
        record_id=self.label_IDRecord.text()
        supply_name=self.Supply_ClientOrder.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        quantity=self.Quantity_ClientOrder.text()

        if record_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Registros")
            dlg.setText("Selecciona un registro existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            commands_deleterecord = ("""
                                DELETE FROM purch_fact.client_ord_detail_test
                                WHERE purch_fact.client_ord_detail_test.id = %s
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = "SELECT id, available_stock FROM purch_fact.supplies_test WHERE reference = %s"
                cur.execute(query_supplyid, (supply_name,))
                result_supplyid = cur.fetchone()

            # get id from table
                supply_id = result_supplyid[0]
                available_stock = result_supplyid[1]
                new_available_stock = str(float(available_stock) + float(quantity))

                query_available_stock = ("""UPDATE purch_fact.supplies_test
                                        SET "available_stock" = %s 
                                        WHERE "reference" = %s""")
                cur.execute(query_available_stock, (new_available_stock,supply_name,))
            # execution of principal command
                data=(record_id,)
                cur.execute(commands_deleterecord, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablerecords()
            self.loadstocks()


# Function to load client order form
    def loadformorder(self,item):
        data_order=[]

        for column in range(6):
            item_text=self.tableClientOrders.item(item.row(), column).text()
            data_order.append(item_text)

        self.label_IDOrder.setText(data_order[0])
        self.NumOrder_ClientOrder.setText(data_order[1])
        self.Client_ClientOrder.setCurrentText(data_order[2])
        self.Date_ClientOrder.setText(data_order[3])
        self.DelivTerm_ClientOrder.setText(data_order[4])
        self.Notes_ClientOrder.setText(data_order[5])

        self.label_IDRecord.setText("")
        self.Supply_ClientOrder.setCurrentText("- - - - - | - - - - -")
        self.Stock_ClientOrder.setText("")
        self.StockDsp_ClientOrder.setText("")
        self.StockVrt_ClientOrder.setText("")
        self.Quantity_ClientOrder.setText("")
        self.Deliv1_ClientOrder.setText("")
        self.Deliv2_ClientOrder.setText("")
        self.Deliv3_ClientOrder.setText("")

        self.loadtablerecords()

        commands_querydeliveries = ("""
                        SELECT TO_CHAR(purch_fact.client_ord_header_test.deliv_date_1,'DD-MM-YYYY'),
                        purch_fact.client_ord_header_test.deliv_note_1,
                        TO_CHAR(purch_fact.client_ord_header_test.deliv_date_2,'DD-MM-YYYY'),
                        purch_fact.client_ord_header_test.deliv_note_2,
                        TO_CHAR(purch_fact.client_ord_header_test.deliv_date_3,'DD-MM-YYYY'),
                        purch_fact.client_ord_header_test.deliv_note_3
                        FROM purch_fact.client_ord_header_test
                        WHERE purch_fact.client_ord_header_test.id = %s
                        ORDER BY purch_fact.client_ord_header_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querydeliveries,(data_order[0],))
            results_deliveries=cur.fetchone()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.DelivDate1_ClientOrder.setText(results_deliveries[0])
            self.DelivNote1_ClientOrder.setText(results_deliveries[1])
            self.DelivDate2_ClientOrder.setText(results_deliveries[2])
            self.DelivNote2_ClientOrder.setText(results_deliveries[3])
            self.DelivDate3_ClientOrder.setText(results_deliveries[4])
            self.DelivNote3_ClientOrder.setText(results_deliveries[5])

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


# Function to load record form
    def loadformsupply(self,item):
        data_supply=[]

        for column in range(10):
            item_text=self.tableRecord.item(item.row(), column).text()
            data_supply.append(item_text)

        self.label_IDRecord.setText(data_supply[0])
        self.Supply_ClientOrder.setCurrentText(data_supply[1] + " | " + data_supply[2])
        self.Stock_ClientOrder.setText(data_supply[3])
        self.StockDsp_ClientOrder.setText(data_supply[4])
        self.Quantity_ClientOrder.setText(data_supply[5])
        self.Deliv1_ClientOrder.setText(data_supply[7])
        self.Deliv2_ClientOrder.setText(data_supply[8])
        self.Deliv3_ClientOrder.setText(data_supply[9])

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            query_stocks = "SELECT pending_stock FROM purch_fact.supplies_test WHERE reference = %s"
            cur.execute(query_stocks, (data_supply[1],))
            result_stocks = cur.fetchone()

        # get id from table
            pending = result_stocks[0]

            self.StockVrt_ClientOrder.setText(str(round(float(data_supply[4]) + pending,4)))

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


# Function to load table of orders
    def loadtableorders(self):
        commands_querytableorders = ("""
                        SELECT purch_fact.client_ord_header_test.id,
                        purch_fact.client_ord_header_test.client_order_num,
                        purch_fact.clients_test."name",
                        TO_CHAR(purch_fact.client_ord_header_test."order_date",'DD-MM-YYYY'),
                        purch_fact.client_ord_header_test.delivery_date,
                        purch_fact.client_ord_header_test.notes
                        FROM purch_fact.client_ord_header_test
                        LEFT JOIN purch_fact.clients_test ON (purch_fact.clients_test."id" = purch_fact.client_ord_header_test."client_id")
                        ORDER BY purch_fact.client_ord_header_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytableorders)
            results_orders=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableClientOrders.setRowCount(len(results_orders))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))

    # fill the Qt Table with the query results
        for row in results_orders:
            for column in range(6):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableClientOrders.setItem(tablerow, column, it)

            self.tableClientOrders.setItemDelegateForRow(tablerow, AlignDelegate(self.tableClientOrders))
            tablerow+=1

        self.tableClientOrders.verticalHeader().hide()
        self.tableClientOrders.setSortingEnabled(False)
        self.tableClientOrders.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


# Function to load table of records
    def loadtablerecords(self):
        order_id=self.label_IDOrder.text()
        commands_querytablerecords = ("""
                        SELECT purch_fact.client_ord_detail_test.id,
                        purch_fact.supplies_test."reference", purch_fact.supplies_test."description",
                        purch_fact.supplies_test."physical_stock", purch_fact.supplies_test."available_stock",
                        purch_fact.client_ord_detail_test.quantity, purch_fact.client_ord_detail_test.pending,
                        purch_fact.client_ord_detail_test.deliv_quant_1, purch_fact.client_ord_detail_test.deliv_quant_2,
                        purch_fact.client_ord_detail_test.deliv_quant_3
                        FROM purch_fact.client_ord_detail_test
                        LEFT JOIN purch_fact.supplies_test ON (purch_fact.supplies_test."id" = purch_fact.client_ord_detail_test."supply_id")
                        WHERE client_ord_header_test_id = %s
                        ORDER BY purch_fact.client_ord_detail_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytablerecords,(order_id,))
            results_records=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableRecord.setRowCount(len(results_records))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))

    # fill the Qt Table with the query results
        for row in results_records:
            for column in range(10):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableRecord.setItem(tablerow, column, it)

            self.tableRecord.setItemDelegateForRow(tablerow, AlignDelegate_records(self.tableRecord))
            tablerow+=1

        self.tableRecord.verticalHeader().hide()
        self.tableRecord.setSortingEnabled(False)
        self.tableRecord.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


# Function to add delivery 1 data
    def adddeliv1(self):
        self.root = tk.Tk()
        self.root.withdraw() 
        date=self.DelivDate1_ClientOrder.text()
        note=self.DelivNote1_ClientOrder.text()
        order_id=self.label_IDOrder.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 1ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("La fecha de 1ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv1_check = ("""
                        SELECT deliv_date_1, deliv_note_1
                        FROM purch_fact.client_ord_header_test
                        WHERE id = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv1_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            if all(element is not None for element in results_check):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Añadir 1ª entrega")
                dlg.setText("Ya existe una 1ª entrega para el pedido seleccionado")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            else:
                commands_deliv1_header = ("""
                            UPDATE purch_fact.client_ord_header_test
                            SET "deliv_date_1" = %s, "deliv_note_1" = %s
                            WHERE "id" = %s
                            """)
                commands_deliv1_detail = ("""
                            UPDATE purch_fact.client_ord_detail_test
                            SET "deliv_date_1" = %s, "deliv_note_1" = %s
                            WHERE "client_ord_header_test_id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of principal command
                    data=(date,note,order_id,)
                    cur.execute(commands_deliv1_header, data)
                    cur.execute(commands_deliv1_detail, data)

                    for row in range(self.tableRecord.rowCount()):
                        record_id = self.tableRecord.item(row, 0).text()
                        supply_name = self.tableRecord.item(row, 1).text()
                        supply_description = self.tableRecord.item(row, 2).text()
                        # pending = self.tableRecord.item(row, 6).text()
                        quant_1 = self.show_popup(supply_name, supply_description)

                        # while True:
                        #     quant_1 = self.show_popup(supply_name, supply_description)
                        #     if quant_1 < pending:
                        #         break

                        commands_add_deliv_quant_1 = ("""
                            UPDATE purch_fact.client_ord_detail_test
                            SET "deliv_quant_1" = %s
                            WHERE "id" = %s
                            """)
                        query_stock = ("""
                                        SELECT physical_stock FROM purch_fact.supplies_test
                                        WHERE "reference" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies_test 
                                            SET "physical_stock" = %s
                                            WHERE "reference" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_1,(quant_1,record_id))
                        cur.execute(query_stock, (supply_name,))
                        results=cur.fetchone()

                        stock = results[0]
                        new_stock = str(float(stock) - float(quant_1))
                        cur.execute(query_updatestock, (new_stock, supply_name,))
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    self.root.deiconify()
                    self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 1ª entrega")
                    dlg.setText("1ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadstocks()


# Function to add delivery 2 data
    def adddeliv2(self):
        self.root = tk.Tk()
        self.root.withdraw()
        date=self.DelivDate2_ClientOrder.text()
        note=self.DelivNote2_ClientOrder.text()
        order_id=self.label_IDOrder.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 2ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("La fecha de 2ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv2_check = ("""
                SELECT deliv_date_2, deliv_note_2
                FROM purch_fact.client_ord_header_test
                WHERE id = %s
                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv2_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            if all(element is not None for element in results_check):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Añadir 2ª entrega")
                dlg.setText("Ya existe una 2ª entrega para el pedido seleccionado")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            else:
                commands_deliv2_header = ("""
                            UPDATE purch_fact.client_ord_header_test
                            SET "deliv_date_2" = %s, "deliv_note_2" = %s
                            WHERE "id" = %s
                            """)
                commands_deliv2_detail = ("""
                            UPDATE purch_fact.client_ord_detail_test
                            SET "deliv_date_2" = %s, "deliv_note_2" = %s
                            WHERE "client_ord_header_test_id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of principal command
                    data=(date,note,order_id,)
                    cur.execute(commands_deliv2_header, data)
                    cur.execute(commands_deliv2_detail, data)

                    for row in range(self.tableRecord.rowCount()):
                        record_id = self.tableRecord.item(row, 0).text()
                        supply_name = self.tableRecord.item(row, 1).text()
                        supply_description = self.tableRecord.item(row, 2).text()
                        # pending = self.tableRecord.item(row, 6).text()
                        quant_2 = self.show_popup(supply_name, supply_description)

                        # while True:
                        #     quant_2 = self.show_popup(supply_name, supply_description)
                        #     if quant_2 < pending:
                        #         break

                        commands_add_deliv_quant_2 = ("""
                            UPDATE purch_fact.client_ord_detail_test
                            SET "deliv_quant_2" = %s
                            WHERE "id" = %s
                            """)
                        query_stock = ("""
                                        SELECT physical_stock FROM purch_fact.supplies_test
                                        WHERE "reference" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies_test 
                                            SET "physical_stock" = %s
                                            WHERE "reference" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_2,(quant_2,record_id))
                        cur.execute(query_stock, (supply_name,))
                        results=cur.fetchone()

                        stock = results[0]
                        new_stock = str(float(stock) - float(quant_2))
                        cur.execute(query_updatestock, (new_stock, supply_name,))
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    self.root.deiconify()
                    self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 2ª entrega")
                    dlg.setText("2ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadstocks()


# Function to add delivery 3 data
    def adddeliv3(self):
        self.root = tk.Tk()
        self.root.withdraw()
        date=self.DelivDate3_ClientOrder.text()
        note=self.DelivNote3_ClientOrder.text()
        order_id=self.label_IDOrder.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 3ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("La fecha de 3ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv3_check = ("""
                            SELECT deliv_date_3, deliv_note_3
                            FROM purch_fact.client_ord_header_test
                            WHERE id = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv3_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            if all(element is not None for element in results_check):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Añadir 3ª entrega")
                dlg.setText("Ya existe una 3ª entrega para el pedido seleccionado")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            else:
                commands_deliv3_header = ("""
                            UPDATE purch_fact.client_ord_header_test
                            SET "deliv_date_3" = %s, "deliv_note_3" = %s
                            WHERE "id" = %s
                            """)
                commands_deliv3_detail = ("""
                            UPDATE purch_fact.client_ord_detail_test
                            SET "deliv_date_3" = %s, "deliv_note_3" = %s
                            WHERE "client_ord_header_test_id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of principal command
                    data=(date,note,order_id,)
                    cur.execute(commands_deliv3_header, data)
                    cur.execute(commands_deliv3_detail, data)

                    for row in range(self.tableRecord.rowCount()):
                        record_id = self.tableRecord.item(row, 0).text()
                        supply_name = self.tableRecord.item(row, 1).text()
                        supply_description = self.tableRecord.item(row, 2).text()
                        # pending = self.tableRecord.item(row, 6).text()
                        quant_3 = self.show_popup(supply_name, supply_description)

                        # while True:
                        #     quant_3 = self.show_popup(supply_name, supply_description)
                        #     if quant_3 < pending:
                        #         break

                        commands_add_deliv_quant_3 = ("""
                            UPDATE purch_fact.client_ord_detail_test
                            SET "deliv_quant_3" = %s
                            WHERE "id" = %s
                            """)
                        query_stock = ("""
                                        SELECT physical_stock FROM purch_fact.supplies_test
                                        WHERE "reference" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies_test 
                                            SET "physical_stock" = %s
                                            WHERE "reference" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_3,(quant_3,record_id))
                        cur.execute(query_stock, (supply_name,))
                        results=cur.fetchone()

                        stock = results[0]
                        new_stock = str(float(stock) - float(quant_3))
                        cur.execute(query_updatestock, (new_stock, supply_name,))
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    self.root.deiconify()
                    self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 3ª entrega")
                    dlg.setText("3ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadstocks()


# Function to load stock values
    def loadstocks(self):
        supply_name=self.Supply_ClientOrder.currentText()
        supply_name=supply_name[:supply_name.find(" |")]

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            query_stocks = "SELECT physical_stock, available_stock, pending_stock FROM purch_fact.supplies_test WHERE reference = %s"
            cur.execute(query_stocks, (supply_name,))
            result_stocks = cur.fetchone()

        # get id from table
            stock = result_stocks[0]
            available_stock = result_stocks[1]
            pending = result_stocks[2]

            self.Stock_ClientOrder.setText(str(stock))
            self.StockDsp_ClientOrder.setText(str(available_stock))
            self.StockVrt_ClientOrder.setText(str(round(available_stock + pending,4)))

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


# Function of popup window to enter quantities of deliveries
    def show_popup(self, supply_name, supply_description):
        popup = tk.Toplevel()
        popup.title("Cantidades entregas")

        popup.iconbitmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico")))

        x = (popup.winfo_screenwidth() - popup.winfo_reqwidth()) // 2
        y = (popup.winfo_screenheight() - popup.winfo_reqheight()) // 2
        popup.geometry("+{}+{}".format(x, y))

        popup.grab_set()
        
        label = tk.Label(popup, text=f"Cantidad recibida de:\n"
                        f"{supply_name} | {supply_description}")
        label.pack(padx=10, pady=10)
        
        entry = tk.Entry(popup)
        entry.pack(padx=10, pady=5)
        
        quantity = None  # Saving entered value
        
        def accept():
            nonlocal quantity
            quantity = entry.get()
            try:
                quantity = float(quantity)
                popup.destroy()
                self.root.quit()
            except ValueError:
                print("¡Valor no válido!")
        
        button = tk.Button(popup, text="Aceptar", command=accept)
        button.pack(padx=10, pady=10)
        
        popup.protocol("WM_DELETE_WINDOW", accept)
        popup.mainloop()
        return quantity  # Returning entered value


# Function to check date format
    def is_valid_date(self, date_str):
        formats = ['%d/%m/%Y', '%d-%m-%Y']
        
        for fmt in formats:
            try:
                datetime.datetime.strptime(date_str, fmt)
                return True
            except ValueError:
                pass
            
        return False


#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableClientOrders.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableClientOrders.horizontalHeader().height()
        popup_pos = self.tableClientOrders.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableClientOrders.show_unique_values_menu(logical_index, popup_pos, header_height)


#Function when clicking on table header
    def on_headerrecords_section_clicked(self, logical_index):
        header_pos = self.tableRecord.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableRecord.horizontalHeader().height()
        popup_pos = self.tableRecord.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableRecord.show_unique_values_menu(logical_index, popup_pos, header_height)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ClientOrder_Window = QtWidgets.QMainWindow()
    ui = Ui_ClientOrder_Window()
    ui.setupUi(ClientOrder_Window)
    ClientOrder_Window.showMaximized()
    sys.exit(app.exec())
