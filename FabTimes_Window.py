# Form implementation generated from reading ui file 'ReportFabTimes_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import locale
import os
import pandas as pd
from tkinter.filedialog import asksaveasfilename
from openpyxl import Workbook
from openpyxl.styles import NamedStyle
from openpyxl.utils.dataframe import dataframe_to_rows
from datetime import datetime
import re


basedir = r"\\ERP-EIPSA-DATOS\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class CustomTableWidget(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column_index in [6, 11]:
            self.custom_sort_date(column_index, sortOrder)
        elif self.horizontalHeaderItem(column_index).text() == 'Cantidad':
            self.custom_sort_int(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)


    def custom_sort_date(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

    def custom_sort_int(self, column, order):
        """
        Custom sorting method for integer columns. Sorts the specified column based on integer values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: int(self.item(i, column).text()))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class Ui_FabTimes_Window(object):
    def __init__(self, username, text_query):
        """
        Initializes the Ui_FabTimes_Window with the specified name and username.

        Args:
            name (str): name associated with the window.
            username (str): username associated with the window.
            text_query (str): text to check data
        """
        self.username=username
        self.reference = text_query

    def setupUi(self, FabTimes):
        if self.username in ['d.marquez']:
            self.letter_size = int(14//1.5)
            self.letter_table_size = int(12//1.5)
            self.scale = 1.5
        else:
            self.scale = 1
            self.letter_size = 10
            self.letter_table_size = 8
        FabTimes.setObjectName("FabTimes")
        FabTimes.resize(1165, 945)
        FabTimes.setMinimumSize(QtCore.QSize(1165, 945))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//ERP-EIPSA-DATOS/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        FabTimes.setWindowIcon(icon)
        if self.username == 'd.marquez':
            FabTimes.setStyleSheet("QWidget {\n"
    "background-color: #121212; color: rgb(255, 255, 255)\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 12px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .2em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    "QComboBox:editable {\n"
    "   border: 1px solid white;\n"
    "   border-radius: 3px;\n"
    "}\n"
    "QComboBox QAbstractItemView{\n"
    "   min-width: 1200px;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item {\n"
    "   min-height: 35px;\n"
    "   border: .5px solid white;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item:hover {\n"
    "   background-color: blue;\n"
    "}\n"
    "QTabBar {\n"
    "   background-color: #121212;\n"
    "   color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    "QTabBar::tab {\n"
    "   background-color: #121212;\n"
    "   color: rgb(255, 255, 255);\n"
    "   padding: 5px;\n"
    "   border: .5px solid white;\n"
    "}\n"
    "\n"
    "QTabBar::tab:selected {\n"
    "   background-color: #33bdef;\n"
    "   color: #fff;\n"
    "}\n"
    "\n"
    "QTabBar::tab:hover {\n"
    "   background-color: #019ad2;\n"
    "}\n"
    )
        else:
            FabTimes.setStyleSheet("QWidget {\n"
    "background-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid black;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView{\n"
    "   min-width: 1200px;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item {\n"
    "   min-height: 35px;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 13px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .2em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        self.centralwidget = QtWidgets.QWidget(parent=FabTimes)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tabwidget = QtWidgets.QTabWidget(self.frame)
        self.tabwidget.setObjectName("tabwidget")
        self.tab_resume = QtWidgets.QWidget()
        self.tab_resume.setObjectName("tab_resume")
        self.tabwidget.addTab(self.tab_resume, "DESGLOSE")
        self.tab_ot = QtWidgets.QWidget()
        self.tab_ot.setObjectName("tab_ot")
        self.tabwidget.addTab(self.tab_ot, "TIEMPOS OT")
        self.tab_operation = QtWidgets.QWidget()
        self.tab_operation.setObjectName("tab_operation")
        self.tabwidget.addTab(self.tab_operation, "TIEMPOS OPERACIÓN")
        self.tab_personal = QtWidgets.QWidget()
        self.tab_personal.setObjectName("tab_personal")
        self.tabwidget.addTab(self.tab_personal, "TIEMPOS PERSONAL")
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setMinimumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        self.label.setMaximumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(self.letter_size)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)
        self.reference_value = QtWidgets.QLabel(parent=self.frame)
        self.reference_value.setMinimumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        self.reference_value.setMaximumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(self.letter_size)
        self.reference_value.setFont(font)
        self.reference_value.setObjectName("reference_value")
        self.gridLayout_2.addWidget(self.reference_value, 0, 1, 1, 1)
        self.label_total_time = QtWidgets.QLabel(parent=self.frame)
        self.label_total_time.setMinimumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        self.label_total_time.setMaximumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(self.letter_size)
        font.setBold(True)
        self.label_total_time.setFont(font)
        self.label_total_time.setObjectName("label_total_time")
        self.gridLayout_2.addWidget(self.label_total_time, 0, 2, 1, 1)
        self.total_time = QtWidgets.QLabel(parent=self.frame)
        self.total_time.setMinimumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        self.total_time.setMaximumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(self.letter_size)
        self.total_time.setFont(font)
        self.total_time.setObjectName("total_time")
        self.gridLayout_2.addWidget(self.total_time, 0, 3, 1, 1)
        self.label_efective_time = QtWidgets.QLabel(parent=self.frame)
        self.label_efective_time.setMinimumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        self.label_efective_time.setMaximumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(self.letter_size)
        font.setBold(True)
        self.label_efective_time.setFont(font)
        self.label_efective_time.setObjectName("label_efective_time")
        self.gridLayout_2.addWidget(self.label_efective_time, 0, 4, 1, 1)
        self.efective_time = QtWidgets.QLabel(parent=self.frame)
        self.efective_time.setMinimumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        self.efective_time.setMaximumSize(QtCore.QSize(int(150//self.scale), int(35//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(self.letter_size)
        self.efective_time.setFont(font)
        self.efective_time.setObjectName("efective_time")
        self.gridLayout_2.addWidget(self.efective_time, 0, 5, 1, 1)

        self.gridLayout1 = QtWidgets.QGridLayout(self.tab_resume)
        self.gridLayout1.setSpacing(0)
        self.gridLayout1.setObjectName("gridLayout1")
        self.tableTimes = CustomTableWidget()
        self.tableTimes.setObjectName("tableWidget")
        self.tableTimes.setColumnCount(8)
        self.tableTimes.setRowCount(0)
        for i in range(8):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(self.letter_size)
            font.setBold(True)
            item.setFont(font)
            self.tableTimes.setHorizontalHeaderItem(i, item)
        self.gridLayout1.addWidget(self.tableTimes, 1, 0, 1, 7)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.label_SumItems = QtWidgets.QLabel(parent=self.frame)
        self.label_SumItems.setMinimumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setMaximumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setText("")
        self.label_SumItems.setObjectName("label_SumItems")
        self.horizontalLayout.addWidget(self.label_SumItems)
        self.label_SumValue = QtWidgets.QLabel(parent=self.frame)
        self.label_SumValue.setMinimumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setMaximumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setText("")
        self.label_SumValue.setObjectName("label_SumValue")
        self.horizontalLayout.addWidget(self.label_SumValue)
        self.label_CountItems = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems.setMinimumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setMaximumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setText("")
        self.label_CountItems.setObjectName("label_CountItems")
        self.horizontalLayout.addWidget(self.label_CountItems)
        self.label_CountValue = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue.setMinimumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setMaximumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setText("")
        self.label_CountValue.setObjectName("label_CountValue")
        self.horizontalLayout.addWidget(self.label_CountValue)
        self.gridLayout1.addLayout(self.horizontalLayout, 2, 0, 1, 7)

        self.gridLayout2 = QtWidgets.QGridLayout(self.tab_ot)
        self.gridLayout2.setSpacing(0)
        self.gridLayout2.setObjectName("gridLayout2")
        self.tableOT = CustomTableWidget()
        self.tableOT.setObjectName("tableOT")
        self.tableOT.setColumnCount(3)
        self.tableOT.setRowCount(0)
        for i in range(3):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(self.letter_size)
            font.setBold(True)
            item.setFont(font)
            self.tableOT.setHorizontalHeaderItem(i, item)
        self.gridLayout2.addWidget(self.tableOT, 1, 0, 1, 7)

        self.gridLayout3 = QtWidgets.QGridLayout(self.tab_operation)
        self.gridLayout3.setSpacing(0)
        self.gridLayout3.setObjectName("gridLayout3")
        self.tableOperations = CustomTableWidget()
        self.tableOperations.setObjectName("tableOperations")
        self.tableOperations.setColumnCount(3)
        self.tableOperations.setRowCount(0)
        for i in range(3):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(self.letter_size)
            font.setBold(True)
            item.setFont(font)
            self.tableOperations.setHorizontalHeaderItem(i, item)
        self.gridLayout3.addWidget(self.tableOperations, 1, 0, 1, 7)

        self.gridLayout4 = QtWidgets.QGridLayout(self.tab_personal)
        self.gridLayout4.setSpacing(0)
        self.gridLayout4.setObjectName("gridLayout4")
        self.tablePersonal = CustomTableWidget()
        self.tablePersonal.setObjectName("tablePersonal")
        self.tablePersonal.setColumnCount(3)
        self.tablePersonal.setRowCount(0)
        for i in range(3):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(self.letter_size)
            font.setBold(True)
            item.setFont(font)
            self.tablePersonal.setHorizontalHeaderItem(i, item)
        self.gridLayout4.addWidget(self.tablePersonal, 1, 0, 1, 7)

        self.gridLayout_2.addWidget(self.tabwidget, 1, 0, 1, 7)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        FabTimes.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=FabTimes)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1165, 22))
        self.menubar.setObjectName("menubar")
        FabTimes.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=FabTimes)
        self.statusbar.setObjectName("statusbar")
        FabTimes.setStatusBar(self.statusbar)

        self.retranslateUi(FabTimes)
        QtCore.QMetaObject.connectSlotsByName(FabTimes)

        self.loaddata(self.reference)

        self.tableTimes.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.tableTimes.itemSelectionChanged.connect(self.countSelectedCells)

# Function to translate and updates the text of various UI elements
    def retranslateUi(self, FabTimes):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        FabTimes.setWindowTitle(_translate("FabTimes", "Resumen Tiempos"))
        self.label_total_time.setText(_translate("FabTimes", "Tiempo Total:"))
        self.label_efective_time.setText(_translate("FabTimes", "Tiempo Efectivo:"))
        item = self.tableTimes.horizontalHeaderItem(0)
        item.setText(_translate("FabTimes", "Num. OT"))
        item = self.tableTimes.horizontalHeaderItem(1)
        item.setText(_translate("FabTimes", "Fecha"))
        item = self.tableTimes.horizontalHeaderItem(2)
        item.setText(_translate("FabTimes", "Inicio"))
        item = self.tableTimes.horizontalHeaderItem(3)
        item.setText(_translate("FabTimes", "Fin"))
        item = self.tableTimes.horizontalHeaderItem(4)
        item.setText(_translate("FabTimes", "Total"))
        item = self.tableTimes.horizontalHeaderItem(5)
        item.setText(_translate("FabTimes", "Total Efec."))
        item = self.tableTimes.horizontalHeaderItem(6)
        item.setText(_translate("FabTimes", "Nombre"))
        item = self.tableTimes.horizontalHeaderItem(7)
        item.setText(_translate("FabTimes", "Operación"))

        item = self.tableOT.horizontalHeaderItem(0)
        item.setText(_translate("FabTimes", "Num. OT"))
        item = self.tableOT.horizontalHeaderItem(1)
        item.setText(_translate("FabTimes", "Tiempo Total"))
        item = self.tableOT.horizontalHeaderItem(2)
        item.setText(_translate("FabTimes", "Tiempo Efectivo"))

        item = self.tableOperations.horizontalHeaderItem(0)
        item.setText(_translate("FabTimes", "Operación"))
        item = self.tableOperations.horizontalHeaderItem(1)
        item.setText(_translate("FabTimes", "Tiempo Total"))
        item = self.tableOperations.horizontalHeaderItem(2)
        item.setText(_translate("FabTimes", "Tiempo Efectivo"))

        item = self.tablePersonal.horizontalHeaderItem(0)
        item.setText(_translate("FabTimes", "Nombre"))
        item = self.tablePersonal.horizontalHeaderItem(1)
        item.setText(_translate("FabTimes", "Tiempo Total"))
        item = self.tablePersonal.horizontalHeaderItem(2)
        item.setText(_translate("FabTimes", "Tiempo Efectivo"))
        

# Function to load data in table
    def loaddata(self, reference_query):
        """
        Loads and displays records of supplies data in a table widget.
        Handles errors with a message box and updates the table widget with the data.
        """

        if reference_query[0] == 'P':
            commands_querytable = ("""
                        SELECT DISTINCT orders."ot_num", TO_CHAR(times."date_ot", 'DD/MM/YYYY'), times."start_hour", times."end_hour",
                        REPLACE(TO_CHAR(times."total_time", '90.00'), '.', ':'), REPLACE(TO_CHAR(times."time_ot", '90.00'), '.', ':'),
                        personal."name", operations."name", times."cent_total_time", times."cent_time_ot", times."date_ot"
                        FROM fabrication.imp_ot AS times
                        JOIN fabrication.personal AS personal ON times."personal_id" = personal."code"
                        JOIN fabrication.operations AS operations ON times."operations_id" = operations."id"
                        JOIN fabrication.fab_order AS orders ON times."number_ot" = orders."ot_num"
                        WHERE orders."tag" LIKE ('%%'||%s||'%%')
                        ORDER BY times."date_ot" ASC
                        """)
            self.label.setText('Pedido:')
        else:
            commands_querytable = ("""
                        SELECT DISTINCT times."number_ot", TO_CHAR(times."date_ot", 'DD/MM/YYYY'), times."start_hour", times."end_hour",
                        REPLACE(TO_CHAR(times."total_time", '90.00'), '.', ':'), REPLACE(TO_CHAR(times."time_ot", '90.00'), '.', ':'),
                        personal."name", operations."name", times."cent_total_time", times."cent_time_ot", times."date_ot"
                        FROM fabrication.imp_ot AS times
                        JOIN fabrication.personal AS personal ON times."personal_id" = personal."code"
                        JOIN fabrication.operations AS operations ON times."operations_id" = operations."id"
                        WHERE times."number_ot" = %s
                        ORDER BY times."date_ot" ASC
                        """)
            self.label.setText('Número OT:')

        self.reference_value.setText(reference_query)
        conn = None

        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytable,(reference_query,))
            results=cur.fetchall()

            dataframe_times = pd.DataFrame(results, columns=['Num. OT', 'Fecha', 'Inicio', 'Fin', 'Total', 'Efectivo', 'Nombre', 'Operación', 'Total C', 'Efectivo C', 'Fecha OT'])

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            font = QtGui.QFont()
            font.setPointSize(self.letter_table_size)

        # fill the Qt Table with the query results
            self.tableTimes.setRowCount(len(results))
            tablerow=0
            for row in results:
                for column in range(8):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    it.setFont(font)
                    self.tableTimes.setItem(tablerow, column, it)

                self.tableTimes.setItemDelegateForRow(tablerow, AlignDelegate(self.tableTimes))
                tablerow+=1

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.total_time.setText(self.format_time(str(dataframe_times['Total C'].sum())))
        self.efective_time.setText(self.format_time(str(dataframe_times['Efectivo C'].sum())))

        if reference_query[0] != 'P':
            self.tableTimes.hideColumn(0)

        group_ot = dataframe_times.groupby(['Num. OT']).agg({'Total C': 'sum', 'Efectivo C': 'sum'}).reset_index()
        group_operations = dataframe_times.groupby(['Operación']).agg({'Total C': 'sum', 'Efectivo C': 'sum'}).reset_index()
        group_personal = dataframe_times.groupby(['Nombre']).agg({'Total C': 'sum', 'Efectivo C': 'sum'}).reset_index()

    # fill the Qt Table with the query results
        self.tableOT.setRowCount(group_ot.shape[0])
        tablerow=0
        for row in range(group_ot.shape[0]):
            for column in range(group_ot.shape[1]):
                value = group_ot.iloc[row, column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value if column == 0 else self.format_time(str(value))))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableOT.setItem(tablerow, column, it)

            self.tableOT.setItemDelegateForRow(tablerow, AlignDelegate(self.tableOT))
            tablerow+=1

    # fill the Qt Table with the query results
        self.tableOperations.setRowCount(group_operations.shape[0])
        tablerow=0
        for row in range(group_operations.shape[0]):
            for column in range(group_operations.shape[1]):
                value = group_operations.iloc[row, column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value if column == 0 else self.format_time(str(value))))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableOperations.setItem(tablerow, column, it)

            self.tableOperations.setItemDelegateForRow(tablerow, AlignDelegate(self.tableOperations))
            tablerow+=1

    # fill the Qt Table with the query results
        self.tablePersonal.setRowCount(group_personal.shape[0])
        tablerow=0
        for row in range(group_personal.shape[0]):
            for column in range(group_personal.shape[1]):
                value = group_personal.iloc[row, column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value if column == 0 else self.format_time(str(value))))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tablePersonal.setItem(tablerow, column, it)

            self.tablePersonal.setItemDelegateForRow(tablerow, AlignDelegate(self.tablePersonal))
            tablerow+=1



        self.tableTimes.verticalHeader().hide()
        self.tableTimes.setSortingEnabled(False)
        self.tableTimes.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        if self.username == 'd.marquez':
            self.tableTimes.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableTimes.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableTimes.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")

        self.tableOT.verticalHeader().hide()
        self.tableOT.setSortingEnabled(False)
        self.tableOT.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        if self.username == 'd.marquez':
            self.tableOT.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableOT.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableOT.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")

        self.tableOperations.verticalHeader().hide()
        self.tableOperations.setSortingEnabled(False)
        self.tableOperations.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        if self.username == 'd.marquez':
            self.tableOperations.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableOperations.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableOperations.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")

        self.tablePersonal.verticalHeader().hide()
        self.tablePersonal.setSortingEnabled(False)
        self.tablePersonal.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        if self.username == 'd.marquez':
            self.tablePersonal.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tablePersonal.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tablePersonal.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")


# Function to generate excel
    def generate_excel(self):
        """
        Exports the visible data from the table to an Excel file. If no data is loaded, displays a warning message.
        """
        output_path = asksaveasfilename(defaultextension=".xlsx", filetypes=[("Archivos Excel", "*.xlsx")], title="Guardar Excel")

        if output_path:
            wb = Workbook()
            ws = wb.active

            # Add data to Excel
            for index, row in self.df.iterrows():
                fecha_str = row['Fecha Pedido']
                if fecha_str is not None:
                    fecha_obj = datetime.strptime(fecha_str, '%d/%m/%Y').date()
                    self.df.at[index, 'Fecha Pedido'] = fecha_obj

            for r_idx, row in enumerate(dataframe_to_rows(self.df, index=False, header=True), 1):
                ws.append(row)

            date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')

            # Apply Styles
            for cell in ws['C']:
                cell.style = date_style

            # Save Excel
            wb.save(output_path)

# Function when header table is clicked
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableTimes.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableTimes.horizontalHeader().height()
        popup_pos = self.tableTimes.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableTimes.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to count selected cell and sum its values if possible
    def countSelectedCells(self):
        """
        Counts the number of selected cells and sums their values. Updates the UI labels with the count and sum.
        """
        if len(self.tableTimes.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

            sum_value = sum([(float(ix.data()) if (ix.data() is not None and ix.data().replace(',', '.', 1).replace('.', '', 1).isdigit() and ix.column() > 1) else 0) for ix in self.tableTimes.selectedIndexes()])
            count_value = len([ix for ix in self.tableTimes.selectedIndexes() if ix.data() != ""])
            if sum_value > 0:
                self.label_SumItems.setText("Suma:")
                self.label_SumValue.setText(locale.format_string("%.2f", sum_value, grouping=True))
            if count_value > 0:
                self.label_CountItems.setText("Recuento:")
                self.label_CountValue.setText(str(count_value))
        else:
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

# Function to format time values
    def format_time(self, time_to_format):
        hours, minutes = map(float, time_to_format.split('.')) if time_to_format != '0' else ('0','0')

        hours = int(hours)
        minutes = int(float(minutes)/100 * 60)

        return f"{hours:02}:{minutes:02}"



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    FabTimes = QtWidgets.QMainWindow()
    ui = Ui_FabTimes_Window('j.martinez','P-24/091')
    ui.setupUi(FabTimes)
    FabTimes.show()
    sys.exit(app.exec())
