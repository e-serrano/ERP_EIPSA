# Form implementation generated from reading ui file 'SupplierOrder_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import locale
from PDF_Styles import supplier_order
from tkinter.filedialog import asksaveasfilename
import tkinter as tk
import datetime


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if value is None:
            self.column_filters[column_index] = set()
        elif checked:
            self.column_filters[column_index].add(value)
        elif value in self.column_filters[column_index]:
            self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if filters and item_value not in filters:
                        show_row = False
                        break

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

    # Update hidden rows for this column
        if checked:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

    # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_SupplierOrder_Warehouse_Window(object):
    def setupUi(self, SupplierOrder_Window):
        SupplierOrder_Window.setObjectName("SupplierOrder_Window")
        SupplierOrder_Window.resize(1534, 722)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        SupplierOrder_Window.setWindowIcon(icon)
        SupplierOrder_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.centralwidget = QtWidgets.QWidget(parent=SupplierOrder_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setStyleSheet(".QFrame {\n"
"    border: 2px solid black;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_NumOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOrder.setMinimumSize(QtCore.QSize(75, 25))
        self.label_NumOrder.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumOrder.setFont(font)
        self.label_NumOrder.setObjectName("label_NumOrder")
        self.gridLayout_2.addWidget(self.label_NumOrder, 1, 1, 1, 1)
        self.NumOrder_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.NumOrder_SupplierOrder.setMinimumSize(QtCore.QSize(100, 25))
        self.NumOrder_SupplierOrder.setMaximumSize(QtCore.QSize(170, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.NumOrder_SupplierOrder.setFont(font)
        self.NumOrder_SupplierOrder.setReadOnly(True)
        self.NumOrder_SupplierOrder.setObjectName("NumOrder_SupplierOrder")
        self.gridLayout_2.addWidget(self.NumOrder_SupplierOrder, 1, 2, 1, 1)
        self.label_Supplier = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Supplier.setFont(font)
        self.label_Supplier.setObjectName("label_Supplier")
        self.gridLayout_2.addWidget(self.label_Supplier, 1, 3, 1, 1)
        self.Supplier_SupplierOrder = QtWidgets.QComboBox(parent=self.frame)
        self.Supplier_SupplierOrder.setMinimumSize(QtCore.QSize(300, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Supplier_SupplierOrder.setFont(font)
        self.Supplier_SupplierOrder.setObjectName("Supplier_SupplierOrder")
        self.gridLayout_2.addWidget(self.Supplier_SupplierOrder, 1, 4, 1, 4)
        self.label_DelivWay = QtWidgets.QLabel(parent=self.frame)
        self.label_DelivWay.setMinimumSize(QtCore.QSize(100, 25))
        self.label_DelivWay.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DelivWay.setFont(font)
        self.label_DelivWay.setObjectName("label_DelivWay")
        self.gridLayout_2.addWidget(self.label_DelivWay, 1, 8, 1, 1)
        self.DelivWay_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivWay_SupplierOrder.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivWay_SupplierOrder.setFont(font)
        self.DelivWay_SupplierOrder.setReadOnly(True)
        self.DelivWay_SupplierOrder.setObjectName("DelivWay_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivWay_SupplierOrder, 1, 9, 1, 2)
        self.label_PayWay = QtWidgets.QLabel(parent=self.frame)
        self.label_PayWay.setMinimumSize(QtCore.QSize(0, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_PayWay.setFont(font)
        self.label_PayWay.setObjectName("label_PayWay")
        self.gridLayout_2.addWidget(self.label_PayWay, 1, 11, 1, 2)
        self.PayWay_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.PayWay_SupplierOrder.setMinimumSize(QtCore.QSize(0, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.PayWay_SupplierOrder.setFont(font)
        self.PayWay_SupplierOrder.setReadOnly(True)
        self.PayWay_SupplierOrder.setObjectName("PayWay_SupplierOrder")
        self.gridLayout_2.addWidget(self.PayWay_SupplierOrder, 1, 13, 1, 4)
        self.label_Date = QtWidgets.QLabel(parent=self.frame)
        self.label_Date.setMinimumSize(QtCore.QSize(75, 25))
        self.label_Date.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Date.setFont(font)
        self.label_Date.setObjectName("label_Date")
        self.gridLayout_2.addWidget(self.label_Date, 2, 1, 1, 1)
        self.Date_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Date_SupplierOrder.setMinimumSize(QtCore.QSize(100, 25))
        self.Date_SupplierOrder.setMaximumSize(QtCore.QSize(170, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Date_SupplierOrder.setFont(font)
        self.Date_SupplierOrder.setReadOnly(True)
        self.Date_SupplierOrder.setObjectName("Date_SupplierOrder")
        self.gridLayout_2.addWidget(self.Date_SupplierOrder, 2, 2, 1, 1)
        self.label_TheirRef = QtWidgets.QLabel(parent=self.frame)
        self.label_TheirRef.setMinimumSize(QtCore.QSize(95, 25))
        self.label_TheirRef.setMaximumSize(QtCore.QSize(95, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_TheirRef.setFont(font)
        self.label_TheirRef.setObjectName("label_TheirRef")
        self.gridLayout_2.addWidget(self.label_TheirRef, 2, 3, 1, 1)
        self.TheirRef_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.TheirRef_SupplierOrder.setMinimumSize(QtCore.QSize(0, 25))
        self.TheirRef_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TheirRef_SupplierOrder.setFont(font)
        self.TheirRef_SupplierOrder.setReadOnly(True)
        self.TheirRef_SupplierOrder.setObjectName("TheirRef_SupplierOrder")
        self.gridLayout_2.addWidget(self.TheirRef_SupplierOrder, 2, 4, 1, 4)
        self.label_DelivDate = QtWidgets.QLabel(parent=self.frame)
        self.label_DelivDate.setMinimumSize(QtCore.QSize(100, 25))
        self.label_DelivDate.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DelivDate.setFont(font)
        self.label_DelivDate.setObjectName("label_DelivDate")
        self.gridLayout_2.addWidget(self.label_DelivDate, 2, 8, 1, 1)
        self.DelivDate_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate_SupplierOrder.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivDate_SupplierOrder.setFont(font)
        self.DelivDate_SupplierOrder.setReadOnly(True)
        self.DelivDate_SupplierOrder.setObjectName("DelivDate_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivDate_SupplierOrder, 2, 9, 1, 2)
        self.label_DelivTerm = QtWidgets.QLabel(parent=self.frame)
        self.label_DelivTerm.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DelivTerm.setFont(font)
        self.label_DelivTerm.setObjectName("label_DelivTerm")
        self.gridLayout_2.addWidget(self.label_DelivTerm, 2, 11, 1, 2)
        self.DelivTerm_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivTerm_SupplierOrder.setMinimumSize(QtCore.QSize(0, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivTerm_SupplierOrder.setFont(font)
        self.DelivTerm_SupplierOrder.setReadOnly(True)
        self.DelivTerm_SupplierOrder.setObjectName("DelivTerm_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivTerm_SupplierOrder, 2, 13, 1, 4)
        self.label_Obs = QtWidgets.QLabel(parent=self.frame)
        self.label_Obs.setMinimumSize(QtCore.QSize(75, 25))
        self.label_Obs.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Obs.setFont(font)
        self.label_Obs.setObjectName("label_Obs")
        self.gridLayout_2.addWidget(self.label_Obs, 3, 1, 1, 1)
        self.OrderObs_SupplierOrder = QtWidgets.QTextEdit(parent=self.frame)
        self.OrderObs_SupplierOrder.setMinimumSize(QtCore.QSize(0, 25))
        self.OrderObs_SupplierOrder.setMaximumSize(QtCore.QSize(16777214, 25))
        self.OrderObs_SupplierOrder.setObjectName("OrderObs_SupplierOrder")
        self.OrderObs_SupplierOrder.setReadOnly(True)
        self.gridLayout_2.addWidget(self.OrderObs_SupplierOrder, 3, 2, 1, 6)
        self.label_Supply = QtWidgets.QLabel(parent=self.frame)
        self.label_Supply.setMinimumSize(QtCore.QSize(75, 25))
        self.label_Supply.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Supply.setFont(font)
        self.label_Supply.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Supply.setObjectName("label_Supply")
        self.gridLayout_2.addWidget(self.label_Supply, 4, 1, 1, 1)
        self.Supply_SupplierOrder = QtWidgets.QComboBox(parent=self.frame)
        self.Supply_SupplierOrder.setMinimumSize(QtCore.QSize(300, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Supply_SupplierOrder.setFont(font)
        self.Supply_SupplierOrder.setObjectName("Supply_SupplierOrder")
        self.gridLayout_2.addWidget(self.Supply_SupplierOrder, 5, 1, 1, 4)
        self.label_Stock = QtWidgets.QLabel(parent=self.frame)
        self.label_Stock.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Stock.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Stock.setFont(font)
        self.label_Stock.setObjectName("label_Stock")
        self.gridLayout_2.addWidget(self.label_Stock, 4, 5, 1, 1)
        self.Stock_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Stock_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.Stock_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Stock_SupplierOrder.setFont(font)
        self.Stock_SupplierOrder.setReadOnly(True)
        self.Stock_SupplierOrder.setObjectName("Stock_SupplierOrder")
        self.gridLayout_2.addWidget(self.Stock_SupplierOrder, 5, 5, 1, 1)
        self.label_StockDsp = QtWidgets.QLabel(parent=self.frame)
        self.label_StockDsp.setMinimumSize(QtCore.QSize(80, 25))
        self.label_StockDsp.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_StockDsp.setFont(font)
        self.label_StockDsp.setObjectName("label_StockDsp")
        self.gridLayout_2.addWidget(self.label_StockDsp, 4, 6, 1, 1)
        self.StockDsp_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.StockDsp_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.StockDsp_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.StockDsp_SupplierOrder.setFont(font)
        self.StockDsp_SupplierOrder.setReadOnly(True)
        self.StockDsp_SupplierOrder.setObjectName("StockDsp_SupplierOrder")
        self.gridLayout_2.addWidget(self.StockDsp_SupplierOrder, 5, 6, 1, 1)
        self.label_StockVrt = QtWidgets.QLabel(parent=self.frame)
        self.label_StockVrt.setMinimumSize(QtCore.QSize(80, 25))
        self.label_StockVrt.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_StockVrt.setFont(font)
        self.label_StockVrt.setObjectName("label_StockVrt")
        self.gridLayout_2.addWidget(self.label_StockVrt, 4, 7, 1, 1)
        self.StockVrt_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.StockVrt_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.StockVrt_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.StockVrt_SupplierOrder.setFont(font)
        self.StockVrt_SupplierOrder.setReadOnly(True)
        self.StockVrt_SupplierOrder.setObjectName("StockVrt_SupplierOrder")
        self.gridLayout_2.addWidget(self.StockVrt_SupplierOrder, 5, 7, 1, 1)
        self.label_UnitValue = QtWidgets.QLabel(parent=self.frame)
        self.label_UnitValue.setMinimumSize(QtCore.QSize(80, 25))
        self.label_UnitValue.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_UnitValue.setFont(font)
        self.label_UnitValue.setObjectName("label_UnitValue")
        self.gridLayout_2.addWidget(self.label_UnitValue, 4, 8, 1, 1)
        self.UnitValue_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.UnitValue_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.UnitValue_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.UnitValue_SupplierOrder.setFont(font)
        self.UnitValue_SupplierOrder.setReadOnly(True)
        self.UnitValue_SupplierOrder.setObjectName("UnitValue_SupplierOrder")
        self.gridLayout_2.addWidget(self.UnitValue_SupplierOrder, 5, 8, 1, 1)
        self.label_Discount = QtWidgets.QLabel(parent=self.frame)
        self.label_Discount.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Discount.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Discount.setFont(font)
        self.label_Discount.setObjectName("label_Discount")
        self.gridLayout_2.addWidget(self.label_Discount, 4, 9, 1, 1)
        self.Discount_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Discount_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.Discount_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Discount_SupplierOrder.setFont(font)
        self.Discount_SupplierOrder.setReadOnly(True)
        self.Discount_SupplierOrder.setObjectName("Discount_SupplierOrder")
        self.gridLayout_2.addWidget(self.Discount_SupplierOrder, 5, 9, 1, 1)
        self.label_IDOrd = QtWidgets.QLabel(parent=self.frame)
        self.label_IDOrd.setMinimumSize(QtCore.QSize(50, 25))
        self.label_IDOrd.setMaximumSize(QtCore.QSize(50, 25))
        self.label_IDOrd.setObjectName("label_IDOrd")
        self.label_IDOrd.setText("")
        self.label_IDOrd.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_2.addWidget(self.label_IDOrd, 6, 1, 1, 1)
        self.label_IDRecord = QtWidgets.QLabel(parent=self.frame)
        self.label_IDRecord.setMinimumSize(QtCore.QSize(50, 25))
        self.label_IDRecord.setMaximumSize(QtCore.QSize(50, 25))
        self.label_IDRecord.setObjectName("label_IDRecord")
        self.label_IDRecord.setText("")
        self.label_IDRecord.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_2.addWidget(self.label_IDRecord, 6, 2, 1, 1)
        self.label_Position = QtWidgets.QLabel(parent=self.frame)
        self.label_Position.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Position.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Position.setFont(font)
        self.label_Position.setObjectName("label_Position")
        self.gridLayout_2.addWidget(self.label_Position, 6, 5, 1, 1)
        self.Position_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Position_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.Position_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Position_SupplierOrder.setFont(font)
        self.Position_SupplierOrder.setReadOnly(True)
        self.Position_SupplierOrder.setObjectName("Position_SupplierOrder")
        self.gridLayout_2.addWidget(self.Position_SupplierOrder, 7, 5, 1, 1)
        self.label_Quantity = QtWidgets.QLabel(parent=self.frame)
        self.label_Quantity.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Quantity.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Quantity.setFont(font)
        self.label_Quantity.setObjectName("label_Quantity")
        self.gridLayout_2.addWidget(self.label_Quantity, 6, 6, 1, 1)
        self.Quantity_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Quantity_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.Quantity_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Quantity_SupplierOrder.setFont(font)
        self.Quantity_SupplierOrder.setReadOnly(True)
        self.Quantity_SupplierOrder.setObjectName("Quantity_SupplierOrder")
        self.gridLayout_2.addWidget(self.Quantity_SupplierOrder, 7, 6, 1, 1)
        self.label_Deliv1 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv1.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Deliv1.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Deliv1.setFont(font)
        self.label_Deliv1.setObjectName("label_Deliv1")
        self.gridLayout_2.addWidget(self.label_Deliv1, 6, 7, 1, 1)
        self.Deliv1_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv1_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.Deliv1_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Deliv1_SupplierOrder.setFont(font)
        self.Deliv1_SupplierOrder.setReadOnly(True)
        self.Deliv1_SupplierOrder.setObjectName("Deliv1_SupplierOrder")
        self.gridLayout_2.addWidget(self.Deliv1_SupplierOrder, 7, 7, 1, 1)
        self.label_Deliv2 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv2.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Deliv2.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Deliv2.setFont(font)
        self.label_Deliv2.setObjectName("label_Deliv2")
        self.gridLayout_2.addWidget(self.label_Deliv2, 6, 8, 1, 1)
        self.Deliv2_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv2_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.Deliv2_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Deliv2_SupplierOrder.setFont(font)
        self.Deliv2_SupplierOrder.setReadOnly(True)
        self.Deliv2_SupplierOrder.setObjectName("Deliv2_SupplierOrder")
        self.gridLayout_2.addWidget(self.Deliv2_SupplierOrder, 7, 8, 1, 1)
        self.label_Deliv3 = QtWidgets.QLabel(parent=self.frame)
        self.label_Deliv3.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Deliv3.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Deliv3.setFont(font)
        self.label_Deliv3.setObjectName("label_Deliv3")
        self.gridLayout_2.addWidget(self.label_Deliv3, 6, 9, 1, 1)
        self.Deliv3_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.Deliv3_SupplierOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.Deliv3_SupplierOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Deliv3_SupplierOrder.setFont(font)
        self.Deliv3_SupplierOrder.setReadOnly(True)
        self.Deliv3_SupplierOrder.setObjectName("Deliv3_SupplierOrder")
        self.gridLayout_2.addWidget(self.Deliv3_SupplierOrder, 7, 9, 1, 1)
        self.label_DateDeliv = QtWidgets.QLabel(parent=self.frame)
        self.label_DateDeliv.setMinimumSize(QtCore.QSize(105, 25))
        self.label_DateDeliv.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setItalic(True)
        self.label_DateDeliv.setFont(font)
        self.label_DateDeliv.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_DateDeliv.setObjectName("label_DateDeliv")
        self.gridLayout_2.addWidget(self.label_DateDeliv, 6, 10, 1, 1)
        self.label_NoteDeliv = QtWidgets.QLabel(parent=self.frame)
        self.label_NoteDeliv.setMinimumSize(QtCore.QSize(105, 25))
        self.label_NoteDeliv.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setItalic(True)
        self.label_NoteDeliv.setFont(font)
        self.label_NoteDeliv.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_NoteDeliv.setObjectName("label_NoteDeliv")
        self.gridLayout_2.addWidget(self.label_NoteDeliv, 7, 10, 1, 1)
        self.label_1Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_1Deliv.setMinimumSize(QtCore.QSize(70, 25))
        self.label_1Deliv.setMaximumSize(QtCore.QSize(70, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setItalic(True)
        self.label_1Deliv.setFont(font)
        self.label_1Deliv.setObjectName("label_1Deliv")
        self.gridLayout_2.addWidget(self.label_1Deliv, 5, 11, 1, 1)
        self.DelivDate1_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate1_SupplierOrder.setMinimumSize(QtCore.QSize(95, 25))
        self.DelivDate1_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivDate1_SupplierOrder.setFont(font)
        self.DelivDate1_SupplierOrder.setObjectName("DelivDate1_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivDate1_SupplierOrder, 6, 11, 1, 2)
        self.DelivNote1_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote1_SupplierOrder.setMinimumSize(QtCore.QSize(95, 25))
        self.DelivNote1_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivNote1_SupplierOrder.setFont(font)
        self.DelivNote1_SupplierOrder.setObjectName("DelivNote1_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivNote1_SupplierOrder, 7, 11, 1, 2)
        self.label_2Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_2Deliv.setMinimumSize(QtCore.QSize(70, 25))
        self.label_2Deliv.setMaximumSize(QtCore.QSize(70, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setItalic(True)
        self.label_2Deliv.setFont(font)
        self.label_2Deliv.setObjectName("label_2Deliv")
        self.gridLayout_2.addWidget(self.label_2Deliv, 5, 13, 1, 1)
        self.DelivDate2_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate2_SupplierOrder.setMinimumSize(QtCore.QSize(95, 25))
        self.DelivDate2_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivDate2_SupplierOrder.setFont(font)
        self.DelivDate2_SupplierOrder.setObjectName("DelivDate2_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivDate2_SupplierOrder, 6, 13, 1, 2)
        self.DelivNote2_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote2_SupplierOrder.setMinimumSize(QtCore.QSize(95, 25))
        self.DelivNote2_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivNote2_SupplierOrder.setFont(font)
        self.DelivNote2_SupplierOrder.setObjectName("DelivNote2_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivNote2_SupplierOrder, 7, 13, 1, 2)
        self.label_3Deliv = QtWidgets.QLabel(parent=self.frame)
        self.label_3Deliv.setMinimumSize(QtCore.QSize(70, 25))
        self.label_3Deliv.setMaximumSize(QtCore.QSize(70, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setItalic(True)
        self.label_3Deliv.setFont(font)
        self.label_3Deliv.setObjectName("label_3Deliv")
        self.gridLayout_2.addWidget(self.label_3Deliv, 5, 15, 1, 1)
        self.DelivDate3_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivDate3_SupplierOrder.setMinimumSize(QtCore.QSize(95, 25))
        self.DelivDate3_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivDate3_SupplierOrder.setFont(font)
        self.DelivDate3_SupplierOrder.setObjectName("DelivDate3_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivDate3_SupplierOrder, 6, 15, 1, 2)
        self.DelivNote3_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame)
        self.DelivNote3_SupplierOrder.setMinimumSize(QtCore.QSize(95, 25))
        self.DelivNote3_SupplierOrder.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DelivNote3_SupplierOrder.setFont(font)
        self.DelivNote3_SupplierOrder.setObjectName("DelivNote3_SupplierOrder")
        self.gridLayout_2.addWidget(self.DelivNote3_SupplierOrder, 7, 15, 1, 2)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/Check.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Deliv1 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv1.setMinimumSize(QtCore.QSize(25, 25))
        self.Button_Deliv1.setMaximumSize(QtCore.QSize(25, 25))
        self.Button_Deliv1.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Deliv1.setIcon(icon1)
        self.Button_Deliv1.setObjectName("Button_Deliv1")
        self.gridLayout_2.addWidget(self.Button_Deliv1, 5, 12, 1, 1)
        self.Button_Deliv2 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv2.setMinimumSize(QtCore.QSize(25, 25))
        self.Button_Deliv2.setMaximumSize(QtCore.QSize(25, 25))
        self.Button_Deliv2.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Deliv2.setIcon(icon1)
        self.Button_Deliv2.setObjectName("Button_Deliv2")
        self.gridLayout_2.addWidget(self.Button_Deliv2, 5, 14, 1, 1)
        self.Button_Deliv3 = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deliv3.setMinimumSize(QtCore.QSize(25, 25))
        self.Button_Deliv3.setMaximumSize(QtCore.QSize(25, 25))
        self.Button_Deliv3.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Deliv3.setIcon(icon1)
        self.Button_Deliv3.setObjectName("Button_Deliv3")
        self.gridLayout_2.addWidget(self.Button_Deliv3, 5, 16, 1, 1)
        self.Button_CreateOrder = QtWidgets.QPushButton(parent=self.frame)
        self.Button_CreateOrder.setMinimumSize(QtCore.QSize(175, 35))
        self.Button_CreateOrder.setMaximumSize(QtCore.QSize(175, 35))
        self.Button_CreateOrder.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_CreateOrder.setObjectName("Button_CreateOrder")
        self.gridLayout_2.addWidget(self.Button_CreateOrder, 1, 17, 1, 1)
        self.Button_ModifyOrder = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyOrder.setMinimumSize(QtCore.QSize(175, 35))
        self.Button_ModifyOrder.setMaximumSize(QtCore.QSize(175, 35))
        self.Button_ModifyOrder.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_ModifyOrder.setObjectName("Button_ModifyOrder")
        self.gridLayout_2.addWidget(self.Button_ModifyOrder, 2, 17, 1, 1)
        self.Button_AddRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddRecord.setMinimumSize(QtCore.QSize(175, 35))
        self.Button_AddRecord.setMaximumSize(QtCore.QSize(175, 35))
        self.Button_AddRecord.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_AddRecord.setObjectName("Button_AddRecord")
        self.gridLayout_2.addWidget(self.Button_AddRecord, 6, 17, 1, 1)
        self.Button_ModifyRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyRecord.setMinimumSize(QtCore.QSize(175, 35))
        self.Button_ModifyRecord.setMaximumSize(QtCore.QSize(175, 35))
        self.Button_ModifyRecord.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_ModifyRecord.setObjectName("Button_ModifyRecord")
        self.gridLayout_2.addWidget(self.Button_ModifyRecord, 7, 17, 1, 1)
        self.label_Details = QtWidgets.QLabel(parent=self.frame)
        self.label_Details.setMinimumSize(QtCore.QSize(75, 25))
        self.label_Details.setMaximumSize(QtCore.QSize(75, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Details.setFont(font)
        self.label_Details.setObjectName("label_Details")
        self.gridLayout_2.addWidget(self.label_Details, 7, 1, 1, 1)
        self.tableRecords = CustomTableWidget()
        self.tableRecords.setObjectName("tableRecords")
        self.tableRecords.setColumnCount(12)
        self.tableRecords.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(11, item)
        self.gridLayout_2.addWidget(self.tableRecords, 12, 1, 1, 17)
        self.Coms_SupplierOrder = QtWidgets.QTextEdit(parent=self.frame)
        self.Coms_SupplierOrder.setMinimumSize(QtCore.QSize(0, 80))
        self.Coms_SupplierOrder.setMaximumSize(QtCore.QSize(1300, 80))
        self.Coms_SupplierOrder.setReadOnly(True)
        self.Coms_SupplierOrder.setObjectName("Coms_SupplierOrder")
        self.gridLayout_2.addWidget(self.Coms_SupplierOrder, 13, 1, 1, 16)
        self.label_FinalCom = QtWidgets.QLabel(parent=self.frame)
        self.label_FinalCom.setMinimumSize(QtCore.QSize(75, 25))
        self.label_FinalCom.setMaximumSize(QtCore.QSize(75, 25))
        self.label_FinalCom.setObjectName("label_FinalCom")
        self.gridLayout_2.addWidget(self.label_FinalCom, 14, 1, 1, 1)
        self.FinalComs_SupplierOrder = QtWidgets.QTextEdit(parent=self.frame)
        self.FinalComs_SupplierOrder.setMinimumSize(QtCore.QSize(0, 60))
        self.FinalComs_SupplierOrder.setMaximumSize(QtCore.QSize(1220, 60))
        self.FinalComs_SupplierOrder.setReadOnly(True)
        self.FinalComs_SupplierOrder.setObjectName("FinalComs_SupplierOrder")
        self.gridLayout_2.addWidget(self.FinalComs_SupplierOrder, 14, 2, 2, 15)
        self.frame_2 = QtWidgets.QFrame(parent=self.frame)
        self.frame_2.setMaximumSize(QtCore.QSize(175, 16777215))
        self.frame_2.setStyleSheet(".QFrame {\n"
"    border: 1px solid black;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_Total = QtWidgets.QLabel(parent=self.frame_2)
        self.label_Total.setMinimumSize(QtCore.QSize(150, 25))
        self.label_Total.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_Total.setFont(font)
        self.label_Total.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_Total.setObjectName("label_Total")
        self.verticalLayout.addWidget(self.label_Total)
        self.Total_SupplierOrder = QtWidgets.QLineEdit(parent=self.frame_2)
        self.Total_SupplierOrder.setMinimumSize(QtCore.QSize(150, 25))
        self.Total_SupplierOrder.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.Total_SupplierOrder.setFont(font)
        self.Total_SupplierOrder.setReadOnly(True)
        self.Total_SupplierOrder.setObjectName("Total_SupplierOrder")
        self.Total_SupplierOrder.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.verticalLayout.addWidget(self.Total_SupplierOrder)
        self.gridLayout_2.addWidget(self.frame_2, 13, 17, 1, 1)
        self.Currency_SupplierOrder = QtWidgets.QComboBox(parent=self.frame)
        self.Currency_SupplierOrder.setMinimumSize(QtCore.QSize(175, 25))
        self.Currency_SupplierOrder.setMaximumSize(QtCore.QSize(175, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.Currency_SupplierOrder.setFont(font)
        self.Currency_SupplierOrder.setObjectName("Currency_SupplierOrder")
        self.gridLayout_2.addWidget(self.Currency_SupplierOrder, 14, 17, 1, 1)
        self.Button_Print = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Print.setMinimumSize(QtCore.QSize(175, 35))
        self.Button_Print.setMaximumSize(QtCore.QSize(175, 35))
        self.Button_Print.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Print.setObjectName("Button_Print")
        self.gridLayout_2.addWidget(self.Button_Print, 15, 17, 1, 1)
        self.tableSupplierOrders = CustomTableWidget()
        self.tableSupplierOrders.setObjectName("tableSupplierOrders")
        self.tableSupplierOrders.setColumnCount(18)
        self.tableSupplierOrders.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableSupplierOrders.setHorizontalHeaderItem(17, item)
        self.gridLayout_2.addWidget(self.tableSupplierOrders, 16, 1, 1, 17)
        self.gridLayout.addWidget(self.frame, 1, 0, 1, 1)
        SupplierOrder_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=SupplierOrder_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1534, 22))
        self.menubar.setObjectName("menubar")
        SupplierOrder_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=SupplierOrder_Window)
        self.statusbar.setObjectName("statusbar")
        SupplierOrder_Window.setStatusBar(self.statusbar)
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableSupplierOrders.setSortingEnabled(False)
        self.tableSupplierOrders.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")

        self.retranslateUi(SupplierOrder_Window)
        QtCore.QMetaObject.connectSlotsByName(SupplierOrder_Window)

        commands_suppliers = "SELECT * FROM purch_fact.suppliers_test ORDER BY purch_fact.suppliers_test.name"
        commands_supplies = "SELECT * FROM purch_fact.supplies_test"
        commands_currency = "SELECT * FROM purch_fact.currency ORDER BY id"
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_suppliers)
            results_suppliers=cur.fetchall()
            cur.execute(commands_supplies)
            results_supplies=cur.fetchall()
            cur.execute(commands_currency)
            results_currency=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        list_suppliers=[x[1] for x in results_suppliers]
        self.Supplier_SupplierOrder.addItems(list_suppliers)

        list_supplies=[x[3] + ' | ' + x[4] for x in results_supplies]
        self.Supply_SupplierOrder.addItems(list_supplies)

        list_currency=[x[2] + ' | ' + x[4] for x in results_currency]
        self.Currency_SupplierOrder.addItems(list_currency)

        self.tableSupplierOrders.itemClicked.connect(self.loadformorder)
        self.tableRecords.itemClicked.connect(self.loadformsupply)
        # # # self.tableClients.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        # self.Button_CreateOrder.clicked.connect(self.createorder)
        # self.Button_ModifyOrder.clicked.connect(self.modifyorder)
        # self.Button_AddRecord.clicked.connect(self.addrecord)
        # self.Button_ModifyRecord.clicked.connect(self.modifyrecord)
        self.Button_Deliv1.clicked.connect(self.adddeliv1)
        self.Button_Deliv2.clicked.connect(self.adddeliv2)
        self.Button_Deliv3.clicked.connect(self.adddeliv3)
        self.Supply_SupplierOrder.currentIndexChanged.connect(self.loadstocks)
        # self.Button_Print.clicked.connect(self.printsupplierorder)
        self.tableRecords.horizontalHeader().sectionClicked.connect(self.on_headerrecords_section_clicked)
        self.tableSupplierOrders.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.loadtableorders()


    def retranslateUi(self, SupplierOrder_Window):
        _translate = QtCore.QCoreApplication.translate
        SupplierOrder_Window.setWindowTitle(_translate("SupplierOrder_Window", "Pedido Proveedor"))
        self.Button_ModifyRecord.setText(_translate("SupplierOrder_Window", "Modificar Reg"))
        item = self.tableRecords.horizontalHeaderItem(0)
        item.setText(_translate("SupplierOrder_Window", "ID"))
        item = self.tableRecords.horizontalHeaderItem(1)
        item.setText(_translate("SupplierOrder_Window", "Pos."))
        item = self.tableRecords.horizontalHeaderItem(2)
        item.setText(_translate("SupplierOrder_Window", "Insumo"))
        item = self.tableRecords.horizontalHeaderItem(3)
        item.setText(_translate("SupplierOrder_Window", "Descripción"))
        item = self.tableRecords.horizontalHeaderItem(4)
        item.setText(_translate("SupplierOrder_Window", "Cantidad"))
        item = self.tableRecords.horizontalHeaderItem(5)
        item.setText(_translate("SupplierOrder_Window", "Valor Un."))
        item = self.tableRecords.horizontalHeaderItem(6)
        item.setText(_translate("SupplierOrder_Window", "%DCTO."))
        item = self.tableRecords.horizontalHeaderItem(7)
        item.setText(_translate("SupplierOrder_Window", "Sbtot."))
        item = self.tableRecords.horizontalHeaderItem(8)
        item.setText(_translate("SupplierOrder_Window", "Pendiente"))
        item = self.tableRecords.horizontalHeaderItem(9)
        item.setText(_translate("SupplierOrder_Window", "Cant 1"))
        item = self.tableRecords.horizontalHeaderItem(10)
        item.setText(_translate("SupplierOrder_Window", "Cant 2"))
        item = self.tableRecords.horizontalHeaderItem(11)
        item.setText(_translate("SupplierOrder_Window", "Cant 3"))
        self.Button_ModifyOrder.setText(_translate("SupplierOrder_Window", "Modificar Pedido"))
        self.label_Total.setText(_translate("SupplierOrder_Window", "Total del pedido:"))
        self.label_Supplier.setText(_translate("SupplierOrder_Window", "Proveedor:"))
        item = self.tableSupplierOrders.horizontalHeaderItem(0)
        item.setText(_translate("SupplierOrder_Window", "ID"))
        item = self.tableSupplierOrders.horizontalHeaderItem(1)
        item.setText(_translate("SupplierOrder_Window", "Nº Pedido"))
        item = self.tableSupplierOrders.horizontalHeaderItem(2)
        item.setText(_translate("SupplierOrder_Window", "Proveedor"))
        item = self.tableSupplierOrders.horizontalHeaderItem(3)
        item.setText(_translate("SupplierOrder_Window", "Fecha Pedido"))
        item = self.tableSupplierOrders.horizontalHeaderItem(4)
        item.setText(_translate("SupplierOrder_Window", "Fecha Entrega"))
        item = self.tableSupplierOrders.horizontalHeaderItem(5)
        item.setText(_translate("SupplierOrder_Window", "S/Referencia"))
        item = self.tableSupplierOrders.horizontalHeaderItem(6)
        item.setText(_translate("SupplierOrder_Window", "Obs."))
        item = self.tableSupplierOrders.horizontalHeaderItem(7)
        item.setText(_translate("SupplierOrder_Window", "Plazo Entrega"))
        item = self.tableSupplierOrders.horizontalHeaderItem(8)
        item.setText(_translate("SupplierOrder_Window", "Forma Envío"))
        item = self.tableSupplierOrders.horizontalHeaderItem(9)
        item.setText(_translate("SupplierOrder_Window", "Comentario"))
        item = self.tableSupplierOrders.horizontalHeaderItem(10)
        item.setText(_translate("SupplierOrder_Window", "Com Final"))
        item = self.tableSupplierOrders.horizontalHeaderItem(11)
        item.setText(_translate("SupplierOrder_Window", "Forma Pago"))
        item = self.tableSupplierOrders.horizontalHeaderItem(12)
        item.setText(_translate("SupplierOrder_Window", "F. 1ª Entr."))
        item = self.tableSupplierOrders.horizontalHeaderItem(13)
        item.setText(_translate("SupplierOrder_Window", "A. 1ª Entr."))
        item = self.tableSupplierOrders.horizontalHeaderItem(14)
        item.setText(_translate("SupplierOrder_Window", "F. 2ª Entr."))
        item = self.tableSupplierOrders.horizontalHeaderItem(15)
        item.setText(_translate("SupplierOrder_Window", "A. 2ª Entr."))
        item = self.tableSupplierOrders.horizontalHeaderItem(16)
        item.setText(_translate("SupplierOrder_Window", "F. 3ª Entr."))
        item = self.tableSupplierOrders.horizontalHeaderItem(17)
        item.setText(_translate("SupplierOrder_Window", "A. 3ª Ent."))
        self.Button_Print.setText(_translate("SupplierOrder_Window", "IMPRIMIR"))
        self.label_TheirRef.setText(_translate("SupplierOrder_Window", "S/Referencia:"))
        self.Button_AddRecord.setText(_translate("SupplierOrder_Window", "Agregar Reg."))
        self.label_Stock.setText(_translate("SupplierOrder_Window", "Stock:"))
        self.label_Quantity.setText(_translate("SupplierOrder_Window", "Cantidad:"))
        self.label_NumOrder.setText(_translate("SupplierOrder_Window", "Nº Pedido:"))
        self.label_Deliv2.setText(_translate("SupplierOrder_Window", "Entrega 2:"))
        self.label_Details.setText(_translate("SupplierOrder_Window", "Detalle:"))
        self.label_StockVrt.setText(_translate("SupplierOrder_Window", "Stock Vrt.:"))
        self.label_Deliv3.setText(_translate("SupplierOrder_Window", "Entrega 3:"))
        self.Button_CreateOrder.setText(_translate("SupplierOrder_Window", "Crear Pedido"))
        self.label_Obs.setText(_translate("SupplierOrder_Window", "Obs:"))
        self.label_Supply.setText(_translate("SupplierOrder_Window", "Insumo:"))
        self.label_Date.setText(_translate("SupplierOrder_Window", "Fecha:"))
        self.label_StockDsp.setText(_translate("SupplierOrder_Window", "Stock Dsp.:"))
        self.label_DelivDate.setText(_translate("SupplierOrder_Window", "Fecha Entega:"))
        self.label_DelivWay.setText(_translate("SupplierOrder_Window", "Forma Envío:"))
        self.label_Deliv1.setText(_translate("SupplierOrder_Window", "Entrega 1:"))
        self.label_3Deliv.setText(_translate("SupplierOrder_Window", "3ª Entrega"))
        self.label_2Deliv.setText(_translate("SupplierOrder_Window", "2ª Entrega"))
        self.label_1Deliv.setText(_translate("SupplierOrder_Window", "1ª Entrega"))
        self.label_DateDeliv.setText(_translate("SupplierOrder_Window", "Fecha"))
        self.label_NoteDeliv.setText(_translate("SupplierOrder_Window", "Albarán"))
        self.label_DelivTerm.setText(_translate("SupplierOrder_Window", "Plazo Entrega:"))
        self.label_PayWay.setText(_translate("SupplierOrder_Window", "Forma Pago:"))
        self.label_FinalCom.setText(_translate("SupplierOrder_Window", "Coment. Final:"))
        self.label_UnitValue.setText(_translate("SupplierOrder_Window", "Valor Un.:"))
        self.label_Discount.setText(_translate("SupplierOrder_Window", "% Dcto.:"))
        self.label_Position.setText(_translate("SupplierOrder_Window", "Posición:"))


# # Function to create order
#     def createorder(self):
#         num_order=self.NumOrder_SupplierOrder.text()
#         supplier_name=self.Supplier_SupplierOrder.currentText()
#         delivway=self.DelivWay_SupplierOrder.text()
#         payway=self.PayWay_SupplierOrder.text()
#         order_date=self.Date_SupplierOrder.text()
#         their_ref=self.TheirRef_SupplierOrder.text()
#         delivdate=self.DelivDate_SupplierOrder.text()
#         delivterm=self.DelivTerm_SupplierOrder.text()
#         order_obs=self.OrderObs_SupplierOrder.toPlainText()
#         order_com=self.Coms_SupplierOrder.toPlainText()
#         order_finalcoms=self.FinalComs_SupplierOrder.toPlainText()
#         currency=self.Currency_SupplierOrder.currentText()[0]
#         total=self.Total_SupplierOrder.text()

#         if order_date=="" or (order_date==" " or (num_order==" " or num_order=="")):
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Crear Pedido")
#             dlg.setText("Rellena la fecha y el número de pédido")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg, new_icon

#         elif not self.is_valid_date(order_date):
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Crear Pedido")
#             dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg, new_icon

#         elif not self.is_valid_date(delivdate):
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Crear Pedido")
#             dlg.setText("La fecha de entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg, new_icon

#         else:
#             commands_neworder=("""
#                             INSERT INTO purch_fact.supplier_ord_header_test (
#                             supplier_id, order_date, delivery_date, notes, supplier_order_num, their_ref,
#                             delivery_way, pay_way, delivery_term, order_com, total_amount, final_comment, currency_id
#                             )
#                             VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
#                             """)
#             conn = None
#             try:
#             # read the connection parameters
#                 params = config()
#             # connect to the PostgreSQL server
#                 conn = psycopg2.connect(**params)
#                 cur = conn.cursor()
#             # execution of commands
#                 query_supplier = "SELECT id FROM purch_fact.suppliers_test WHERE name = %s"
#                 cur.execute(query_supplier, (supplier_name,))
#                 result_supplier = cur.fetchone()

#                 query_currency = "SELECT id FROM purch_fact.currency WHERE symbol_currency = %s"
#                 cur.execute(query_currency, (currency,))
#                 result_currency = cur.fetchone()
#             # get id from table
#                 supplier_id = result_supplier[0]
#                 currency_id = result_currency[0]
#             # execution of principal command
#                 data=(supplier_id,order_date,delivdate,order_obs,num_order,their_ref,delivway,payway,delivterm,order_com,total,order_finalcoms,currency_id,)
#                 cur.execute(commands_neworder, data)
#             # close communication with the PostgreSQL database server
#                 cur.close()
#             # commit the changes
#                 conn.commit()

#                 dlg = QtWidgets.QMessageBox()
#                 new_icon = QtGui.QIcon()
#                 new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#                 dlg.setWindowIcon(new_icon)
#                 dlg.setWindowTitle("Crear Pedido Proveedor")
#                 dlg.setText("Pedido creado con éxito")
#                 dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
#                 dlg.exec()

#                 del dlg,new_icon

#             except (Exception, psycopg2.DatabaseError) as error:
#                 print(error)
#             finally:
#                 if conn is not None:
#                     conn.close()

#             self.loadtableorders()

#             conn = None
#             try:
#             # read the connection parameters
#                 params = config()
#             # connect to the PostgreSQL server
#                 conn = psycopg2.connect(**params)
#                 cur = conn.cursor()
#             # execution of commands
#                 query_idorder = "SELECT id FROM purch_fact.supplier_ord_header_test ORDER BY id"
#                 cur.execute(query_idorder)
#                 result_idorder = cur.fetchall()

#             # get id from table
#                 idorder = result_idorder[-1][0]
#                 self.label_IDOrd.setText(str(idorder))
#             # close communication with the PostgreSQL database server
#                 cur.close()
#             # commit the changes
#                 conn.commit()

#             except (Exception, psycopg2.DatabaseError) as error:
#                 print(error)
#             finally:
#                 if conn is not None:
#                     conn.close()


# # Function to modify order data
#     def modifyorder(self):
#         order_id=self.label_IDOrd.text()
#         num_order=self.NumOrder_SupplierOrder.text()
#         supplier_name=self.Supplier_SupplierOrder.currentText()
#         delivway=self.DelivWay_SupplierOrder.text()
#         payway=self.PayWay_SupplierOrder.text()
#         order_date=self.Date_SupplierOrder.text()
#         their_ref=self.TheirRef_SupplierOrder.text()
#         delivdate=self.DelivDate_SupplierOrder.text()
#         delivterm=self.DelivTerm_SupplierOrder.text()
#         order_obs=self.OrderObs_SupplierOrder.toPlainText()
#         order_com=self.Coms_SupplierOrder.toPlainText()
#         order_finalcoms=self.FinalComs_SupplierOrder.toPlainText()
#         currency=self.Currency_SupplierOrder.currentText()[0]
#         total=self.Total_SupplierOrder.text()

#         if order_id=="" or (order_date==" " or order_date==""):
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Modificar Pedido")
#             dlg.setText("Selecciona un pedido existente e introduce una fecha válida")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg, new_icon

#         elif not self.is_valid_date(order_date):
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Crear Pedido")
#             dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg, new_icon

#         elif not self.is_valid_date(delivdate):
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Crear Pedido")
#             dlg.setText("La fecha de entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg, new_icon

#         else:
#             commands_updateorder = ("""
#                         UPDATE purch_fact.supplier_ord_header_test
#                         SET "supplier_id" = %s, "order_date" = %s, "delivery_date" = %s, "notes" = %s, "supplier_order_num" = %s, "their_ref" = %s,
#                         "delivery_way" = %s, "pay_way" = %s, "delivery_term" = %s, "order_com" = %s, "total_amount" = %s, "final_comment" = %s, "currency_id" = %s
#                         WHERE "id" = %s
#                         """)
#             conn = None
#             try:
#             # read the connection parameters
#                 params = config()
#             # connect to the PostgreSQL server
#                 conn = psycopg2.connect(**params)
#                 cur = conn.cursor()
#             # execution of commands
#                 query_supplier = "SELECT id FROM purch_fact.suppliers_test WHERE name = %s"
#                 cur.execute(query_supplier, (supplier_name,))
#                 result_supplier = cur.fetchone()

#                 query_currency = "SELECT id FROM purch_fact.currency WHERE symbol_currency = %s"
#                 cur.execute(query_currency, (currency,))
#                 result_currency = cur.fetchone()
#             # get id from table
#                 supplier_id = result_supplier[0]
#                 currency_id = result_currency[0]
#             # execution of principal command
#                 data=(supplier_id,order_date,delivdate,order_obs,num_order,their_ref,delivway,payway,delivterm,order_com,total,order_finalcoms,currency_id,order_id,)
#                 cur.execute(commands_updateorder, data)
#             # close communication with the PostgreSQL database server
#                 cur.close()
#             # commit the changes
#                 conn.commit()

#                 dlg = QtWidgets.QMessageBox()
#                 new_icon = QtGui.QIcon()
#                 new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#                 dlg.setWindowIcon(new_icon)
#                 dlg.setWindowTitle("Modificar Pedido Proveedor")
#                 dlg.setText("Pedido modificado con éxito")
#                 dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
#                 dlg.exec()

#                 del dlg,new_icon

#             except (Exception, psycopg2.DatabaseError) as error:
#                 print(error)
#             finally:
#                 if conn is not None:
#                     conn.close()

#             self.loadtableorders()


# # Function to create record
#     def addrecord(self):
#         order_id=self.label_IDOrd.text()
#         supply_name=self.Supply_SupplierOrder.currentText()
#         supply_name=supply_name[:supply_name.find(" |")]
#         unit_value=self.UnitValue_SupplierOrder.text()
#         unit_value=unit_value.replace(".",",")
#         discount=self.Discount_SupplierOrder.text() if self.Discount_SupplierOrder.text() not in [""," "] else 0
#         position=self.Position_SupplierOrder.text()
#         quantity=self.Quantity_SupplierOrder.text()
#         deliv_quant_1=self.Deliv1_SupplierOrder.text() if self.Deliv1_SupplierOrder.text() not in [""," "] else 0
#         deliv_quant_2=self.Deliv2_SupplierOrder.text() if self.Deliv2_SupplierOrder.text() not in [""," "] else 0
#         deliv_quant_3=self.Deliv3_SupplierOrder.text() if self.Deliv3_SupplierOrder.text() not in [""," "] else 0

#         conn = None
#         try:
#         # read the connection parameters
#             params = config()
#         # connect to the PostgreSQL server
#             conn = psycopg2.connect(**params)
#             cur = conn.cursor()
#         # execution of commands
#             query_checkposition = "SELECT * FROM purch_fact.supplier_ord_detail_test WHERE (position_supply = %s AND supplier_ord_header_id= %s)"
#             cur.execute(query_checkposition, (position, order_id,))
#             result_position = cur.fetchall()
#         # close communication with the PostgreSQL database server
#             cur.close()
#         # commit the changes
#             conn.commit()

#         except (Exception, psycopg2.DatabaseError) as error:
#             print(error)
#         finally:
#             if conn is not None:
#                 conn.close()

#         if order_id == "":
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Agregar Registros")
#             dlg.setText("Por favor, para añadir registros elige un pedido existente o crea uno nuevo")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg,new_icon

#         elif quantity == "" or (quantity == "" or (quantity == 0 or (position == "" or (position ==" " or position == 0)))):
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Agregar Registros")
#             dlg.setText("Añade una cantidad válida de elementos y una posición válida y mayor que 0")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg,new_icon

#         elif len(result_position)>0:
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Agregar Registros")
#             dlg.setText("Esa posición ya existe. Elige otra")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg,new_icon

#         else:
#             commands_newrecord = ("""
#                                 INSERT INTO purch_fact.supplier_ord_detail_test (
#                                 supplier_ord_header_id,position_supply,supply_id,unit_value,
#                                 discount,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3
#                                 )
#                                 VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)
#                                 """)
#             conn = None
#             try:
#             # read the connection parameters
#                 params = config()
#             # connect to the PostgreSQL server
#                 conn = psycopg2.connect(**params)
#                 cur = conn.cursor()
#             # execution of commands
#                 query_supplyid = "SELECT id, pending_stock FROM purch_fact.supplies_test WHERE reference = %s"
#                 cur.execute(query_supplyid, (supply_name,))
#                 result_supplyid = cur.fetchone()

#             # get id from table
#                 supply_id = result_supplyid[0]
#                 pending_stock = result_supplyid[1]
#                 new_pending_stock = str(float(pending_stock) + float(quantity))

#                 query_pending_stock = ("""UPDATE purch_fact.supplies_test
#                                         SET "pending_stock" = %s 
#                                         WHERE "reference" = %s""")
#                 cur.execute(query_pending_stock, (new_pending_stock,supply_name,))
#             # execution of principal command
#                 data=(order_id,position,supply_id,unit_value,discount,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3,)
#                 cur.execute(commands_newrecord, data)
#             # close communication with the PostgreSQL database server
#                 cur.close()
#             # commit the changes
#                 conn.commit()

#             except (Exception, psycopg2.DatabaseError) as error:
#                 print(error)
#             finally:
#                 if conn is not None:
#                     conn.close()

#             self.loadtablerecords()
#             self.calculate_totalorder()
#             self.loadstocks()


# # Function to modify record data
    # def modifyrecord(self):
    #     record_id=self.label_IDRecord.text()
    #     supply_name=self.Supply_SupplierOrder.currentText()
    #     supply_name=supply_name[:supply_name.find(" |")]
    #     unit_value=self.UnitValue_SupplierOrder.text()
    #     unit_value=unit_value.replace(".",",")
    #     discount=self.Discount_SupplierOrder.text().replace(" %", "") if " %" in self.Discount_SupplierOrder.text() else (self.Discount_SupplierOrder.text() if self.Discount_SupplierOrder.text() not in [""," "] else 0)
    #     position=self.Position_SupplierOrder.text()
    #     quantity=self.Quantity_SupplierOrder.text()
    #     deliv_quant_1=self.Deliv1_SupplierOrder.text() if self.Deliv1_SupplierOrder.text() not in [""," "] else 0
    #     deliv_quant_2=self.Deliv2_SupplierOrder.text() if self.Deliv2_SupplierOrder.text() not in [""," "] else 0
    #     deliv_quant_3=self.Deliv3_SupplierOrder.text() if self.Deliv3_SupplierOrder.text() not in [""," "] else 0

    #     if record_id == "":
    #         dlg = QtWidgets.QMessageBox()
    #         new_icon = QtGui.QIcon()
    #         new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    #         dlg.setWindowIcon(new_icon)
    #         dlg.setWindowTitle("Modificar Registros")
    #         dlg.setText("Selecciona un registro existente")
    #         dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
    #         dlg.exec()
    #         del dlg,new_icon

    #     elif position == "" or (position ==" " or position == 0):
    #         dlg = QtWidgets.QMessageBox()
    #         new_icon = QtGui.QIcon()
    #         new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    #         dlg.setWindowIcon(new_icon)
    #         dlg.setWindowTitle("Modificar Registros")
    #         dlg.setText("Elige una posición válida y mayor que 0")
    #         dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
    #         dlg.exec()
    #         del dlg,new_icon

    #     else:
    #         commands_modifyrecord = ("""
    #                     UPDATE purch_fact.supplier_ord_detail_test
    #                     SET "position_supply" = %s, "supply_id" = %s, "unit_value" = %s, "discount" = %s,
    #                     "quantity" = %s, "deliv_quant_1" = %s, "deliv_quant_2" = %s, "deliv_quant_3" = %s
    #                     WHERE "id" = %s
    #                     """)
    #         conn = None
    #         try:
    #         # read the connection parameters
    #             params = config()
    #         # connect to the PostgreSQL server
    #             conn = psycopg2.connect(**params)
    #             cur = conn.cursor()
    #         # execution of commands
    #             query_supplyid = ("""SELECT id, physical_stock, pending_stock, available_stock
    #                                 FROM purch_fact.supplies_test
    #                                 WHERE reference = %s""")
    #             cur.execute(query_supplyid, (supply_name,))
    #             result_supplyid = cur.fetchone()

    #             query_quantitysupply = ("""SELECT pending, deliv_quant_1, deliv_quant_2, deliv_quant_3
    #                                     FROM purch_fact.supplier_ord_detail_test
    #                                     WHERE id = %s""")
    #             cur.execute(query_quantitysupply, (record_id,))
    #             result_quantity = cur.fetchone()
    #         # get id from table
    #             supply_id = result_supplyid[0]
    #             stock = result_supplyid[1]
    #             pending_stock = result_supplyid[2]
    #             available_stock = result_supplyid[3]

    #             old_pending = result_quantity[0]
    #             old_quant_deliv_1 = result_quantity[1]
    #             old_quant_deliv_2 = result_quantity[2]
    #             old_quant_deliv_3 = result_quantity[3]

    #             new_quant_deliv = float(deliv_quant_1) + float(deliv_quant_2) + float(deliv_quant_3)
    #             old_quant_deliv = float(old_quant_deliv_1) + float(old_quant_deliv_2) + float(old_quant_deliv_3)

    #             new_pending = float(quantity) - new_quant_deliv

    #             new_stock= str(float(stock) - old_quant_deliv + new_quant_deliv)
    #             new_pending_stock = str(float(pending_stock) - float(old_pending) + float(new_pending))
    #             new_available_stock= str(float(available_stock) - old_quant_deliv + new_quant_deliv)

    #             query_pending_stock = ("""UPDATE purch_fact.supplies_test
    #                                     SET "physical_stock" = %s, "pending_stock" = %s, "available_stock" = %s 
    #                                     WHERE "reference" = %s""")
    #             cur.execute(query_pending_stock, (new_stock,new_pending_stock,new_available_stock,supply_name,))
    #         # execution of principal command
    #             data=(position,supply_id,unit_value,discount,quantity,deliv_quant_1,deliv_quant_2,deliv_quant_3,record_id,)
    #             cur.execute(commands_modifyrecord, data)

    #         # close communication with the PostgreSQL database server
    #             cur.close()
    #         # commit the changes
    #             conn.commit()

    #         except (Exception, psycopg2.DatabaseError) as error:
    #             print(error)
    #         finally:
    #             if conn is not None:
    #                 conn.close()

    #         self.loadtablerecords()
    #         self.calculate_totalorder()
    #         self.loadstocks()


# Function to load client order form
    def loadformorder(self,item):
        data_order=[]

        for column in range(18):
            item_text=self.tableSupplierOrders.item(item.row(), column).text()
            data_order.append(item_text)

        self.label_IDOrd.setText(data_order[0])
        self.NumOrder_SupplierOrder.setText(data_order[1])
        self.Supplier_SupplierOrder.setCurrentText(data_order[2])
        self.Date_SupplierOrder.setText(data_order[3])
        self.DelivDate_SupplierOrder.setText(data_order[4])
        self.TheirRef_SupplierOrder.setText(data_order[5])
        self.OrderObs_SupplierOrder.setText(data_order[6])
        self.DelivTerm_SupplierOrder.setText(data_order[7])
        self.DelivWay_SupplierOrder.setText(data_order[8])
        self.Coms_SupplierOrder.setText(data_order[9])
        self.FinalComs_SupplierOrder.setText(data_order[10])
        self.PayWay_SupplierOrder.setText(data_order[11])
        self.DelivDate1_SupplierOrder.setText(data_order[12] if data_order[12] != "None" else "")
        self.DelivNote1_SupplierOrder.setText(data_order[13] if data_order[13] != "None" else "")
        self.DelivDate2_SupplierOrder.setText(data_order[14] if data_order[14] != "None" else "")
        self.DelivNote2_SupplierOrder.setText(data_order[15] if data_order[15] != "None" else "")
        self.DelivDate3_SupplierOrder.setText(data_order[16] if data_order[16] != "None" else "")
        self.DelivNote3_SupplierOrder.setText(data_order[17] if data_order[17] != "None" else "")

        self.label_IDRecord.setText("")
        self.Position_SupplierOrder.setText("")
        self.Supply_SupplierOrder.setCurrentText("- - - - - | - - - - -")
        self.Quantity_SupplierOrder.setText("")
        self.UnitValue_SupplierOrder.setText("")
        self.Discount_SupplierOrder.setText("")
        self.Deliv1_SupplierOrder.setText("")
        self.Deliv2_SupplierOrder.setText("")
        self.Deliv3_SupplierOrder.setText("")
        self.Stock_SupplierOrder.setText("")
        self.StockDsp_SupplierOrder.setText("")
        self.StockVrt_SupplierOrder.setText("")

        self.loadtablerecords()
        self.calculate_totalorder()


# Function to load record form
    def loadformsupply(self,item):
        data_supply=[]

        for column in range(12):
            item_text=self.tableRecords.item(item.row(), column).text()
            data_supply.append(item_text)

        self.label_IDRecord.setText(data_supply[0])
        self.Position_SupplierOrder.setText(data_supply[1])
        self.Supply_SupplierOrder.setCurrentText(data_supply[2] + " | " + data_supply[3])
        self.Quantity_SupplierOrder.setText(data_supply[4])
        self.UnitValue_SupplierOrder.setText(data_supply[5])
        self.Discount_SupplierOrder.setText(data_supply[6])
        self.Deliv1_SupplierOrder.setText(data_supply[9])
        self.Deliv2_SupplierOrder.setText(data_supply[10])
        self.Deliv3_SupplierOrder.setText(data_supply[11])

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            query_stocks = "SELECT physical_stock, available_stock, pending_stock FROM purch_fact.supplies_test WHERE reference = %s"
            cur.execute(query_stocks, (data_supply[2],))
            result_stocks = cur.fetchone()

        # get id from table
            stock = result_stocks[0]
            available = result_stocks[1]
            pending = result_stocks[2]

            self.Stock_SupplierOrder.setText(str(stock))
            self.StockDsp_SupplierOrder.setText(str(available))
            self.StockVrt_SupplierOrder.setText(str(round(available + pending,4)))

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


# Function to load table of orders
    def loadtableorders(self):
        commands_querytableorders = ("""
                        SELECT purch_fact.supplier_ord_header_test.id,
                        purch_fact.supplier_ord_header_test.supplier_order_num,
                        purch_fact.suppliers_test."name",
                        TO_CHAR(purch_fact.supplier_ord_header_test."order_date",'DD-MM-YYYY'),
                        TO_CHAR(purch_fact.supplier_ord_header_test.delivery_date,'DD-MM-YYYY'),
                        purch_fact.supplier_ord_header_test.their_ref,
                        purch_fact.supplier_ord_header_test.notes, purch_fact.supplier_ord_header_test.delivery_term,
                        purch_fact.supplier_ord_header_test.delivery_way, purch_fact.supplier_ord_header_test.order_com,
                        purch_fact.supplier_ord_header_test.final_comment, purch_fact.supplier_ord_header_test.pay_way,
                        TO_CHAR(purch_fact.supplier_ord_header_test.deliv_date_1,'DD-MM-YYYY'), purch_fact.supplier_ord_header_test.deliv_note_1,
                        TO_CHAR(purch_fact.supplier_ord_header_test.deliv_date_2,'DD-MM-YYYY'), purch_fact.supplier_ord_header_test.deliv_note_2,
                        TO_CHAR(purch_fact.supplier_ord_header_test.deliv_date_3,'DD-MM-YYYY'), purch_fact.supplier_ord_header_test.deliv_note_3
                        FROM purch_fact.supplier_ord_header_test
                        LEFT JOIN purch_fact.suppliers_test ON (purch_fact.suppliers_test."id" = purch_fact.supplier_ord_header_test."supplier_id")
                        ORDER BY purch_fact.supplier_ord_header_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytableorders)
            results_orders=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        self.tableSupplierOrders.setRowCount(len(results_orders))
        tablerow=0

    # fill the Qt Table with the query results
        for row in results_orders:
            for column in range(18):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                self.tableSupplierOrders.setItem(tablerow, column, it)

            self.tableSupplierOrders.setItemDelegateForRow(tablerow, AlignDelegate(self.tableSupplierOrders))
            tablerow+=1

        self.tableSupplierOrders.verticalHeader().hide()
        self.tableSupplierOrders.setSortingEnabled(False)
        self.tableSupplierOrders.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)


# Function to load table of records
    def loadtablerecords(self):
        locale.setlocale(locale.LC_ALL, '')
        order_id=self.label_IDOrd.text()
        commands_querytablerecords = ("""
                        SELECT purch_fact.supplier_ord_detail_test.id, purch_fact.supplier_ord_detail_test.position_supply,
                        purch_fact.supplies_test."reference", purch_fact.supplies_test."description",
                        purch_fact.supplier_ord_detail_test.quantity, purch_fact.supplier_ord_detail_test.unit_value, 
                        purch_fact.supplier_ord_detail_test.discount,purch_fact.supplier_ord_detail_test.pending,
                        purch_fact.supplier_ord_detail_test.deliv_quant_1, purch_fact.supplier_ord_detail_test.deliv_quant_2,
                        purch_fact.supplier_ord_detail_test.deliv_quant_3
                        FROM purch_fact.supplier_ord_detail_test
                        LEFT JOIN purch_fact.supplies_test ON (purch_fact.supplies_test."id" = purch_fact.supplier_ord_detail_test."supply_id")
                        WHERE supplier_ord_header_id = %s
                        ORDER BY purch_fact.supplier_ord_detail_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytablerecords,(order_id,))
            results_records=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        self.tableRecords.setRowCount(len(results_records))
        tablerow=0

    # fill the Qt Table with the query results
        for row in results_records:
            row_list=list(row)
            row_list[5]=row_list[5].replace(",",".")
            row_list[5]=row_list[5][:row_list[5].find(" €")]
            row_list.insert(7,float(row_list[4])*float(row_list[5])*(1-float(row_list[6])/100))

            row_list[5] = locale.format_string("%.2f", float(row_list[5]), grouping=True)
            row_list[5] = row_list[5] + " €"

            row_list[6] = "{:.2f}".format(float(row[6]))
            row_list[6] = row_list[6] + " %"

            row_list[7] = locale.format_string("%.2f", float(row_list[7]), grouping=True)
            row_list[7] = row_list[7] + " €"

            for column in range(12):
                value = row_list[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                self.tableRecords.setItem(tablerow, column, it)

            self.tableRecords.setItemDelegateForRow(tablerow, AlignDelegate(self.tableRecords))
            tablerow+=1

        self.tableRecords.verticalHeader().hide()
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


# Function to add delivery 1 data
    def adddeliv1(self):
        self.root = tk.Tk()
        self.root.withdraw()
        date=self.DelivDate1_SupplierOrder.text()
        note=self.DelivNote1_SupplierOrder.text()
        order_id=self.label_IDOrd.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 1ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 1ª entrega")
            dlg.setText("La fecha de 1ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv1_check = ("""
                        SELECT deliv_date_1, deliv_note_1
                        FROM purch_fact.supplier_ord_header_test
                        WHERE id = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv1_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            if all(element is not None for element in results_check):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Añadir 1ª entrega")
                dlg.setText("Ya existe una 1ª entrega para el pedido seleccionado")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            else:
                commands_deliv1_header = ("""
                            UPDATE purch_fact.supplier_ord_header_test
                            SET "deliv_date_1" = %s, "deliv_note_1" = %s
                            WHERE "id" = %s
                            """)
                commands_deliv1_detail = ("""
                            UPDATE purch_fact.supplier_ord_detail_test
                            SET "deliv_date_1" = %s, "deliv_note_1" = %s
                            WHERE "supplier_ord_header_id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of principal command
                    data=(date,note,order_id,)
                    cur.execute(commands_deliv1_header, data)
                    cur.execute(commands_deliv1_detail, data)

                    for row in range(self.tableRecords.rowCount()):
                        record_id = self.tableRecords.item(row, 0).text()
                        supply_name = self.tableRecords.item(row, 2).text()
                        supply_description = self.tableRecords.item(row, 3).text()
                        quant_1 = self.show_popup(supply_name, supply_description)

                        # while True:
                        #     quant_1 = self.show_popup(supply_name, supply_description)
                        #     if quant_1 < pending:
                        #         break

                        commands_add_deliv_quant_1 = ("""
                                                        UPDATE purch_fact.supplier_ord_detail_test
                                                        SET "deliv_quant_1" = %s
                                                        WHERE "id" = %s
                                                        """)
                        query_stock = ("""
                                        SELECT physical_stock, pending_stock, available_stock FROM purch_fact.supplies_test
                                        WHERE "reference" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies_test 
                                            SET "physical_stock" = %s, "pending_stock" = %s, "available_stock" = %s
                                            WHERE "reference" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_1,(quant_1,record_id))
                        cur.execute(query_stock, (supply_name,))
                        results=cur.fetchone()

                        stock = results[0]
                        pending_stock = results[1]
                        available_stock = results [2]
                        new_stock = str(float(stock) + float(quant_1))
                        new_pending_stock = str(float(pending_stock) - float(quant_1))
                        new_available_stock = str(float(available_stock) + float(quant_1))
                        cur.execute(query_updatestock, (new_stock, new_pending_stock, new_available_stock, supply_name,))
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    self.root.deiconify()
                    self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 1ª entrega")
                    dlg.setText("1ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadtableorders()
                self.loadstocks()


# Function to add delivery 2 data
    def adddeliv2(self):
        self.root = tk.Tk()
        self.root.withdraw()
        date=self.DelivDate2_SupplierOrder.text()
        note=self.DelivNote2_SupplierOrder.text()
        order_id=self.label_IDOrd.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 2ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 2ª entrega")
            dlg.setText("La fecha de 2ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv2_check = ("""
                            SELECT deliv_date_2, deliv_note_2
                            FROM purch_fact.supplier_ord_header_test
                            WHERE id = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv2_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            if all(element is not None for element in results_check):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Añadir 2ª entrega")
                dlg.setText("Ya existe una 2ª entrega para el pedido seleccionado")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            else:
                commands_deliv2_header = ("""
                            UPDATE purch_fact.supplier_ord_header_test
                            SET "deliv_date_2" = %s, "deliv_note_2" = %s
                            WHERE "id" = %s
                            """)
                commands_deliv2_detail = ("""
                            UPDATE purch_fact.supplier_ord_detail_test
                            SET "deliv_date_2" = %s, "deliv_note_2" = %s
                            WHERE "supplier_ord_header_id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of principal command
                    data=(date,note,order_id,)
                    cur.execute(commands_deliv2_header, data)
                    cur.execute(commands_deliv2_detail, data)

                    for row in range(self.tableRecords.rowCount()):
                        record_id = self.tableRecords.item(row, 0).text()
                        supply_name = self.tableRecords.item(row, 2).text()
                        supply_description = self.tableRecords.item(row, 3).text()
                        quant_2 = self.show_popup(supply_name, supply_description)

                        # while True:
                        #     quant_2 = self.show_popup(supply_name, supply_description)
                        #     if quant_2 < pending:
                        #         break

                        commands_add_deliv_quant_2 = ("""
                                                    UPDATE purch_fact.supplier_ord_detail_test
                                                    SET "deliv_quant_2" = %s
                                                    WHERE "id" = %s
                                                    """)
                        query_stock = ("""
                                        SELECT physical_stock, pending_stock, available_stock FROM purch_fact.supplies_test
                                        WHERE "reference" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies_test 
                                            SET "physical_stock" = %s, "pending_stock" = %s, "available_stock" = %s
                                            WHERE "reference" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_2,(quant_2,record_id))
                        cur.execute(query_stock, (supply_name,))
                        results=cur.fetchone()

                        stock = results[0]
                        pending_stock = results[1]
                        available_stock = results[2]
                        new_stock = str(float(stock) + float(quant_2))
                        new_pending_stock = str(float(pending_stock) - float(quant_2))
                        new_available_stock = str(float(available_stock) + float(quant_2))
                        cur.execute(query_updatestock, (new_stock, new_pending_stock, new_available_stock, supply_name,))
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    self.root.deiconify()
                    self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 2ª entrega")
                    dlg.setText("2ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadtableorders()
                self.loadstocks()


# Function to add delivery 3 data
    def adddeliv3(self):
        self.root = tk.Tk()
        self.root.withdraw()
        date=self.DelivDate3_SupplierOrder.text()
        note=self.DelivNote3_SupplierOrder.text()
        order_id=self.label_IDOrd.text()

        if order_id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("Selecciona un pedido existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif date == "" or note == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("Rellena la fecha y albarán de la 3ª entrega")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Añadir 3ª entrega")
            dlg.setText("La fecha de 3ª entrega no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_deliv3_check = ("""
                            SELECT deliv_date_3, deliv_note_3
                            FROM purch_fact.supplier_ord_header_test
                            WHERE id = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(order_id,)
                cur.execute(commands_deliv3_check, data)
                results_check=cur.fetchone()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            if all(element is not None for element in results_check):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Añadir 3ª entrega")
                dlg.setText("Ya existe una 3ª entrega para el pedido seleccionado")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            else:
                commands_deliv3_header = ("""
                            UPDATE purch_fact.supplier_ord_header_test
                            SET "deliv_date_3" = %s, "deliv_note_3" = %s
                            WHERE "id" = %s
                            """)
                commands_deliv3_detail = ("""
                            UPDATE purch_fact.supplier_ord_detail_test
                            SET "deliv_date_3" = %s, "deliv_note_3" = %s
                            WHERE "supplier_ord_header_id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of principal command
                    data=(date,note,order_id,)
                    cur.execute(commands_deliv3_header, data)
                    cur.execute(commands_deliv3_detail, data)

                    for row in range(self.tableRecords.rowCount()):
                        record_id = self.tableRecords.item(row, 0).text()
                        supply_name = self.tableRecords.item(row, 2).text()
                        supply_description = self.tableRecords.item(row, 3).text()
                        quant_3 = self.show_popup(supply_name, supply_description)

                        # while True:
                        #     quant_3 = self.show_popup(supply_name, supply_description)
                        #     if quant_3 < pending:
                        #         break

                        commands_add_deliv_quant_3 = ("""
                            UPDATE purch_fact.supplier_ord_detail_test
                            SET "deliv_quant_3" = %s
                            WHERE "id" = %s
                            """)
                        query_stock = ("""
                                        SELECT physical_stock, pending_stock, available_stock FROM purch_fact.supplies_test
                                        WHERE "reference" = %s
                                        """)
                        query_updatestock = ("""
                                            UPDATE purch_fact.supplies_test 
                                            SET "physical_stock" = %s, "pending_stock" = %s, "available_stock" = %s
                                            WHERE "reference" = %s
                                            """)
                        cur.execute(commands_add_deliv_quant_3,(quant_3,record_id))
                        cur.execute(query_stock, (supply_name,))
                        results=cur.fetchone()

                        stock = results[0]
                        pending_stock = results[1]
                        available_stock = results[2]
                        new_stock = str(float(stock) + float(quant_3))
                        new_pending_stock = str(float(pending_stock) - float(quant_3))
                        new_available_stock = str(float(available_stock) + float(quant_3))
                        cur.execute(query_updatestock, (new_stock, new_pending_stock, new_available_stock, supply_name,))
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    self.root.deiconify()
                    self.root.destroy()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Añadir 3ª entrega")
                    dlg.setText("3ª entrega añadida con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()
                self.loadtableorders()
                self.loadstocks()


# Function to load stock values
    def loadstocks(self):
        supply_name=self.Supply_SupplierOrder.currentText()
        supply_name=supply_name[:supply_name.find(" |")]

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            query_stocks = "SELECT physical_stock, available_stock, pending_stock, unit_value FROM purch_fact.supplies_test WHERE reference = %s"
            cur.execute(query_stocks, (supply_name,))
            result_stocks = cur.fetchone()

        # get id from table
            stock = result_stocks[0]
            available_stock = result_stocks[1]
            pending = result_stocks[2]
            unit_value = result_stocks[3]

            self.Stock_SupplierOrder.setText(str(stock))
            self.StockDsp_SupplierOrder.setText(str(available_stock))
            self.StockVrt_SupplierOrder.setText(str(round(available_stock + pending,4)))
            self.UnitValue_SupplierOrder.setText(unit_value)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


#  Function to calculate the order total amount
    def calculate_totalorder(self):
        locale.setlocale(locale.LC_ALL, '')
        total = 0
        for row in range(self.tableRecords.rowCount()):
            item = self.tableRecords.item(row, 7)
            if item is not None:
                value = item.text()
                value=value.replace(".","")
                value=value.replace(",",".")
                value=value[:value.find(" €")]
                total += float(value)
        total = locale.format_string("%.2f", total, grouping=True)
        total = total + " €"
        self.Total_SupplierOrder.setText(total)


# # Function to print in PDF the supplier order
#     def printsupplierorder(self):
#         order_id=self.label_IDOrd.text()
#         num_order=self.NumOrder_SupplierOrder.text()
#         date=self.Date_SupplierOrder.text()
#         their_ref=self.TheirRef_SupplierOrder.text()
#         payway=self.PayWay_SupplierOrder.text()
#         delivway=self.DelivWay_SupplierOrder.text()
#         delivterm=self.DelivTerm_SupplierOrder.text()
#         obs=self.OrderObs_SupplierOrder.toPlainText()
#         coments=self.Coms_SupplierOrder.toPlainText()
#         final_coments=self.FinalComs_SupplierOrder.toPlainText()
#         total_order=self.Total_SupplierOrder.text()
#         supplier_name=self.Supplier_SupplierOrder.currentText()
#         currency_symbol=self.Currency_SupplierOrder.currentText()[0]
#         currency_eurovalue=self.Currency_SupplierOrder.currentText().split('|')[1].strip()
#         currency_eurovalue=float(currency_eurovalue[:currency_eurovalue.find(" €")].replace(",","."))

#         if order_id=="":
#             dlg = QtWidgets.QMessageBox()
#             new_icon = QtGui.QIcon()
#             new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#             dlg.setWindowIcon(new_icon)
#             dlg.setWindowTitle("Imprimir pedido")
#             dlg.setText("Selecciona un pedido existente")
#             dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
#             dlg.exec()
#             del dlg,new_icon

#         else:
#             pdf = supplier_order(num_order,date,their_ref,payway,delivway,delivterm,obs,supplier_name)

#             pdf.add_font('DejaVuSansCondensed', '', '//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/DejaVuSansCondensed.ttf')
#             pdf.add_font('DejaVuSansCondensed-Bold', '', '//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/DejaVuSansCondensed-Bold.ttf')

#             pdf.set_auto_page_break(auto=True, margin=2)

#             pdf.add_page()

#             for row in range(self.tableRecords.rowCount()):
#                 position_text=self.tableRecords.item(row, 1).text()
#                 quantity_text=self.tableRecords.item(row, 4).text()
#                 code_text=self.tableRecords.item(row, 2).text()
#                 description_text=self.tableRecords.item(row, 3).text()
#                 unitvalue_text=self.tableRecords.item(row, 5).text()
#                 discount_text=self.tableRecords.item(row, 6).text()
#                 total_text=self.tableRecords.item(row, 7).text()

#                 currency_unitvalue=unitvalue_text[:unitvalue_text.find(" €")]
#                 currency_unitvalue=currency_unitvalue.replace(",",".")
#                 currency_unitvalue=float(currency_unitvalue) * currency_eurovalue
#                 currency_unitvalue=locale.format_string("%.2f", currency_unitvalue, grouping=True) + " " + currency_symbol

#                 currency_total=total_text[:total_text.find(" €")]
#                 currency_total=currency_total.replace(".","")
#                 currency_total=currency_total.replace(",",".")
#                 currency_total=float(currency_total) * currency_eurovalue
#                 currency_total=locale.format_string("%.2f", currency_total, grouping=True) + " " + currency_symbol

#                 y_position = pdf.get_y()
#                 pdf.set_font('Helvetica', '', 9)
#                 pdf.cell(1, 0.53, position_text, align='C')
#                 pdf.cell(0.2, 0.53, "")
#                 pdf.cell(1.25, 0.53, quantity_text, align='C')
#                 pdf.cell(0.2, 0.53, "")
#                 pdf.cell(4.8, 0.53, code_text)
#                 pdf.cell(0.2, 0.53, "")
#                 x_position = pdf.get_x()
#                 pdf.multi_cell(5.9, 0.53, description_text)
#                 pdf.set_y(y_position)
#                 pdf.set_x(x_position + 5.9)
#                 pdf.cell(0.2, 0.53, "")
#                 pdf.set_font('DejaVuSansCondensed', size=9)
#                 pdf.cell(1.94, 0.53, currency_unitvalue, align='R')
#                 pdf.cell(0.2, 0.53, "")
#                 pdf.set_font('Helvetica', '', 9)
#                 pdf.cell(1.23, 0.53, discount_text, align='C')
#                 pdf.cell(0.2, 0.53, "")
#                 pdf.set_font('DejaVuSansCondensed', size=9)
#                 pdf.cell(2.05, 0.53, currency_total, align='R')
#                 pdf.ln(1)

#             currency_totalorder=float(total_order[:total_order.find(" €")].replace(".","").replace(",","."))
#             currency_totalorder=currency_totalorder * currency_eurovalue
#             currency_totalorder=locale.format_string("%.2f", currency_totalorder, grouping=True) + " " + currency_symbol
            
#             y_position = pdf.get_y()
#             pdf.set_fill_color(231, 231, 226)
#             pdf.set_font('Helvetica', 'B', 8)
#             x_position = pdf.get_x()
#             pdf.multi_cell(13.795, 0.3, coments)
#             pdf.ln(1)
#             pdf.multi_cell(13.795, 0.3, final_coments)
#             pdf.set_y(y_position)
#             pdf.set_x(x_position + 13.795)
#             y_position = pdf.get_y()
#             pdf.cell(0.2, 0.50, "")
#             pdf.set_font('Helvetica', 'U', 8)
#             pdf.cell(2.3, 0.50, "Total del pedido:",fill=True)
#             pdf.set_font('DejaVuSansCondensed-Bold', size=10)
#             pdf.cell(2.29, 0.50, currency_totalorder, align='R', fill=True)
#             pdf.ln(1)

#             output_path = asksaveasfilename(defaultextension=".pdf", filetypes=[("Archivos PDF", "*.pdf")], title="Guardar Pedido Proveedor")

#             if output_path:
#                 pdf.output(output_path)

#                 dlg = QtWidgets.QMessageBox()
#                 new_icon = QtGui.QIcon()
#                 new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#                 dlg.setWindowIcon(new_icon)
#                 dlg.setWindowTitle("Imprimir pedido")
#                 dlg.setText("PDF generado con éxito")
#                 dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
#                 dlg.exec()
#                 del dlg,new_icon


# Function of popup window to enter quantities of deliveries
    def show_popup(self, supply_name, supply_description):
        popup = tk.Toplevel()
        popup.title("Cantidades entregas")

        popup.iconbitmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico")

        x = (popup.winfo_screenwidth() - popup.winfo_reqwidth()) // 2
        y = (popup.winfo_screenheight() - popup.winfo_reqheight()) // 2
        popup.geometry("+{}+{}".format(x, y))

        popup.grab_set()
        
        label = tk.Label(popup, text=f"Cantidad recibida de:\n"
                        f"{supply_name} | {supply_description}")
        label.pack(padx=10, pady=10)
        
        entry = tk.Entry(popup)
        entry.pack(padx=10, pady=5)
        
        quantity = None  # Saving entered value
        
        def accept():
            nonlocal quantity
            quantity = entry.get()
            try:
                quantity = float(quantity)
                popup.destroy()
                self.root.quit()
            except ValueError:
                print("¡Valor no válido!")
        
        button = tk.Button(popup, text="Aceptar", command=accept)
        button.pack(padx=10, pady=10)
        
        popup.protocol("WM_DELETE_WINDOW", accept)
        popup.mainloop()
        return quantity  # Returning entered value


# Function to check date format
    def is_valid_date(self, date_str):
        formats = ['%d/%m/%Y', '%d-%m-%Y']
        
        for fmt in formats:
            try:
                datetime.datetime.strptime(date_str, fmt)
                return True
            except ValueError:
                pass
            
        return False


#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableSupplierOrders.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableSupplierOrders.horizontalHeader().height()
        popup_pos = self.tableSupplierOrders.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableSupplierOrders.show_unique_values_menu(logical_index, popup_pos, header_height)


#Function when clicking on table header
    def on_headerrecords_section_clicked(self, logical_index):
        header_pos = self.tableRecords.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableRecords.horizontalHeader().height()
        popup_pos = self.tableRecords.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableRecords.show_unique_values_menu(logical_index, popup_pos, header_height)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SupplierOrder_Window = QtWidgets.QMainWindow()
    ui = Ui_SupplierOrder_Warehouse_Window()
    ui.setupUi(SupplierOrder_Window)
    SupplierOrder_Window.showMaximized()
    sys.exit(app.exec())
