# Form implementation generated from reading ui file 'GraphsOffer_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import psycopg2
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from config import config
from datetime import *
import numpy as np


class Ui_GraphsOffer_Window(object):
    def setupUi(self, GraphsOffer_Window):
        self.user='Enrique Serrano'
        GraphsOffer_Window.setObjectName("GraphsOffer_Window")
        GraphsOffer_Window.resize(1500, 800)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Y:/Comunes/EIPSA-ERP/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        GraphsOffer_Window.setWindowIcon(icon)
        GraphsOffer_Window.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=GraphsOffer_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        GraphsOffer_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=GraphsOffer_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        GraphsOffer_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=GraphsOffer_Window)
        self.statusbar.setObjectName("statusbar")
        GraphsOffer_Window.setStatusBar(self.statusbar)

        self.retranslateUi(GraphsOffer_Window)
        QtCore.QMetaObject.connectSlotsByName(GraphsOffer_Window)

        bar_width = 0.35


        try:
            commands_offered_month = ("""
                        SELECT "offer_month", CAST(SUM("offer_amount") AS numeric)
                        FROM offers
                        WHERE ("offer_year"=%s)
                        GROUP BY "offer_month"
                        ORDER BY "offer_month"
                        """)
            commands_sold_month = ("""
                        SELECT "offer_month", CAST(SUM("offer_amount") AS numeric)
                        FROM offers
                        WHERE ("offer_year"=%s
                        AND
                        "state"='Adjudicada')
                        GROUP BY "offer_month"
                        ORDER BY "offer_month"
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_offered_month, (date.today().year,))
                results_offered_month=cur.fetchall()
                cur.execute(commands_sold_month, (date.today().year,))
                results_sold_month=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            months_offered_month=[int(x[0]) for x in results_offered_month]
            amounts_offered_month=[float(x[1]) for x in results_offered_month]
            dict_offered_month = dict(zip(months_offered_month, amounts_offered_month))
            for i in range(1,13):
                if i not in months_offered_month:
                    dict_offered_month[i] = 0

            dict_offered_month = {key:dict_offered_month[key] for key in sorted(dict_offered_month.keys())}
            final_offered_month=list(dict_offered_month.values())

            months_sold_month=[int(x[0]) for x in results_sold_month]
            amounts_sold_month=[float(x[1]) for x in results_sold_month]
            dict_sold_month = dict(zip(months_sold_month, amounts_sold_month))
            for i in range(1,13):
                if i not in months_sold_month:
                    dict_sold_month[i] = 0

            dict_sold_month = {key:dict_sold_month[key] for key in sorted(dict_sold_month.keys())}
            final_sold_month=list(dict_sold_month.values())

            self.canvas1=FigureCanvas(Figure())
            ax=self.canvas1.figure.subplots()
            bar_positions1 = np.arange(1,13) - bar_width / 2
            bar_positions2 = np.arange(1,13) + bar_width / 2
            ax.bar(bar_positions1, final_offered_month, width=bar_width, label='Ofertado')
            ax.bar(bar_positions2, final_sold_month, width=bar_width, label='Adjudicado')
            ax.set_xticks(range(1,13))
            ax.set_title('Ofertado/Adjudicado año actual')
            ax.set_xlabel('Mes')
            ax.set_ylabel('Importe (€)')
            ax.legend(loc='best')


            commands_offered_year = ("""
                        SELECT "offer_year", CAST(SUM("offer_amount") AS numeric)
                        FROM offers
                        GROUP BY "offer_year"
                        ORDER BY "offer_year"
                        """)
            commands_sold_year = ("""
                        SELECT "offer_year", CAST(SUM("offer_amount") AS numeric)
                        FROM offers
                        WHERE ("state"='Adjudicada')
                        GROUP BY "offer_year"
                        ORDER BY "offer_year"
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_offered_year)
                results_offered_year=cur.fetchall()
                cur.execute(commands_sold_year)
                results_sold_year=cur.fetchall()
                results_offered_year=list(filter(lambda x:None not in x, results_offered_year))
                results_sold_year=list(filter(lambda x:None not in x, results_sold_year))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            years_offered=[int(x[0]) for x in results_offered_year]
            amounts_offered_year=[float(x[1]) for x in results_offered_year]
            dict_offered_year = dict(zip(years_offered, amounts_offered_year))
            for i in range(min(years_offered), max(years_offered)+1):
                if i not in years_offered:
                    dict_offered_year[i] = 0

            dict_offered_year = {key:dict_offered_year[key] for key in sorted(dict_offered_year.keys())}
            final_offered_year=list(dict_offered_year.values())

            years_sold=[int(x[0]) for x in results_sold_year]
            amounts_sold_year=[float(x[1]) for x in results_sold_year]
            dict_sold_year = dict(zip(years_sold, amounts_sold_year))
            for i in range(min(years_sold), max(years_sold)+1):
                if i not in years_sold:
                    dict_sold_year[i] = 0

            dict_sold_year = {key:dict_sold_year[key] for key in sorted(dict_sold_year.keys())}
            final_sold_year=list(dict_sold_year.values())

            self.canvas2=FigureCanvas(Figure())
            bx=self.canvas2.figure.subplots()
            bar_positions1 = np.arange(min(years_offered),max(years_offered)+1) - bar_width / 2
            bar_positions2 = np.arange(min(years_offered),max(years_offered)+1) + bar_width / 2
            bx.bar(bar_positions1, final_offered_year, width=bar_width, label='Ofertado')
            bx.bar(bar_positions2, final_sold_year, width=bar_width, label='Adjudicado')
            bx.set_xticks(range(min(years_offered),max(years_offered)+1))
            bx.set_title('Ofertado/Adjudicado por años')
            bx.set_xlabel('Año')
            bx.set_ylabel('Importe (€)')
            bx.legend(loc='best')


            commands_national = ("""
                        SELECT COUNT(offers."num_offer"), product_type."variable"
                        FROM offers
                        INNER JOIN product_type ON (offers."material"=product_type."material")
                        WHERE ("offer_year"=%s
                        AND
                        "state"='Adjudicada'
                        AND
                        "nac_ext"='Nacional')
                        GROUP BY product_type."variable"
                        """)
            commands_external = ("""
                        SELECT COUNT(offers."num_offer"), product_type."variable"
                        FROM offers
                        INNER JOIN product_type ON (offers."material"=product_type."material")
                        WHERE ("offer_year"=%s
                        AND
                        "state"='Adjudicada'
                        AND
                        "nac_ext"='Exterior')
                        GROUP BY product_type."variable"
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_national, (date.today().year,))
                results_national=cur.fetchall()
                cur.execute(commands_external, (date.today().year,))
                results_external=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            count=[x[0] for x in results_national]
            labels=[x[1] for x in results_national]
            self.canvas3=FigureCanvas(Figure())
            cx=self.canvas3.figure.subplots()
            cx.pie(count,labels=labels,autopct='%1.1f%%')
            cx.set_title('Equipos vendidos nacional año actual')

            count=[x[0] for x in results_external]
            labels=[x[1] for x in results_external]
            self.canvas4=FigureCanvas(Figure())
            dx=self.canvas4.figure.subplots()
            dx.pie(count,labels=labels,autopct='%1.1f%%')
            dx.set_title('Equipos vendidos exterior año actual')

            self.canvas1.setObjectName("Graph1")
            self.gridLayout.addWidget(self.canvas1, 0, 0, 1, 1)
            self.canvas2.setObjectName("Graph2")
            self.gridLayout.addWidget(self.canvas2, 0, 1, 1, 1)
            self.canvas3.setObjectName("Graph3")
            self.gridLayout.addWidget(self.canvas3, 1, 0, 1, 1)
            self.canvas4.setObjectName("Graph4")
            self.gridLayout.addWidget(self.canvas4, 1, 1, 1, 1)

        except:
            pass


    def retranslateUi(self, GraphsOffer_Window):
        _translate = QtCore.QCoreApplication.translate
        GraphsOffer_Window.setWindowTitle(_translate("GraphsOffer_Window", "Gráficos Ofertas"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GraphsOffer_Window = QtWidgets.QMainWindow()
    ui = Ui_GraphsOffer_Window()
    ui.setupUi(GraphsOffer_Window)
    GraphsOffer_Window.show()
    sys.exit(app.exec())
