# Form implementation generated from reading ui file 'QueryTags_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_QueryTags_Window(object):
    def setupUi(self, QueryTags_Window):
        QueryTags_Window.setObjectName("QueryTags_Window")
        QueryTags_Window.resize(790, 595)
        QueryTags_Window.setMinimumSize(QtCore.QSize(790, 595))
        QueryTags_Window.setMaximumSize(QtCore.QSize(790, 595))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        QueryTags_Window.setWindowIcon(icon)
        QueryTags_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255)\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=QueryTags_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setVerticalSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tableQueryTags = QtWidgets.QTableWidget(parent=self.frame)
        self.tableQueryTags.setAlternatingRowColors(False)
        self.tableQueryTags.setObjectName("tableQueryTags")
        self.tableQueryTags.setColumnCount(7)
        self.tableQueryTags.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableQueryTags.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableQueryTags.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableQueryTags.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableQueryTags.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableQueryTags.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableQueryTags.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableQueryTags.setHorizontalHeaderItem(6, item)
        self.gridLayout_2.addWidget(self.tableQueryTags, 3, 0, 1, 1)
        self.hLayout2 = QtWidgets.QHBoxLayout()
        self.hLayout2.setObjectName("hLayout2")
        self.label_NumOffer = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOffer.setMinimumSize(QtCore.QSize(80, 25))
        self.label_NumOffer.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumOffer.setFont(font)
        self.label_NumOffer.setObjectName("label_NumOffer")
        self.hLayout2.addWidget(self.label_NumOffer)
        self.Numoffer_QueryTags = QtWidgets.QLineEdit(parent=self.frame)
        self.Numoffer_QueryTags.setMinimumSize(QtCore.QSize(250, 25))
        self.Numoffer_QueryTags.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Numoffer_QueryTags.setFont(font)
        self.Numoffer_QueryTags.setObjectName("Numoffer_QueryTags")
        self.hLayout2.addWidget(self.Numoffer_QueryTags)
        self.Button_Query = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Query.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Query.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Query.setAutoDefault(True)
        self.Button_Query.setObjectName("Button_Query")
        self.hLayout2.addWidget(self.Button_Query)
        self.gridLayout_2.addLayout(self.hLayout2, 2, 0, 1, 1)
        self.hLayout1 = QtWidgets.QHBoxLayout()
        self.hLayout1.setObjectName("hLayout1")
        self.label_NumOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.label_NumOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumOrder.setFont(font)
        self.label_NumOrder.setObjectName("label_NumOrder")
        self.hLayout1.addWidget(self.label_NumOrder)
        self.Numorder_QueryTags = QtWidgets.QLineEdit(parent=self.frame)
        self.Numorder_QueryTags.setMinimumSize(QtCore.QSize(250, 25))
        self.Numorder_QueryTags.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Numorder_QueryTags.setFont(font)
        self.Numorder_QueryTags.setObjectName("Numorder_QueryTags")
        self.hLayout1.addWidget(self.Numorder_QueryTags)
        self.Button_Clean = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Clean.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Clean.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Clean.setAutoDefault(True)
        self.Button_Clean.setObjectName("Button_Clean")
        self.hLayout1.addWidget(self.Button_Clean)
        self.gridLayout_2.addLayout(self.hLayout1, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        QueryTags_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=QueryTags_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 22))
        self.menubar.setObjectName("menubar")
        QueryTags_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=QueryTags_Window)
        self.statusbar.setObjectName("statusbar")
        QueryTags_Window.setStatusBar(self.statusbar)

        self.retranslateUi(QueryTags_Window)
        QtCore.QMetaObject.connectSlotsByName(QueryTags_Window)
        self.Button_Clean.clicked.connect(self.clean_boxes) # type: ignore
        self.Button_Query.clicked.connect(self.query_tags) # type: ignore


    def retranslateUi(self, QueryTags_Window):
        _translate = QtCore.QCoreApplication.translate
        QueryTags_Window.setWindowTitle(_translate("QueryTags_Window", "Consultar Tags"))
        self.tableQueryTags.setSortingEnabled(True)
        item = self.tableQueryTags.horizontalHeaderItem(0)
        item.setText(_translate("QueryTags_Window", "Nº Pedido"))
        item = self.tableQueryTags.horizontalHeaderItem(1)
        item.setText(_translate("QueryTags_Window", "Referencia"))
        item = self.tableQueryTags.horizontalHeaderItem(2)
        item.setText(_translate("QueryTags_Window", "Nº Oferta"))
        item = self.tableQueryTags.horizontalHeaderItem(3)
        item.setText(_translate("QueryTags_Window", "Cliente"))
        item = self.tableQueryTags.horizontalHeaderItem(4)
        item.setText(_translate("QueryTags_Window", "Cliente Final"))
        item = self.tableQueryTags.horizontalHeaderItem(5)
        item.setText(_translate("QueryTags_Window", "Tipo Equipo"))
        item = self.tableQueryTags.horizontalHeaderItem(6)
        item.setText(_translate("QueryTags_Window", "Importe (€)"))
        self.label_NumOffer.setText(_translate("QueryTags_Window", "Nº Oferta:"))
        self.Button_Query.setText(_translate("QueryTags_Window", "Buscar"))
        self.label_NumOrder.setText(_translate("QueryTags_Window", "Nº Pedido:"))
        self.Button_Clean.setText(_translate("QueryTags_Window", "Limpiar Filtros"))


    def clean_boxes(self):
        self.Numorder_QueryTags.setText("")
        self.Numoffer_QueryTags.setText("")


    def query_tags(self):
        numorder=self.Numorder_QueryTags.text()
        numoffer=self.Numoffer_QueryTags.text()

        if ((numorder=="" or numorder==" ") and (numoffer=="" or numoffer==" ")):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Consultar Tags")
            dlg.setText("Introduce un filtro en alguno de los campos")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            conn = None
            # read the connection parameters
            params = config()
            # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM pedidos""")
            results=cur.fetchall()
            match=list(filter(lambda x:numorder in x, results))

            cur.execute("""SELECT * FROM ofertas""")
            results2=cur.fetchall()
            match2=list(filter(lambda x:numoffer in x, results2))

            if numorder !='' and len(match)==0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Consultar Tags")
                dlg.setText("El número de pedido introducido no existe")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()

            elif numoffer !='' and len(match2)==0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Consultar Tags")
                dlg.setText("El número de oferta introducido no existe")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()

            else:
                if numoffer!='' and numorder=='':
                    commands = ("""
                                SELECT ofertas."num_oferta",tipo_producto."variable"
                                FROM ofertas
                                INNER JOIN tipo_producto ON (ofertas."material"=tipo_producto."material")
                                WHERE ofertas."num_oferta" LIKE '%%'||%s||'%%'
                                ORDER BY ofertas."num_oferta"
                                """)
                    data=(numoffer,)

                else:
                    commands = ("""
                                SELECT pedidos."num_oferta",pedidos."num_pedido",tipo_producto."variable"
                                FROM ofertas
                                INNER JOIN pedidos ON (ofertas."num_oferta"=pedidos."num_oferta")
                                INNER JOIN tipo_producto ON (ofertas."material"=tipo_producto."material")
                                WHERE (pedidos."num_oferta" LIKE '%%'||%s||'%%'
                                AND
                                pedidos."num_pedido" LIKE '%%'||%s||'%%'
                                )
                                ORDER BY pedidos."num_pedido"
                                """)
                    data=(numoffer,numorder,)

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    
                    cur.execute(commands, data)
                    result_variable=cur.fetchall()
                    print(result_variable)
                    if len(result_variable[0])==3:
                        variable=result_variable[0][2]
                    elif len(result_variable[0])==2:
                        variable=result_variable[0][1]

                    if variable=='Caudal':
                        print('a')
                    elif variable=='Temperatura':
                        print('b')
                    elif variable=='Nivel':
                        print('c')
                    elif variable=='Otros':
                        print('d')
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()
                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()


                    # self.tableQueryTags.setRowCount(len(results))
                    # tablerow=0
                    # for row in results:
                    #     self.tableQueryTags.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(str(row[0])))
                    #     self.tableQueryTags.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(str(row[1])))
                    #     self.tableQueryTags.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(str(row[2])))
                    #     self.tableQueryTags.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(str(row[3])))
                    #     self.tableQueryTags.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(str(row[4])))
                    #     self.tableQueryTags.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(str(row[5])))
                    #     self.tableQueryTags.setItem(tablerow, 6, QtWidgets.QTableWidgetItem(str(row[6])))

                    #     tablerow+=1

                    # self.tableQueryTags.verticalHeader().hide()
                    # self.tableQueryTags.setItemDelegate(AlignDelegate(self.tableQueryTags))


                

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    QueryTags_Window = QtWidgets.QMainWindow()
    ui = Ui_QueryTags_Window()
    ui.setupUi(QueryTags_Window)
    QueryTags_Window.show()
    sys.exit(app.exec())
