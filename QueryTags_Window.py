# Form implementation generated from reading ui file 'QueryTags_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import re
import locale
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_QueryTags_Window(object):
    def __init__(self, dpto):
        self.dpto_value=dpto
    # def __init__(self):
    #     self.dpto_value='Comercial'

    def setupUi(self, QueryTags_Window):
        QueryTags_Window.setObjectName("QueryTags_Window")
        QueryTags_Window.resize(790, 595)
        QueryTags_Window.setMinimumSize(QtCore.QSize(790, 595))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        QueryTags_Window.setWindowIcon(icon)
        QueryTags_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255)\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=QueryTags_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setVerticalSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.hLayout1 = QtWidgets.QHBoxLayout()
        self.hLayout1.setObjectName("hLayout1")
        self.label_NumOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.label_NumOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumOrder.setFont(font)
        self.label_NumOrder.setObjectName("label_NumOrder")
        self.hLayout1.addWidget(self.label_NumOrder)
        self.Numorder_QueryTags = QtWidgets.QLineEdit(parent=self.frame)
        self.Numorder_QueryTags.setMinimumSize(QtCore.QSize(250, 25))
        self.Numorder_QueryTags.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Numorder_QueryTags.setFont(font)
        self.Numorder_QueryTags.setObjectName("Numorder_QueryTags")
        self.hLayout1.addWidget(self.Numorder_QueryTags)
        self.Button_Clean = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Clean.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Clean.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Clean.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.Button_Clean.setObjectName("Button_Clean")
        self.hLayout1.addWidget(self.Button_Clean)
        self.gridLayout_2.addLayout(self.hLayout1, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.hLayout2 = QtWidgets.QHBoxLayout()
        self.hLayout2.setObjectName("hLayout2")
        self.label_NumOffer = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOffer.setMinimumSize(QtCore.QSize(80, 25))
        self.label_NumOffer.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumOffer.setFont(font)
        self.label_NumOffer.setObjectName("label_NumOffer")
        self.hLayout2.addWidget(self.label_NumOffer)
        self.Numoffer_QueryTags = QtWidgets.QLineEdit(parent=self.frame)
        self.Numoffer_QueryTags.setMinimumSize(QtCore.QSize(250, 25))
        self.Numoffer_QueryTags.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Numoffer_QueryTags.setFont(font)
        self.Numoffer_QueryTags.setObjectName("Numoffer_QueryTags")
        self.hLayout2.addWidget(self.Numoffer_QueryTags)
        self.Button_Query = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Query.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Query.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Query.setObjectName("Button_Query")
        self.Button_Query.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.hLayout2.addWidget(self.Button_Query)
        self.gridLayout_2.addLayout(self.hLayout2, 2, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 3, 0, 1, 1)
        self.tableQueryTags = QtWidgets.QTableWidget(parent=self.frame)
        self.tableQueryTags.setAlternatingRowColors(False)
        self.tableQueryTags.setObjectName("tableQueryTags")
        self.tableQueryTags.setColumnCount(0)
        self.tableQueryTags.setRowCount(0)
        self.tableQueryTags.setSortingEnabled(True)
        self.tableQueryTags.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.gridLayout_2.addWidget(self.tableQueryTags, 4, 0, 1, 1)
        self.hLayout6 = QtWidgets.QHBoxLayout()
        self.hLayout6.setObjectName("hLayout6")
        spacerItem3 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout6.addItem(spacerItem3)
        self.label_SumItems = QtWidgets.QLabel(parent=self.frame)
        self.label_SumItems.setMinimumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setMaximumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setText("")
        self.label_SumItems.setObjectName("label_SumItems")
        self.hLayout6.addWidget(self.label_SumItems)
        self.label_SumValue = QtWidgets.QLabel(parent=self.frame)
        self.label_SumValue.setMinimumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setMaximumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setText("")
        self.label_SumValue.setObjectName("label_SumValue")
        self.hLayout6.addWidget(self.label_SumValue)
        self.label_CountItems = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems.setMinimumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setMaximumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setText("")
        self.label_CountItems.setObjectName("label_CountItems")
        self.hLayout6.addWidget(self.label_CountItems)
        self.label_CountValue = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue.setMinimumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setMaximumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setText("")
        self.label_CountValue.setObjectName("label_CountValue")
        self.hLayout6.addWidget(self.label_CountValue)
        self.gridLayout_2.addLayout(self.hLayout6, 5, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        QueryTags_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=QueryTags_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 22))
        self.menubar.setObjectName("menubar")
        QueryTags_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=QueryTags_Window)
        self.statusbar.setObjectName("statusbar")
        QueryTags_Window.setStatusBar(self.statusbar)

        self.retranslateUi(QueryTags_Window)
        QtCore.QMetaObject.connectSlotsByName(QueryTags_Window)
        self.Button_Clean.clicked.connect(self.clean_boxes) # type: ignore
        self.Button_Query.clicked.connect(self.query_tags) # type: ignore
        self.Numoffer_QueryTags.returnPressed.connect(self.query_tags)
        self.Numorder_QueryTags.returnPressed.connect(self.query_tags)
        self.tableQueryTags.itemSelectionChanged.connect(self.countSelectedCells)


    def retranslateUi(self, QueryTags_Window):
        _translate = QtCore.QCoreApplication.translate
        QueryTags_Window.setWindowTitle(_translate("QueryTags_Window", "Consultar Tags"))
        self.tableQueryTags.setSortingEnabled(True)
        self.label_NumOffer.setText(_translate("QueryTags_Window", "NÂº Oferta:"))
        self.Button_Query.setText(_translate("QueryTags_Window", "Buscar"))
        self.label_NumOrder.setText(_translate("QueryTags_Window", "NÂº Pedido:"))
        self.Button_Clean.setText(_translate("QueryTags_Window", "Limpiar Filtros"))


    def clean_boxes(self):
        self.Numorder_QueryTags.setText("")
        self.Numoffer_QueryTags.setText("")


    def query_tags(self):
        numorder=self.Numorder_QueryTags.text()
        numoffer=self.Numoffer_QueryTags.text()
        variable = ''

        if ((numorder=="" or numorder==" ") and (numoffer=="" or numoffer==" ")):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Consultar Tags")
            dlg.setText("Introduce un filtro en alguno de los campos")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif numorder=="" or numorder==" ":
            if  not re.match(r'^O-\d{2}/\d{3}.*$', numoffer):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("El nÃºmero de oferta debe tener formato O-XX/YYY")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon

            else:
                commands_querytags = (f"""
                                    SELECT offers."num_offer",product_type."variable"
                                    FROM offers
                                    INNER JOIN product_type ON (offers."material"=product_type."material")
                                    WHERE UPPER(offers."num_offer") LIKE UPPER('%%{numoffer}%%')
                                    ORDER BY offers."num_offer"
                                    """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_querytags)
                    result_variable=cur.fetchall()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()
                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

                if result_variable == None:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("EL nÃºmero de pedido no existe")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                else:
                    if len(result_variable[0])==3:
                        variable=result_variable[0][2]
                    elif len(result_variable[0])==2:
                        variable=result_variable[0][1]

        elif numoffer=="" or numoffer==" ":
            if not re.match(r'^(P|PA)-\d{2}/\d{3}.*$', numorder):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("El nÃºmero de pedido debe tener formato P-XX/YYY o PA-XX/YYY")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon

            else:
                commands_querytags = (f"""
                                    SELECT num_order, product_type."variable"
                                    FROM orders
                                    INNER JOIN offers ON (offers."num_offer" = orders."num_offer")
                                    INNER JOIN product_type ON (product_type."material" = offers."material")
                                    WHERE
                                    UPPER (orders."num_order") LIKE UPPER('%%{numorder}%%')
                                    """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_querytags)
                    result_variable=cur.fetchall()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()
                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

                if result_variable == None:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("EL nÃºmero de pedido no existe")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon
                else:
                    if len(result_variable[0])==3:
                        variable=result_variable[0][2]
                    elif len(result_variable[0])==2:
                        variable=result_variable[0][1]

        else:
            if not re.match(r'^(P|PA)-\d{2}/\d{3}.*$', numorder) or not re.match(r'^O-\d{2}/\d{3}.*$', numoffer):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("El nÃºmero de pedido debe tener formato P-XX/YYY o PA-XX/YYY \n"
                            "El nÃºmero de oferta debe tener formato O-XX/YYY")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon

            else:
                commands_querytags = (f"""
                            SELECT orders."num_offer",orders."num_order",product_type."variable"
                            FROM offers
                            INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                            INNER JOIN product_type ON (offers."material"=product_type."material")
                            WHERE (UPPER(orders."num_offer") LIKE UPPER('%%{numoffer}%%')
                            AND
                            UPPER(orders."num_order") LIKE UPPER('%%{numorder}%%')
                            )
                            ORDER BY orders."num_order"
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_querytags)
                    result_variable=cur.fetchall()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()
                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

                if result_variable == None:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("EL nÃºmero de pedido no existe")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon
                else:
                    if len(result_variable[0])==3:
                        variable=result_variable[0][2]
                    elif len(result_variable[0])==2:
                        variable=result_variable[0][1]

        if variable == 'Caudal':
            table_name = 'tags_data.tags_flow'
            column_names = ['id','tag','tag_state','num_offer','num_order',
                            'num_po','position','subposition','item_type','line_size',
                            'rating','facing','schedule','flange_material','flange_type',
                            'tube_material','tapping_num_size','element_material','plate_type','plate_thk',
                            'plate_std','gasket_material','bolts_nuts_material','nace','stages_number',
                            'pipe_spec','aprox_weight','aprox_length','amount','offer_notes',
                            'commercial_changes','contractual_date','orif_diam','dv_diam','technical_changes',
                            'technical_notes','calc_num_doc_eipsa','calc_state','calc_state_date','dwg_num_doc_eipsa',
                            'dwg_state','dwg_state_date','purchase_order','purchase_order_date','purchase_order_notes',
                            'of_plate_date','of_plate_drawing','colada_plate','of_flange_date','of_flange_drawing',
                            'colada_flange','plug_number','tapping_size','tapping_number','rtj_porta_material',
                            'rtj_thickness','rtj_dim','plate_ext_diam','handle','bolts_size',
                            'bolts_quantity','extractor_size','extractor_quantity','fab_state','inspection','RN_delivery']
        elif variable == 'Temperatura':
            table_name = 'tags_data.tags_temp'
            column_names = ['id','tag','tag_state','num_offer','num_order',
                            'num_po','position','subposition','item_type','tw_type',
                            'flange_size','flange_rating','flange_facing','std_tw','material_tw',
                            'std_length','ins_length','root_diam','tip_diam','sensor_element',
                            'sheath_stem_material','sheath_stem_diam','insulation','temp_inf','temp_sup',
                            'nipple_ext_material','nipple_ext_length','head_case_material','elec_conn_case_diam','tt_cerblock',
                            'material_flange_lj','gasket_material','puntal','tube_t','nace',
                            'amount','offer_notes','commercial_changes','contractual_date','stress',
                            'geometry','conical_length','straigth_length','nozzle_diam','calculation_notes',
                            'technical_changes','technical_notes','calc_num_doc_eipsa','calc_state','calc_state_date',
                            'dwg_num_doc_eipsa','dwg_state','dwg_state_date','dwg_notes','of_sensor_date',
                            'of_sensor_drawing','notes_sensor','fab_sensor_state','of_tw_date','of_tw_drawing',
                            'notes_tw','fab_tw_state','purchase_order','purchase_order_date','purchase_order_notes',
                            'length_cut_tw','dim_a_sensor','dim_b_sensor','dim_l_sensor','plug',
                            'fab_state','inspection','RN_delivery']
        elif variable == 'Nivel':
            print('c')
        elif variable == 'Otros':
            print('d')

        if variable != '':
            # print(variable,table_name)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
                commands_querytagsvariable = (f"""
                        SELECT {', '.join(column_names)} FROM {table_name}
                        WHERE (
                        UPPER(num_offer) LIKE UPPER('%%{numoffer}%%')
                        AND
                        UPPER(num_order) LIKE UPPER('%%{numorder}%%')
                        )
                        ORDER BY tag
                        """)
            # execution of commands and savind results
                cur.execute(commands_querytagsvariable)
                results=cur.fetchall()
                field_names=[i[0] for i in cur.description]
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            if variable == 'Caudal':
                num_columns = 66
            elif variable == 'Temperatura':
                num_columns = 73

            self.tableQueryTags.setRowCount(len(results))
            self.tableQueryTags.setColumnCount(len(cur.description))
            
            tablerow=0

        # fill the Qt Table with the query results
            
            for row in results:
                for column in range(len(field_names)):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableQueryTags.setItem(tablerow, column, it)

                tablerow+=1

            self.tableQueryTags.verticalHeader().hide()
            self.tableQueryTags.setItemDelegate(AlignDelegate(self.tableQueryTags))
            self.tableQueryTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableQueryTags.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font: 800 10pt;}")

            # Change all column names
            headers_flow = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido", "PO", "PosiciÃ³n", "SubposiciÃ³n",
                        "Tipo", "TamaÃ±o LÃ­nea", "Rating", "Facing", "Schedule", "Material Brida", "Tipo Brida",
                        "Material Tubo", "TamaÃ±o Tomas (NÂº)", "Material Elemento", "Tipo Placa", "Espesor Placa",
                        "EstÃ¡ndar Placa", "Material Junta", "Material TornillerÃ­a", "NACE", "NÂº Saltos",
                        "Pipe Spec.", "Peso Aprox. (kg)", "Long. Aprox. (mm)", "Precio (â¬)", "Notas Oferta",
                        "Cambios Comercial", "Fecha Contractual", "Ã Orif. (mm)", "Ã D/V (mm)", "Cambios TÃ©cnicos",
                        "Notas TÃ©cnicas", "NÂº Doc. EIPSA CÃ¡lculo", "Estado CÃ¡lculo", "Fecha Estado CÃ¡lculo", "NÂº Doc. EIPSA Plano",
                        "Estado Plano", "Fecha Estado Plano", "Orden de Compra", "Fecha Orden Compra", "Notas Orden Compra",
                        "Fecha OF Placa", "Plano OF Placa", "Colada Placa", "Fecha OF Brida", "Plano OF Brida",
                        "Colada Brida", "NÂº Tapones", "TamaÃ±o Tomas", "NÂº Tomas", "RTJ Porta Material",
                        "RTJ Espesor", "RTJ Dim", "Ã Ext. Placa (mm)", "Mango", "TamaÃ±o EspÃ¡rragos",
                        "Cantidad EspÃ¡rragos", "TamaÃ±o Extractor", "Cantidad Extractor", "Estado FabricaciÃ³n", "InspecciÃ³n",
                        "EnvÃ­o RN"]
            
            headers_temp = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido", "PO", "PosiciÃ³n", "SubposiciÃ³n",
                        "Tipo", "Tipo TW", "TamaÃ±o Brida", "Rating Brida", "Facing Brida", "Standard TW",
                        "Material TW", "Long. STD (mm)", "Long. Ins. (mm)", "Ã RaÃ­z (mm)", "Ã Punta (mm)",
                        "Sensor", "Material Sheath/Stem", "Ã Sheath/Stem (mm)", "Insulation", "Temp Inf (ÂºC)",
                        "Temp Sup ÂºC", "Material Nipple Ext.", "Long. Nipple Ext. (mm)", "Material Head/Case", "Con. Elec./Diam. Case",
                        "TT/Terminal Insulation", "Material Brida LapJoint", "Material Junta", "Puntal", "Tubo",
                        "NACE", "Precio (â¬)", "Notas Oferta", "Cambio Comercial", "Fecha Contractual",
                        "Stress", "GeometrÃ­a", "Long. CÃ³nica (mm)", "Long. Recta (mm)", "Ã Picaje (mm)",
                        "Notas CÃ¡lculo", "Cambios TÃ©cnicos", "Notas TÃ©cnicas", "NÂº Doc. EIPSA CÃ¡lculo", "Estado CÃ¡lculo",
                        "Fecha Estado CÃ¡lculo", "NÂº Doc. EIPSA Plano", "Estado Plano", "Fecha Estado Plano", "Notas Planos",
                        "Fecha OF Sensor", "Plano OF Sensor", "Notas Sensor", "Estado FabricaciÃ³n Sensor", "Fecha OF TW",
                        "Plano OF TW", "Notas TW", "Estado FabricaciÃ³n TW", "Orden de Compra", "Fecha Orden Compra",
                        "Notas Orden Compra", "Long. Corte TW (mm)", "Cota A Sensor (mm)", "Cota B Sensor (mm)", "Cota L Sensor (mm)",
                        "TapÃ³n", "Estado FabricaciÃ³n", "InspecciÃ³n", "EnvÃ­o RN"]

            headers_level = []

            if variable == 'Caudal':
                self.tableQueryTags.setHorizontalHeaderLabels(headers_flow)
                # for i in range (66,self.tableQueryTags.columnCount()):
                #     self.tableQueryTags.setColumnHidden(i,True)
            elif variable == 'Temperatura':
                self.tableQueryTags.setHorizontalHeaderLabels(headers_temp)
                # for i in range (73,self.tableQueryTags.columnCount()):
                #     self.tableQueryTags.setColumnHidden(i,True)
            elif variable == 'Nivel':
                self.tableQueryTags.setHorizontalHeaderLabels(headers_level)

            if self.dpto_value == 'TÃ©cnico':
                if variable == 'Caudal':
                    self.tableQueryTags.setColumnHidden(28,True)
                elif variable == 'Temperatura':
                    self.tableQueryTags.setColumnHidden(35,True)


    def countSelectedCells(self):
        if len(self.tableQueryTags.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

            sum_value = sum([self.euro_string_to_float(ix.data()) if re.match(r'^[\d.,]+\sâ¬$', ix.data()) else float(ix.data().replace(',', '.')) if ix.data().replace(',', '.').replace('.', '', 1).isdigit() else 0 for ix in self.tableQueryTags.selectedIndexes()])
            count_value = len([ix for ix in self.tableQueryTags.selectedIndexes() if ix.data() != ""])
            if sum_value > 0:
                self.label_SumItems.setText("Suma:")
                self.label_SumValue.setText(locale.format_string("%.2f", sum_value, grouping=True))
            if count_value > 0:
                self.label_CountItems.setText("Recuento:")
                self.label_CountValue.setText(str(count_value))
        else:
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

    def euro_string_to_float(self, euro_str):
        match = re.match(r'^([\d.,]+)\sâ¬$', euro_str)
        if match:
            number_str = match.group(1)
            number_str = number_str.replace('.', '').replace(',', '.')
            return float(number_str)
        else:
            return 0.0


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    QueryTags_Window = QtWidgets.QMainWindow()
    ui = Ui_QueryTags_Window()
    ui.setupUi(QueryTags_Window)
    QueryTags_Window.show()
    sys.exit(app.exec())