# Form implementation generated from reading ui file 'EditTags_Commercial_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6 import QtSql
from PyQt6.QtWidgets import QApplication
from PyQt6.QtCore import Qt, QDate
from PyQt6.QtGui import QKeySequence, QTextDocument, QTextCursor
from Database_Connection import createConnection
from config import config
import psycopg2
import re
import configparser
import locale
from datetime import *
import os
import pandas as pd
from tkinter.filedialog import asksaveasfilename, askopenfilename


basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


def imagen_to_base64(imagen):
    """
    Converts an image in PNG format to a base64 encoded string.

    Args:
        imagen: An instance of QImage or QPixmap to be converted.
    Return: 
        A base64 encoded string representing the image in PNG format.
    """
    buffer = QtCore.QBuffer()
    buffer.open(QtCore.QIODevice.OpenModeFlag.WriteOnly)
    imagen.save(buffer, ".png")
    base64_data = buffer.data().toBase64().data().decode()
    return base64_data

class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class ColorDelegate_Position(QtWidgets.QItemDelegate):
    """
    A custom item delegate for applying background colors to cells in a QTableView or QTableWidget.

    Inherits from:
        QtWidgets.QItemDelegate: Provides custom rendering for table items.
    """
    def __init__(self, parent=None):
        """
        Initializes the ColorDelegate, setting up the color mapping from the database.

        Args:
            parent (QtWidgets.QWidget, optional): The parent widget. Defaults to None.
        """
        super().__init__(parent)

    def paint(self, painter, option, index: QtCore.QModelIndex):
        """
        Paints the background color of the item based on its column and value.

        Args:
            painter (QtGui.QPainter): The painter used for painting.
            option (QtWidgets.QStyleOptionViewItem): The style option for the item.
            index (QtCore.QModelIndex): The model index of the item.
        """
        background_color = QtGui.QColor(255, 255, 255)

        state_column_index = index.sibling(index.row(), 6) # Index for column to check text
        original_text = str(index.data())  # Text of cell to be painted
        value_check = str(state_column_index.data()).upper()

        if original_text != '' and original_text != value_check:
            background_color = QtGui.QColor(255, 255, 0) #Yellow

        painter.fillRect(option.rect, background_color)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        super().paint(painter, option, index)

class ColorDelegate_Subposition(QtWidgets.QItemDelegate):
    """
    A custom item delegate for applying background colors to cells in a QTableView or QTableWidget.

    Inherits from:
        QtWidgets.QItemDelegate: Provides custom rendering for table items.
    """
    def __init__(self, parent=None):
        """
        Initializes the ColorDelegate, setting up the color mapping from the database.

        Args:
            parent (QtWidgets.QWidget, optional): The parent widget. Defaults to None.
        """
        super().__init__(parent)

    def paint(self, painter, option, index: QtCore.QModelIndex):
        """
        Paints the background color of the item based on its column and value.

        Args:
            painter (QtGui.QPainter): The painter used for painting.
            option (QtWidgets.QStyleOptionViewItem): The style option for the item.
            index (QtCore.QModelIndex): The model index of the item.
        """
        background_color = QtGui.QColor(255, 255, 255)

        state_column_index = index.sibling(index.row(), 7) # Index for column to check text
        original_text = str(index.data())  # Text of cell to be painted
        value_check = str(state_column_index.data()).upper()

        if original_text != '' and original_text != value_check:
            background_color = QtGui.QColor(255, 255, 0) #Yellow

        painter.fillRect(option.rect, background_color)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        super().paint(painter, option, index)

class ColorDelegate_DifferenceAmount(QtWidgets.QItemDelegate):
    """
    A custom item delegate for applying background colors to cells in a QTableView or QTableWidget.

    Inherits from:
        QtWidgets.QItemDelegate: Provides custom rendering for table items.
    """
    def __init__(self, parent=None):
        """
        Initializes the ColorDelegate, setting up the color mapping from the database.

        Args:
            parent (QtWidgets.QWidget, optional): The parent widget. Defaults to None.
        """
        super().__init__(parent)

    def paint(self, painter, option, index: QtCore.QModelIndex):
        """
        Paints the background color of the item based on its column and value.

        Args:
            painter (QtGui.QPainter): The painter used for painting.
            option (QtWidgets.QStyleOptionViewItem): The style option for the item.
            index (QtCore.QModelIndex): The model index of the item.
        """
        background_color = QtGui.QColor(255, 255, 255)

        original_text = str(index.data())  # Text of cell to be painted

        if original_text != '':
            if float(original_text.replace('.','').replace(',','.').replace(' â‚¬','')) != 0:
                background_color = QtGui.QColor(255, 255, 0) #Yellow

        painter.fillRect(option.rect, background_color)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        super().paint(painter, option, index)

class EditableComboBoxDelegate(QtWidgets.QStyledItemDelegate):
    """
    A delegate for editing combobox items in a view.

    Attributes:
        options (list): List of options to populate the combobox.
    """
    def __init__(self, parent=None, options=None):
        """
        Initializes the EditableComboBoxDelegate with the specified options.

        Args:
            parent (QtWidgets.QWidget, optional): Parent widget.
            options (list, optional): List of options for the combobox.
        """
        super().__init__(parent)
        self.options = options

    def createEditor(self, parent, option, index):
        """
        Creates an editor for the combobox.

        Args:
            parent (QtWidgets.QWidget): Parent widget.
            option (QtWidgets.QStyleOptionViewItem): Style options for the item.
            index (QtCore.QModelIndex): Index of the item in the model.

        Returns:
            QtWidgets.QComboBox: The created combobox editor.
        """
        editor = QtWidgets.QComboBox(parent)
        editor.setEditable(True)
        return editor

    def setEditorData(self, editor, index):
        """
        Sets the data for the combobox editor.

        Args:
            editor (QtWidgets.QComboBox): The combobox editor.
            index (QtCore.QModelIndex): Index of the item in the model.
        """
        text = index.data(Qt.ItemDataRole.DisplayRole)
        editor.addItems(self.options)
        editor.setEditText(text)

    def setModelData(self, editor, model, index):
        """
        Updates the model with the data from the combobox editor.

        Args:
            editor (QtWidgets.QComboBox): The combobox editor.
            model (QtGui.QAbstractItemModel): The model to update.
            index (QtCore.QModelIndex): Index of the item in the model.
        """
        model.setData(index, editor.currentText(), Qt.ItemDataRole.EditRole)

class CustomProxyModel(QtCore.QSortFilterProxyModel):
    """
    A custom proxy model that filters table rows based on expressions set for specific columns.

    Attributes:
        _filters (dict): A dictionary to store filter expressions for columns.
        header_names (dict): A dictionary to store header names for the table.

    Properties:
        filters: Getter for the current filter dictionary.

    """
    def __init__(self, parent=None):
        """
        Get the current filter expressions applied to columns.

        Returns:
            dict: Dictionary of column filters.
        """
        super().__init__(parent)
        self._filters = dict()
        self.header_names = {}

    @property
    def filters(self):
        """
        Get the current filter expressions applied to columns.

        Returns:
            dict: Dictionary of column filters.
        """
        return self._filters

    def setFilter(self, expresion, column, action_name=None, exact_match=False):
        """
        Apply a filter expression to a specific column, or remove it if necessary.

        Args:
            expresion (str): The filter expression.
            column (int): The index of the column to apply the filter to.
            action_name (str, optional): Name of the action, can be empty. Defaults to None.
            exact_match (bool, optional): If True, use exact matching for the filter. Defaults to False.
        """
        if expresion or expresion == '':
            if column in self.filters:
                if action_name or action_name == '':
                    self.filters[column].remove(expresion)
                else:
                    self.filters[column].append((expresion, exact_match))
            else:
                self.filters[column] = [(expresion, exact_match)]
        elif column in self.filters:
            if action_name or action_name == '':
                self.filters[column].remove(expresion)
                if not self.filters[column]:
                    del self.filters[column]
            else:
                del self.filters[column]
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        """
        Check if a row passes the filter criteria based on the column filters.

        Args:
            source_row (int): The row number in the source model.
            source_parent (QModelIndex): The parent index of the row.

        Returns:
            bool: True if the row meets the filter criteria, False otherwise.
        """
        for column, expresions in self.filters.items():
            text = self.sourceModel().index(source_row, column, source_parent).data()

            if isinstance(text, QtCore.QDate): #Check if filters are QDate. If True, convert to text
                text = text.toString("yyyy-MM-dd")

            match_found = False 

            for expresion, exact_match in expresions:
                if expresion == '':  # If expression is empty, match empty cells
                    if text == '':
                        break

                if exact_match:
                    if text in expresion:  # Verificar si `text` estÃ¡ en la lista `expresion`
                        match_found = True
                        break
                
                elif re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', expresion):
                    expresion = QtCore.QDate.fromString(expresion, "dd/MM/yyyy")
                    expresion = expresion.toString("yyyy-MM-dd")
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        match_found = True
                        break

                else:
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        match_found = True
                        break

            if not match_found:
                return False
        return True

class EditableTableModel(QtSql.QSqlTableModel):
    """
    A custom SQL table model that supports editable columns, headers, and special flagging behavior based on user permissions.

    Signals:
        updateFailed (str): Signal emitted when an update to the model fails.
    """
    updateFailed = QtCore.pyqtSignal(str)

    def __init__(self, parent=None, column_range=None):
        """
        Initialize the model with user permissions and optional database and column range.

        Args:
            username (str): The username for permission-based actions.
            parent (QObject, optional): Parent object for the model. Defaults to None.
            column_range (list, optional): A list specifying the range of columns. Defaults to None.
        """
        super().__init__(parent)
        self.column_range = column_range

    def setAllColumnHeaders(self, headers):
        """
        Set headers for all columns in the model.

        Args:
            headers (list): A list of header names.
        """
        for column, header in enumerate(headers):
            self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIndividualColumnHeader(self, column, header):
        """
        Set the header for a specific column.

        Args:
            column (int): The column index.
            header (str): The header name.
        """
        self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIconColumnHeader(self, column, icon):
        """
        Set an icon in the header for a specific column.

        Args:
            column (int): The column index.
            icon (QIcon): The icon to display in the header.
        """
        self.setHeaderData(column, QtCore.Qt.Orientation.Horizontal, icon, Qt.ItemDataRole.DecorationRole)

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        """
        Retrieve the header data for a specific section of the model.

        Args:
            section (int): The section index (column or row).
            orientation (Qt.Orientation): The orientation (horizontal or vertical).
            role (Qt.ItemDataRole, optional): The role for the header data. Defaults to DisplayRole.

        Returns:
            QVariant: The header data for the specified section.
        """
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return super().headerData(section, orientation, role)
        return super().headerData(section, orientation, role)

    def flags(self, index):
        """
        Get the item flags for a given index, controlling editability and selection based on user permissions.

        Args:
            index (QModelIndex): The index of the item.

        Returns:
            Qt.ItemFlags: The flags for the specified item.
        """
        flags = super().flags(index)
        if index.column() in range (2,37) or index.column() in self.column_range or index.column() == 0:
            flags &= ~Qt.ItemFlag.ItemIsEditable
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled
        else:
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable

    def getColumnHeaders(self, visible_columns):
        """
        Retrieve the headers for the specified visible columns.

        Args:
            visible_columns (list): List of column indices that are visible.

        Returns:
            list: A list of column headers for the visible columns.
        """
        column_headers = [self.headerData(col, Qt.Orientation.Horizontal) for col in visible_columns]
        return column_headers

class EditableComboBoxDelegate2(QtWidgets.QStyledItemDelegate):
    """
    A delegate for editing combobox items in a view.

    Attributes:
        options (list): List of options to populate the combobox.
    """
    def __init__(self, parent=None, options=None):
        """
        Initializes the EditableComboBoxDelegate with the specified options.

        Args:
            parent (QtWidgets.QWidget, optional): Parent widget.
            options (list, optional): List of options for the combobox.
        """
        super().__init__(parent)
        self.options = options

    def createEditor(self, parent, option, index):
        """
        Creates an editor for the combobox.

        Args:
            parent (QtWidgets.QWidget): Parent widget.
            option (QtWidgets.QStyleOptionViewItem): Style options for the item.
            index (QtCore.QModelIndex): Index of the item in the model.

        Returns:
            QtWidgets.QComboBox: The created combobox editor.
        """
        editor = QtWidgets.QComboBox(parent)
        editor.setEditable(True)
        return editor

    def setEditorData(self, editor, index):
        """
        Sets the data for the combobox editor.

        Args:
            editor (QtWidgets.QComboBox): The combobox editor.
            index (QtCore.QModelIndex): Index of the item in the model.
        """
        text = index.data(Qt.ItemDataRole.DisplayRole)
        editor.addItems(self.options)
        editor.setEditText(text)

    def setModelData(self, editor, model, index):
        """
        Updates the model with the data from the combobox editor.

        Args:
            editor (QtWidgets.QComboBox): The combobox editor.
            model (QtGui.QAbstractItemModel): The model to update.
            index (QtCore.QModelIndex): Index of the item in the model.
        """
        model.setData(index, editor.currentText(), Qt.ItemDataRole.EditRole)

class CustomProxyModel2(QtCore.QSortFilterProxyModel):
    """
    A custom proxy model that filters table rows based on expressions set for specific columns.

    Attributes:
        _filters (dict): A dictionary to store filter expressions for columns.
        header_names (dict): A dictionary to store header names for the table.

    Properties:
        filters: Getter for the current filter dictionary.

    """
    def __init__(self, parent=None):
        """
        Get the current filter expressions applied to columns.

        Returns:
            dict: Dictionary of column filters.
        """
        super().__init__(parent)
        self._filters = dict()
        self.header_names = {}

    @property
    def filters(self):
        """
        Get the current filter expressions applied to columns.

        Returns:
            dict: Dictionary of column filters.
        """
        return self._filters

    def setFilter(self, expresion, column, action_name=None, exact_match=False):
        """
        Apply a filter expression to a specific column, or remove it if necessary.

        Args:
            expresion (str): The filter expression.
            column (int): The index of the column to apply the filter to.
            action_name (str, optional): Name of the action, can be empty. Defaults to None.
            exact_match (bool, optional): If True, use exact matching for the filter. Defaults to False.
        """
        if expresion or expresion == '':
            if column in self.filters:
                if action_name or action_name == '':
                    self.filters[column].remove(expresion)
                else:
                    self.filters[column].append((expresion, exact_match))
            else:
                self.filters[column] = [(expresion, exact_match)]
        elif column in self.filters:
            if action_name or action_name == '':
                self.filters[column].remove(expresion)
                if not self.filters[column]:
                    del self.filters[column]
            else:
                del self.filters[column]
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        """
        Check if a row passes the filter criteria based on the column filters.

        Args:
            source_row (int): The row number in the source model.
            source_parent (QModelIndex): The parent index of the row.

        Returns:
            bool: True if the row meets the filter criteria, False otherwise.
        """
        for column, expresions in self.filters.items():
            text = self.sourceModel().index(source_row, column, source_parent).data()

            if isinstance(text, QtCore.QDate): #Check if filters are QDate. If True, convert to text
                text = text.toString("yyyy-MM-dd")

            match_found = False 

            for expresion, exact_match in expresions:
                if expresion == '':  # If expression is empty, match empty cells
                    if text == '':
                        break

                if exact_match:
                    if text in expresion:  # Verificar si `text` estÃ¡ en la lista `expresion`
                        match_found = True
                        break
                
                elif re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', expresion):
                    expresion = QtCore.QDate.fromString(expresion, "dd/MM/yyyy")
                    expresion = expresion.toString("yyyy-MM-dd")
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        match_found = True
                        break

                else:
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        match_found = True
                        break

            if not match_found:
                return False
        return True

class EditableTableModel2(QtSql.QSqlTableModel):
    """
    A custom SQL table model that supports editable columns, headers, and special flagging behavior based on user permissions.

    Signals:
        updateFailed (str): Signal emitted when an update to the model fails.
    """
    updateFailed = QtCore.pyqtSignal(str)

    def __init__(self, parent=None, column_range=None):
        """
        Initialize the model with user permissions and optional database and column range.

        Args:
            username (str): The username for permission-based actions.
            parent (QObject, optional): Parent object for the model. Defaults to None.
            column_range (list, optional): A list specifying the range of columns. Defaults to None.
        """
        super().__init__(parent)
        self.column_range = column_range

    def setAllColumnHeaders(self, headers):
        """
        Set headers for all columns in the model.

        Args:
            headers (list): A list of header names.
        """
        for column, header in enumerate(headers):
            self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIndividualColumnHeader(self, column, header):
        """
        Set the header for a specific column.

        Args:
            column (int): The column index.
            header (str): The header name.
        """
        self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIconColumnHeader(self, column, icon):
        """
        Set an icon in the header for a specific column.

        Args:
            column (int): The column index.
            icon (QIcon): The icon to display in the header.
        """
        self.setHeaderData(column, QtCore.Qt.Orientation.Horizontal, icon, Qt.ItemDataRole.DecorationRole)

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        """
        Retrieve the header data for a specific section of the model.

        Args:
            section (int): The section index (column or row).
            orientation (Qt.Orientation): The orientation (horizontal or vertical).
            role (Qt.ItemDataRole, optional): The role for the header data. Defaults to DisplayRole.

        Returns:
            QVariant: The header data for the specified section.
        """
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return super().headerData(section, orientation, role)
        return super().headerData(section, orientation, role)

    def flags(self, index):
        """
        Get the item flags for a given index, controlling editability and selection based on user permissions.

        Args:
            index (QModelIndex): The index of the item.

        Returns:
            Qt.ItemFlags: The flags for the specified item.
        """
        flags = super().flags(index)
        if index.column() in range (0,37) or index.column() in self.column_range:
            flags &= ~Qt.ItemFlag.ItemIsEditable
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled
        else:
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable

    def getColumnHeaders(self, visible_columns):
        """
        Retrieve the headers for the specified visible columns.

        Args:
            visible_columns (list): List of column indices that are visible.

        Returns:
            list: A list of column headers for the visible columns.
        """
        column_headers = [self.headerData(col, Qt.Orientation.Horizontal) for col in visible_columns]
        return column_headers

class Ui_EditTags_Facturation_Window(QtWidgets.QMainWindow):
    """
    A window for editing tags in the application for invoicing.

    Attributes:
        model (EditableTableModel): The data model for the table.
        proxy (CustomProxyModel): The proxy model for filtering and sorting.
        db (object): Database connection.
        checkbox_states (dict): States of checkboxes.
        dict_valuesuniques (dict): Unique values for columns.
        dict_ordersort (dict): Sorting order for columns.
        hiddencolumns (list): List of hidden column indices.
        action_checkbox_map (dict): Map of actions to checkboxes.
        checkbox_filters (dict): Filters based on checkbox states.
        name (str): Name associated with the window.
        variable (str): Variable used in the window.
    """
    def __init__(self,name,db):
        """
        Initializes the Ui_EditTags_Facturation_Window with the specified name and database connection.

        Args:
            name (str): Name associated with the window.
            db (object): Database connection.
        """
        super().__init__()
        self.model = EditableTableModel()
        self.proxy = CustomProxyModel()
        self.model2 = EditableTableModel2()
        self.proxy2 = CustomProxyModel2()
        self.db = db

        self.checkbox_states = {}
        self.dict_valuesuniques = {}
        self.dict_ordersort = {}
        self.hiddencolumns = []
        self.action_checkbox_map = {}
        self.checkbox_filters = {}
        self.variable = ''

        self.checkbox_states2 = {}
        self.dict_valuesuniques2 = {}
        self.dict_ordersort2 = {}
        self.hiddencolumns2 = []
        self.action_checkbox_map2 = {}
        self.checkbox_filters2 = {}
        self.tableEditTags2 = None
        self.variable2 = None

        self.name = name
        self.setupUi(self)
        self.model.dataChanged.connect(self.saveChanges)

    def closeEvent(self, event):
        """
        Handles the event triggered when the window is closed. Ensures models are cleared and database connections are closed.

        Args:
            event (QCloseEvent): The close event triggered when the window is about to close.
        """
        if self.model:
            self.model.clear()
        if self.model2:
            self.model2.clear()
        self.closeConnection()

    def closeConnection(self):
        """
        Closes the database connection and clears any references to the models.
        Also removes the 'drawing_index' database connection from Qt's connection list if it exists.
        """
        self.tableEditTags.setModel(None)
        del self.model
        if self.tableEditTags2:
            self.tableEditTags2.setModel(None)
        del self.model2
        if self.db:
            self.db.close()
            del self.db
            if QtSql.QSqlDatabase.contains("qt_sql_default_connection"):
                QtSql.QSqlDatabase.removeDatabase("qt_sql_default_connection")

    def setupUi(self, EditTagsFacturation_Window):
        """
        Sets up the user interface for the EditTagsFacturation_Window.

        Args:
            EditTagsFacturation_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        EditTagsFacturation_Window.setObjectName("EditTagsFacturation_Window")
        EditTagsFacturation_Window.resize(790, 595)
        EditTagsFacturation_Window.setMinimumSize(QtCore.QSize(790, 595))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        EditTagsFacturation_Window.setWindowIcon(icon)
        EditTagsFacturation_Window.setStyleSheet(
".QFrame {\n"
"    border: 2px solid black;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=EditTagsFacturation_Window)
        self.centralwidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setVerticalSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.hcab=QtWidgets.QHBoxLayout()
        self.hcab.setObjectName("hcab")
        self.toolDeleteFilter = QtWidgets.QToolButton(self.frame)
        self.toolDeleteFilter.setObjectName("Save_Button")
        self.hcab.addWidget(self.toolDeleteFilter)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Delete.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolDeleteFilter.setIcon(icon)
        self.toolDeleteFilter.setIconSize(QtCore.QSize(25, 25))
        self.hcabspacer1=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer1)
        self.toolShow = QtWidgets.QToolButton(self.frame)
        self.toolShow.setObjectName("Show_Button")
        self.toolShow.setToolTip("Mostrar columnas")
        self.hcab.addWidget(self.toolShow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Eye.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolShow.setIcon(icon)
        self.toolShow.setIconSize(QtCore.QSize(25, 25))
        self.hcabspacer5=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer5)
        self.toolExpExcel = QtWidgets.QToolButton(self.frame)
        self.toolExpExcel.setObjectName("ExpExcel_Button")
        self.toolExpExcel.setToolTip("Exportar a Excel")
        self.hcab.addWidget(self.toolExpExcel)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Download.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolExpExcel.setIcon(icon)
        self.toolExpExcel.setIconSize(QtCore.QSize(25, 25))

        self.hcabspacer7=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer7)
        self.toolImpExcel = QtWidgets.QToolButton(self.frame)
        self.toolImpExcel.setObjectName("ImpExcel_Button")
        self.toolImpExcel.setToolTip("Importar Excel")
        self.hcab.addWidget(self.toolImpExcel)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Upload.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolImpExcel.setIcon(icon)
        self.toolImpExcel.setIconSize(QtCore.QSize(25, 25))
        self.hcabspacer2=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer2)
        self.toolInvoice = QtWidgets.QToolButton(self.frame)
        self.toolInvoice.setObjectName("Invoice_Button")
        self.toolInvoice.setToolTip("Exportar a Factura")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Invoice_Send.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolInvoice.setIcon(icon)
        self.toolInvoice.setIconSize(QtCore.QSize(25, 25))
        self.hcab.addWidget(self.toolInvoice)
        self.hcabspacer3=QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer3)

        self.tooladdItem = QtWidgets.QToolButton(self.frame)
        self.tooladdItem.setObjectName("tooladdItem")
        self.tooladdItem.setToolTip("AÃ±adir Item")
        self.hcab.addWidget(self.tooladdItem)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Add.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tooladdItem.setIcon(icon)
        self.tooladdItem.setIconSize(QtCore.QSize(25, 25))

        self.hcabspacer=QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hcab.addItem(self.hcabspacer)
        self.gridLayout_2.addLayout(self.hcab, 0, 0, 1, 1)
        self.hLayout1 = QtWidgets.QHBoxLayout()
        self.hLayout1.setObjectName("hLayout1")
        self.label_NumOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOrder.setMinimumSize(QtCore.QSize(80, 25))
        self.label_NumOrder.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumOrder.setFont(font)
        self.label_NumOrder.setObjectName("label_NumOrder")
        self.hLayout1.addWidget(self.label_NumOrder)
        self.Numorder_EditTags = QtWidgets.QLineEdit(parent=self.frame)
        self.Numorder_EditTags.setMinimumSize(QtCore.QSize(250, 25))
        self.Numorder_EditTags.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Numorder_EditTags.setFont(font)
        self.Numorder_EditTags.setObjectName("Numorder_EditTags")
        self.hLayout1.addWidget(self.Numorder_EditTags)
        self.Button_Query = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Query.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Query.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Query.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.Button_Query.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255)\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Query.setObjectName("Button_Query")
        self.hLayout1.addWidget(self.Button_Query)
        self.gridLayout_2.addLayout(self.hLayout1, 1, 0, 1, 1)
        self.tableEditTags=QtWidgets.QTableView(parent=self.frame)
        self.model = EditableTableModel()
        self.tableEditTags.setObjectName("tableEditTags")
        self.gridLayout_2.addWidget(self.tableEditTags, 3, 0, 1, 1)
        self.hLayout3 = QtWidgets.QHBoxLayout()
        self.hLayout3.setObjectName("hLayout3")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout3.addItem(spacerItem2)
        self.label_SumItems = QtWidgets.QLabel(parent=self.frame)
        self.label_SumItems.setMinimumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setMaximumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setText("")
        self.label_SumItems.setObjectName("label_SumItems")
        self.hLayout3.addWidget(self.label_SumItems)
        self.label_SumValue = QtWidgets.QLabel(parent=self.frame)
        self.label_SumValue.setMinimumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setMaximumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setText("")
        self.label_SumValue.setObjectName("label_SumValue")
        self.hLayout3.addWidget(self.label_SumValue)
        self.label_CountItems = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems.setMinimumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setMaximumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setText("")
        self.label_CountItems.setObjectName("label_CountItems")
        self.hLayout3.addWidget(self.label_CountItems)
        self.label_CountValue = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue.setMinimumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setMaximumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setText("")
        self.label_CountValue.setObjectName("label_CountValue")
        self.hLayout3.addWidget(self.label_CountValue)
        self.gridLayout_2.addLayout(self.hLayout3, 4, 0, 1, 1)
        self.tableEditTags2=QtWidgets.QTableView(parent=self.frame)
        self.tableEditTags2.setObjectName("tableEditTags2")
        self.gridLayout_2.addWidget(self.tableEditTags2, 5, 0, 1, 1)
        self.tableEditTags2.hide()
        self.hLayout4 = QtWidgets.QHBoxLayout()
        self.hLayout4.setObjectName("hLayout4")
        spacerItem1 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout4.addItem(spacerItem1)
        self.label_SumItems2 = QtWidgets.QLabel(parent=self.frame)
        self.label_SumItems2.setMinimumSize(QtCore.QSize(40, 10))
        self.label_SumItems2.setMaximumSize(QtCore.QSize(40, 10))
        self.label_SumItems2.setText("")
        self.label_SumItems2.setObjectName("label_SumItems2")
        self.hLayout4.addWidget(self.label_SumItems2)
        self.label_SumValue2 = QtWidgets.QLabel(parent=self.frame)
        self.label_SumValue2.setMinimumSize(QtCore.QSize(80, 20))
        self.label_SumValue2.setMaximumSize(QtCore.QSize(80, 20))
        self.label_SumValue2.setText("")
        self.label_SumValue2.setObjectName("label_SumValue2")
        self.hLayout4.addWidget(self.label_SumValue2)
        self.label_CountItems2 = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems2.setMinimumSize(QtCore.QSize(60, 10))
        self.label_CountItems2.setMaximumSize(QtCore.QSize(60, 10))
        self.label_CountItems2.setText("")
        self.label_CountItems2.setObjectName("label_CountItems2")
        self.hLayout4.addWidget(self.label_CountItems2)
        self.label_CountValue2 = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue2.setMinimumSize(QtCore.QSize(80, 10))
        self.label_CountValue2.setMaximumSize(QtCore.QSize(80, 10))
        self.label_CountValue2.setText("")
        self.label_CountValue2.setObjectName("label_CountValue2")
        self.hLayout4.addWidget(self.label_CountValue2)
        self.gridLayout_2.addLayout(self.hLayout4, 6, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        EditTagsFacturation_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=EditTagsFacturation_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 22))
        self.menubar.setObjectName("menubar")
        EditTagsFacturation_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=EditTagsFacturation_Window)
        self.statusbar.setObjectName("statusbar")
        EditTagsFacturation_Window.setStatusBar(self.statusbar)

        self.retranslateUi(EditTagsFacturation_Window)
        QtCore.QMetaObject.connectSlotsByName(EditTagsFacturation_Window)
        self.Button_Query.clicked.connect(self.query_tags)
        self.toolDeleteFilter.clicked.connect(self.delete_allFilters)
        self.toolShow.clicked.connect(self.show_columns)
        self.toolExpExcel.clicked.connect(self.exporttoexcel)
        self.toolImpExcel.clicked.connect(self.importexcel)
        self.toolInvoice.clicked.connect(self.send_to_invoice)
        self.tooladdItem.clicked.connect(self.add_item)
        self.Numorder_EditTags.returnPressed.connect(self.query_tags)
        self.model.dataChanged.connect(self.saveChanges)
        self.createContextMenu()

# Function to translate and updates the text of various UI elements
    def retranslateUi(self, EditTagsFacturation_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        EditTagsFacturation_Window.setWindowTitle(_translate("EditTagsFacturation_Window", "Editar Tags"))
        self.tableEditTags.setSortingEnabled(True)
        self.Button_Query.setText(_translate("EditTagsFacturation_Window", "Buscar"))
        self.label_NumOrder.setText(_translate("EditTagsFacturation_Window", "NÂº Pedido:"))

# Function to delete all filters when tool button is clicked
    def delete_allFilters(self):
        """
        Resets all filters and updates the table model with unique values for each column.
        """
        if self.proxy.rowCount() != 0:
            columns_number=self.model.columnCount()
            for index in range(columns_number):
                if index in self.proxy.filters:
                    del self.proxy.filters[index]
                self.model.setIconColumnHeader(index, '')

            self.checkbox_states = {}
            self.dict_valuesuniques = {}
            self.dict_ordersort = {}
            self.checkbox_filters = {}

            self.proxy.invalidateFilter()
            # self.tableEditTags.setModel(None)
            self.tableEditTags.setModel(self.proxy)

            # Getting the unique values for each column of the model
            for column in range(self.model.columnCount()):
                list_valuesUnique = []
                if column not in self.checkbox_states:
                    self.checkbox_states[column] = {}
                    self.checkbox_states[column]['Seleccionar todo'] = True
                    for row in range(self.model.rowCount()):
                        value = self.model.record(row).value(column)
                        if value not in list_valuesUnique:
                            if isinstance(value, QtCore.QDate):
                                value=value.toString("dd/MM/yyyy")
                            list_valuesUnique.append(str(value))
                            self.checkbox_states[column][value] = True
                    self.dict_valuesuniques[column] = list_valuesUnique

            self.tableEditTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableEditTags.horizontalHeader().setSectionResizeMode(3,QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableEditTags.horizontalHeader().setSectionResizeMode(8,QtWidgets.QHeaderView.ResizeMode.Stretch)

        if self.proxy2.rowCount() != 0:
            columns_number=self.model2.columnCount()
            for index in range(columns_number):
                if index in self.proxy2.filters:
                    del self.proxy2.filters[index]
                self.model2.setIconColumnHeader(index, '')

            self.checkbox_states = {}
            self.dict_valuesuniques = {}
            self.dict_ordersort = {}
            self.checkbox_filters = {}

            self.proxy2.invalidateFilter()
            # self.tableEditTags.setModel(None)
            self.tableEditTags2.setModel(self.proxy2)

            # Getting the unique values for each column of the model
            for column in range(self.model2.columnCount()):
                list_valuesUnique = []
                if column not in self.checkbox_states:
                    self.checkbox_states[column] = {}
                    self.checkbox_states[column]['Seleccionar todo'] = True
                    for row in range(self.model2.rowCount()):
                        value = self.model2.record(row).value(column)
                        if value not in list_valuesUnique:
                            if isinstance(value, QtCore.QDate):
                                value=value.toString("dd/MM/yyyy")
                            list_valuesUnique.append(str(value))
                            self.checkbox_states[column][value] = True
                    self.dict_valuesuniques[column] = list_valuesUnique

            self.tableEditTags2.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableEditTags2.horizontalHeader().setSectionResizeMode(3,QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableEditTags2.horizontalHeader().setSectionResizeMode(8,QtWidgets.QHeaderView.ResizeMode.Stretch)

# Function to save changes into database
    def saveChanges(self):
        """
        Saves changes made to the data models and updates unique values for each column.
        """
        self.model.submitAll()

        for column in range(self.model.columnCount()):
            list_valuesUnique = []
            for row in range(self.model.rowCount()):
                value = self.model.record(row).value(column)
                if value not in list_valuesUnique:
                    if isinstance(value, QtCore.QDate):
                        value=value.toString("dd/MM/yyyy")
                    list_valuesUnique.append(str(value))
                    if value not in self.checkbox_states[column]:
                        self.checkbox_states[column][value] = True
            self.dict_valuesuniques[column] = list_valuesUnique

        self.model2.submitAll()

        for column in range(self.model2.columnCount()):
            list_valuesUnique2 = []
            for row in range(self.model2.rowCount()):
                value = self.model2.record(row).value(column)
                if value not in list_valuesUnique2:
                    if isinstance(value, QtCore.QDate):
                        value=value.toString("dd/MM/yyyy")
                    list_valuesUnique2.append(str(value))
                    if value not in self.checkbox_states2[column]:
                        self.checkbox_states2[column][value] = True
            self.dict_valuesuniques2[column] = list_valuesUnique2

# Function to load table and setting in the window
    def query_tags(self):
        """
        Queries the database for tags based on the number order, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        self.checkbox_states = {}
        self.dict_valuesuniques = {}
        self.dict_ordersort = {}
        self.hiddencolumns = []

        self.model.dataChanged.disconnect(self.saveChanges)
        self.numorder = self.Numorder_EditTags.text()

        if self.numorder=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Rellena alguno de los campos")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon
            self.model.dataChanged.connect(self.saveChanges)

        else:
            if not re.match(r'^(P|PA)-\d{2}/\d{3}.*$', self.numorder):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("El nÃºmero de pedido debe tener formato P-XX/YYY o PA-XX/YYY")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon
                self.model.dataChanged.connect(self.saveChanges)

            else:
                query = ('''
                        SELECT num_order, product_type."variable"
                        FROM orders
                        INNER JOIN offers ON (offers."num_offer" = orders."num_offer")
                        INNER JOIN product_type ON (product_type."material" = offers."material")
                        WHERE
                        UPPER (orders."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query,(self.numorder,))
                    results_variable=cur.fetchone()
                    self.variable = results_variable[1] if results_variable != None else ''
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()
                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                if results_variable == None:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("EL nÃºmero de pedido no existe")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon
                    self.model.dataChanged.connect(self.saveChanges)

                else:
                    query_flow = ('''
                        SELECT tags_data.tags_flow."num_order"
                        FROM tags_data.tags_flow
                        WHERE UPPER (tags_data.tags_flow."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                    query_temp = ('''
                        SELECT tags_data.tags_temp."num_order"
                        FROM tags_data.tags_temp
                        WHERE UPPER (tags_data.tags_temp."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                    query_level = ('''
                        SELECT tags_data.tags_level."num_order"
                        FROM tags_data.tags_level
                        WHERE UPPER (tags_data.tags_level."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                    query_others = ('''
                        SELECT tags_data.tags_others."num_order"
                        FROM tags_data.tags_others
                        WHERE UPPER (tags_data.tags_others."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_flow,(self.numorder,))
                        results_flow=cur.fetchall()
                        cur.execute(query_temp,(self.numorder,))
                        results_temp=cur.fetchall()
                        cur.execute(query_level,(self.numorder,))
                        results_level=cur.fetchall()
                        cur.execute(query_others,(self.numorder,))
                        results_others=cur.fetchall()

                        if len(results_flow) != 0 and len(results_temp) != 0:
                            self.variable = 'Caudal+Temp'
                        elif len(results_flow) != 0 and len(results_level) != 0:
                            self.variable = 'Caudal+Nivel'
                        elif len(results_flow) != 0:
                            self.variable = 'Caudal'
                        elif len(results_temp) != 0:
                            self.variable = 'Temperatura'
                        elif len(results_level) != 0:
                            self.variable = 'Nivel'
                        elif len(results_others) != 0:
                            self.variable = 'Otros'
                        else:
                            self.variable = ''

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()
                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

                    if self.variable == 'Caudal+Temp':
                        self.variable = 'Caudal'
                        self.variable2 = 'Temperatura'
                        self.model.setTable("tags_data.tags_flow")
                        self.model2.setTable("tags_data.tags_temp")
                        self.model.table_check = "tags_data.tags_flow"
                        self.model2.table_check = "tags_data.tags_temp"
                        self.initial_column = 67
                        self.initial_column2 = 72
                        self.initial_column_ = 75
                        self.initial_column2_ = 80
                        self.column_position = 157
                        self.column_subposition = 158
                        self.column_difference = 160
                        self.column_position2 = 167
                        self.column_subposition2 = 168
                        self.column_difference2 = 170
                    elif self.variable =='Caudal+Nivel':
                        self.variable = 'Caudal'
                        self.variable2 = 'Nivel'
                        self.model.setTable("tags_data.tags_flow")
                        self.model2.setTable("tags_data.tags_level")
                        self.initial_column = 67
                        self.initial_column2 = 72
                        self.initial_column_ = 61
                        self.initial_column2_ = 66
                        self.column_position = 157
                        self.column_subposition = 158
                        self.column_difference = 160
                        self.column_position2 = 170
                        self.column_subposition2 = 171
                        self.column_difference2 = 173
                    elif self.variable == 'Caudal':
                        self.model.setTable("tags_data.tags_flow")
                        self.initial_column = 67
                        self.initial_column2 = 72
                        self.column_position = 157
                        self.column_subposition = 158
                        self.column_difference = 160
                    elif self.variable == 'Temperatura':
                        self.model.setTable("tags_data.tags_temp")
                        self.initial_column = 75
                        self.initial_column2 = 80
                        self.column_position = 167
                        self.column_subposition = 168
                        self.column_difference = 170
                    elif self.variable == 'Nivel':
                        self.model.setTable("tags_data.tags_level")
                        self.initial_column = 61
                        self.initial_column2 = 66
                        self.column_position = 170
                        self.column_subposition = 171
                        self.column_difference = 173
                    elif self.variable == 'Otros':
                        self.model.setTable("tags_data.tags_others")
                        self.initial_column = 20
                        self.initial_column2 = 25
                        self.column_position = 57
                        self.column_subposition = 58
                        self.column_difference = 60
                    self.model.setFilter(f"num_order <>'' AND UPPER(num_order) LIKE '%{self.numorder.upper()}%'")
                    self.model2.setFilter(f"num_order <>'' AND UPPER(num_order) LIKE '%{self.numorder.upper()}%'")

        if self.variable != '':
            self.tableEditTags.setModel(None)
            self.tableEditTags.setModel(self.proxy)
            self.model.select()

            self.proxy.setSourceModel(self.model)
            self.tableEditTags.setModel(self.proxy)

            columns_number=self.model.columnCount()
            for column in range(columns_number):
                self.tableEditTags.setItemDelegateForColumn(column, None)
            self.model.column_range = list(range(self.initial_column,self.initial_column + 3)) + list(range(self.initial_column2,columns_number - 9))

            if self.variable == 'Caudal':
                for i in range(3,4):
                    self.tableEditTags.hideColumn(i)
                for i in range(9,30):
                    self.tableEditTags.hideColumn(i)
                for i in range(31,33):
                    self.tableEditTags.hideColumn(i)
                for i in range(34,67):
                    self.tableEditTags.hideColumn(i)
                for i in range(72,156):
                    self.tableEditTags.hideColumn(i)

            elif self.variable == 'Temperatura':
                for i in range(3,4):
                    self.tableEditTags.hideColumn(i)
                for i in range(9,35):
                    self.tableEditTags.hideColumn(i)
                for i in range(36,38):
                    self.tableEditTags.hideColumn(i)
                for i in range(39,75):
                    self.tableEditTags.hideColumn(i)
                for i in range(80,166):
                    self.tableEditTags.hideColumn(i)

            elif self.variable == 'Nivel':
                for i in range(3,4):
                    self.tableEditTags.hideColumn(i)
                for i in range(10,36):
                    self.tableEditTags.hideColumn(i)
                for i in range(37,39):
                    self.tableEditTags.hideColumn(i)
                for i in range(40,61):
                    self.tableEditTags.hideColumn(i)
                for i in range(66,169):
                    self.tableEditTags.hideColumn(i)

            elif self.variable == 'Otros':
                for i in range(3,4):
                    self.tableEditTags.hideColumn(i)
                for i in range(9,11):
                    self.tableEditTags.hideColumn(i)
                for i in range(12,14):
                    self.tableEditTags.hideColumn(i)
                for i in range(15,20):
                    self.tableEditTags.hideColumn(i)
                for i in range(25,56):
                    self.tableEditTags.hideColumn(i)


            # self.tableEditTags.verticalHeader().hide()
            self.tableEditTags.setItemDelegate(AlignDelegate(self.tableEditTags))
            self.color_delegate = ColorDelegate_Position(self)
            self.tableEditTags.setItemDelegateForColumn(self.column_position, self.color_delegate)
            self.color_delegate = ColorDelegate_Subposition(self)
            self.tableEditTags.setItemDelegateForColumn(self.column_subposition, self.color_delegate)
            self.color_delegate = ColorDelegate_DifferenceAmount(self)
            self.tableEditTags.setItemDelegateForColumn(self.column_difference, self.color_delegate)
            self.tableEditTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableEditTags.horizontalHeader().setSectionResizeMode(0,QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableEditTags.horizontalHeader().setSectionResizeMode(columns_number-1,QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableEditTags.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid black;}")
            self.tableEditTags.setObjectName("tableEditTags")
            self.gridLayout_2.addWidget(self.tableEditTags, 3, 0, 1, 1)
            self.tableEditTags.setSortingEnabled(False)
            self.tableEditTags.horizontalHeader().sectionDoubleClicked.connect(lambda logicalIndex: self.on_view_horizontalHeader_sectionClicked(logicalIndex, self.tableEditTags, self.model, self.proxy))
            self.tableEditTags.horizontalHeader().customContextMenuRequested.connect(self.showColumnContextMenu)
            self.tableEditTags.horizontalHeader().setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)

        # Change all column names
            headers_flow = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido",
                            "PO", "PosiciÃ³n", "SubposiciÃ³n", "Tipo", "TamaÃ±o LÃ­nea",
                            "Rating", "Facing", "Schedule", "Material Brida", "Tipo Brida",
                            "Material Tubo", "TamaÃ±o Tomas (NÂº)", "Material Elemento", "Tipo Placa", "Espesor Placa",
                            "EstÃ¡ndar Placa", "Material Junta", "Material TornillerÃ­a", "Con. VÃ¡lvula", "Material Cuerpo Vlv.",
                            "NÂº Saltos", "Pipe Spec.", "Peso Aprox. (kg)", "Long. Aprox. (mm)", "NACE",
                            "Precio (â‚¬)", "Notas Oferta", "Cambios Comercial", "Fecha Contractual", "Ã˜ Orif. (mm)",
                            "Ã˜ D/V (mm)", "Cambios TÃ©cnicos", "Notas TÃ©cnicas", "NÂº Doc. EIPSA CÃ¡lculo", "Estado CÃ¡lculo",
                            "Fecha Estado CÃ¡lculo", "NÂº Doc. EIPSA Plano", "Estado Plano", "Fecha Estado Plano", "Orden de Compra",
                            "Fecha Orden Compra", "Notas Orden Compra", 'Plano Dimensional', "Plano OF", "Fecha OF",
                            "Notas Equipo", "Colada Placa", "Cert. Placa", "Colada Brida", "Cert. Brida", "NÂº Tapones",
                            "TamaÃ±o Tomas", "NÂº Tomas", "RTJ Porta Material", "RTJ Espesor", "RTJ Dim",
                            "Ã˜ Ext. Placa (mm)", "Mango", "TamaÃ±o EspÃ¡rragos", "Cantidad EspÃ¡rragos", "TamaÃ±o Extractor",
                            "Cantidad Extractor", "Estado FabricaciÃ³n", "InspecciÃ³n", "Fecha InspecciÃ³n", "EnvÃ­o RN", "Fecha RN", "Cod. Equipo",
                            "Cod. Fab. Equipo", "Trad. Equipo", "Cod. Brida Orif.", "Cod. Fab. Brida Orif.", "Cant. Brida Orif.",
                            "Cod. Brida LÃ­nea", "Cod. Fab. Brida LÃ­nea", "Cant. Brida LÃ­nea", "Cod. Junta", "Cod. Fab. Junta",
                            "Cant. Junta", "Cod. TornillerÃ­a", "Cod. Fab. TornillerÃ­a", "Cant. TornillerÃ­a", "Cod. Tapones",
                            "Cod. Fab. Tapones", "Cant. Tapones", "Cod. Extractor", "Cod. Fab. Extractor", "Cant. Extractor",
                            "Cod. Placa", "Cod. Fab. Placa", "Cant. Placa", "Cod. Niplo", "Cod. Fab. Niplo",
                            "Cant. Niplo", "Cod. Mango", "Cod. Fab. Mango", "Cant. Mango", "Cod. Ch. Ring",
                            "Cod. Fab. Ch. Ring", "Cant. Ch. Ring", "Cod. Tubo", "Cod. Fab. Tubo", "Cant. Tubo",
                            "Cod. Pieza2", "Cod. Fab. Pieza2", "Cant. Pieza2", "Diam. Int", "Pedido Tipo Tag",
                            "Trad. Brida. Orif", "Trad. Brida LÃ­nea", "Trad. Junta", "Trad. TornillerÃ­a", "Trad. Tapones",
                            "Trad. Extractor", "Trad. Placa", "Trad. Niplo", "Trad. Mango", "Trad. Ch. Ring",
                            "Trad. Tubo", "Trad. Pieza2", "Fecha PMI", "Fecha PH1", "ManÃ³metro PH1", "PresiÃ³n PH1",
                            "Estado PH1", "Notas PH1", "Fecha PH2", "ManÃ³metro PH2", "PresiÃ³n PH2",
                            "Estado PH2", "Notas PH2", "Fecha LP", "LP Colada 9PR5", "LP Colada 9D1B",
                            "LP Colada 996PB", "Estado LP", "Notas LP", "Fecha Dureza", "Dureza",
                            "Dureza HB", "Bola", "Carga", "Colada Dureza", "Estado Dureza",
                            "Notas Dureza", "Fecha Verif. Dim.", "Estado Verif. Dim.", "Notas Verif. Dim", "Fecha Verif. OF",
                            "Estado Verif. OF", "Notas Verif. OF", "Fotos",
                            "PosiciÃ³n", "SubposiciÃ³n", "Importe", "Diferencia", "CajaBr", "CajaPl", "DescripciÃ³n", "Notas",
                            "Estado FacturaciÃ³n"]

            headers_temp = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido",
                            "PO", "PosiciÃ³n", "SubposiciÃ³n", "Tipo", "Tipo TW",
                            "TamaÃ±o Brida", "Rating Brida", "Facing Brida", "Standard TW", "Material TW",
                            "Long. STD (mm)", "Long. Ins. (mm)", "Ã˜ RaÃ­z (mm)", "Ã˜ Punta (mm)", "Sensor",
                            "Material Sheath/Stem", "Ã˜ Sheath/Stem (mm)", "Insulation", "Temp Inf (ÂºC)", "Temp Sup ÂºC",
                            "Material Nipple Ext.", "Long. Nipple Ext. (mm)", "Material Head/Case", "Con. Elec./Diam. Case", "TT/Terminal Insulation",
                            "Material Brida LapJoint", "Material Junta", "Puntal", "Tubo", "NACE",
                            "Precio (â‚¬)", "Notas Oferta", "Cambio Comercial", "Fecha Contractual", "Stress",
                            "GeometrÃ­a", "Long. CÃ³nica (mm)", "Long. Recta (mm)", "Ã˜ Picaje (mm)", "Notas CÃ¡lculo",
                            "Cambios TÃ©cnicos", "Notas TÃ©cnicas", "NÂº Doc. EIPSA CÃ¡lculo", "Estado CÃ¡lculo", "Fecha Estado CÃ¡lculo",
                            "NÂº Doc. EIPSA Plano", "Estado Plano", "Fecha Estado Plano", "Notas Planos", "Orden de Compra",
                            "Fecha Orden Compra", "Notas Orden Compra", "Plano Dimensional", "Plano OF Sensor", "Fecha OF Sensor", 
                            "Notas Sensor", "Estado FabricaciÃ³n Sensor", "Plano OF TW", "Fecha OF TW", "Notas TW",
                            "Estado FabricaciÃ³n TW", "Colada Barra", "Cert. Barra", "Colada Brida", "Cert. Brida",
                            "Long. Corte TW (mm)", "Cota A Sensor (mm)", "Cota B Sensor (mm)", "Cota L Sensor (mm)", "TapÃ³n",
                            "Estado FabricaciÃ³n", "InspecciÃ³n", "Fecha InspecciÃ³n", "EnvÃ­o RN", "Fecha RN", "Cod. Equipo", "Cod. Fab. Equipo",
                            "Trad. Equipo", "Cod. Barra", "Cod. Fab. Barra", "Cant. Barra", "Cod. Tubo",
                            "Cod. Fab. Tubo", "Cant. Tubo", "Cod. Brida", "Cod. Fab. Brida", "Cant. Brida",
                            "Cod. Sensor", "Cod. Fab. Sensor", "Cant. Sensor", "Cod. Cabeza", "Cod. Fab. Cabeza",
                            "Cant. Cabeza", "Cod. BTB", "Cod. Fab. BTB", "Cant. BTB", "Cod. Niplo Ext.",
                            "Cod. Fab. Niplo Ext.", "Cant. Niplo Ext.", "Cod. Muelle", "Cod. Fab. Muelle", "Cant. Muelle",
                            "Cod. Puntal", "Cod. Fab. Puntal", "Cant. Puntal", "Cod. TapÃ³n", "Cod. Fab. TapÃ³n", "Cant. TapÃ³n",
                            "Cod. TW", "Cod. Fab. TW", "Cant. TW", "Cod. Adit.", "Cod. Fab. Adit.",
                            "Cant. Adit", "Pedido Tipo Tag", "Trad. Barra", "Trad. Tubo", "Trad. Brida",
                            "Trad. Sensor", "Trad. Cabeza", "Trad. BTB", "Trad. Niplo Ext.", "Trad. Muelle",
                            "Trad. Puntal", "Trad. TapÃ³n", "Trad. TW", "Trad. Adit.", "Fecha PMI", "Fecha PH1",
                            "ManÃ³metro PH1", "PresiÃ³n PH1", "Estado PH1", "Notas PH1", "Fecha PH2",
                            "ManÃ³metro PH2", "PresiÃ³n PH2", "Estado PH2", "Notas PH2", "Fecha LP",
                            "LP Colada 9PR5", "LP Colada 9D1B", "LP Colada 996PB", "Estado LP", "Notas LP",
                            "Fecha Dureza", "Dureza", "Dureza HB", "Bola", "Carga",
                            "Colada Dureza", "Estado Dureza", "Notas Dureza", "Fecha Verif. Dim.", "Estado Verif. Dim.",
                            "Notas Verif. Dim", "Fecha Verif. OF", "Estado Verif. OF.", "Notas Verif. OF", "Fecha Verif. OF Sensor",
                            "Estado Verif. OF Sensor", "Notas Verif. OF Sensor", "Fotos",
                            "PosiciÃ³n", "SubposiciÃ³n", "Importe", "Diferencia", "CajaBr", "CajaPl", "DescripciÃ³n", "Notas",
                            "Estado FacturaciÃ³n"]

            headers_level = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido",
                            "PO", "PosiciÃ³n", "SubposiciÃ³n", "Tipo", "Modelo",
                            "Material Cuerpo", "Tipo Conex. Proc.", "TamaÃ±o Conex. Proc.", "Rating Conex. Proc.", "Facing Conex. Proc.",
                            "Tipo Conex.", "Visibilidad (mm)", "Long. C-C (mm)", "Tipo VÃ¡lv.", "Tipo Conex. Ext.",
                            "TamaÃ±o Conex. Ext.", "Rating Conex. Ext.", "Facing Conex. Ext.", "Junta", "TornillerÃ­a",
                            "Iluminador", "Mat. Flotador", "Mat. Cubierta", "Escala", "Banderas",
                            "Cod. IP", "Tipo Brida", "Niplo Hex.", "Niplo Tubo", "Antifrost",
                            "NACE", "Precio (â‚¬)", "Notas Oferta", "Cambio Comercial", "Fecha Contractual",
                            "Dim. Flotador", "Junta Bridas", "Cambios TÃ©cnicos", "Notas TÃ©cnicas", "NÂº Doc. EIPSA Plano",
                            "Estado Plano", "Fecha Estado Plano", "Notas Plano", "Orden de Compra", "Fecha Orden Compra",
                            "Notas Orden Compra", "Plano Dimensional", "Plano OF", "Fecha OF", "Notas Equipo",
                            "Colada Cuerpo", "Cert. Cuerpo", "Colada Cuerpo Vlv", "Cert. Cuerpo Vlv", "Colada Brida Vlv", "Cert. Brida Vlv",
                            "Estado FabricaciÃ³n", "InspecciÃ³n", "Fecha InspecciÃ³n", "EnvÃ­o RN", "Fecha RN", "Cod. Equipo", "Cod. Fab. Equipo",
                            "Trad. Equipo", "Cod. Cuerpo", "Cod. Fab. Cuerpo", "Cant. Cuerpo", "Cod. Cubierta",
                            "Cod. Fab. Cubierta", "Cant. Cubierta", "Cod. TornillerÃ­a", "Cod. Fab. TornillerÃ­a", "Cant. TornillerÃ­a",
                            "Cdo. Niplo Hex.", "Cod. Fab. Niplo Hex.", "Cant. Niplo Hex.", "Cod. VÃ¡lv.", "Cod. Fab. VÃ¡lv.",
                            "Cant. VÃ¡lv.", "Cod. Brida", "Cod. Fab. Brida", "Cant. Brida", "Cod. DV",
                            "Cod. Fab. DV", "Cant. DV", "Cod. Escala", "Cod. Fab. Escala", "Cant. Escala",
                            "Cod. Ilum.", "Cod. Fab. Ilum", "Cant. Ilum", "Cod. Junta Vidrio", "Cod. Fab. Junta Vidrio",
                            "Cant. Junta Vidrio", "Cod. Vidrio", "Cod. Fab. Vidrio", "Cant. Vidrio", "Cod. Flotador",
                            "Cod. Fab. Flotador", "Cant. Flotador", "Cod. Mica", "Cod. Fab. Mica", "Cant. Mica",
                            "Cod. Flags", "Cod. Fab. Flags", "Cant. Flags", "Cod. Junta Brida", "Cod. Fab. Junta Brida",
                            "Cant. Junta Brida", "Cod. Niplo Tubo", "Cod. Fab. Niplo Tubo", "Cant. Niplo Tubo", "Cod. Antifrost",
                            "Cod. Fab. Antifrost", "Cant. Antifrost", "Pedido Tipo Tag", "Trad. Cuerpo", "Trad. Cubierta",
                            "Trad. TornillerÃ­a", "Trad. Niplo Hex.", "Trad. VÃ¡lv", "Trad. Brida", "Trad. DV",
                            "Trad. Escala", "Trad. Ilum.", "Trad. Junta Vidrio", "Trad. Vidrio", "Trad. Flotador",
                            "Trad. Mica", "Trad. Flags", "Trad. Junta Brida", "Trad. Niplo Tubo", "Trad. Antifrost",
                            "Fecha PMI", "Fecha PH1", "ManÃ³metro PH1", "PresiÃ³n PH1",
                            "Estado PH1", "Notas PH1", "Fecha PH2", "ManÃ³metro PH2", "PresiÃ³n PH2",
                            "Estado PH2", "Notas PH2", "Fecha LP", "LP Colada 9PR5", "LP Colada 9D1B",
                            "LP Colada 996PB", "Estado LP", "Notas LP", "Fecha Dureza", "Dureza",
                            "Dureza HB", "Bola", "Carga", "Colada Dureza", "Estado Dureza",
                            "Notas Dureza", "Fecha Verif. Dim.", "Estado Verif. Dim.", "Notas Verif. Dim", "Fecha Verif. OF",
                            "Estado Verif. OF", "Notas Verif. OF", "Fotos",
                            "PosiciÃ³n", "SubposiciÃ³n", "Importe", "Diferencia", "CajaBr", "CajaPl", "DescripciÃ³n", "Notas",
                            "Estado FacturaciÃ³n"]

            headers_others = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido",
                            "PO", "PosiciÃ³n", "SubposiciÃ³n", "DescripciÃ³n", "CÃ³digo Equipo",
                            "NACE", "Precio (â‚¬)", "Notas Oferta", "Cambio Comercial", "Fecha Contractual",
                            "Plano Dimensional", "Plano OF", "Fecha OF", "Colada", "Cert. Colada", "Estado FabricaciÃ³n", "InspecciÃ³n", "Fecha InspecciÃ³n", "EnvÃ­o RN", "Fecha RN",
                            "Fecha PMI", "Fecha PH1", "ManÃ³metro PH1", "PresiÃ³n PH1",
                            "Estado PH1", "Notas PH1", "Fecha PH2", "ManÃ³metro PH2", "PresiÃ³n PH2",
                            "Estado PH2", "Notas PH2", "Fecha LP", "LP Colada 9PR5", "LP Colada 9D1B",
                            "LP Colada 996PB", "Estado LP", "Notas LP", "Fecha Dureza", "Dureza",
                            "Dureza HB", "Bola", "Carga", "Colada Dureza", "Estado Dureza",
                            "Notas Dureza", "Fecha Verif. Dim.", "Estado Verif. Dim.", "Notas Verif. Dim", "Fecha Verif. OF",
                            "Estado Verif. OF", "Notas Verif. OF", "Fotos",
                            "PosiciÃ³n", "SubposiciÃ³n", "Importe", "Diferencia", "CajaBr", "CajaPl", "DescripciÃ³n", "Notas",
                            "Estado FacturaciÃ³n"]

            list_invoice_state = ['', 'Facturado']
            
            if self.variable == 'Caudal':
                self.model.setAllColumnHeaders(headers_flow)
                self.combo_itemtype = EditableComboBoxDelegate(self.tableEditTags, list_invoice_state)
                self.tableEditTags.setItemDelegateForColumn(165, self.combo_itemtype)
            elif self.variable == 'Temperatura':
                self.model.setAllColumnHeaders(headers_temp)
                self.combo_itemtype = EditableComboBoxDelegate(self.tableEditTags, list_invoice_state)
                self.tableEditTags.setItemDelegateForColumn(175, self.combo_itemtype)
            elif self.variable == 'Nivel':
                self.model.setAllColumnHeaders(headers_level)
                self.combo_itemtype = EditableComboBoxDelegate(self.tableEditTags, list_invoice_state)
                self.tableEditTags.setItemDelegateForColumn(178, self.combo_itemtype)
            elif self.variable == 'Otros':
                self.model.setAllColumnHeaders(headers_others)
                self.combo_itemtype = EditableComboBoxDelegate(self.tableEditTags, list_invoice_state)
                self.tableEditTags.setItemDelegateForColumn(64, self.combo_itemtype)

        # Getting the unique values for each column of the model
            for column in range(self.model.columnCount()):
                list_valuesUnique = []
                if column not in self.checkbox_states:
                    self.checkbox_states[column] = {}
                    self.checkbox_states[column]['Seleccionar todo'] = True
                    for row in range(self.model.rowCount()):
                        value = self.model.record(row).value(column)
                        if value not in list_valuesUnique:
                            if isinstance(value, QtCore.QDate):
                                value=value.toString("dd/MM/yyyy")
                            list_valuesUnique.append(str(value))
                            self.checkbox_states[column][value] = True
                    self.dict_valuesuniques[column] = list_valuesUnique

            self.model.dataChanged.connect(self.saveChanges)
            self.selection_model = self.tableEditTags.selectionModel()
            self.selection_model.selectionChanged.connect(lambda: self.countSelectedCells(self.model))

            if self.variable2 is not None:
                self.tableEditTags2.show()
                self.checkbox_states2 = {}
                self.dict_valuesuniques2 = {}
                self.dict_ordersort2 = {}
                self.hiddencolumns2 = []

                self.tableEditTags2.setModel(None)
                self.tableEditTags2.setModel(self.proxy2)
                self.model2.select()

                self.proxy2.setSourceModel(self.model2)
                self.tableEditTags2.setModel(self.proxy2)

                columns_number=self.model.columnCount()
                for column in range(columns_number):
                    self.tableEditTags.setItemDelegateForColumn(column, None)
                self.model2.column_range = list(range(self.initial_column_,self.initial_column_ + 3)) + list(range(self.initial_column2_,columns_number - 8))

                if self.variable2 == 'Caudal':
                    for i in range(3,4):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(9,30):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(31,33):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(34,67):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(72,156):
                        self.tableEditTags2.hideColumn(i)

                elif self.variable2 == 'Temperatura':
                    for i in range(3,4):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(9,35):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(36,38):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(39,75):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(80,166):
                        self.tableEditTags2.hideColumn(i)

                elif self.variable2 == 'Nivel':
                    for i in range(3,4):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(10,36):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(37,39):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(40,61):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(66,169):
                        self.tableEditTags2.hideColumn(i)

                elif self.variable2 == 'Otros':
                    for i in range(3,4):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(9,11):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(12,14):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(15,20):
                        self.tableEditTags2.hideColumn(i)
                    for i in range(25,56):
                        self.tableEditTags2.hideColumn(i)

                # self.tableEditTags.verticalHeader().hide()
                self.tableEditTags2.setItemDelegate(AlignDelegate(self.tableEditTags2))
                self.color_delegate = ColorDelegate_Position(self)
                self.tableEditTags2.setItemDelegateForColumn(self.column_position2, self.color_delegate)
                self.color_delegate = ColorDelegate_Subposition(self)
                self.tableEditTags2.setItemDelegateForColumn(self.column_subposition2, self.color_delegate)
                self.color_delegate = ColorDelegate_DifferenceAmount(self)
                self.tableEditTags2.setItemDelegateForColumn(self.column_difference2, self.color_delegate)
                self.tableEditTags2.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
                self.tableEditTags2.horizontalHeader().setSectionResizeMode(0,QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
                self.tableEditTags2.horizontalHeader().setSectionResizeMode(columns_number-1,QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
                self.tableEditTags2.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid black;}")
                self.tableEditTags2.setObjectName("tableEditTags2")
                self.gridLayout_2.addWidget(self.tableEditTags2, 5, 0, 1, 1)
                self.tableEditTags2.setSortingEnabled(False)
                self.tableEditTags2.horizontalHeader().sectionDoubleClicked.connect(lambda logicalIndex: self.on_view_horizontalHeader_sectionClicked(logicalIndex, self.tableEditTags2, self.model2, self.proxy2))
                self.tableEditTags2.horizontalHeader().customContextMenuRequested.connect(self.showColumnContextMenu)
                self.tableEditTags2.horizontalHeader().setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)

            # Change all column names
                headers_flow = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido",
                                "PO", "PosiciÃ³n", "SubposiciÃ³n", "Tipo", "TamaÃ±o LÃ­nea",
                                "Rating", "Facing", "Schedule", "Material Brida", "Tipo Brida",
                                "Material Tubo", "TamaÃ±o Tomas (NÂº)", "Material Elemento", "Tipo Placa", "Espesor Placa",
                                "EstÃ¡ndar Placa", "Material Junta", "Material TornillerÃ­a", "Con. VÃ¡lvula", "Material Cuerpo Vlv.",
                                "NÂº Saltos", "Pipe Spec.", "Peso Aprox. (kg)", "Long. Aprox. (mm)", "NACE",
                                "Precio (â‚¬)", "Notas Oferta", "Cambios Comercial", "Fecha Contractual", "Ã˜ Orif. (mm)",
                                "Ã˜ D/V (mm)", "Cambios TÃ©cnicos", "Notas TÃ©cnicas", "NÂº Doc. EIPSA CÃ¡lculo", "Estado CÃ¡lculo",
                                "Fecha Estado CÃ¡lculo", "NÂº Doc. EIPSA Plano", "Estado Plano", "Fecha Estado Plano", "Orden de Compra",
                                "Fecha Orden Compra", "Notas Orden Compra", 'Plano Dimensional', "Plano OF", "Fecha OF",
                                "Notas Equipo", "Colada Placa", "Cert. Placa", "Colada Brida", "Cert. Brida", "NÂº Tapones",
                                "TamaÃ±o Tomas", "NÂº Tomas", "RTJ Porta Material", "RTJ Espesor", "RTJ Dim",
                                "Ã˜ Ext. Placa (mm)", "Mango", "TamaÃ±o EspÃ¡rragos", "Cantidad EspÃ¡rragos", "TamaÃ±o Extractor",
                                "Cantidad Extractor", "Estado FabricaciÃ³n", "InspecciÃ³n", "Fecha InspecciÃ³n", "EnvÃ­o RN", "Fecha RN", "Cod. Equipo",
                                "Cod. Fab. Equipo", "Trad. Equipo", "Cod. Brida Orif.", "Cod. Fab. Brida Orif.", "Cant. Brida Orif.",
                                "Cod. Brida LÃ­nea", "Cod. Fab. Brida LÃ­nea", "Cant. Brida LÃ­nea", "Cod. Junta", "Cod. Fab. Junta",
                                "Cant. Junta", "Cod. TornillerÃ­a", "Cod. Fab. TornillerÃ­a", "Cant. TornillerÃ­a", "Cod. Tapones",
                                "Cod. Fab. Tapones", "Cant. Tapones", "Cod. Extractor", "Cod. Fab. Extractor", "Cant. Extractor",
                                "Cod. Placa", "Cod. Fab. Placa", "Cant. Placa", "Cod. Niplo", "Cod. Fab. Niplo",
                                "Cant. Niplo", "Cod. Mango", "Cod. Fab. Mango", "Cant. Mango", "Cod. Ch. Ring",
                                "Cod. Fab. Ch. Ring", "Cant. Ch. Ring", "Cod. Tubo", "Cod. Fab. Tubo", "Cant. Tubo",
                                "Cod. Pieza2", "Cod. Fab. Pieza2", "Cant. Pieza2", "Diam. Int", "Pedido Tipo Tag",
                                "Trad. Brida. Orif", "Trad. Brida LÃ­nea", "Trad. Junta", "Trad. TornillerÃ­a", "Trad. Tapones",
                                "Trad. Extractor", "Trad. Placa", "Trad. Niplo", "Trad. Mango", "Trad. Ch. Ring",
                                "Trad. Tubo", "Trad. Pieza2", "Fecha PMI", "Fecha PH1", "ManÃ³metro PH1", "PresiÃ³n PH1",
                                "Estado PH1", "Notas PH1", "Fecha PH2", "ManÃ³metro PH2", "PresiÃ³n PH2",
                                "Estado PH2", "Notas PH2", "Fecha LP", "LP Colada 9PR5", "LP Colada 9D1B",
                                "LP Colada 996PB", "Estado LP", "Notas LP", "Fecha Dureza", "Dureza",
                                "Dureza HB", "Bola", "Carga", "Colada Dureza", "Estado Dureza",
                                "Notas Dureza", "Fecha Verif. Dim.", "Estado Verif. Dim.", "Notas Verif. Dim", "Fecha Verif. OF",
                                "Estado Verif. OF", "Notas Verif. OF", "Fotos",
                                "PosiciÃ³n", "SubposiciÃ³n", "Importe", "Diferencia", "CajaBr", "CajaPl", "DescripciÃ³n", "Notas",
                                "Estado FacturaciÃ³n"]

                headers_temp = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido",
                                "PO", "PosiciÃ³n", "SubposiciÃ³n", "Tipo", "Tipo TW",
                                "TamaÃ±o Brida", "Rating Brida", "Facing Brida", "Standard TW", "Material TW",
                                "Long. STD (mm)", "Long. Ins. (mm)", "Ã˜ RaÃ­z (mm)", "Ã˜ Punta (mm)", "Sensor",
                                "Material Sheath/Stem", "Ã˜ Sheath/Stem (mm)", "Insulation", "Temp Inf (ÂºC)", "Temp Sup ÂºC",
                                "Material Nipple Ext.", "Long. Nipple Ext. (mm)", "Material Head/Case", "Con. Elec./Diam. Case", "TT/Terminal Insulation",
                                "Material Brida LapJoint", "Material Junta", "Puntal", "Tubo", "NACE",
                                "Precio (â‚¬)", "Notas Oferta", "Cambio Comercial", "Fecha Contractual", "Stress",
                                "GeometrÃ­a", "Long. CÃ³nica (mm)", "Long. Recta (mm)", "Ã˜ Picaje (mm)", "Notas CÃ¡lculo",
                                "Cambios TÃ©cnicos", "Notas TÃ©cnicas", "NÂº Doc. EIPSA CÃ¡lculo", "Estado CÃ¡lculo", "Fecha Estado CÃ¡lculo",
                                "NÂº Doc. EIPSA Plano", "Estado Plano", "Fecha Estado Plano", "Notas Planos", "Orden de Compra",
                                "Fecha Orden Compra", "Notas Orden Compra", "Plano Dimensional", "Plano OF Sensor", "Fecha OF Sensor", 
                                "Notas Sensor", "Estado FabricaciÃ³n Sensor", "Plano OF TW", "Fecha OF TW", "Notas TW",
                                "Estado FabricaciÃ³n TW", "Colada Barra", "Cert. Barra", "Colada Brida", "Cert. Brida",
                                "Long. Corte TW (mm)", "Cota A Sensor (mm)", "Cota B Sensor (mm)", "Cota L Sensor (mm)", "TapÃ³n",
                                "Estado FabricaciÃ³n", "InspecciÃ³n", "Fecha InspecciÃ³n", "EnvÃ­o RN", "Fecha RN", "Cod. Equipo", "Cod. Fab. Equipo",
                                "Trad. Equipo", "Cod. Barra", "Cod. Fab. Barra", "Cant. Barra", "Cod. Tubo",
                                "Cod. Fab. Tubo", "Cant. Tubo", "Cod. Brida", "Cod. Fab. Brida", "Cant. Brida",
                                "Cod. Sensor", "Cod. Fab. Sensor", "Cant. Sensor", "Cod. Cabeza", "Cod. Fab. Cabeza",
                                "Cant. Cabeza", "Cod. BTB", "Cod. Fab. BTB", "Cant. BTB", "Cod. Niplo Ext.",
                                "Cod. Fab. Niplo Ext.", "Cant. Niplo Ext.", "Cod. Muelle", "Cod. Fab. Muelle", "Cant. Muelle",
                                "Cod. Puntal", "Cod. Fab. Puntal", "Cant. Puntal", "Cod. TapÃ³n", "Cod. Fab. TapÃ³n", "Cant. TapÃ³n",
                                "Cod. TW", "Cod. Fab. TW", "Cant. TW", "Cod. Adit.", "Cod. Fab. Adit.",
                                "Cant. Adit", "Pedido Tipo Tag", "Trad. Barra", "Trad. Tubo", "Trad. Brida",
                                "Trad. Sensor", "Trad. Cabeza", "Trad. BTB", "Trad. Niplo Ext.", "Trad. Muelle",
                                "Trad. Puntal", "Trad. TapÃ³n", "Trad. TW", "Trad. Adit.", "Fecha PMI", "Fecha PH1",
                                "ManÃ³metro PH1", "PresiÃ³n PH1", "Estado PH1", "Notas PH1", "Fecha PH2",
                                "ManÃ³metro PH2", "PresiÃ³n PH2", "Estado PH2", "Notas PH2", "Fecha LP",
                                "LP Colada 9PR5", "LP Colada 9D1B", "LP Colada 996PB", "Estado LP", "Notas LP",
                                "Fecha Dureza", "Dureza", "Dureza HB", "Bola", "Carga",
                                "Colada Dureza", "Estado Dureza", "Notas Dureza", "Fecha Verif. Dim.", "Estado Verif. Dim.",
                                "Notas Verif. Dim", "Fecha Verif. OF", "Estado Verif. OF.", "Notas Verif. OF", "Fecha Verif. OF Sensor",
                                "Estado Verif. OF Sensor", "Notas Verif. OF Sensor", "Fotos",
                                "PosiciÃ³n", "SubposiciÃ³n", "Importe", "Diferencia", "CajaBr", "CajaPl", "DescripciÃ³n", "Notas",
                                "Estado FacturaciÃ³n"]

                headers_level = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido",
                                "PO", "PosiciÃ³n", "SubposiciÃ³n", "Tipo", "Modelo",
                                "Material Cuerpo", "Tipo Conex. Proc.", "TamaÃ±o Conex. Proc.", "Rating Conex. Proc.", "Facing Conex. Proc.",
                                "Tipo Conex.", "Visibilidad (mm)", "Long. C-C (mm)", "Tipo VÃ¡lv.", "Tipo Conex. Ext.",
                                "TamaÃ±o Conex. Ext.", "Rating Conex. Ext.", "Facing Conex. Ext.", "Junta", "TornillerÃ­a",
                                "Iluminador", "Mat. Flotador", "Mat. Cubierta", "Escala", "Banderas",
                                "Cod. IP", "Tipo Brida", "Niplo Hex.", "Niplo Tubo", "Antifrost",
                                "NACE", "Precio (â‚¬)", "Notas Oferta", "Cambio Comercial", "Fecha Contractual",
                                "Dim. Flotador", "Junta Bridas", "Cambios TÃ©cnicos", "Notas TÃ©cnicas", "NÂº Doc. EIPSA Plano",
                                "Estado Plano", "Fecha Estado Plano", "Notas Plano", "Orden de Compra", "Fecha Orden Compra",
                                "Notas Orden Compra", "Plano Dimensional", "Plano OF", "Fecha OF", "Notas Equipo",
                                "Colada Cuerpo", "Cert. Cuerpo", "Colada Cuerpo Vlv", "Cert. Cuerpo Vlv", "Colada Brida Vlv", "Cert. Brida Vlv",
                                "Estado FabricaciÃ³n", "InspecciÃ³n", "Fecha InspecciÃ³n", "EnvÃ­o RN", "Fecha RN", "Cod. Equipo", "Cod. Fab. Equipo",
                                "Trad. Equipo", "Cod. Cuerpo", "Cod. Fab. Cuerpo", "Cant. Cuerpo", "Cod. Cubierta",
                                "Cod. Fab. Cubierta", "Cant. Cubierta", "Cod. TornillerÃ­a", "Cod. Fab. TornillerÃ­a", "Cant. TornillerÃ­a",
                                "Cdo. Niplo Hex.", "Cod. Fab. Niplo Hex.", "Cant. Niplo Hex.", "Cod. VÃ¡lv.", "Cod. Fab. VÃ¡lv.",
                                "Cant. VÃ¡lv.", "Cod. Brida", "Cod. Fab. Brida", "Cant. Brida", "Cod. DV",
                                "Cod. Fab. DV", "Cant. DV", "Cod. Escala", "Cod. Fab. Escala", "Cant. Escala",
                                "Cod. Ilum.", "Cod. Fab. Ilum", "Cant. Ilum", "Cod. Junta Vidrio", "Cod. Fab. Junta Vidrio",
                                "Cant. Junta Vidrio", "Cod. Vidrio", "Cod. Fab. Vidrio", "Cant. Vidrio", "Cod. Flotador",
                                "Cod. Fab. Flotador", "Cant. Flotador", "Cod. Mica", "Cod. Fab. Mica", "Cant. Mica",
                                "Cod. Flags", "Cod. Fab. Flags", "Cant. Flags", "Cod. Junta Brida", "Cod. Fab. Junta Brida",
                                "Cant. Junta Brida", "Cod. Niplo Tubo", "Cod. Fab. Niplo Tubo", "Cant. Niplo Tubo", "Cod. Antifrost",
                                "Cod. Fab. Antifrost", "Cant. Antifrost", "Pedido Tipo Tag", "Trad. Cuerpo", "Trad. Cubierta",
                                "Trad. TornillerÃ­a", "Trad. Niplo Hex.", "Trad. VÃ¡lv", "Trad. Brida", "Trad. DV",
                                "Trad. Escala", "Trad. Ilum.", "Trad. Junta Vidrio", "Trad. Vidrio", "Trad. Flotador",
                                "Trad. Mica", "Trad. Flags", "Trad. Junta Brida", "Trad. Niplo Tubo", "Trad. Antifrost",
                                "Fecha PMI", "Fecha PH1", "ManÃ³metro PH1", "PresiÃ³n PH1",
                                "Estado PH1", "Notas PH1", "Fecha PH2", "ManÃ³metro PH2", "PresiÃ³n PH2",
                                "Estado PH2", "Notas PH2", "Fecha LP", "LP Colada 9PR5", "LP Colada 9D1B",
                                "LP Colada 996PB", "Estado LP", "Notas LP", "Fecha Dureza", "Dureza",
                                "Dureza HB", "Bola", "Carga", "Colada Dureza", "Estado Dureza",
                                "Notas Dureza", "Fecha Verif. Dim.", "Estado Verif. Dim.", "Notas Verif. Dim", "Fecha Verif. OF",
                                "Estado Verif. OF", "Notas Verif. OF", "Fotos",
                                "PosiciÃ³n", "SubposiciÃ³n", "Importe", "Diferencia", "CajaBr", "CajaPl", "DescripciÃ³n", "Notas",
                                "Estado FacturaciÃ³n"]

                headers_others = ["ID", "TAG", "Estado", "NÂº Oferta", "NÂº Pedido",
                                "PO", "PosiciÃ³n", "SubposiciÃ³n", "DescripciÃ³n", "CÃ³digo Equipo",
                                "NACE", "Precio (â‚¬)", "Notas Oferta", "Cambio Comercial", "Fecha Contractual",
                                "Plano Dimensional", "Plano OF", "Fecha OF", "Colada", "Cert. Colada", "Estado FabricaciÃ³n", "InspecciÃ³n", "Fecha InspecciÃ³n", "EnvÃ­o RN", "Fecha RN",
                                "Fecha PMI", "Fecha PH1", "ManÃ³metro PH1", "PresiÃ³n PH1",
                                "Estado PH1", "Notas PH1", "Fecha PH2", "ManÃ³metro PH2", "PresiÃ³n PH2",
                                "Estado PH2", "Notas PH2", "Fecha LP", "LP Colada 9PR5", "LP Colada 9D1B",
                                "LP Colada 996PB", "Estado LP", "Notas LP", "Fecha Dureza", "Dureza",
                                "Dureza HB", "Bola", "Carga", "Colada Dureza", "Estado Dureza",
                                "Notas Dureza", "Fecha Verif. Dim.", "Estado Verif. Dim.", "Notas Verif. Dim", "Fecha Verif. OF",
                                "Estado Verif. OF", "Notas Verif. OF", "Fotos",
                                "PosiciÃ³n", "SubposiciÃ³n", "Importe", "Diferencia", "CajaBr", "CajaPl", "DescripciÃ³n", "Notas",
                                "Estado FacturaciÃ³n"]

                list_invoice_state = ['', 'Facturado']
                
                if self.variable2 == 'Caudal':
                    self.model2.setAllColumnHeaders(headers_flow)
                    self.tableEditTags2.setItemDelegateForColumn(165, self.combo_itemtype)
                elif self.variable2 == 'Temperatura':
                    self.model2.setAllColumnHeaders(headers_temp)
                    self.tableEditTags2.setItemDelegateForColumn(175, self.combo_itemtype)
                elif self.variable2 == 'Nivel':
                    self.model2.setAllColumnHeaders(headers_level)
                    self.tableEditTags2.setItemDelegateForColumn(178, self.combo_itemtype)
                elif self.variable2 == 'Otros':
                    self.model2.setAllColumnHeaders(headers_others)
                    self.tableEditTags2.setItemDelegateForColumn(64, self.combo_itemtype)

            # Getting the unique values for each column of the model
                for column in range(self.model2.columnCount()):
                    list_valuesUnique = []
                    if column not in self.checkbox_states2:
                        self.checkbox_states2[column] = {}
                        self.checkbox_states2[column]['Seleccionar todo'] = True
                        for row in range(self.model2.rowCount()):
                            value = self.model2.record(row).value(column)
                            if value not in list_valuesUnique:
                                if isinstance(value, QtCore.QDate):
                                    value=value.toString("dd/MM/yyyy")
                                list_valuesUnique.append(str(value))
                                self.checkbox_states2[column][value] = True
                        self.dict_valuesuniques2[column] = list_valuesUnique

                self.model2.dataChanged.connect(self.saveChanges)
                self.selection_model = self.tableEditTags2.selectionModel()
                self.selection_model.selectionChanged.connect(lambda: self.countSelectedCells(self.model2))

                self.tableEditTags2.doubleClicked.connect(lambda index: self.open_pics(index, self.variable2))
            else:
                self.tableEditTags2.hide()

        else:
            self.model.dataChanged.connect(self.saveChanges)

        self.tableEditTags.doubleClicked.connect(lambda index: self.open_pics(index, self.variable))

# Function when header is clicked
    def on_view_horizontalHeader_sectionClicked(self, logicalIndex, table, model, proxy):
        """
        Displays a menu when a column header is clicked. The menu includes options for sorting, filtering, and managing column visibility.
        
        Args:
            logicalIndex (int): Index of the clicked column.
            table (QtWidgets.QTableView): The table view displaying the data.
            model (QtGui.QStandardItemModel): The model associated with the table.
            proxy (QtCore.QSortFilterProxyModel): The proxy model used for filtering and sorting.
        """
        if isinstance(model, EditableTableModel2):
            self.logicalIndex = logicalIndex
            self.menuValues = QtWidgets.QMenu(self)
            self.signalMapper = QtCore.QSignalMapper(table)

            valuesUnique_view = []
            for row in range(table.model().rowCount()):
                index = table.model().index(row, self.logicalIndex)
                value = index.data(Qt.ItemDataRole.DisplayRole)
                if value not in valuesUnique_view:
                    if isinstance(value, QtCore.QDate):
                        value=value.toString("dd/MM/yyyy")
                    valuesUnique_view.append(value)

            actionSortAscending = QtGui.QAction("Ordenar Ascendente", table)
            actionSortAscending.triggered.connect(lambda: self.on_actionSortAscending_triggered(table))
            self.menuValues.addAction(actionSortAscending)
            actionSortDescending = QtGui.QAction("Ordenar Descendente", table)
            actionSortDescending.triggered.connect(lambda: self.on_actionSortDescending_triggered(table))
            self.menuValues.addAction(actionSortDescending)
            self.menuValues.addSeparator()

            actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro", table)
            actionDeleteFilterColumn.triggered.connect(lambda: self.on_actionDeleteFilterColumn_triggered(table, model, proxy))
            self.menuValues.addAction(actionDeleteFilterColumn)
            self.menuValues.addSeparator()

            actionTextFilter = QtGui.QAction("Buscar...", table)
            actionTextFilter.triggered.connect(lambda: self.on_actionTextFilter_triggered(model, proxy))
            self.menuValues.addAction(actionTextFilter)
            self.menuValues.addSeparator()

            scroll_menu = QtWidgets.QScrollArea()
            scroll_menu.setStyleSheet("background-color: rgb(255, 255, 255)")
            scroll_menu.setWidgetResizable(True)
            scroll_widget = QtWidgets.QWidget(scroll_menu)
            scroll_menu.setWidget(scroll_widget)
            scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

            checkbox_all_widget = QtWidgets.QCheckBox('Seleccionar todo')

            if not self.checkbox_states2[self.logicalIndex]['Seleccionar todo'] == True:
                checkbox_all_widget.setChecked(False)
            else:
                checkbox_all_widget.setChecked(True)
            
            checkbox_all_widget.toggled.connect(lambda checked, name='Seleccionar todo': self.on_select_all_toggled(checked, name, model))

            scroll_layout.addWidget(checkbox_all_widget)
            self.action_checkbox_map2['Seleccionar todo'] = checkbox_all_widget

            if len(self.dict_ordersort2) != 0 and self.logicalIndex in self.dict_ordersort2:
                list_uniquevalues = sorted(list(set(self.dict_valuesuniques2[self.logicalIndex])))
            else:
                list_uniquevalues = sorted(list(set(valuesUnique_view)))

            for actionName in list_uniquevalues:
                checkbox_widget = QtWidgets.QCheckBox(str(actionName))

                if self.logicalIndex not in self.checkbox_filters2:
                    checkbox_widget.setChecked(True)
                elif actionName not in self.checkbox_filters2[self.logicalIndex]:
                    checkbox_widget.setChecked(False)
                else:
                    checkbox_widget.setChecked(True)

                checkbox_widget.toggled.connect(lambda checked, name=actionName: self.on_checkbox_toggled(checked, name, model))

                scroll_layout.addWidget(checkbox_widget)
                self.action_checkbox_map2[actionName] = checkbox_widget

            action_scroll_menu = QtWidgets.QWidgetAction(self.menuValues)
            action_scroll_menu.setDefaultWidget(scroll_menu)
            self.menuValues.addAction(action_scroll_menu)

            self.menuValues.addSeparator()

            accept_button = QtGui.QAction("ACEPTAR", table)
            accept_button.triggered.connect(lambda: self.menu_acceptbutton_triggered(proxy))

            cancel_button = QtGui.QAction("CANCELAR", table)
            cancel_button.triggered.connect(self.menu_cancelbutton_triggered)

            self.menuValues.addAction(accept_button)
            self.menuValues.addAction(cancel_button)

            self.menuValues.setStyleSheet("QMenu { color: black; }"
                                            "QMenu { background-color: rgb(255, 255, 255); }"
                                            "QMenu::item:selected { background-color: #33bdef; }"
                                            "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

            headerPos = table.mapToGlobal(table.horizontalHeader().pos())        

            posY = headerPos.y() + table.horizontalHeader().height()
            scrollX = table.horizontalScrollBar().value()
            xInView = table.horizontalHeader().sectionViewportPosition(logicalIndex)
            posX = headerPos.x() + xInView - scrollX

            self.menuValues.exec(QtCore.QPoint(posX, posY))
        
        else:
            self.logicalIndex = logicalIndex
            self.menuValues = QtWidgets.QMenu(self)
            self.signalMapper = QtCore.QSignalMapper(table)

            valuesUnique_view = []
            for row in range(table.model().rowCount()):
                index = table.model().index(row, self.logicalIndex)
                value = index.data(Qt.ItemDataRole.DisplayRole)
                if value not in valuesUnique_view:
                    if isinstance(value, QtCore.QDate):
                        value=value.toString("dd/MM/yyyy")
                    valuesUnique_view.append(value)

            actionSortAscending = QtGui.QAction("Ordenar Ascendente", table)
            actionSortAscending.triggered.connect(lambda: self.on_actionSortAscending_triggered(table))
            self.menuValues.addAction(actionSortAscending)
            actionSortDescending = QtGui.QAction("Ordenar Descendente", table)
            actionSortDescending.triggered.connect(lambda: self.on_actionSortDescending_triggered(table))
            self.menuValues.addAction(actionSortDescending)
            self.menuValues.addSeparator()

            actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro", table)
            actionDeleteFilterColumn.triggered.connect(lambda: self.on_actionDeleteFilterColumn_triggered(table, model, proxy))
            self.menuValues.addAction(actionDeleteFilterColumn)
            self.menuValues.addSeparator()

            actionTextFilter = QtGui.QAction("Buscar...", table)
            actionTextFilter.triggered.connect(lambda: self.on_actionTextFilter_triggered(model, proxy))
            self.menuValues.addAction(actionTextFilter)
            self.menuValues.addSeparator()

            scroll_menu = QtWidgets.QScrollArea()
            scroll_menu.setStyleSheet("background-color: rgb(255, 255, 255)")
            scroll_menu.setWidgetResizable(True)
            scroll_widget = QtWidgets.QWidget(scroll_menu)
            scroll_menu.setWidget(scroll_widget)
            scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

            checkbox_all_widget = QtWidgets.QCheckBox('Seleccionar todo')

            if not self.checkbox_states[self.logicalIndex]['Seleccionar todo'] == True:
                checkbox_all_widget.setChecked(False)
            else:
                checkbox_all_widget.setChecked(True)
            
            checkbox_all_widget.toggled.connect(lambda checked, name='Seleccionar todo': self.on_select_all_toggled(checked, name, model))

            scroll_layout.addWidget(checkbox_all_widget)
            self.action_checkbox_map['Seleccionar todo'] = checkbox_all_widget

            if len(self.dict_ordersort) != 0 and self.logicalIndex in self.dict_ordersort:
                list_uniquevalues = sorted(list(set(self.dict_valuesuniques[self.logicalIndex])))
            else:
                list_uniquevalues = sorted(list(set(valuesUnique_view)))

            for actionName in list_uniquevalues:
                checkbox_widget = QtWidgets.QCheckBox(str(actionName))

                if self.logicalIndex not in self.checkbox_filters:
                    checkbox_widget.setChecked(True)
                elif actionName not in self.checkbox_filters[self.logicalIndex]:
                    checkbox_widget.setChecked(False)
                else:
                    checkbox_widget.setChecked(True)

                checkbox_widget.toggled.connect(lambda checked, name=actionName: self.on_checkbox_toggled(checked, name, model))

                scroll_layout.addWidget(checkbox_widget)
                self.action_checkbox_map[actionName] = checkbox_widget

            action_scroll_menu = QtWidgets.QWidgetAction(self.menuValues)
            action_scroll_menu.setDefaultWidget(scroll_menu)
            self.menuValues.addAction(action_scroll_menu)

            self.menuValues.addSeparator()

            accept_button = QtGui.QAction("ACEPTAR", table)
            accept_button.triggered.connect(lambda: self.menu_acceptbutton_triggered(proxy))

            cancel_button = QtGui.QAction("CANCELAR", table)
            cancel_button.triggered.connect(self.menu_cancelbutton_triggered)

            self.menuValues.addAction(accept_button)
            self.menuValues.addAction(cancel_button)

            self.menuValues.setStyleSheet("QMenu { color: black; }"
                                            "QMenu { background-color: rgb(255, 255, 255); }"
                                            "QMenu::item:selected { background-color: #33bdef; }"
                                            "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

            headerPos = table.mapToGlobal(table.horizontalHeader().pos())        

            posY = headerPos.y() + table.horizontalHeader().height()
            scrollX = table.horizontalScrollBar().value()
            xInView = table.horizontalHeader().sectionViewportPosition(logicalIndex)
            posX = headerPos.x() + xInView - scrollX

            self.menuValues.exec(QtCore.QPoint(posX, posY))

# Function when cancel button of menu is clicked
    def menu_cancelbutton_triggered(self):
        """
        Hides the menu when the cancel button is clicked.
        """
        self.menuValues.hide()

# Function when accept button of menu is clicked
    def menu_acceptbutton_triggered(self, proxy):
        """
        Applies the selected filters and updates the table model with the new filters.
        """
        if isinstance(proxy, CustomProxyModel2):
            for column, filters in self.checkbox_filters2.items():
                if filters:
                    proxy.setFilter(filters, column, exact_match=True)
                else:
                    proxy.setFilter(None, column)
        else:
            for column, filters in self.checkbox_filters.items():
                if filters:
                    proxy.setFilter(filters, column, exact_match=True)
                else:
                    proxy.setFilter(None, column)

        # self.tableEditTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
        # self.tableEditTags.horizontalHeader().setSectionResizeMode(3,QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        # self.tableEditTags.horizontalHeader().setSectionResizeMode(8,QtWidgets.QHeaderView.ResizeMode.Stretch)

# Function when select all checkbox is clicked
    def on_select_all_toggled(self, checked, action_name, model):
        """
        Toggles the state of all checkboxes in the filter menu when the 'Select All' checkbox is toggled.
        
        Args:
            checked (bool): The checked state of the 'Select All' checkbox.
            action_name (str): The name of the action (usually 'Select All').
        """
        filterColumn = self.logicalIndex
        imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
        icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))

        if checked:
            if isinstance(model, EditableTableModel2):
                for checkbox_name, checkbox_widget in self.action_checkbox_map2.items():
                    checkbox_widget.setChecked(checked)
                    self.checkbox_states2[self.logicalIndex][checkbox_name] = checked
            else:
                for checkbox_name, checkbox_widget in self.action_checkbox_map.items():
                    checkbox_widget.setChecked(checked)
                    self.checkbox_states[self.logicalIndex][checkbox_widget.text()] = checked

            if isinstance(model, EditableTableModel2):
                
                if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map2.values()):
                    model.setIconColumnHeader(filterColumn, icono)
                else:
                    model.setIconColumnHeader(filterColumn, '')
            else:
                if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map.values()):
                    model.setIconColumnHeader(filterColumn, icono)
                else:
                    model.setIconColumnHeader(filterColumn, '')

        else:
            if isinstance(model, EditableTableModel2):
                for checkbox_name, checkbox_widget in self.action_checkbox_map2.items():
                    checkbox_widget.setChecked(checked)
                    self.checkbox_states2[self.logicalIndex][checkbox_widget.text()] = checked
            else:
                for checkbox_name, checkbox_widget in self.action_checkbox_map.items():
                    checkbox_widget.setChecked(checked)
                    self.checkbox_states[self.logicalIndex][checkbox_widget.text()] = checked

# Function when checkbox of header menu is clicked
    def on_checkbox_toggled(self, checked, action_name, model):
        """
        Updates the filter state when an individual checkbox is toggled.
        
        Args:
            checked (bool): The checked state of the checkbox.
            action_name (str): The name of the checkbox.
        """
        filterColumn = self.logicalIndex
        imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
        icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))

        if checked:
            if isinstance(model, EditableTableModel2):
                if filterColumn not in self.checkbox_filters2:
                    self.checkbox_filters2[filterColumn] = [action_name]
                else:
                    if action_name not in self.checkbox_filters2[filterColumn]:
                        self.checkbox_filters2[filterColumn].append(action_name)
            else:
                if filterColumn not in self.checkbox_filters:
                    self.checkbox_filters[filterColumn] = [action_name]
                else:
                    if action_name not in self.checkbox_filters[filterColumn]:
                        self.checkbox_filters[filterColumn].append(action_name)
        else:
            if isinstance(model, EditableTableModel2):
                if filterColumn in self.checkbox_filters2 and action_name in self.checkbox_filters2[filterColumn]:
                    self.checkbox_filters2[filterColumn].remove(action_name)
            else:
                if filterColumn in self.checkbox_filters and action_name in self.checkbox_filters[filterColumn]:
                    self.checkbox_filters[filterColumn].remove(action_name)

        if isinstance(model, EditableTableModel2):
            if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map2.values()):
                model.setIconColumnHeader(filterColumn, '')
            else:
                model.setIconColumnHeader(filterColumn, icono)
        else:
            if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map.values()):
                model.setIconColumnHeader(filterColumn, '')
            else:
                model.setIconColumnHeader(filterColumn, icono)

# Function to delete individual column filter
    def on_actionDeleteFilterColumn_triggered(self, table, model, proxy):
        """
        Removes the filter from the selected column and updates the table model.
        
        Args:
            table (QtWidgets.QTableView): The table view displaying the data.
            model (QtGui.QStandardItemModel): The model associated with the table.
            proxy (QtCore.QSortFilterProxyModel): The proxy model used for filtering and sorting.
        """
        if isinstance(model, EditableTableModel2):
            filterColumn = self.logicalIndex
            if filterColumn in proxy.filters:
                del proxy.filters[filterColumn]
            model.setIconColumnHeader(filterColumn, "")
            proxy.invalidateFilter()

            if filterColumn in self.checkbox_filters2:
                del self.checkbox_filters2[filterColumn]

            self.checkbox_states2[self.logicalIndex].clear()
            self.checkbox_states2[self.logicalIndex]["Seleccionar todo"] = True
            for row in range(table.model().rowCount()):
                value = model.record(row).value(filterColumn)
                if isinstance(value, QtCore.QDate):
                    value = value.toString("dd/MM/yyyy")
                self.checkbox_states2[self.logicalIndex][str(value)] = True

        else:
            filterColumn = self.logicalIndex
            if filterColumn in proxy.filters:
                del proxy.filters[filterColumn]
            model.setIconColumnHeader(filterColumn, "")
            proxy.invalidateFilter()

            if filterColumn in self.checkbox_filters:
                del self.checkbox_filters[filterColumn]

            self.checkbox_states[self.logicalIndex].clear()
            self.checkbox_states[self.logicalIndex]["Seleccionar todo"] = True
            for row in range(table.model().rowCount()):
                value = model.record(row).value(filterColumn)
                if isinstance(value, QtCore.QDate):
                    value = value.toString("dd/MM/yyyy")
                self.checkbox_states[self.logicalIndex][str(value)] = True

        table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
        table.horizontalHeader().setSectionResizeMode(3,QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        table.horizontalHeader().setSectionResizeMode(8,QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.selection_model = table.selectionModel()
        self.selection_model.selectionChanged.connect(lambda: self.countSelectedCells(self.model))

        if isinstance(model,EditableTableModel2):
            self.label_SumItems2.setText("")
            self.label_SumValue2.setText("")
            self.label_CountItems2.setText("")
            self.label_CountValue2.setText("")
        else:
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

# Function to order column ascending
    def on_actionSortAscending_triggered(self, table):
        """
        Sorts the selected column in ascending order.
        
        Args:
            table (QtWidgets.QTableView): The table view displaying the data.
        """
        sortColumn = self.logicalIndex
        sortOrder = Qt.SortOrder.AscendingOrder
        table.sortByColumn(sortColumn, sortOrder)

# Function to order column descending
    def on_actionSortDescending_triggered(self, table):
        """
        Sorts the selected column in descending order.
        
        Args:
            table (QtWidgets.QTableView): The table view displaying the data.
        """
        sortColumn = self.logicalIndex
        sortOrder = Qt.SortOrder.DescendingOrder
        table.sortByColumn(sortColumn, sortOrder)

# Function when text is searched
    def on_actionTextFilter_triggered(self, model, proxy):
        """
        Opens a dialog to enter a text filter and applies it to the selected column.
        
        Args:
            model (QtGui.QStandardItemModel): The model associated with the table.
            proxy (QtCore.QSortFilterProxyModel): The proxy model used for filtering and sorting.
        """
        filterColumn = self.logicalIndex
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle("Buscar")
        clickedButton = dlg.exec()

        if clickedButton == 1:
            stringAction = dlg.textValue()
            if re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', stringAction):
                stringAction=QtCore.QDate.fromString(stringAction,"dd/MM/yyyy")
                stringAction=stringAction.toString("yyyy-MM-dd")

            filterString = QtCore.QRegularExpression(stringAction, QtCore.QRegularExpression.PatternOption(0))
            # del self.proxy.filters[filterColumn]
            proxy.setFilter([stringAction], filterColumn, None)

            imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
            icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))
            model.setIconColumnHeader(filterColumn, icono)

# Function to hide column when action clicked
    def hide_column(self):
        """
        Hides the selected column in the table view.
        """
        filterColumn = self.logicalIndex 
        self.tableEditTags.setColumnHidden(filterColumn, True)
        self.hiddencolumns.append(filterColumn)

# Function to show all hidden columns
    def show_columns(self):
        """
        Makes all previously hidden columns visible in the table and clears the list of hidden columns.
        """
        for column in self.hiddencolumns:
            self.tableEditTags.setColumnHidden(column, False)
        self.hiddencolumns.clear()

# Function to export data to excel
    def exporttoexcel(self):
        """
        Exports the visible data from the table to an Excel file. If no data is loaded, displays a warning message.

        Shows a message box if there is no data to export and allows the user to save the data to an Excel file.
        """
        if self.proxy.rowCount() == 0:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Exportar")
            dlg.setText("No hay datos cargados")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            final_data = []

            visible_columns = [col for col in range(self.model.columnCount()) if not self.tableEditTags.isColumnHidden(col)]
            visible_headers = self.model.getColumnHeaders(visible_columns)
            original_headers = [self.model.record().fieldName(col) for col in visible_columns]
            for row in range(self.proxy.rowCount()):
                tag_data = []
                for column in visible_columns:
                    value = self.proxy.data(self.proxy.index(row, column))
                    if isinstance(value, QDate):
                        value = value.toString("dd/MM/yyyy")
                    tag_data.append(value)
                final_data.append(tag_data)

            final_data.insert(0, visible_headers)
            final_data.insert(1, original_headers)
            df = pd.DataFrame(final_data)
            df.columns = df.iloc[0]
            df = df[1:]

            output_path = asksaveasfilename(defaultextension=".xlsx", filetypes=[("Archivos de Excel", "*.xlsx")], title="Guardar archivo de Excel")
            if output_path:
                df.to_excel(output_path, index=False, header=True)

# Function to import data from excel
    def importexcel(self):
        input_file = askopenfilename(filetypes=[("Excel files", "*.xlsx")])

        if input_file:
            params = config()
            conn = psycopg2.connect(**params)
            cursor = conn.cursor()

        #Importing excel file into dataframe
            df_table = pd.read_excel(input_file, skiprows=1, dtype={'rn_delivery': str})
            df_table = df_table.astype(str)

            df_table.replace('nan', '', inplace=True)
            df_table.replace('NaT', '', inplace=True)

            df_table = df_table.drop(['diff_amount', 'tag_images'], axis=1)

            df_final = df_table.iloc[:, [0] + list(range(13, df_table.shape[1]))].copy()

            try:
                for index, row in df_final.iterrows():
                    if "id_tag_flow" in row:
                        id_value = row["id_tag_flow"]
                        table_name = 'tags_data.tags_flow'
                        where_clause = f"id_tag_flow = {id_value}"

                    elif "id_tag_temp" in row:
                        id_value = row["id_tag_temp"]
                        table_name = 'tags_data.tags_temp'
                        where_clause = f"id_tag_temp = {id_value}"

                    elif "id_tag_level" in row:
                        id_value = row["id_tag_level"]
                        table_name = 'tags_data.tags_level'
                        where_clause = f"id_tag_level = {id_value}"

                    elif "id_tag_others" in row:
                        id_value = row["id_tag_others"]
                        table_name = 'tags_data.tags_others'
                        where_clause = f"id_tag_others = {id_value}"

                    # Creating string for columns names and values
                    columns_values = [(column, row[column]) for column in df_final.columns if column not in ['tapping_size','tapping_number'] and not pd.isnull(row[column])]

                    columns = ', '.join([column for column, _ in columns_values])
                    values = ', '.join([f"'{int(float(value))}'" if column in ['pos_fact', 'subpos_fact'] and value.endswith('.0')
                                        else (f"'{value.replace('.', ',')}'" if column in ['amount_fact']
                                        else ('NULL' if value == '' and column in ['invoice_state', 'rn_date', 'rn_delivery']
                                        else "'{}'".format(value.replace('\'', '\'\'')))) for column, value in columns_values])

                # Creating the SET  and WHERE clause with proper formatting
                    set_clause = ", ".join([f"{column} = {value}" for column, value in zip(columns.split(", ")[1:], values.split(", ")[1:])])

                # Creating the update query and executing it after checking existing tags and id
                    sql_update = f'UPDATE {table_name} SET {set_clause} WHERE {where_clause}'
                    cursor.execute(sql_update)
                    conn.commit()

            # Closing cursor and database connection
                conn.commit()
                cursor.close()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Datos actualizados con Ã©xito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                print(error)
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to enable copy and paste cells
    def keyPressEvent(self, event):
        """
        Handles custom key events for cell operations in the table.

        Args:
            event (QtGui.QKeyEvent): The key event to handle.
        """
        if event.key() == QtCore.Qt.Key.Key_Delete: # Event when delete key is pressed
            selected_indexes = self.tableEditTags.selectionModel().selectedIndexes()
            if not selected_indexes:
                return
            
            model = self.tableEditTags.model()
            model_indexes = [model.mapToSource(index) for index in selected_indexes]

            if isinstance(model, QtCore.QSortFilterProxyModel):
                model_indexes = [model.mapToSource(index) for index in selected_indexes]
                for index in model_indexes:
                    model.sourceModel().setData(index, None)
            else:
                model_indexes = selected_indexes
                for index in model_indexes:
                    model.setData(index, None)

        elif event.matches(QKeySequence.StandardKey.Copy):
            selected_indexes = self.tableEditTags.selectionModel().selectedIndexes()
            if selected_indexes:
                clipboard = QApplication.clipboard()
                text = self.get_selected_text(selected_indexes)
                if isinstance(text, QtCore.QDate):
                    text=text.toString("dd/MM/yyyy")
                clipboard.setText(text)

        elif event.matches(QKeySequence.StandardKey.Paste):
            self.model.dataChanged.disconnect(self.saveChanges)
            selected_indexes = self.tableEditTags.selectionModel().selectedIndexes()
            if selected_indexes:
                clipboard = QApplication.clipboard()
                text = clipboard.text()
                for index in selected_indexes:
                    current_row = index.row()
                    current_column = index.column()
                    first_column_value = self.proxy.data(self.proxy.index(current_row, 0))
                    target_row = None
                    for row in range(self.model.rowCount()):
                        if self.model.data(self.model.index(row, 0)) == first_column_value:
                            target_row = row
                            break
                    if target_row is not None:
                        target_index = self.model.index(target_row, current_column)
                        self.model.setData(target_index, text, Qt.ItemDataRole.EditRole)  # Pegar el valor en todas las celdas seleccionadas
                self.model.submitAll()

            self.model.dataChanged.connect(self.saveChanges)

        super().keyPressEvent(event)

# Function to get the text of the selected cells
    def get_selected_text(self, indexes):
        """
        Retrieves the text from the selected cells and returns it as a plain text string.

        Args:
            indexes (list of QModelIndex): A list of QModelIndex objects representing the selected cells.
        
        Returns:
            str: A string containing the text from the selected cells.
        """
        if len(indexes) == 1:  # Si solo hay una celda seleccionada
            index = indexes[0]
            cell_data = index.data(Qt.ItemDataRole.DisplayRole)
            return cell_data
        else:
            rows = set()
            cols = set()
            for index in indexes:
                rows.add(index.row())
                cols.add(index.column())

            text_doc = QTextDocument()
            cursor = QTextCursor(text_doc)

            for row in sorted(rows):
                for col in sorted(cols):
                    index = self.model.index(row, col)  # Obtain corresponding index
                    cell_data = index.data(Qt.ItemDataRole.DisplayRole)
                    cursor.insertText(str(cell_data))
                    cursor.insertText('\t')  # Tab separating columns
                cursor.insertText('\n')  # Line break at end of row

            return text_doc.toPlainText()

# Function to count selected cells and sum its values
    def countSelectedCells(self, model):
        """
        Counts the number of selected cells and sums their values. Updates the UI labels with the count and sum.
        """
        if isinstance(model,EditableTableModel2):
            if len(self.tableEditTags2.selectedIndexes()) > 1:
                locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
                self.label_SumItems2.setText("")
                self.label_SumValue2.setText("")
                self.label_CountItems2.setText("")
                self.label_CountValue2.setText("")

                sum_value = sum([self.euro_string_to_float(str(ix.data())) if re.match(r'^[\d.,]+\sâ‚¬$', str(ix.data())) else float(str(ix.data()).replace(',', '.')) if str(ix.data()).replace(',', '.').replace('.', '', 1).isdigit() else 0 for ix in self.tableEditTags2.selectedIndexes()])
                count_value = len([ix for ix in self.tableEditTags2.selectedIndexes() if ix.data() != ""])
                if sum_value > 0:
                    self.label_SumItems2.setText("Suma:")
                    self.label_SumValue2.setText(locale.format_string("%.2f", sum_value, grouping=True))
                if count_value > 0:
                    self.label_CountItems2.setText("Recuento:")
                    self.label_CountValue2.setText(str(count_value))
            else:
                self.label_SumItems2.setText("")
                self.label_SumValue2.setText("")
                self.label_CountItems2.setText("")
                self.label_CountValue2.setText("")
        else:
            if len(self.tableEditTags.selectedIndexes()) > 1:
                locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
                self.label_SumItems.setText("")
                self.label_SumValue.setText("")
                self.label_CountItems.setText("")
                self.label_CountValue.setText("")

                sum_value = sum([self.euro_string_to_float(str(ix.data())) if re.match(r'^[\d.,]+\sâ‚¬$', str(ix.data())) else float(str(ix.data()).replace(',', '.')) if str(ix.data()).replace(',', '.').replace('.', '', 1).isdigit() else 0 for ix in self.tableEditTags.selectedIndexes()])
                count_value = len([ix for ix in self.tableEditTags.selectedIndexes() if ix.data() != ""])
                if sum_value > 0:
                    self.label_SumItems.setText("Suma:")
                    self.label_SumValue.setText(locale.format_string("%.2f", sum_value, grouping=True))
                if count_value > 0:
                    self.label_CountItems.setText("Recuento:")
                    self.label_CountValue.setText(str(count_value))
            else:
                self.label_SumItems.setText("")
                self.label_SumValue.setText("")
                self.label_CountItems.setText("")
                self.label_CountValue.setText("")

# Function to format money string values
    def euro_string_to_float(self, euro_str):
        """
        Converts a string representing an amount in euros to a float.

        Args:
            euro_str (str): A string representing the amount in euros (e.g., "1.234,56 â‚¬").
        
        Returns:
            float: The numeric value of the amount as a float.
        """
        match = re.match(r'^([\d.,]+)\sâ‚¬$', euro_str)
        if match:
            number_str = match.group(1)
            number_str = number_str.replace('.', '').replace(',', '.').replace(' â‚¬','')
            return float(number_str)
        else:
            return 0.0

# Function for creating context menu
    def createContextMenu(self):
        """
        Creates a context menu with options for hiding selected columns.
        """
        self.context_menu = QtWidgets.QMenu(self)
        hide_columns_action = self.context_menu.addAction("Ocultar Columnas")
        hide_columns_action.triggered.connect(self.hideSelectedColumns)

# Function to show context menu when right-click
    def showColumnContextMenu(self, pos):
        """
        Displays the context menu at the specified position for column operations.

        Args:
            pos (QPoint): The position at which to display the context menu.
        """
        header = self.tableEditTags.horizontalHeader()
        column = header.logicalIndexAt(pos)
        self.context_menu.exec(self.tableEditTags.mapToGlobal(pos))

# Function to hide selected columns
    def hideSelectedColumns(self):
        """
        Hides the currently selected columns in the table and updates the list of hidden columns.
        """
        selected_columns = set()
        header = self.tableEditTags.horizontalHeader()
        for index in header.selectionModel().selectedColumns():
            selected_columns.add(index.column())

        for column in selected_columns:
            self.tableEditTags.setColumnHidden(column, True)
            self.hiddencolumns.append(column)

        self.context_menu.close()

    def send_to_invoice(self):
        """
        Prompts for a invoice number for and send tags data to it.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Facturar')
        dlg.setLabelText('Introduce el nÃºmero de factura:')
        clickedButton=dlg.exec()

        if clickedButton == 1:
            num_invoice = dlg.textValue()
            id_list = []
            item_list = []

            commands_check_invoice = ("""SELECT "id" FROM purch_fact.invoice_header
                                WHERE "num_invoice" = %s
                                """)

            commands_insert_invoice = ("""
                        INSERT INTO purch_fact.invoice_header ("num_invoice","id_client","id_dest_country")
                        VALUES (%s,%s,%s)
                        """)

            commands_last_invoice = """SELECT num_invoice
                                FROM purch_fact.invoice_header
                                ORDER BY "num_invoice" DESC
                                """

            commands_insert_record = ("""
                                    INSERT INTO purch_fact.invoice_detail ("invoice_header_id", "description", "price", "quantity")
                                    VALUES (%s,%s,%s,%s)
                                    """)

            if self.variable == 'Caudal':
                table_name = "tags_data.tags_flow"
                id_column = 'id_tag_flow'
            elif self.variable == 'Temperatura':
                table_name = "tags_data.tags_temp"
                id_column = 'id_tag_temp'
            elif self.variable == 'Nivel':
                table_name = "tags_data.tags_level"
                id_column = 'id_tag_level'
            elif self.variable == 'Otros':
                table_name = "tags_data.tags_others"
                id_column = 'id_tag_others'
            
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                data=(num_invoice,)
                cur.execute(commands_check_invoice,data)
                results_check = cur.fetchall()

                if len(results_check) == 0:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ese nÂº de factura no estÃ¡ registrado\n"
                                "Â¿Quieres que se cree con el siguiente nÂº correspondiente?")
                    dlg.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                    result = dlg.exec()
                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                        cur.execute(commands_last_invoice)
                        commands_last_invoice = cur.fetchall()

                        num_invoice =  commands_last_invoice[0][0][:5] + '{:03}'.format(int(commands_last_invoice[0][0][-3:]) + 1)

                        cur.execute(commands_insert_invoice, (num_invoice,1,1,))
                        cur.execute(commands_check_invoice, (num_invoice,))
                        results_check_invoicenew = cur.fetchall()

                        id_num_invoice = results_check_invoicenew[0][0]

                        for row in range(self.proxy.rowCount()):
                            first_column_value = self.proxy.data(self.proxy.index(row, 0))
                            id_list.append(first_column_value)

                        for element in id_list:
                            for row in range(self.model.rowCount()):
                                if self.model.data(self.model.index(row, 0)) == element:
                                    target_row = row
                                    break
                            if target_row is not None:
                                tag_item = self.model.data(self.model.index(target_row, 1))
                                qty_item = 1
                                if tag_item[:2] != 'PA':
                                    description_item = self.model.data(self.model.index(target_row, 8)) + " - TAG: " + tag_item
                                else:
                                    description_item = self.model.data(self.model.index(target_row, 8))
                                price_item = str(self.model.data(self.model.index(target_row, 159)) if self.variable == 'Caudal' else (
                                            self.model.data(self.model.index(target_row, 169)) if self.variable == 'Temperatura' else (
                                            self.model.data(self.model.index(target_row, 172)) if self.variable == 'Nivel' else (
                                            self.model.data(self.model.index(target_row, 59))))))
                                price_item = 0 if price_item in ['None',''] else float(price_item.replace(' â‚¬','').replace('.','').replace(',','.'))
                                item_list.append([description_item, price_item, qty_item])

                                commands_block_tag = f"UPDATE {table_name} SET invoice_state = 'Facturado' WHERE {id_column} = {self.model.data(self.model.index(target_row, 0))}"
                                cur.execute(commands_block_tag)

                        data_frames_with_data = []

                        if item_list:
                            sublists = [sublist for sublist in item_list]
                            df = pd.DataFrame(sublists)
                            df = df.groupby([0, 1])[2].sum().reset_index()
                            data_frames_with_data.append(df)

                        if data_frames_with_data:
                            df_combined = pd.concat(data_frames_with_data, ignore_index=True)

                        for row in df_combined.itertuples():
                            data = (id_num_invoice, row._1, row._2, row._3)
                            cur.execute(commands_insert_record,data)

                    conn.commit()
                    cur.close()
                    del dlg, new_icon

                else:
                    print('insertar datos en factura')
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to open equipment photos
    def open_pics(self, index, variable):
        """
        Opens a file based on the provided index and variable.

        Args:
            index (QModelIndex): The index representing the selected cell in the table.
            variable (str): The variable type to determine the relevant column (e.g., 'Caudal', 'Temperatura', 'Nivel', 'Otros').

        Raises:
            Exception: If there is an error while trying to open the file, a message box displays the error details.
        """
        if ((variable == 'Caudal' and index.column() == 156)
        or (variable == 'Temperatura' and index.column() == 166)
        or (variable == 'Nivel' and index.column() == 169)
        or (variable == 'Otros' and index.column() == 56)):
            value = index.data()

            if value != '':
                try:
                    file_path = os.path.normpath(value)
                    os.startfile(file_path)

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

# Function to insert new item
    def add_item(self):
        if self.proxy.rowCount() != 0:
            if self.variable == 'Caudal':
                table_name = "tags_data.tags_flow"
            elif self.variable == 'Temperatura':
                table_name = "tags_data.tags_temp"
            elif self.variable == 'Nivel':
                table_name = "tags_data.tags_level"
            elif self.variable == 'Otros':
                table_name = "tags_data.tags_others"

            params = config()
            conn = psycopg2.connect(**params)
            cursor = conn.cursor()
            
            try:
                # Creating the update query and executing it after checking existing tags and id
                sql_offer = f"SELECT num_offer FROM orders WHERE num_order = '{self.numorder}'"
                cursor.execute(sql_offer)
                results_offer = cursor.fetchall()
                num_offer = results_offer[0][0]

                sql_insert = f"INSERT INTO {table_name} (num_offer, num_order, tag_state, position, subposition) VALUES ('{num_offer}', '{self.numorder}', 'PURCHASED', 'ZZ', 'ZZ')"
                cursor.execute(sql_insert)
                conn.commit()

            # Closing cursor and database connection
                conn.commit()
                cursor.close()

                self.query_tags()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                print(error)
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    config_obj = configparser.ConfigParser()
    config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
    dbparam = config_obj["postgresql"]
    # set your parameters for the database connection URI using the keys from the configfile.ini
    user_database = dbparam["user"]
    password_database = dbparam["password"]

    db = createConnection(user_database, password_database)
    if not db:
        sys.exit()

    EditTagsFacturation_Window = Ui_EditTags_Facturation_Window('Ernesto Carrillo',db)
    EditTagsFacturation_Window.show()
    sys.exit(app.exec())