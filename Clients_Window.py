# Form implementation generated from reading ui file 'Clients_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if value is None:
            self.column_filters[column_index] = set()
        elif checked:
            self.column_filters[column_index].add(value)
        elif value in self.column_filters[column_index]:
            self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if filters and item_value not in filters:
                        show_row = False
                        break

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

    # Update hidden rows for this column
        if checked:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

    # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_Clients_Window(object):
    def __init__(self,name):
        self.name=name

    def setupUi(self, Clients_Window):
        if self.name in ['Daniel MÃ¡rquez']:
            self.scale = 1.5
        else:
            self.scale=1
        Clients_Window.setObjectName("Clients_Window")
        Clients_Window.resize(int(1174//self.scale), int(600//self.scale))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Clients_Window.setWindowIcon(icon)
        Clients_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=Clients_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_Code = QtWidgets.QLabel(parent=self.frame)
        self.label_Code.setMinimumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        self.label_Code.setMaximumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_Code.setFont(font)
        self.label_Code.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Code.setObjectName("label_Code")
        self.gridLayout_2.addWidget(self.label_Code, 1, 1, 1, 1)
        self.Code_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Code_Clients.setMinimumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.Code_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Code_Clients.setFont(font)
        self.Code_Clients.setObjectName("Code_Clients")
        self.gridLayout_2.addWidget(self.Code_Clients, 1, 2, 1, 1)
        self.label_Name = QtWidgets.QLabel(parent=self.frame)
        self.label_Name.setMinimumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        self.label_Name.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_Name.setFont(font)
        self.label_Name.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Name.setObjectName("label_Name")
        self.gridLayout_2.addWidget(self.label_Name, 1, 4, 1, 1)
        self.Name_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Name_Clients.setMinimumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.Name_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Name_Clients.setFont(font)
        self.Name_Clients.setObjectName("Name_Clients")
        self.gridLayout_2.addWidget(self.Name_Clients, 1, 5, 1, 7)
        self.label_CIF = QtWidgets.QLabel(parent=self.frame)
        self.label_CIF.setMinimumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        self.label_CIF.setMaximumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_CIF.setFont(font)
        self.label_CIF.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_CIF.setObjectName("label_CIF")
        self.gridLayout_2.addWidget(self.label_CIF, 1, 12, 1, 1)
        self.Cif_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Cif_Clients.setMinimumSize(QtCore.QSize(0, int(25//self.scale)))
        self.Cif_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Cif_Clients.setFont(font)
        self.Cif_Clients.setObjectName("Cif_Clients")
        self.gridLayout_2.addWidget(self.Cif_Clients, 1, 13, 1, 4)
        self.label_Address = QtWidgets.QLabel(parent=self.frame)
        self.label_Address.setMinimumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        self.label_Address.setMaximumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_Address.setFont(font)
        self.label_Address.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Address.setObjectName("label_Address")
        self.gridLayout_2.addWidget(self.label_Address, 2, 1, 1, 1)
        self.Address_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Address_Clients.setMinimumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.Address_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Address_Clients.setFont(font)
        self.Address_Clients.setObjectName("Address_Clients")
        self.gridLayout_2.addWidget(self.Address_Clients, 2, 2, 1, 6)
        self.label_ZipCode = QtWidgets.QLabel(parent=self.frame)
        self.label_ZipCode.setMinimumSize(QtCore.QSize(int(110//self.scale), int(25//self.scale)))
        self.label_ZipCode.setMaximumSize(QtCore.QSize(int(110//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_ZipCode.setFont(font)
        self.label_ZipCode.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_ZipCode.setObjectName("label_ZipCode")
        self.gridLayout_2.addWidget(self.label_ZipCode, 2, 8, 1, 1)
        self.Zipcode_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Zipcode_Clients.setMinimumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.Zipcode_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Zipcode_Clients.setFont(font)
        self.Zipcode_Clients.setObjectName("Zipcode_Clients")
        self.gridLayout_2.addWidget(self.Zipcode_Clients, 2, 9, 1, 3)
        self.label_City = QtWidgets.QLabel(parent=self.frame)
        self.label_City.setMinimumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        self.label_City.setMaximumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_City.setFont(font)
        self.label_City.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_City.setObjectName("label_City")
        self.gridLayout_2.addWidget(self.label_City, 2, 12, 1, 1)
        self.City_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.City_Clients.setMinimumSize(QtCore.QSize(0, int(25//self.scale)))
        self.City_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.City_Clients.setFont(font)
        self.City_Clients.setObjectName("City_Clients")
        self.gridLayout_2.addWidget(self.City_Clients, 2, 13, 1, 4)
        self.label_Province = QtWidgets.QLabel(parent=self.frame)
        self.label_Province.setMinimumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        self.label_Province.setMaximumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_Province.setFont(font)
        self.label_Province.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Province.setObjectName("label_Province")
        self.gridLayout_2.addWidget(self.label_Province, 3, 1, 1, 1)    
        self.Province_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Province_Clients.setMinimumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.Province_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Province_Clients.setFont(font)
        self.Province_Clients.setObjectName("Province_Clients")
        self.gridLayout_2.addWidget(self.Province_Clients, 3, 2, 1, 6)
        self.label_Country = QtWidgets.QLabel(parent=self.frame)
        self.label_Country.setMinimumSize(QtCore.QSize(int(110//self.scale), int(25//self.scale)))
        self.label_Country.setMaximumSize(QtCore.QSize(int(110//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_Country.setFont(font)
        self.label_Country.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Country.setObjectName("label_Country")
        self.gridLayout_2.addWidget(self.label_Country, 3, 8, 1, 1)
        self.Country_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Country_Clients.setMinimumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.Country_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Country_Clients.setFont(font)
        self.Country_Clients.setObjectName("Country_Clients")
        self.gridLayout_2.addWidget(self.Country_Clients, 3, 9, 1, 3)
        self.label_PhoneNumber = QtWidgets.QLabel(parent=self.frame)
        self.label_PhoneNumber.setMinimumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        self.label_PhoneNumber.setMaximumSize(QtCore.QSize(int(75//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_PhoneNumber.setFont(font)
        self.label_PhoneNumber.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_PhoneNumber.setObjectName("label_PhoneNumber")
        self.gridLayout_2.addWidget(self.label_PhoneNumber, 3, 12, 1, 1)
        self.Phones_Clients = QtWidgets.QTextEdit(parent=self.frame)
        self.Phones_Clients.setMinimumSize(QtCore.QSize(0, int(100//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Phones_Clients.setFont(font)
        self.Phones_Clients.setObjectName("Phones_Clients")
        self.gridLayout_2.addWidget(self.Phones_Clients, 3, 13, 3, 4)
        self.label_IVA = QtWidgets.QLabel(parent=self.frame)
        self.label_IVA.setMinimumSize(QtCore.QSize(int(35//self.scale), int(25//self.scale)))
        self.label_IVA.setMaximumSize(QtCore.QSize(int(35//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_IVA.setFont(font)
        self.label_IVA.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_IVA.setObjectName("label_IVA")
        self.gridLayout_2.addWidget(self.label_IVA, 5, 1, 1, 1)
        self.Iva_Clients = QtWidgets.QComboBox(parent=self.frame)
        self.Iva_Clients.setMinimumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.Iva_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Iva_Clients.setFont(font)
        self.Iva_Clients.setObjectName("Iva_Clients")
        self.gridLayout_2.addWidget(self.Iva_Clients, 5, 2, 1, 4)
        self.label_PayWay = QtWidgets.QLabel(parent=self.frame)
        self.label_PayWay.setMinimumSize(QtCore.QSize(0, int(25//self.scale)))
        self.label_PayWay.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_PayWay.setFont(font)
        self.label_PayWay.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_PayWay.setObjectName("label_PayWay")
        self.gridLayout_2.addWidget(self.label_PayWay, 5, 6, 1, 2)
        self.Payway_Clients = QtWidgets.QComboBox(parent=self.frame)
        self.Payway_Clients.setMinimumSize(QtCore.QSize(0, int(25//self.scale)))
        self.Payway_Clients.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Payway_Clients.setFont(font)
        self.Payway_Clients.setObjectName("Payway_Clients")
        self.gridLayout_2.addWidget(self.Payway_Clients, 5, 8, 1, 2)
        self.label_Vto1 = QtWidgets.QLabel(parent=self.frame)
        self.label_Vto1.setMinimumSize(QtCore.QSize(int(80//self.scale), int(25//self.scale)))
        self.label_Vto1.setMaximumSize(QtCore.QSize(int(80//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_Vto1.setFont(font)
        self.label_Vto1.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.label_Vto1.setObjectName("label_Vto1")
        self.gridLayout_2.addWidget(self.label_Vto1, 4, 11, 1, 1)
        self.label_Vto2 = QtWidgets.QLabel(parent=self.frame)
        self.label_Vto2.setMinimumSize(QtCore.QSize(int(80//self.scale), int(25//self.scale)))
        self.label_Vto2.setMaximumSize(QtCore.QSize(int(80//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_Vto2.setFont(font)
        self.label_Vto2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.label_Vto2.setObjectName("label_Vto2")
        self.gridLayout_2.addWidget(self.label_Vto2, 5, 11, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Vto1_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Vto1_Clients.setMinimumSize(QtCore.QSize(int(50//self.scale), 0))
        self.Vto1_Clients.setMaximumSize(QtCore.QSize(int(50//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Vto1_Clients.setFont(font)
        self.Vto1_Clients.setObjectName("Vto1_Clients")
        self.horizontalLayout.addWidget(self.Vto1_Clients)
        self.label_days1 = QtWidgets.QLabel(parent=self.frame)
        self.label_days1.setMinimumSize(QtCore.QSize(int(30//self.scale), 0))
        self.label_days1.setMaximumSize(QtCore.QSize(int(30//self.scale), int(30//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.label_days1.setFont(font)
        self.label_days1.setObjectName("label_days1")
        self.horizontalLayout.addWidget(self.label_days1)
        self.gridLayout_2.addLayout(self.horizontalLayout, 4, 12, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.Vto2_Clients = QtWidgets.QLineEdit(parent=self.frame)
        self.Vto2_Clients.setMinimumSize(QtCore.QSize(int(50//self.scale), 0))
        self.Vto2_Clients.setMaximumSize(QtCore.QSize(int(50//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.Vto2_Clients.setFont(font)
        self.Vto2_Clients.setObjectName("Vto2_Clients")
        self.horizontalLayout_2.addWidget(self.Vto2_Clients)
        self.label_days2 = QtWidgets.QLabel(parent=self.frame)
        self.label_days2.setMinimumSize(QtCore.QSize(int(30//self.scale), 0))
        self.label_days2.setMaximumSize(QtCore.QSize(int(30//self.scale), int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))
        self.label_days2.setFont(font)
        self.label_days2.setObjectName("label_days2")
        self.horizontalLayout_2.addWidget(self.label_days2)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 5, 12, 1, 1)
        self.label_Notes = QtWidgets.QLabel(parent=self.frame)
        self.label_Notes.setMinimumSize(QtCore.QSize(0, int(25//self.scale)))
        self.label_Notes.setMaximumSize(QtCore.QSize(16777215, int(25//self.scale)))
        font = QtGui.QFont()
        font.setPointSize(int(11//self.scale))
        font.setBold(True)
        self.label_Notes.setFont(font)
        self.label_Notes.setObjectName("label_Notes")
        self.gridLayout_2.addWidget(self.label_Notes, 7, 1, 1, 3)
        self.Notes_Clients = QtWidgets.QTextEdit(parent=self.frame)
        self.Notes_Clients.setMinimumSize(QtCore.QSize(0, int(100//self.scale)))
        self.Notes_Clients.setMaximumSize(QtCore.QSize(16777215, int(100//self.scale)))
        self.Notes_Clients.setObjectName("Notes_Clients")
        self.gridLayout_2.addWidget(self.Notes_Clients, 8, 1, 1, 20)
        self.tableClients = CustomTableWidget()
        self.tableClients.setObjectName("tableClients")
        self.tableClients.setColumnCount(16)
        self.tableClients.setRowCount(0)
        for i in range(16):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(10//self.scale))
            font.setBold(True)
            item.setFont(font)
            self.tableClients.setHorizontalHeaderItem(i, item)
        self.tableClients.setSortingEnabled(False)
        self.gridLayout_2.addWidget(self.tableClients, 9, 1, 1, 20)
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setMinimumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.label.setMaximumSize(QtCore.QSize(int(100//self.scale), int(25//self.scale)))
        self.label.setText("")
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 4, 4, 1, 1)
        self.Button_AddClient = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddClient.setObjectName("Button_AddClient")
        if self.name in ['Daniel MÃ¡rquez']:
            self.Button_AddClient.setStyleSheet("QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 10px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 4px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        else:
            self.Button_AddClient.setStyleSheet("QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 4px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        self.gridLayout_2.addWidget(self.Button_AddClient, 1, 19, 1, 1)
        self.Button_ModifyClient = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyClient.setObjectName("Button_ModifyClient")
        if self.name in ['Daniel MÃ¡rquez']:
            self.Button_ModifyClient.setStyleSheet("QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 10px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 4px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        else:
            self.Button_ModifyClient.setStyleSheet("QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 4px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        self.gridLayout_2.addWidget(self.Button_ModifyClient, 3, 19, 1, 1)
        self.Button_DeleteClient = QtWidgets.QPushButton(parent=self.frame)
        self.Button_DeleteClient.setObjectName("Button_DeleteClient")
        if self.name in ['Daniel MÃ¡rquez']:
            self.Button_DeleteClient.setStyleSheet("QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 10px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 4px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        else:
            self.Button_DeleteClient.setStyleSheet("QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 4px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        self.gridLayout_2.addWidget(self.Button_DeleteClient, 5, 19, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 1, 1, 1)
        Clients_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Clients_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1174, 22))
        self.menubar.setObjectName("menubar")
        Clients_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Clients_Window)
        self.statusbar.setObjectName("statusbar")
        Clients_Window.setStatusBar(self.statusbar)
        self.tableClients.setSortingEnabled(False)
        self.tableClients.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableClients.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        for i in range(2,13):
            self.tableClients.horizontalHeader().setSectionResizeMode(i,QtWidgets.QHeaderView.ResizeMode.Interactive)

        self.retranslateUi(Clients_Window)
        QtCore.QMetaObject.connectSlotsByName(Clients_Window)

        commands_iva = ("""
                        SELECT * 
                        FROM purch_fact.iva
                        """)
        commands_payway = ("""
                        SELECT * 
                        FROM purch_fact.pay_way
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_iva)
            results_iva=cur.fetchall()
            cur.execute(commands_payway)
            results_payway=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        list_iva=[''] + [x[1] for x in results_iva]
        self.Iva_Clients.addItems(list_iva)

        list_payway=[x[1] for x in results_payway]
        self.Payway_Clients.addItems(list_payway)

        self.tableClients.itemClicked.connect(self.loadformclients)
        self.tableClients.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.Button_AddClient.clicked.connect(self.addclient)
        self.Button_ModifyClient.clicked.connect(self.modifyclient)
        self.Button_DeleteClient.clicked.connect(self.deleteclient)
        self.loadtableclients()


    def retranslateUi(self, Clients_Window):
        _translate = QtCore.QCoreApplication.translate
        Clients_Window.setWindowTitle(_translate("Clients_Window", "Clientes"))
        item = self.tableClients.horizontalHeaderItem(0)
        item.setText(_translate("Clients_Window", "ID"))
        item = self.tableClients.horizontalHeaderItem(1)
        item.setText(_translate("Clients_Window", "CÃ³digo"))
        item = self.tableClients.horizontalHeaderItem(2)
        item.setText(_translate("Clients_Window", "Nombre"))
        item = self.tableClients.horizontalHeaderItem(3)
        item.setText(_translate("Clients_Window", "CIF"))
        item = self.tableClients.horizontalHeaderItem(4)
        item.setText(_translate("Clients_Window", "DirecciÃ³n"))
        item = self.tableClients.horizontalHeaderItem(5)
        item.setText(_translate("Clients_Window", "TelÃ©fono"))
        item = self.tableClients.horizontalHeaderItem(6)
        item.setText(_translate("Clients_Window", "Fax"))
        item = self.tableClients.horizontalHeaderItem(7)
        item.setText(_translate("Clients_Window", "Ciudad"))
        item = self.tableClients.horizontalHeaderItem(8)
        item.setText(_translate("Clients_Window", "Provincia"))
        item = self.tableClients.horizontalHeaderItem(9)
        item.setText(_translate("Clients_Window", "PaÃ­s"))
        item = self.tableClients.horizontalHeaderItem(10)
        item.setText(_translate("Clients_Window", "CP"))
        item = self.tableClients.horizontalHeaderItem(11)
        item.setText(_translate("Clients_Window", "Forma Pago"))
        item = self.tableClients.horizontalHeaderItem(12)
        item.setText(_translate("Clients_Window", "Vto. Prog. 1"))
        item = self.tableClients.horizontalHeaderItem(13)
        item.setText(_translate("Clients_Window", "Vto. Prog. 2"))
        item = self.tableClients.horizontalHeaderItem(14)
        item.setText(_translate("Clients_Window", "IVA"))
        item = self.tableClients.horizontalHeaderItem(15)
        item.setText(_translate("Clients_Window", "Observaciones"))
        self.label_Country.setText(_translate("Clients_Window", "PaÃ­s:"))
        self.label_days1.setText(_translate("Clients_Window", "dÃ­as"))
        self.label_IVA.setText(_translate("Clients_Window", "IVA:"))
        self.label_Province.setText(_translate("Clients_Window", "Provincia:"))
        self.label_Name.setText(_translate("Clients_Window", "Nombre:"))
        self.label_City.setText(_translate("Clients_Window", "Ciudad:"))
        self.label_Address.setText(_translate("Clients_Window", "DirecciÃ³n:"))
        self.label_PayWay.setText(_translate("Clients_Window", "Forma de Pago:"))
        self.label_Notes.setText(_translate("Clients_Window", "Observaciones y/o comentarios:"))
        self.label_days2.setText(_translate("Clients_Window", "dÃ­as"))
        self.label_ZipCode.setText(_translate("Clients_Window", "CÃ³digo Postal:"))
        self.Payway_Clients.setItemText(0, _translate("Clients_Window", "180 DFF - TALON/CONFIRM."))
        self.label_PhoneNumber.setText(_translate("Clients_Window", "TelÃ©fonos:"))
        self.label_CIF.setText(_translate("Clients_Window", "CIF:"))
        self.label_Vto1.setText(_translate("Clients_Window", "Vto Prog1:"))
        self.label_Vto2.setText(_translate("Clients_Window", "Vto Prog2:"))
        self.label_Code.setText(_translate("Clients_Window", "CÃ³digo:"))
        self.Button_AddClient.setText(_translate("Clients_Window", "Agregar"))
        self.Button_ModifyClient.setText(_translate("Clients_Window", "Modificar"))
        self.Button_DeleteClient.setText(_translate("Clients_Window", "Eliminar"))

# Function to create clients in database
    def addclient(self):
        id=self.label.text()
        code=self.Code_Clients.text()
        name=self.Name_Clients.text()
        cif=self.Cif_Clients.text()
        address=self.Address_Clients.text()
        zipcode=self.Zipcode_Clients.text()
        city=self.City_Clients.text()
        province=self.Province_Clients.text()
        country=self.Country_Clients.text()
        phones=self.Phones_Clients.toPlainText()
        iva=self.Iva_Clients.currentText()
        payway=self.Payway_Clients.currentText()
        vto1=self.Vto1_Clients.text()
        vto2=self.Vto2_Clients.text()
        notes=self.Notes_Clients.toPlainText()

        if name=="" or (code=="" or (cif=="" or country=="")):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Cliente")
            dlg.setText("Rellena como mÃ­nimo los siguientes campos:\n"
                        "Â·Nombre\n"
                        "Â·CÃ³digo\n"
                        "Â·CIF\n"
                        "Â·PaÃ­s")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
        #SQL Query for checking if document number exists in database
            commands_checkclient = ("""
                        SELECT * 
                        FROM purch_fact.clients_test
                        WHERE "name" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_checkclient,(name,))
                results=cur.fetchall()
                match=list(filter(lambda x:name in x, results))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            if len(match)>0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Agregar Cliente")
                dlg.setText("El nombre de cliente introducido ya estÃ¡ registrado\n"
                            "BÃºscalo en la tabla")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()

                del dlg,new_icon

            else:
                commands_newclient = ("""
                            INSERT INTO purch_fact.clients_test (
                            code,name,cif,address,phone_number,fax,city,province,country,
                            zip_code,pay_way_id,vto_prog1,vto_prog2,iva_id,notes
                            )
                            VALUES (%s,%s,%s,%s,%s,'',%s,%s,%s,%s,%s,%s,%s,%s,%s)
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    query_ivatype = "SELECT id FROM purch_fact.iva WHERE iva_type = %s"
                    cur.execute(query_ivatype, (iva,))
                    result_iva = cur.fetchone()

                    query_paywaytype = "SELECT id FROM purch_fact.pay_way WHERE pay_way_type = %s"
                    cur.execute(query_paywaytype, (payway,))
                    result_payway = cur.fetchone()
                # get id from table
                    id_iva = result_iva[0] if result_iva is not None else None
                    id_payway = result_payway[0]
                # execution of principal command
                    data=(code,name,cif,address,phones,city,province,country,zipcode,id_payway,vto1,vto2,id_iva,notes,)
                    cur.execute(commands_newclient, data)
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Agregar Cliente")
                    dlg.setText("Cliente agregado con Ã©xito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()

                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtableclients()


# Function to modify data of clients in database
    def modifyclient(self):
        id=self.label.text()
        code=self.Code_Clients.text()
        name=self.Name_Clients.text()
        cif=self.Cif_Clients.text()
        address=self.Address_Clients.text()
        zipcode=self.Zipcode_Clients.text()
        city=self.City_Clients.text()
        province=self.Province_Clients.text()
        country=self.Country_Clients.text()
        phones=self.Phones_Clients.toPlainText()
        iva=self.Iva_Clients.currentText()
        payway=self.Payway_Clients.currentText()
        vto1=self.Vto1_Clients.text()
        vto2=self.Vto2_Clients.text()
        notes=self.Notes_Clients.toPlainText()

        if id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Proveedor")
            dlg.setText("Pulsa en un proveedor de la tabla para cargar los datos en el formulario")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            commands_modifyclient = ("""
                            UPDATE purch_fact.clients_test
                            SET "code" = %s, "name" = %s, "cif" = %s, "address" = %s, "phone_number" = %s, "city" = %s, "province" = %s,
                            "country" = %s, "zip_code" = %s, "pay_way_id" = %s, "vto_prog1" = %s, "vto_prog2" = %s, "iva_id" = %s, "notes" = %s
                            WHERE "id" = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()

                query_ivatype = "SELECT id FROM purch_fact.iva WHERE iva_type = %s"
                cur.execute(query_ivatype, (iva,))
                result_iva = cur.fetchone()

                query_paywaytype = "SELECT id FROM purch_fact.pay_way WHERE pay_way_type = %s"
                cur.execute(query_paywaytype, (payway,))
                result_payway = cur.fetchone()
            # get id from table
                id_iva = result_iva[0] if result_iva is not None else None
                id_payway = result_payway[0]
            # execution of commands one by one
                data=(code,name,cif,address,phones,city,province,country,zipcode,id_payway,vto1,vto2,id_iva,notes,id,)
                cur.execute(commands_modifyclient,data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Modificar Cliente")
                dlg.setText("Cliente modificado con exito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg, new_icon
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            self.loadtableclients()


# Function to delete data of clients in database
    def deleteclient(self):
        id=self.label.text()

        if id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Eliminar Cliente")
            dlg.setText("Pulsa en un cliente de la tabla para cargar los datos en el formulario")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            commands_deleteclient = ("""
                            DELETE FROM purch_fact.clients_test
                            WHERE "id" = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()

                cur.execute(commands_deleteclient, (id,))

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Eliminar Cliente")
                dlg.setText("Cliente eliminado con exito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg, new_icon
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            self.loadtableclients()


# Function to load data of clients in form fields
    def loadformclients(self,item):
        data_client=[]

        for column in range(16):
            item_text=self.tableClients.item(item.row(), column).text()
            data_client.append(item_text)

        self.label.setText(data_client[0])
        self.Code_Clients.setText(data_client[1])
        self.Name_Clients.setText(data_client[2])
        self.Cif_Clients.setText(data_client[3])
        self.Address_Clients.setText(data_client[4])
        self.Phones_Clients.setText(data_client[5])
        self.City_Clients.setText(data_client[7])
        self.Province_Clients.setText(data_client[8])
        self.Country_Clients.setText(data_client[9])
        self.Zipcode_Clients.setText(data_client[10])
        self.Payway_Clients.setCurrentText(data_client[11])
        self.Vto1_Clients.setText(data_client[12])
        self.Vto2_Clients.setText(data_client[13])
        self.Iva_Clients.setCurrentText(data_client[14])
        self.Notes_Clients.setText(data_client[15])


# Function to load data of clients in table
    def loadtableclients(self):
        commands_queryclients = ("""
                        SELECT purch_fact.clients_test.id,purch_fact.clients_test.code,purch_fact.clients_test.name,
                        purch_fact.clients_test.cif,purch_fact.clients_test.address,
                        purch_fact.clients_test.phone_number,purch_fact.clients_test.fax,
                        purch_fact.clients_test.city,purch_fact.clients_test.province,
                        purch_fact.clients_test.country,purch_fact.clients_test.zip_code,
                        purch_fact.pay_way."pay_way_type",
                        purch_fact.clients_test.vto_prog1,purch_fact.clients_test.vto_prog2,
                        purch_fact.iva."iva_type",
                        purch_fact.clients_test.notes
                        FROM purch_fact.clients_test
                        LEFT JOIN purch_fact.pay_way ON (purch_fact.pay_way."id" = purch_fact.clients_test."pay_way_id")
                        LEFT JOIN purch_fact.iva ON (purch_fact.iva."id" = purch_fact.clients_test."iva_id")
                        ORDER BY purch_fact.clients_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_queryclients)
            results_client=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        self.tableClients.setRowCount(len(results_client))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10//self.scale))

    # fill the Qt Table with the query results
        for row in results_client:
            for column in range(16):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableClients.setItem(tablerow, column, it)

            self.tableClients.setItemDelegateForRow(tablerow, AlignDelegate(self.tableClients))
            tablerow+=1

        self.tableClients.verticalHeader().hide()
        self.tableClients.setSortingEnabled(False)


#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableClients.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableClients.horizontalHeader().height()
        popup_pos = self.tableClients.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableClients.show_unique_values_menu(logical_index, popup_pos, header_height)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Clients_Window = QtWidgets.QMainWindow()
    ui = Ui_Clients_Window('Daniel MÃ¡rquez')
    ui.setupUi(Clients_Window)
    Clients_Window.showMaximized()
    sys.exit(app.exec())
