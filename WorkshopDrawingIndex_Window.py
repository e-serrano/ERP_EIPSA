# Form implementation generated from reading ui file 'WorkshopDrawingIndex_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6 import QtSql
from PyQt6.QtWidgets import QApplication
from PyQt6.QtCore import Qt, QDate, QMimeData
from PyQt6.QtGui import QKeySequence, QTextDocument, QTextCursor
import re
import configparser
from Database_Connection import createConnection_name, createConnection
from config import config
import psycopg2
import locale
import os
from datetime import *
import pandas as pd
from tkinter.filedialog import asksaveasfilename

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


def imagen_to_base64(imagen):
    buffer = QtCore.QBuffer()
    buffer.open(QtCore.QIODevice.OpenModeFlag.WriteOnly)
    imagen.save(buffer, ".png")
    base64_data = buffer.data().toBase64().data().decode()
    return base64_data


class CheckboxWidget(QtWidgets.QWidget):
    def __init__(self, text):
        super().__init__()
        layout = QtWidgets.QHBoxLayout(self)
        self.checkbox = QtWidgets.QCheckBox(text)
        layout.addWidget(self.checkbox)

class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter

    def paint(self, painter, option, index):
        super().paint(painter, option, index)

        if index.column() == 2:  # Column to paint
            state_column_index = index.sibling(index.row(), 4)  # Index for column to check text
            original_text = str(index.data())  # Text of cell to be painted
            value_check = str(state_column_index.data()).upper()  # Text for checking
            text_color = QtGui.QColor(0, 0, 0)

            if option.state & QtWidgets.QStyle.StateFlag.State_Selected:
                painter.setPen(option.palette.highlightedText().color())
                painter.setBrush(option.palette.highlight())
            else:

                if "STELLITE" in value_check:
                    start_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['316H', '316TI']):
                    start_color = QtGui.QColor(92, 197, 229)  # Blue
                    end_color = QtGui.QColor(92, 197, 229)  # Blue
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '304H' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '321H' in value_check:
                    start_color = QtGui.QColor(251, 131, 179)  # Pink
                    end_color = QtGui.QColor(251, 131, 179)  # Pink
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '310H' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '347H' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(251, 131, 179)  # Pink
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '317H' in value_check:
                    start_color = QtGui.QColor(92, 197, 229)  # Blue
                    end_color = QtGui.QColor(251, 131, 179)  # Pink
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif 'F9' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'A707' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '316' in value_check:
                    start_color = QtGui.QColor(92, 197, 229)  # Blue
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '304' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '446' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'MONEL' in value_check:
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(160, 120, 182)  # Purple

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'HASTELLOY' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '321' in value_check:
                    start_color = QtGui.QColor(251, 131, 179)  # Pink
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'TANTALO' in value_check:
                    text_color = QtGui.QColor(255, 255, 255)
                    start_color = QtGui.QColor(0, 0, 0)  # Black
                    end_color = QtGui.QColor(0, 0, 0)  # Black
                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'F11' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'F22' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(146, 208, 80)  # Light Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'LF2' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(255, 157, 59)  # Orange

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '310' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'ALLOY 20' in value_check:
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'INCONEL 600' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(146, 208, 80)  # Light Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'N08904' in value_check:
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(255, 157, 59)  # Orange

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F60', '32205', 'SAF 2205']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(146, 208, 80)  # Light Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F44', '31254']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '825' in value_check:
                    start_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    end_color = QtGui.QColor(255, 87, 87)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '601' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '625' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(255, 87, 87)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '800' in value_check:
                    start_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F53', '32750', 'SAF 2507']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F51', '31803']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F55', '32760']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(255, 87, 87)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['C70610', 'CUNI 90-10', 'C70690']):
                    start_color = QtGui.QColor(255, 87, 87)  # Red
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '347' in value_check:
                    start_color = QtGui.QColor(251, 131, 179)  # Pink
                    end_color = QtGui.QColor(146, 208, 80)  # Light Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '317' in value_check:
                    start_color = QtGui.QColor(92, 197, 229)  # Blue
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'TITANIO' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'ALLOY 699XA' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['HR160', '50CR-50NI']):
                    start_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F5', '5CR-1/2MO']):
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'ALUMINIO' in value_check:
                    start_color = QtGui.QColor(255, 87, 87)  # Red
                    end_color = QtGui.QColor(255, 87, 87)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                else:
                    start_color = QtGui.QColor(255, 255, 255)  # White
                    end_color = QtGui.QColor(255, 255, 255)  # White

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                textRect = painter.boundingRect(option.rect.adjusted(0, 0, 0, -option.rect.height() // 2), QtCore.Qt.TextFlag.TextDontClip | QtCore.Qt.AlignmentFlag.AlignCenter, original_text,)
                verticalPosition = int(option.rect.adjusted(0, 0, 0, -option.rect.height() // 2).y() + (option.rect.adjusted(0, 0, 0, -option.rect.height() // 2).height() + textRect.height() + 8) / 2)
                horizontalPosition = int(option.rect.adjusted(0, 0, 0, -option.rect.height() // 2).x() + (option.rect.adjusted(0, 0, 0, -option.rect.height() // 2).width() - textRect.width()) / 2)

                painter.setPen(QtGui.QPen(text_color))
                painter.drawText(horizontalPosition, verticalPosition, original_text)

class AlignDelegate_M(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate_M, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter

    def paint(self, painter, option, index):
        super().paint(painter, option, index)

        if index.column() == 2:  # Column to paint
            state_column_index = index.sibling(index.row(), 4)  # Index for column to check text
            original_text = str(index.data())  # Text of cell to be painted
            value_check = str(state_column_index.data()).upper()  # Text for checking
            text_color = QtGui.QColor(0, 0, 0)

            if option.state & QtWidgets.QStyle.StateFlag.State_Selected:
                painter.setPen(option.palette.highlightedText().color())
                painter.setBrush(option.palette.highlight())
            else:

                if "STELLITE" in value_check:
                    start_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['316H', '316TI']):
                    start_color = QtGui.QColor(92, 197, 229)  # Blue
                    end_color = QtGui.QColor(92, 197, 229)  # Blue
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '304H' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '321H' in value_check:
                    start_color = QtGui.QColor(251, 131, 179)  # Pink
                    end_color = QtGui.QColor(251, 131, 179)  # Pink
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '310H' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '347H' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(251, 131, 179)  # Pink
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif '317H' in value_check:
                    start_color = QtGui.QColor(92, 197, 229)  # Blue
                    end_color = QtGui.QColor(251, 131, 179)  # Pink
                    border_color = QtGui.QColor(255, 0, 0)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.setPen(QtGui.QPen(border_color, 3))
                    painter.drawRect(option.rect)
                    painter.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 0.01))

                elif 'F9' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'A707' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '316' in value_check:
                    start_color = QtGui.QColor(92, 197, 229)  # Blue
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '304' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '446' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'MONEL' in value_check:
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(160, 120, 182)  # Purple

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'HASTELLOY' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '321' in value_check:
                    start_color = QtGui.QColor(251, 131, 179)  # Pink
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'TANTALO' in value_check:
                    text_color = QtGui.QColor(255, 255, 255)
                    start_color = QtGui.QColor(0, 0, 0)  # Black
                    end_color = QtGui.QColor(0, 0, 0)  # Black
                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'F11' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'F22' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(146, 208, 80)  # Light Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'LF2' in value_check:
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(255, 157, 59)  # Orange

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '310' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'ALLOY 20' in value_check:
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'INCONEL 600' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(146, 208, 80)  # Light Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'N08904' in value_check:
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(255, 157, 59)  # Orange

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F60', '32205', 'SAF 2205']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(146, 208, 80)  # Light Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F44', '31254']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '825' in value_check:
                    start_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    end_color = QtGui.QColor(255, 87, 87)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '601' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '625' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(255, 87, 87)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '800' in value_check:
                    start_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F53', '32750', 'SAF 2507']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F51', '31803']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F55', '32760']):
                    start_color = QtGui.QColor(160, 120, 182)  # Purple
                    end_color = QtGui.QColor(255, 87, 87)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['C70610', 'CUNI 90-10', 'C70690']):
                    start_color = QtGui.QColor(255, 87, 87)  # Red
                    end_color = QtGui.QColor(255, 255, 0)  # Yellow

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '347' in value_check:
                    start_color = QtGui.QColor(251, 131, 179)  # Pink
                    end_color = QtGui.QColor(146, 208, 80)  # Light Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif '317' in value_check:
                    start_color = QtGui.QColor(92, 197, 229)  # Blue
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'TITANIO' in value_check:
                    start_color = QtGui.QColor(255, 255, 0)  # Yellow
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'ALLOY 699XA' in value_check:
                    start_color = QtGui.QColor(146, 208, 80)  # Light Green
                    end_color = QtGui.QColor(24, 146, 97)  # Dark Green

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['HR160', '50CR-50NI']):
                    start_color = QtGui.QColor(24, 146, 97)  # Dark Green
                    end_color = QtGui.QColor(251, 131, 179)  # Pink

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif any(item in value_check for item in ['F5', '5CR-1/2MO']):
                    start_color = QtGui.QColor(255, 157, 59)  # Orange
                    end_color = QtGui.QColor(92, 197, 229)  # Blue

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                elif 'ALUMINIO' in value_check:
                    start_color = QtGui.QColor(255, 87, 87)  # Red
                    end_color = QtGui.QColor(255, 87, 87)  # Red

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                else:
                    start_color = QtGui.QColor(255, 255, 255)  # White
                    end_color = QtGui.QColor(255, 255, 255)  # White

                    rect_top = option.rect.adjusted(0, 0, 0, -option.rect.height() // 2)
                    rect_bottom = option.rect.adjusted(0, option.rect.height() // 2, 0, 0)

                    painter.fillRect(rect_top, start_color)
                    painter.fillRect(rect_bottom, end_color)

                textRect = painter.boundingRect(option.rect.adjusted(0, 0, 0, -option.rect.height() // 2), QtCore.Qt.TextFlag.TextDontClip | QtCore.Qt.AlignmentFlag.AlignCenter, original_text,)
                verticalPosition = int(option.rect.adjusted(0, 0, 0, -option.rect.height() // 2).y() + (option.rect.adjusted(0, 0, 0, -option.rect.height() // 2).height() + textRect.height() + 8) / 2)
                horizontalPosition = int(option.rect.adjusted(0, 0, 0, -option.rect.height() // 2).x() + (option.rect.adjusted(0, 0, 0, -option.rect.height() // 2).width() - textRect.width()) / 2)

                painter.setPen(QtGui.QPen(text_color))
                painter.drawText(horizontalPosition, verticalPosition, original_text)

class CustomProxyModelDim(QtCore.QSortFilterProxyModel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._filters = dict()
        self.header_names = {}

    @property
    def filters(self):
        return self._filters

    def setFilter(self, expresion, column, action_name=None):
        if expresion or expresion == "":
            if column in self.filters:
                if action_name or action_name == "":
                    self.filters[column].remove(expresion)
                else:
                    self.filters[column].append(expresion)
            else:
                self.filters[column] = [expresion]
        elif column in self.filters:
            if action_name or action_name == "":
                self.filters[column].remove(expresion)
                if not self.filters[column]:
                    del self.filters[column]
            else:
                del self.filters[column]
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        for column, expresions in self.filters.items():
            text = self.sourceModel().index(source_row, column, source_parent).data()

            if isinstance(text, QtCore.QDate):  # Check if filters are QDate. If True, convert to text
                text = text.toString("yyyy-MM-dd")

            for expresion in expresions[0]:
                if expresion == "":  # If expression is empty, match empty cells
                    if text == "":
                        break

                elif re.fullmatch(r"^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$", expresion):
                    expresion = QtCore.QDate.fromString(expresion, "dd/MM/yyyy")
                    expresion = expresion.toString("yyyy-MM-dd")

                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        break

                else:
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        break
            else:
                return False
        return True

class EditableTableModelDim(QtSql.QSqlTableModel):
    updateFailed = QtCore.pyqtSignal(str)

    def __init__(self, username, parent=None, column_range=None, database=None):
        super().__init__(parent, database)
        self.column_range = column_range
        self.username = username

    def setQuery(self, query):
        super().setQuery(query)

    def setAllColumnHeaders(self, headers):
        for column, header in enumerate(headers):
            self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIndividualColumnHeader(self, column, header):
        self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIconColumnHeader(self, column, icon):
        self.setHeaderData(column, QtCore.Qt.Orientation.Horizontal, icon, Qt.ItemDataRole.DecorationRole)

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return super().headerData(section, orientation, role)
        return super().headerData(section, orientation, role)

    def flags(self, index):
        flags = super().flags(index)
        if self.username in ['j.sanz', 'j.zofio']:
            if index.column() >= 5:
                flags &= ~Qt.ItemFlag.ItemIsEditable
                return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled
            else:
                return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable
        else:
            flags &= ~Qt.ItemFlag.ItemIsEditable
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled

    def getColumnHeaders(self, visible_columns):
        column_headers = [self.headerData(col, Qt.Orientation.Horizontal) for col in visible_columns]
        return column_headers

class CustomProxyModelOf(QtCore.QSortFilterProxyModel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._filters = dict()
        self.header_names = {}

    @property
    def filters(self):
        return self._filters

    def setFilter(self, expresion, column, action_name=None):
        if expresion or expresion == "":
            if column in self.filters:
                if action_name or action_name == "":
                    self.filters[column].remove(expresion)
                else:
                    self.filters[column].append(expresion)
            else:
                self.filters[column] = [expresion]
        elif column in self.filters:
            if action_name or action_name == "":
                self.filters[column].remove(expresion)
                if not self.filters[column]:
                    del self.filters[column]
            else:
                del self.filters[column]
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        for column, expresions in self.filters.items():
            text = self.sourceModel().index(source_row, column, source_parent).data()

            if isinstance(text, QtCore.QDate):  # Check if filters are QDate. If True, convert to text
                text = text.toString("yyyy-MM-dd")

            for expresion in expresions[0]:
                if expresion == "":  # If expression is empty, match empty cells
                    if text == "":
                        break

                elif re.fullmatch(r"^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$", expresion):
                    expresion = QtCore.QDate.fromString(expresion, "dd/MM/yyyy")
                    expresion = expresion.toString("yyyy-MM-dd")

                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        break

                else:
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        break
            else:
                return False
        return True

class EditableTableModelOf(QtSql.QSqlTableModel):
    updateFailed = QtCore.pyqtSignal(str)

    def __init__(self, username, parent=None, column_range=None, database=None):
        super().__init__(parent, database)
        self.column_range = column_range
        self.username = username

    def setQuery(self, query):
        super().setQuery(query)

    def setAllColumnHeaders(self, headers):
        for column, header in enumerate(headers):
            self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIndividualColumnHeader(self, column, header):
        self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIconColumnHeader(self, column, icon):
        self.setHeaderData(column, QtCore.Qt.Orientation.Horizontal, icon, Qt.ItemDataRole.DecorationRole)

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return super().headerData(section, orientation, role)
        return super().headerData(section, orientation, role)

    def flags(self, index):
        flags = super().flags(index)
        if self.username in ['j.sanz', 'j.zofio']:
            if index.column() >= 5:
                flags &= ~Qt.ItemFlag.ItemIsEditable
                return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled
            else:
                return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable
        else:
            flags &= ~Qt.ItemFlag.ItemIsEditable
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled

    def getColumnHeaders(self, visible_columns):
        column_headers = [self.headerData(col, Qt.Orientation.Horizontal) for col in visible_columns]
        return column_headers

class CustomProxyModelM(QtCore.QSortFilterProxyModel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._filters = dict()
        self.header_names = {}

    @property
    def filters(self):
        return self._filters

    def setFilter(self, expresion, column, action_name=None):
        if expresion or expresion == "":
            if column in self.filters:
                if action_name or action_name == "":
                    self.filters[column].remove(expresion)
                else:
                    self.filters[column].append(expresion)
            else:
                self.filters[column] = [expresion]
        elif column in self.filters:
            if action_name or action_name == "":
                self.filters[column].remove(expresion)
                if not self.filters[column]:
                    del self.filters[column]
            else:
                del self.filters[column]
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        for column, expresions in self.filters.items():
            text = self.sourceModel().index(source_row, column, source_parent).data()

            if isinstance(text, QtCore.QDate):  # Check if filters are QDate. If True, convert to text
                text = text.toString("yyyy-MM-dd")

            for expresion in expresions[0]:
                if expresion == "":  # If expression is empty, match empty cells
                    if text == "":
                        break

                elif re.fullmatch(r"^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$", expresion):
                    expresion = QtCore.QDate.fromString(expresion, "dd/MM/yyyy")
                    expresion = expresion.toString("yyyy-MM-dd")

                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        break

                else:
                    regex = QtCore.QRegularExpression(f".*{re.escape(str(expresion))}.*", QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption)
                    if regex.match(str(text)).hasMatch():
                        break
            else:
                return False
        return True

class EditableTableModelM(QtSql.QSqlTableModel):
    updateFailed = QtCore.pyqtSignal(str)

    def __init__(self, username, parent=None, column_range=None, database=None):
        super().__init__(parent, database)
        self.column_range = column_range
        self.username = username

    def setQuery(self, query):
        super().setQuery(query)

    def setAllColumnHeaders(self, headers):
        for column, header in enumerate(headers):
            self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIndividualColumnHeader(self, column, header):
        self.setHeaderData(column, Qt.Orientation.Horizontal, header, Qt.ItemDataRole.DisplayRole)

    def setIconColumnHeader(self, column, icon):
        self.setHeaderData(column, QtCore.Qt.Orientation.Horizontal, icon, Qt.ItemDataRole.DecorationRole)

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return super().headerData(section, orientation, role)
        return super().headerData(section, orientation, role)

    def flags(self, index):
        flags = super().flags(index)
        if self.username in ['j.sanz', 'j.zofio']:
            if index.column() >= 5:
                flags &= ~Qt.ItemFlag.ItemIsEditable
                return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled
            else:
                return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsEditable
        else:
            flags &= ~Qt.ItemFlag.ItemIsEditable
            return flags | Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled

    def getColumnHeaders(self, visible_columns):
        column_headers = [self.headerData(col, Qt.Orientation.Horizontal) for col in visible_columns]
        return column_headers


class Ui_WorkshopDrawingIndex_Window(QtWidgets.QMainWindow):
    def __init__(self, db, username=None, num_order=None):
        super(Ui_WorkshopDrawingIndex_Window, self).__init__()
        self.username = username
        self.modelDim = EditableTableModelDim(self.username, database=db)
        self.proxyDim = CustomProxyModelDim()
        self.modelOf = EditableTableModelOf(self.username, database=db)
        self.proxyOf = CustomProxyModelOf()
        self.modelM = EditableTableModelM(self.username, database=db)
        self.proxyM = CustomProxyModelM()
        self.db = db
        
        self.checkbox_states = {}
        self.dict_valuesuniques = {}
        self.dict_ordersort = {}
        self.hiddencolumns = []
        self.action_checkbox_map = {}
        self.checkbox_filters = {}
        self.num_order = num_order
        self.setupUi(self)
        self.modelDim.dataChanged.connect(self.saveChanges)
        self.modelOf.dataChanged.connect(self.saveChanges)
        self.modelM.dataChanged.connect(self.saveChanges)

    def closeEvent(self, event):
        # Closing database connection
        if self.modelDim:
            self.modelDim.clear()
        if self.modelOf:
            self.modelOf.clear()
        if self.modelM:
            self.modelM.clear()
        self.closeConnection()

    def closeConnection(self):
        # Closing database connection
        self.tableDimDwg.setModel(None)
        del self.modelDim
        self.tableOfDwg.setModel(None)
        del self.modelOf
        self.tableMDwg.setModel(None)
        del self.modelM
        if self.db:
            self.db.close()
            del self.db
            if QtSql.QSqlDatabase.contains("drawing_index"):
                QtSql.QSqlDatabase.removeDatabase("drawing_index")


    def setupUi(self, WorkshopDrawingIndex_Window):
        WorkshopDrawingIndex_Window.setObjectName("WorkshopDrawingIndex_Window")
        WorkshopDrawingIndex_Window.resize(790, 595)
        WorkshopDrawingIndex_Window.setMinimumSize(QtCore.QSize(790, 595))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        WorkshopDrawingIndex_Window.setWindowIcon(icon)
        if self.username == 'm.gil':
            WorkshopDrawingIndex_Window.setStyleSheet(
            ".QFrame {border: 2px solid white;\n"
            "}\n"
            "QMenu::item:selected {background-color: rgb(3, 174, 236);}")
        else:
            WorkshopDrawingIndex_Window.setStyleSheet(
            ".QFrame {border: 2px solid black;\n"
            "}\n"
            "QMenu {\n"
                "background-color: #333;\n"
                "color: black;\n"
            "}\n"
            "QMenu::item {\n"
                "background-color: transparent;\n"
                "color: black;\n"
            "}\n"
            "QMenu::item:selected {background-color: rgb(3, 174, 236);}")
        self.centralwidget = QtWidgets.QWidget(parent=WorkshopDrawingIndex_Window)
        if self.username == 'm.gil':
            self.centralwidget.setStyleSheet("background-color: #121212; color: rgb(255, 255, 255);")
        else:
            self.centralwidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setVerticalSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_NumOrder = QtWidgets.QLabel(parent=self.frame)
        self.label_NumOrder.setMinimumSize(QtCore.QSize(100, 25))
        self.label_NumOrder.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_NumOrder.setFont(font)
        self.label_NumOrder.setObjectName("label_NumOrder")
        self.gridLayout_2.addWidget(self.label_NumOrder, 1, 0, 1, 1)
        self.Numorder_IndexDwg = QtWidgets.QLineEdit(parent=self.frame)
        self.Numorder_IndexDwg.setMinimumSize(QtCore.QSize(200, 25))
        self.Numorder_IndexDwg.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Numorder_IndexDwg.setFont(font)
        self.Numorder_IndexDwg.setObjectName("Numorder_IndexDwg")
        self.gridLayout_2.addWidget(self.Numorder_IndexDwg, 1, 1, 1, 1)
        self.label_Responsible = QtWidgets.QLabel(parent=self.frame)
        self.label_Responsible.setMinimumSize(QtCore.QSize(150, 25))
        self.label_Responsible.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Responsible.setFont(font)
        self.label_Responsible.setObjectName("label_Responsible")
        self.gridLayout_2.addWidget(self.label_Responsible, 1, 2, 1, 1)
        self.Responsible_IndexDwg = QtWidgets.QLineEdit(parent=self.frame)
        self.Responsible_IndexDwg.setMinimumSize(QtCore.QSize(200, 25))
        self.Responsible_IndexDwg.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Responsible_IndexDwg.setFont(font)
        self.Responsible_IndexDwg.setEnabled(False)
        self.Responsible_IndexDwg.setObjectName("Responsible_IndexDwg")
        self.gridLayout_2.addWidget(self.Responsible_IndexDwg, 1, 3, 1, 1)
        self.label_ExpDate = QtWidgets.QLabel(parent=self.frame)
        self.label_ExpDate.setMinimumSize(QtCore.QSize(150, 25))
        self.label_ExpDate.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_ExpDate.setFont(font)
        self.label_ExpDate.setObjectName("label_ExpDate")
        self.gridLayout_2.addWidget(self.label_ExpDate, 1, 4, 1, 1)
        self.ExpDate_IndexDwg = QtWidgets.QLineEdit(parent=self.frame)
        self.ExpDate_IndexDwg.setMinimumSize(QtCore.QSize(200, 25))
        self.ExpDate_IndexDwg.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ExpDate_IndexDwg.setFont(font)
        self.ExpDate_IndexDwg.setEnabled(False)
        self.ExpDate_IndexDwg.setObjectName("ExpDate_IndexDwg")
        self.gridLayout_2.addWidget(self.ExpDate_IndexDwg, 1, 5, 1, 1)
        self.Button_AddLines = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddLines.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_AddLines.setMaximumSize(QtCore.QSize(50, 16777215))
        self.Button_AddLines.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_AddLines.setStyleSheet(
            "QPushButton{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(3, 174, 236);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(200, 200, 200);\n"
            "    border-radius: 10px;\n"
            "}"
        )
        self.Button_AddLines.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Add_Lines.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_AddLines.setIcon(icon1)
        self.Button_AddLines.setIconSize(QtCore.QSize(40, 40))
        self.Button_AddLines.setObjectName("Button_AddLines")
        self.gridLayout_2.addWidget(self.Button_AddLines, 1, 6, 2, 1)
        self.Button_PaletteM = QtWidgets.QPushButton(parent=self.frame)
        self.Button_PaletteM.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_PaletteM.setMaximumSize(QtCore.QSize(50, 16777215))
        self.Button_PaletteM.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_PaletteM.setStyleSheet(
            "QPushButton{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(3, 174, 236);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(200, 200, 200);\n"
            "    border-radius: 10px;\n"
            "}"
        )
        self.Button_PaletteM.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Colour_Palette_M.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_PaletteM.setIcon(icon2)
        self.Button_PaletteM.setIconSize(QtCore.QSize(40, 40))
        self.Button_PaletteM.setObjectName("Button_PaletteM")
        self.gridLayout_2.addWidget(self.Button_PaletteM, 1, 7, 2, 1)
        self.Button_PaletteT = QtWidgets.QPushButton(parent=self.frame)
        self.Button_PaletteT.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_PaletteT.setMaximumSize(QtCore.QSize(50, 16777215))
        self.Button_PaletteT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_PaletteT.setStyleSheet(
            "QPushButton{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(3, 174, 236);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(200, 200, 200);\n"
            "    border-radius: 10px;\n"
            "}"
        )
        self.Button_PaletteT.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Colour_Palette_T.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_PaletteT.setIcon(icon3)
        self.Button_PaletteT.setIconSize(QtCore.QSize(40, 40))
        self.Button_PaletteT.setObjectName("Button_PaletteT")
        self.gridLayout_2.addWidget(self.Button_PaletteT, 1, 8, 2, 1)
        self.Button_Description = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Description.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Description.setMaximumSize(QtCore.QSize(50, 16777215))
        self.Button_Description.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Description.setStyleSheet(
            "QPushButton{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(3, 174, 236);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(255, 255, 255);\n"
            "    border-radius: 10px;\n"
            "}\n"
            "\n"
            "QPushButton:pressed{\n"
            "    border: 1px solid transparent;\n"
            "    border-color: rgb(0, 0, 0);\n"
            "    color: rgb(0,0,0);\n"
            "    background-color: rgb(200, 200, 200);\n"
            "    border-radius: 10px;\n"
            "}"
        )
        self.Button_Description.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Description.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Description.setIcon(icon4)
        self.Button_Description.setIconSize(QtCore.QSize(40, 40))
        self.Button_Description.setObjectName("Button_Description")
        self.gridLayout_2.addWidget(self.Button_Description, 1, 9, 2, 1)
        self.label_Type = QtWidgets.QLabel(parent=self.frame)
        self.label_Type.setMinimumSize(QtCore.QSize(100, 25))
        self.label_Type.setMaximumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Type.setFont(font)
        self.label_Type.setObjectName("label_Type")
        self.gridLayout_2.addWidget(self.label_Type, 2, 0, 1, 1)
        self.Type_IndexDwg = QtWidgets.QLineEdit(parent=self.frame)
        self.Type_IndexDwg.setMinimumSize(QtCore.QSize(200, 25))
        self.Type_IndexDwg.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Type_IndexDwg.setFont(font)
        self.Type_IndexDwg.setEnabled(False)
        self.Type_IndexDwg.setObjectName("Type_IndexDwg")
        self.gridLayout_2.addWidget(self.Type_IndexDwg, 2, 1, 1, 1)
        self.label_DateWorkshop = QtWidgets.QLabel(parent=self.frame)
        self.label_DateWorkshop.setMinimumSize(QtCore.QSize(150, 25))
        self.label_DateWorkshop.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DateWorkshop.setFont(font)
        self.label_DateWorkshop.setObjectName("label_DateWorkshop")
        self.gridLayout_2.addWidget(self.label_DateWorkshop, 2, 2, 1, 1)
        self.DateWorkshop_IndexDwg = QtWidgets.QLineEdit(parent=self.frame)
        self.DateWorkshop_IndexDwg.setMinimumSize(QtCore.QSize(200, 25))
        self.DateWorkshop_IndexDwg.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DateWorkshop_IndexDwg.setFont(font)
        self.DateWorkshop_IndexDwg.setEnabled(False)
        self.DateWorkshop_IndexDwg.setObjectName("DateWorkshop_IndexDwg")
        self.gridLayout_2.addWidget(self.DateWorkshop_IndexDwg, 2, 3, 1, 1)
        self.label_DateAssembly = QtWidgets.QLabel(parent=self.frame)
        self.label_DateAssembly.setMinimumSize(QtCore.QSize(150, 25))
        self.label_DateAssembly.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_DateAssembly.setFont(font)
        self.label_DateAssembly.setObjectName("label_DateAssembly")
        self.gridLayout_2.addWidget(self.label_DateAssembly, 2, 4, 1, 1)
        self.DateAssembly_IndexDwg = QtWidgets.QLineEdit(parent=self.frame)
        self.DateAssembly_IndexDwg.setMinimumSize(QtCore.QSize(200, 25))
        self.DateAssembly_IndexDwg.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DateAssembly_IndexDwg.setFont(font)
        self.DateAssembly_IndexDwg.setEnabled(False)
        self.DateAssembly_IndexDwg.setObjectName("DateAssembly_IndexDwg")
        self.gridLayout_2.addWidget(self.DateAssembly_IndexDwg, 2, 5, 1, 1)
        self.layout_vertical = QtWidgets.QVBoxLayout()
        self.splitter = QtWidgets.QSplitter(QtCore.Qt.Orientation.Vertical)
        self.tableDimDwg = QtWidgets.QTableView(parent=self.frame)
        self.modelDim = EditableTableModelDim(self.username,database=self.db)
        self.tableDimDwg.setObjectName("tableDimDwg")
        self.splitter.addWidget(self.tableDimDwg)
        self.tableOfDwg = QtWidgets.QTableView(parent=self.frame)
        self.modelOf = EditableTableModelOf(self.username,database=self.db)
        self.tableOfDwg.setObjectName("tableOfDwg")
        self.splitter.addWidget(self.tableOfDwg)
        self.tableMDwg = QtWidgets.QTableView(parent=self.frame)
        self.modelM = EditableTableModelM(self.username,database=self.db)
        self.tableMDwg.setObjectName("tableMDwg")
        self.splitter.addWidget(self.tableMDwg)
        self.layout_vertical.addWidget(self.splitter)
        self.gridLayout_2.addLayout(self.layout_vertical, 4, 0, 1, 11)
        self.hLayout3 = QtWidgets.QHBoxLayout()
        self.hLayout3.setObjectName("hLayout3")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout3.addItem(spacerItem2)
        self.label_SumItems = QtWidgets.QLabel(parent=self.frame)
        self.label_SumItems.setMinimumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setMaximumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setText("")
        self.label_SumItems.setObjectName("label_SumItems")
        self.hLayout3.addWidget(self.label_SumItems)
        self.label_SumValue = QtWidgets.QLabel(parent=self.frame)
        self.label_SumValue.setMinimumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setMaximumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setText("")
        self.label_SumValue.setObjectName("label_SumValue")
        self.hLayout3.addWidget(self.label_SumValue)
        self.label_CountItems = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems.setMinimumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setMaximumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setText("")
        self.label_CountItems.setObjectName("label_CountItems")
        self.hLayout3.addWidget(self.label_CountItems)
        self.label_CountValue = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue.setMinimumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setMaximumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setText("")
        self.label_CountValue.setObjectName("label_CountValue")
        self.hLayout3.addWidget(self.label_CountValue)
        self.gridLayout_2.addLayout(self.hLayout3, 8, 0, 1, 8)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        WorkshopDrawingIndex_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=WorkshopDrawingIndex_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 22))
        self.menubar.setObjectName("menubar")
        WorkshopDrawingIndex_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=WorkshopDrawingIndex_Window)
        self.statusbar.setObjectName("statusbar")
        WorkshopDrawingIndex_Window.setStatusBar(self.statusbar)

        self.retranslateUi(WorkshopDrawingIndex_Window)
        QtCore.QMetaObject.connectSlotsByName(WorkshopDrawingIndex_Window)

        if self.num_order is not None:
            self.modelDim.dataChanged.connect(self.saveChanges)
            self.modelOf.dataChanged.connect(self.saveChanges)
            self.modelM.dataChanged.connect(self.saveChanges)
            self.Numorder_IndexDwg.setText(self.num_order)
            self.query_drawings()

        self.Numorder_IndexDwg.returnPressed.connect(self.query_drawings)
        self.modelDim.dataChanged.connect(self.saveChanges)
        self.modelOf.dataChanged.connect(self.saveChanges)
        self.modelM.dataChanged.connect(self.saveChanges)
        # self.createContextMenu()
        self.Button_AddLines.clicked.connect(self.add_lines)
        self.Button_PaletteM.clicked.connect(self.colour_palette_M)
        self.Button_PaletteT.clicked.connect(self.colour_palette_T)
        self.Button_Description.clicked.connect(self.add_description)

        delete_action_dim = QtGui.QAction("Eliminar Fila", self)
        delete_action_dim.triggered.connect(lambda: self.delete_register(self.tableDimDwg, "verification.workshop_dim_drawings"))

        self.context_menu_row = QtWidgets.QMenu(self)
        self.context_menu_row.addAction(delete_action_dim)

        self.tableDimDwg.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)
        self.tableDimDwg.addActions([delete_action_dim])

        delete_action_of = QtGui.QAction("Eliminar Fila", self)
        delete_action_of.triggered.connect(lambda: self.delete_register(self.tableOfDwg, "verification.workshop_of_drawings"))

        self.context_menu_row = QtWidgets.QMenu(self)
        self.context_menu_row.addAction(delete_action_of)

        self.tableOfDwg.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)
        self.tableOfDwg.addActions([delete_action_of])

        delete_action_m = QtGui.QAction("Eliminar Fila", self)
        delete_action_m.triggered.connect(lambda: self.delete_register(self.tableMDwg, "verification.m_drawing_verification"))

        self.context_menu_row = QtWidgets.QMenu(self)
        self.context_menu_row.addAction(delete_action_m)

        self.tableMDwg.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)
        self.tableMDwg.addActions([delete_action_m])


    def retranslateUi(self, WorkshopDrawingIndex_Window):
        _translate = QtCore.QCoreApplication.translate
        WorkshopDrawingIndex_Window.setWindowTitle(_translate("WorkshopDrawingIndex_Window", "Indice Planos"))
        self.tableDimDwg.setSortingEnabled(True)
        self.label_NumOrder.setText(_translate("WorkshopDrawingIndex_Window", "Nº Pedido:"))
        self.label_Responsible.setText(_translate("WorkshopDrawingIndex_Window", "Responsable:"))
        self.label_ExpDate.setText(_translate("WorkshopDrawingIndex_Window", "Fecha Prevista:"))
        self.label_Type.setText(_translate("WorkshopDrawingIndex_Window", "Tipo Equipo:"))
        self.label_DateWorkshop.setText(_translate("WorkshopDrawingIndex_Window", "Fecha Baja Taller:"))
        self.label_DateAssembly.setText(_translate("WorkshopDrawingIndex_Window", "Fecha Baja Montaje:"))


# Function to save changes into database
    def saveChanges(self):
        self.modelDim.submitAll()

        for column in range(self.modelDim.columnCount()):
            list_valuesUnique = []
            for row in range(self.modelDim.rowCount()):
                value = self.modelDim.record(row).value(column)
                if value not in list_valuesUnique:
                    if isinstance(value, QtCore.QDate):
                        value = value.toString("dd/MM/yyyy")
                    list_valuesUnique.append(str(value))
                    if value not in self.checkbox_states[column]:
                        self.checkbox_states[column][value] = True
            self.dict_valuesuniques[column] = list_valuesUnique

        self.modelOf.submitAll()

        for column in range(self.modelOf.columnCount()):
            list_valuesUnique = []
            for row in range(self.modelOf.rowCount()):
                value = self.modelOf.record(row).value(column)
                if value not in list_valuesUnique:
                    if isinstance(value, QtCore.QDate):
                        value = value.toString("dd/MM/yyyy")
                    list_valuesUnique.append(str(value))
                    if value not in self.checkbox_states[column]:
                        self.checkbox_states[column][value] = True
            self.dict_valuesuniques[column] = list_valuesUnique

        self.modelM.submitAll()

        for column in range(self.modelM.columnCount()):
            list_valuesUnique = []
            for row in range(self.modelM.rowCount()):
                value = self.modelM.record(row).value(column)
                if value not in list_valuesUnique:
                    if isinstance(value, QtCore.QDate):
                        value = value.toString("dd/MM/yyyy")
                    list_valuesUnique.append(str(value))
                    if value not in self.checkbox_states[column]:
                        self.checkbox_states[column][value] = True
            self.dict_valuesuniques[column] = list_valuesUnique

# Function to load table and setting in the window
    def query_drawings(self):
        num_order = self.Numorder_IndexDwg.text().upper()

        commands_queryorder = """
                            SELECT orders."num_order", registration."name", registration."surname", TO_CHAR(orders."expected_date",'dd/MM/yyyy'), offers."material", orders."recep_date_workshop", orders."recep_date_assembly"
                            FROM offers
                            INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                            INNER JOIN users_data.registration AS registration ON (offers."responsible"=registration."username")
                            WHERE UPPER(orders."num_order") LIKE UPPER('%%'||%s||'%%')
                            ORDER BY orders."num_order"
                            """
        conn = None
        try:
            # read the connection parameters
            params = config()
            # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
            # execution of commands one by one
            data = (num_order,)
            cur.execute(commands_queryorder, data)
            results_queryorder = cur.fetchall()

            # close communication with the PostgreSQL database server
            cur.close()
            # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n" + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        if len(results_queryorder) > 0:
            self.Responsible_IndexDwg.setText(results_queryorder[0][1] + " " + results_queryorder[0][2])
            self.ExpDate_IndexDwg.setText(results_queryorder[0][3])
            self.Type_IndexDwg.setText(results_queryorder[0][4])
            self.DateWorkshop_IndexDwg.setText(results_queryorder[0][5])
            self.DateAssembly_IndexDwg.setText(results_queryorder[0][6])

            self.checkbox_states = {}
            self.dict_valuesuniques = {}
            self.dict_ordersort = {}
            self.hiddencolumns = []

        # Configuring the Dim Table
            self.modelDim.dataChanged.disconnect(self.saveChanges)

            self.modelDim.setTable("verification.workshop_dim_drawings")

            self.tableDimDwg.setModel(None)
            self.tableDimDwg.setModel(self.proxyDim)
            self.modelDim.setFilter(f"num_order LIKE '{num_order}'")
            self.modelDim.setSort(2, QtCore.Qt.SortOrder.AscendingOrder)
            self.modelDim.select()
            self.proxyDim.setSourceModel(self.modelDim)
            self.tableDimDwg.setModel(self.proxyDim)

            columns_number = self.modelDim.columnCount()
            for column in range(columns_number):
                self.tableDimDwg.setItemDelegateForColumn(column, None)

            self.tableDimDwg.setItemDelegate(AlignDelegate(self.tableDimDwg))
            self.tableDimDwg.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableDimDwg.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeMode.Stretch)
            if self.username == 'm.gil':
                self.tableDimDwg.setStyleSheet("gridline-color: rgb(128, 128, 128);")
                self.tableDimDwg.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid white;}")
                self.tableDimDwg.verticalHeader().setStyleSheet("::section{font: 10pt; background-color: #121212; border: 0.5px solid white;}")
            else:
                self.tableDimDwg.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid black;}")
            self.tableDimDwg.setObjectName("tableDimDwg")
            self.tableDimDwg.setSortingEnabled(False)
            # self.tableDimDwg.horizontalHeader().sectionDoubleClicked.connect(lambda logicalIndex: self.on_view_horizontalHeader_sectionClicked(logicalIndex, self.tableDimDwg, self.modelDim, self.proxyDim))
            # self.tableDimDwg.horizontalHeader().customContextMenuRequested.connect(self.showColumnContextMenu)
            # self.tableDimDwg.horizontalHeader().setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
            self.splitter.addWidget(self.tableDimDwg)
            # self.gridLayout_2.addWidget(self.tableDimDwg, 3, 0, 1, 7)

        # Change all column names
            headers = ["ID", "Nº Pedido", "Nº Plano Dim.", "Observaciones", "Descripción", "Fecha Verif.", "Estado Verif.", "Fecha Almacén", "Estado Almacén", "Obs. Almacén"]
            self.modelDim.setAllColumnHeaders(headers)

            self.tableDimDwg.hideColumn(0)
            self.tableDimDwg.hideColumn(9)

        # Getting the unique values for each column of the model
            for column in range(self.modelDim.columnCount()):
                list_valuesUnique = []
                if column not in self.checkbox_states:
                    self.checkbox_states[column] = {}
                    self.checkbox_states[column]["Seleccionar todo"] = True
                    for row in range(self.modelDim.rowCount()):
                        value = self.modelDim.record(row).value(column)
                        if value not in list_valuesUnique:
                            if isinstance(value, QtCore.QDate):
                                value = value.toString("dd/MM/yyyy")
                            list_valuesUnique.append(str(value))
                            self.checkbox_states[column][value] = True
                    self.dict_valuesuniques[column] = list_valuesUnique

            self.modelDim.dataChanged.connect(self.saveChanges)

        # Configuring the OF Table
            self.modelOf.dataChanged.disconnect(self.saveChanges)

            self.modelOf.setTable("verification.workshop_of_drawings")

            self.tableOfDwg.setModel(None)
            self.tableOfDwg.setModel(self.proxyOf)
            self.modelOf.setFilter(f"num_order LIKE '{num_order}'")
            self.modelOf.setSort(2, QtCore.Qt.SortOrder.AscendingOrder)
            self.modelOf.select()
            self.proxyOf.setSourceModel(self.modelOf)
            self.tableOfDwg.setModel(self.proxyOf)

            columns_number = self.modelOf.columnCount()
            for column in range(columns_number):
                self.tableOfDwg.setItemDelegateForColumn(column, None)

            self.tableOfDwg.setItemDelegate(AlignDelegate(self.tableOfDwg))
            self.tableOfDwg.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableOfDwg.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeMode.Stretch)
            if self.username == 'm.gil':
                self.tableOfDwg.setStyleSheet("gridline-color: rgb(128, 128, 128);")
                self.tableOfDwg.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid white;}")
                self.tableOfDwg.verticalHeader().setStyleSheet("::section{font: 10pt; background-color: #121212; border: 0.5px solid white;}")
            else:
                self.tableOfDwg.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid black;}")
            self.tableOfDwg.setObjectName("tableOfDwg")
            self.tableOfDwg.setSortingEnabled(False)
            # self.tableOfDwg.horizontalHeader().sectionDoubleClicked.connect(lambda logicalIndex: self.on_view_horizontalHeader_sectionClicked(logicalIndex, self.tableOfDwg, self.modelOf, self.proxyOf))
            # self.tableOfDwg.horizontalHeader().customContextMenuRequested.connect(self.showColumnContextMenu)
            # self.tableOfDwg.horizontalHeader().setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
            self.splitter.addWidget(self.tableOfDwg)
            # self.gridLayout_2.addWidget(self.tableOfDwg, 4, 0, 1, 7)

        # Change all column names
            headers = ["ID", "Nº Pedido", "Nº Plano OF", "Observaciones", "Descripción", "Fecha Verif.", "Estado Verif.", "Fecha Almacén", "Estado Almacén", "Obs. Almacén"]
            self.modelOf.setAllColumnHeaders(headers)

            self.tableOfDwg.hideColumn(0)
            self.tableOfDwg.hideColumn(9)

        # Getting the unique values for each column of the model
            for column in range(self.modelOf.columnCount()):
                list_valuesUnique = []
                if column not in self.checkbox_states:
                    self.checkbox_states[column] = {}
                    self.checkbox_states[column]["Seleccionar todo"] = True
                    for row in range(self.modelOf.rowCount()):
                        value = self.modelOf.record(row).value(column)
                        if value not in list_valuesUnique:
                            if isinstance(value, QtCore.QDate):
                                value = value.toString("dd/MM/yyyy")
                            list_valuesUnique.append(str(value))
                            self.checkbox_states[column][value] = True
                    self.dict_valuesuniques[column] = list_valuesUnique

            self.modelOf.dataChanged.connect(self.saveChanges)

        # Configuring the M Table
            self.modelM.dataChanged.disconnect(self.saveChanges)

            self.modelM.setTable("verification.m_drawing_verification")

            self.tableMDwg.setModel(None)
            self.tableMDwg.setModel(self.proxyM)
            self.modelM.setFilter(f"num_order LIKE '{num_order}'")
            self.modelM.setSort(2, QtCore.Qt.SortOrder.AscendingOrder)
            self.modelM.select()
            self.proxyM.setSourceModel(self.modelM)
            self.tableMDwg.setModel(self.proxyM)

            columns_number = self.modelM.columnCount()
            for column in range(columns_number):
                self.tableMDwg.setItemDelegateForColumn(column, None)

            self.tableMDwg.setItemDelegate(AlignDelegate_M(self.tableMDwg))
            self.tableMDwg.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableMDwg.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeMode.Stretch)
            if self.username == 'm.gil':
                self.tableMDwg.setStyleSheet("gridline-color: rgb(128, 128, 128);")
                self.tableMDwg.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid white;}")
                self.tableMDwg.verticalHeader().setStyleSheet("::section{font: 10pt; background-color: #121212; border: 0.5px solid white;}")
            else:
                self.tableMDwg.horizontalHeader().setStyleSheet("::section{font: 800 10pt; background-color: #33bdef; border: 1px solid black;}")
            self.tableMDwg.setObjectName("tableMDwg")
            self.tableMDwg.setSortingEnabled(False)
            # self.tableMDwg.horizontalHeader().sectionDoubleClicked.connect(lambda logicalIndex: self.on_view_horizontalHeader_sectionClicked(logicalIndex, self.tableMDwg, self.modelMDwg, self.proxyM))
            # self.tableMDwg.horizontalHeader().customContextMenuRequested.connect(self.showColumnContextMenu)
            # self.tableMDwg.horizontalHeader().setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
            self.splitter.addWidget(self.tableMDwg)
            # self.gridLayout_2.addWidget(self.tableMDwg, 5, 0, 1, 7)

        # Change all column names
            headers = ["ID", "Nº Pedido", "Nº Plano M", "Observaciones",
                "Descripción", "Fecha Verif.", "Estado Verif.",
                "Obs. Verif.", "Fecha Almacén", "Estado Almacén", "Obs. Almacén"]
            self.modelM.setAllColumnHeaders(headers)

            self.tableMDwg.hideColumn(0)
            self.tableMDwg.hideColumn(7)
            self.tableMDwg.hideColumn(10)

        # Getting the unique values for each column of the model
            for column in range(self.modelM.columnCount()):
                list_valuesUnique = []
                if column not in self.checkbox_states:
                    self.checkbox_states[column] = {}
                    self.checkbox_states[column]["Seleccionar todo"] = True
                    for row in range(self.modelM.rowCount()):
                        value = self.modelM.record(row).value(column)
                        if value not in list_valuesUnique:
                            if isinstance(value, QtCore.QDate):
                                value = value.toString("dd/MM/yyyy")
                            list_valuesUnique.append(str(value))
                            self.checkbox_states[column][value] = True
                    self.dict_valuesuniques[column] = list_valuesUnique

            self.modelM.dataChanged.connect(self.saveChanges)

            # self.selection_model = self.tableDimDwg.selectionModel()
            # self.selection_model.selectionChanged.connect(self.countSelectedCells)

            self.tableDimDwg.keyPressEvent = lambda event: self.custom_keyPressEvent(event, self.tableDimDwg, self.modelDim, self.proxyDim)
            self.tableOfDwg.keyPressEvent = lambda event: self.custom_keyPressEvent(event, self.tableOfDwg, self.modelOf, self.proxyOf)
            self.tableMDwg.keyPressEvent = lambda event: self.custom_keyPressEvent(event, self.tableMDwg, self.modelM, self.proxyM)

# Function when header is clicked
    def on_view_horizontalHeader_sectionClicked(self, logicalIndex, table, model, proxy):
        self.logicalIndex = logicalIndex
        self.menuValues = QtWidgets.QMenu(self)
        self.signalMapper = QtCore.QSignalMapper(table)

        valuesUnique_view = []
        for row in range(table.model().rowCount()):
            index = table.model().index(row, self.logicalIndex)
            value = index.data(Qt.ItemDataRole.DisplayRole)
            if value not in valuesUnique_view:
                if isinstance(value, QtCore.QDate):
                    value = value.toString("dd/MM/yyyy")
                valuesUnique_view.append(value)

        actionSortAscending = QtGui.QAction("Ordenar Ascendente", table)
        actionSortAscending.triggered.connect(lambda: self.on_actionSortAscending_triggered(table))
        self.menuValues.addAction(actionSortAscending)
        actionSortDescending = QtGui.QAction("Ordenar Descendente", table)
        actionSortDescending.triggered.connect(lambda: self.on_actionSortDescending_triggered(table))
        self.menuValues.addAction(actionSortDescending)
        self.menuValues.addSeparator()

        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro", table)
        actionDeleteFilterColumn.triggered.connect(lambda: self.on_actionDeleteFilterColumn_triggered(table, model, proxy))
        self.menuValues.addAction(actionDeleteFilterColumn)
        self.menuValues.addSeparator()

        actionTextFilter = QtGui.QAction("Buscar...", table)
        actionTextFilter.triggered.connect(lambda: self.on_actionTextFilter_triggered(model, proxy))
        self.menuValues.addAction(actionTextFilter)
        self.menuValues.addSeparator()

        scroll_menu = QtWidgets.QScrollArea()
        if self.username == 'm.gil':
            scroll_menu.setStyleSheet("background-color: #121212; color: rgb(255, 255, 255)")
        else:
            scroll_menu.setStyleSheet("background-color: rgb(255, 255, 255)")
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkbox_all_widget = QtWidgets.QCheckBox("Seleccionar todo")

        if not self.checkbox_states[self.logicalIndex]["Seleccionar todo"] == True:
            checkbox_all_widget.setChecked(False)
        else:
            checkbox_all_widget.setChecked(True)

        checkbox_all_widget.toggled.connect(lambda checked, name='Seleccionar todo': self.on_select_all_toggled(checked, name, model))

        scroll_layout.addWidget(checkbox_all_widget)
        self.action_checkbox_map["Seleccionar todo"] = checkbox_all_widget

        if len(self.dict_ordersort) != 0 and self.logicalIndex in self.dict_ordersort:
            list_uniquevalues = sorted(list(set(self.dict_valuesuniques[self.logicalIndex])))
        else:
            list_uniquevalues = sorted(list(set(valuesUnique_view)))

        for actionName in list_uniquevalues:
            checkbox_widget = QtWidgets.QCheckBox(actionName)

            if self.logicalIndex not in self.checkbox_filters:
                checkbox_widget.setChecked(True)
            elif actionName not in self.checkbox_filters[self.logicalIndex]:
                checkbox_widget.setChecked(False)
            else:
                checkbox_widget.setChecked(True)

            checkbox_widget.toggled.connect(lambda checked, name=actionName: self.on_checkbox_toggled(checked, name, model))

            scroll_layout.addWidget(checkbox_widget)
            self.action_checkbox_map[actionName] = checkbox_widget

        action_scroll_menu = QtWidgets.QWidgetAction(self.menuValues)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        self.menuValues.addAction(action_scroll_menu)

        self.menuValues.addSeparator()

        accept_button = QtGui.QAction("ACEPTAR", table)
        accept_button.triggered.connect(lambda: self.menu_acceptbutton_triggered(proxy))

        cancel_button = QtGui.QAction("CANCELAR", table)
        cancel_button.triggered.connect(self.menu_cancelbutton_triggered)

        self.menuValues.addAction(accept_button)
        self.menuValues.addAction(cancel_button)

        if self.username == 'm.gil':
            self.menuValues.setStyleSheet("QMenu { color: white; }"
                                            "QMenu { background-color: #121212; }"
                                            "QMenu::item:selected { background-color: #33bdef; }"
                                            "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")
        else:
            self.menuValues.setStyleSheet("QMenu { color: black; }"
                                            "QMenu { background-color: rgb(255, 255, 255); }"
                                            "QMenu::item:selected { background-color: #33bdef; }"
                                            "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        headerPos = table.mapToGlobal(table.horizontalHeader().pos())

        posY = headerPos.y() + table.horizontalHeader().height()
        scrollX = table.horizontalScrollBar().value()
        xInView = table.horizontalHeader().sectionViewportPosition(logicalIndex)
        posX = headerPos.x() + xInView - scrollX

        self.menuValues.exec(QtCore.QPoint(posX, posY))

# Function when cancel button of menu is clicked
    def menu_cancelbutton_triggered(self):
        self.menuValues.hide()

# Function when accept button of menu is clicked
    def menu_acceptbutton_triggered(self, proxy):
        for column, filters in self.checkbox_filters.items():
            if filters:
                proxy.setFilter(filters, column)
            else:
                proxy.setFilter(None, column)

        self.tableDimDwg.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

# Function when select all checkbox is clicked
    def on_select_all_toggled(self, checked, action_name, model):
        filterColumn = self.logicalIndex
        imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
        icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))

        if checked:
            for checkbox_name, checkbox_widget in self.action_checkbox_map.items():
                checkbox_widget.setChecked(checked)
                self.checkbox_states[self.logicalIndex][checkbox_name] = checked

            if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map.values()):
                model.setIconColumnHeader(filterColumn, icono)
            else:
                model.setIconColumnHeader(filterColumn, "")

        else:
            for checkbox_name, checkbox_widget in self.action_checkbox_map.items():
                checkbox_widget.setChecked(checked)
                self.checkbox_states[self.logicalIndex][checkbox_widget.text()] = checked

# Function when checkbox of header menu is clicked
    def on_checkbox_toggled(self, checked, action_name, model):
        filterColumn = self.logicalIndex
        imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
        icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))

        if checked:
            if filterColumn not in self.checkbox_filters:
                self.checkbox_filters[filterColumn] = [action_name]
            else:
                if action_name not in self.checkbox_filters[filterColumn]:
                    self.checkbox_filters[filterColumn].append(action_name)
        else:
            if filterColumn in self.checkbox_filters and action_name in self.checkbox_filters[filterColumn]:
                self.checkbox_filters[filterColumn].remove(action_name)

        if all(checkbox_widget.isChecked() for checkbox_widget in self.action_checkbox_map.values()):
            model.setIconColumnHeader(filterColumn, '')
        else:
            model.setIconColumnHeader(filterColumn, icono)

# Function to delete individual column filter
    def on_actionDeleteFilterColumn_triggered(self, table, model, proxy):
        filterColumn = self.logicalIndex
        if filterColumn in proxy.filters:
            del proxy.filters[filterColumn]
        model.setIconColumnHeader(filterColumn, "")
        proxy.invalidateFilter()

        table.setModel(None)
        table.setModel(proxy)

        if filterColumn in self.checkbox_filters:
            del self.checkbox_filters[filterColumn]

        self.checkbox_states[self.logicalIndex].clear()
        self.checkbox_states[self.logicalIndex]["Seleccionar todo"] = True
        for row in range(table.model().rowCount()):
            value = model.record(row).value(filterColumn)
            if isinstance(value, QtCore.QDate):
                value = value.toString("dd/MM/yyyy")
            self.checkbox_states[self.logicalIndex][str(value)] = True

        table.horizontalHeader().setSectionResizeMode(8,QtWidgets.QHeaderView.ResizeMode.Stretch)

# Function to order column ascending
    def on_actionSortAscending_triggered(self, table):
        sortColumn = self.logicalIndex
        sortOrder = Qt.SortOrder.AscendingOrder
        table.sortByColumn(sortColumn, sortOrder)

# Function to order column descending
    def on_actionSortDescending_triggered(self, table):
        sortColumn = self.logicalIndex
        sortOrder = Qt.SortOrder.DescendingOrder
        table.sortByColumn(sortColumn, sortOrder)

# Function when text is searched
    def on_actionTextFilter_triggered(self, model, proxy):
        filterColumn = self.logicalIndex
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle("Buscar")
        clickedButton = dlg.exec()

        if clickedButton == 1:
            stringAction = dlg.textValue()
            if re.fullmatch(r'^(?:3[01]|[12][0-9]|0?[1-9])([\-/.])(0?[1-9]|1[1-2])\1\d{4}$', stringAction):
                stringAction=QtCore.QDate.fromString(stringAction,"dd/MM/yyyy")
                stringAction=stringAction.toString("yyyy-MM-dd")

            filterString = QtCore.QRegularExpression(stringAction, QtCore.QRegularExpression.PatternOption(0))
            # del self.proxy.filters[filterColumn]
            proxy.setFilter([stringAction], filterColumn)

            imagen_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))
            icono = QtGui.QIcon(QtGui.QPixmap.fromImage(QtGui.QImage(imagen_path)))
            model.setIconColumnHeader(filterColumn, icono)

# Function to hide column when action clicked
    def hide_column(self):
        filterColumn = self.logicalIndex
        self.tableDimDwg.setColumnHidden(filterColumn, True)
        self.hiddencolumns.append(filterColumn)

# Function to show all hidden columns
    def show_columns(self):
        for column in self.hiddencolumns:
            self.tableDimDwg.setColumnHidden(column, False)
        self.hiddencolumns.clear()

# Function to export data to excel
    def exporttoexcel(self):
        if self.proxy.rowCount() == 0:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Exportar")
            dlg.setText("No hay datos cargados")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon
        else:
            final_data = []

            visible_columns = [col for col in range(self.model.columnCount()) if not self.tableDimDwg.isColumnHidden(col)]
            visible_headers = self.model.getColumnHeaders(visible_columns)
            for row in range(self.proxy.rowCount()):
                tag_data = []
                for column in visible_columns:
                    value = self.proxy.data(self.proxy.index(row, column))
                    if isinstance(value, QDate):
                        value = value.toString("dd/MM/yyyy")
                    tag_data.append(value)
                final_data.append(tag_data)

            final_data.insert(0, visible_headers)
            df = pd.DataFrame(final_data)
            df.columns = df.iloc[0]
            df = df[1:]

            output_path = asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Archivos de Excel", "*.xlsx")],
                title="Guardar archivo de Excel",
            )
            if output_path:
                df.to_excel(output_path, index=False, header=True)

# Function to enable copy and paste cells
    def custom_keyPressEvent(self, event, table, model, proxy):
        if event.key() == QtCore.Qt.Key.Key_Delete:
            selected_indexes = table.selectionModel().selectedIndexes()
            if not selected_indexes:
                return
            
            model = table.model()
            model_indexes = [model.mapToSource(index) for index in selected_indexes]

            if isinstance(model, QtCore.QSortFilterProxyModel):
                model_indexes = [model.mapToSource(index) for index in selected_indexes]
                for index in model_indexes:
                    model.sourceModel().setData(index, None)
            else:
                model_indexes = selected_indexes
                for index in model_indexes:
                    model.setData(index, None)

        elif event.matches(QKeySequence.StandardKey.Copy):
            selected_indexes = table.selectionModel().selectedIndexes()
            if not selected_indexes:
                return

            mime_data = QMimeData()
            data = bytearray()

            if isinstance(model, QtCore.QSortFilterProxyModel):
                for index in selected_indexes:
                    source_index = proxy.mapToSource(index)
                    data += str(model.sourceModel().data(source_index)).encode('utf-8') + b'\t'
            else:
                for index in selected_indexes:
                    data += str(model.data(index)).encode('utf-8') + b'\t'

            mime_data.setData("text/plain", data)

            clipboard = QApplication.clipboard()
            clipboard.setMimeData(mime_data)

        elif event.matches(QKeySequence.StandardKey.Paste):
            if table.selectionModel() != None:

                clipboard = QApplication.clipboard()
                mime_data = clipboard.mimeData()

                if not mime_data.hasFormat("text/plain"):
                    return

                data = mime_data.data("text/plain").data()
                values = data.split(b'\t')

                selected_indexes = table.selectionModel().selectedIndexes()
                if not selected_indexes:
                    return

                if isinstance(model, QtCore.QSortFilterProxyModel):
                    model_indexes = [proxy.mapToSource(index) for index in selected_indexes]
                    if len(values) == 2:
                        for index in model_indexes:
                            model.sourceModel().setData(index, values[0].decode('utf-8'))
                    else:
                        for index, value in zip(model_indexes, values):
                            model.sourceModel().setData(index, value.decode('utf-8'))
                else:
                    model_indexes = selected_indexes
                    if len(values) == 2:
                        for index in model_indexes:
                            model.setData(index, values[0].decode('utf-8'))
                    else:
                        for index, value in zip(model_indexes, values):
                            model.setData(index, value.decode('utf-8'))

        elif event.modifiers() and QtCore.Qt.KeyboardModifier.ControlModifier:
            if event.key() == QtCore.Qt.Key.Key_Comma:
                selected_indexes = table.selectionModel().selectedIndexes()
                if not selected_indexes:
                    return

                model = table.model()

                if isinstance(model, QtCore.QSortFilterProxyModel):
                    model_indexes = [model.mapToSource(index) for index in selected_indexes]
                    for index in model_indexes:
                        model.sourceModel().setData(index, date.today().strftime("%d/%m/%Y"))
                else:
                    model_indexes = selected_indexes
                    for index in model_indexes:
                        model.setData(index, date.today().strftime("%d/%m/%Y"))

            elif event.key() == QtCore.Qt.Key.Key_J:
                if isinstance(model, EditableTableModelM) or isinstance(model, EditableTableModelOf) or isinstance(model, EditableTableModelDim):
                    selected_indexes = table.selectionModel().selectedIndexes()
                    if not selected_indexes:
                        return

                    if isinstance(model, QtCore.QSortFilterProxyModel):
                        source_index = proxy.mapToSource(selected_indexes[0])
                        first_value = str(model.sourceModel().data(source_index))
                    else:
                        first_value = str(model.data(selected_indexes[0]))

                    del selected_indexes[0]
                    if first_value[:2] == 'OF':
                        number = int(first_value[3:5])
                    elif first_value[0] == 'M':
                        number = int(first_value[2:4])
                    else:
                        number = int(first_value[-5:][:2])

                    if isinstance(model, QtCore.QSortFilterProxyModel):
                        model_indexes = [model.mapToSource(index) for index in selected_indexes]
                        for index in model_indexes:
                            number +=1
                            if first_value[:2] == 'OF':
                                dwg_number = first_value[:3]+str("{:02}".format(number))+first_value[-3:]
                            elif first_value[0] == 'M':
                                dwg_number = first_value[:2]+str("{:02}".format(number))+first_value[-3:]
                            else:
                                dwg_number = first_value[:-5]+str("{:02}".format(number))+first_value[-3:]

                            model.sourceModel().setData(index, dwg_number)
                    else:
                        model_indexes = selected_indexes
                        for index in model_indexes:
                            number +=1
                            if first_value[:2] == 'OF':
                                dwg_number = first_value[:3]+str("{:02}".format(number))+first_value[-3:]
                            elif first_value[0] == 'M':
                                dwg_number = first_value[:2]+str("{:02}".format(number))+first_value[-3:]
                            else:
                                dwg_number = first_value[:-5]+str("{:02}".format(number))+first_value[-3:]

                            model.setData(index, dwg_number)

        elif event.matches(QKeySequence.StandardKey.MoveToNextLine):
            if table.selectionModel() != None:
                selected_indexes = table.selectionModel().selectedIndexes()
                if len(selected_indexes) == 1:
                    for index in selected_indexes:
                        current_row = index.row()
                        current_column = index.column()

                    new_row = current_row + 1 if current_row < model.rowCount() - 1 else current_row

                    table.selectionModel().clearSelection()
                    new_selection = QtCore.QItemSelection(QtCore.QModelIndex(model.index(new_row, current_column)), QtCore.QModelIndex(model.index(new_row, current_column)))
                    table.selectionModel().select(new_selection, QtCore.QItemSelectionModel.SelectionFlag.Select)

        elif event.matches(QKeySequence.StandardKey.MoveToPreviousLine):
            if table.selectionModel() != None:
                selected_indexes = table.selectionModel().selectedIndexes()
                if len(selected_indexes) == 1:
                    for index in selected_indexes:
                        current_row = index.row()
                        current_column = index.column()

                    new_row = current_row - 1 if current_row > 0 else 0

                    table.selectionModel().clearSelection()
                    new_selection = QtCore.QItemSelection(QtCore.QModelIndex(model.index(new_row, current_column)), QtCore.QModelIndex(model.index(new_row, current_column)))
                    table.selectionModel().select(new_selection, QtCore.QItemSelectionModel.SelectionFlag.Select)

        elif event.matches(QKeySequence.StandardKey.MoveToNextChar):
            if table.selectionModel() != None:
                selected_indexes = table.selectionModel().selectedIndexes()
                if len(selected_indexes) == 1:
                    for index in selected_indexes:
                        current_row = index.row()
                        current_column = index.column()

                    new_column = current_column + 1 if current_column < model.columnCount() - 1 else current_column

                    table.selectionModel().clearSelection()
                    new_selection = QtCore.QItemSelection(QtCore.QModelIndex(model.index(current_row, new_column)), QtCore.QModelIndex(model.index(current_row, new_column)))
                    table.selectionModel().select(new_selection, QtCore.QItemSelectionModel.SelectionFlag.Select)

        elif event.matches(QKeySequence.StandardKey.MoveToPreviousChar):
            if table.selectionModel() != None:
                selected_indexes = table.selectionModel().selectedIndexes()
                if len(selected_indexes) == 1:
                    for index in selected_indexes:
                        current_row = index.row()
                        current_column = index.column()

                    new_column = current_column - 1 if current_column > 1 else 1

                    table.selectionModel().clearSelection()
                    new_selection = QtCore.QItemSelection(QtCore.QModelIndex(model.index(current_row, new_column)), QtCore.QModelIndex(model.index(current_row, new_column)))
                    table.selectionModel().select(new_selection, QtCore.QItemSelectionModel.SelectionFlag.Select)

        elif event.matches(QKeySequence.StandardKey.InsertParagraphSeparator):
            current_index = table.currentIndex()
            if current_index.isValid() and not table.indexWidget(current_index):
                table.edit(current_index)

        super().keyPressEvent(event)

# Function to get the text of the selected cells
    def get_selected_text(self, indexes, model):
        if len(indexes) == 1:  # For only one cell selected
            index = indexes[0]
            cell_data = index.data(Qt.ItemDataRole.DisplayRole)
            return cell_data
        else:
            rows = set()
            cols = set()
            for index in indexes:
                rows.add(index.row())
                cols.add(index.column())

            text_doc = QTextDocument()
            cursor = QTextCursor(text_doc)

            for row in sorted(rows):
                for col in sorted(cols):
                    index = model.index(row, col)
                    cell_data = index.data(Qt.ItemDataRole.DisplayRole)
                    cursor.insertText(str(cell_data))
                    cursor.insertText("\t")
                cursor.insertText("\n")

            return text_doc.toPlainText()

# Function to count selected cells and sum its values
    def countSelectedCells(self):
        if len(self.tableDimDwg.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, "es_ES.UTF-8")
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

            sum_value = sum([self.euro_string_to_float(str(ix.data())) if re.match(r'^[\d.,]+\sÇ$', str(ix.data())) else float(str(ix.data()).replace(',', '.')) if str(ix.data()).replace(',', '.').replace('.', '', 1).isdigit() else 0 for ix in self.tableDimDwg.selectedIndexes()])
            count_value = len([ix for ix in self.tableDimDwg.selectedIndexes() if ix.data() != ""])
            if sum_value > 0:
                self.label_SumItems.setText("Suma:")
                self.label_SumValue.setText(locale.format_string("%.2f", sum_value, grouping=True))
            if count_value > 0:
                self.label_CountItems.setText("Recuento:")
                self.label_CountValue.setText(str(count_value))
        else:
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

# Function to format money string values
    def euro_string_to_float(self, euro_str):
        match = re.match(r"^([\d.,]+)\s€$", euro_str)
        if match:
            number_str = match.group(1)
            number_str = number_str.replace(".", "").replace(",", ".")
            return float(number_str)
        else:
            return 0.0

# Function for creating context menu
    def createContextMenu(self):
        self.context_menu = QtWidgets.QMenu(self)
        hide_columns_action = self.context_menu.addAction("Ocultar Columnas")
        hide_columns_action.triggered.connect(self.hideSelectedColumns)

# Function to show context menu when right-click
    def showColumnContextMenu(self, pos):
        header = self.tableDimDwg.horizontalHeader()
        column = header.logicalIndexAt(pos)
        self.context_menu.exec(self.tableDimDwg.mapToGlobal(pos))

# Function to hide selected columns
    def hideSelectedColumns(self):
        selected_columns = set()
        header = self.tableDimDwg.horizontalHeader()
        for index in header.selectionModel().selectedColumns():
            selected_columns.add(index.column())

        for column in selected_columns:
            self.tableDimDwg.setColumnHidden(column, True)
            self.hiddencolumns.append(column)

        self.context_menu.close()

# Function to add lines on tables
    def add_lines(self):
        if self.username == 'm.gil':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Indice Planos")
            dlg.setText("Este módulo no esta disponible para tí corazón ❤️")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            num_order = self.Numorder_IndexDwg.text().upper()
            if num_order == '':
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Indice Planos")
                dlg.setText("Introduce un número de pedido")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            elif not re.match(r'^(P-\d{2}/\d{3}-S\d{2}|PA-\d{2}/\d{3})$', num_order):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Indice Planos")
                dlg.setText("El número de pedido debe tener el siguiente formato\n" +
                            "- P-XX/YYY-SZZ\n" + 
                            "- PA-XX/YYY")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            else:
                commands_checkorder = ("""
                                SELECT *
                                FROM orders
                                WHERE "num_order" = %s
                                """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands one by one
                    cur.execute(commands_checkorder,(num_order,))
                    results=cur.fetchall()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()

                if len(results) == 0:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos")
                        dlg.setText("El número de pedido introducido no existe. Introduce un pedido válido o pon 'ALMACÉN'")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                else:
                    dlg3 = QtWidgets.QInputDialog()
                    new_icon3 = QtGui.QIcon()
                    new_icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg3.setWindowIcon(new_icon3)
                    dlg3.setWindowTitle('Indice de planos')
                    dlg3.setLabelText('Introduce cuantos planos quieres introducir:')

                    while True:
                        item, ok = QtWidgets.QInputDialog.getItem(self, "Indice Planos", "Seleccióna un tipo de plano:", ['Dimensional', 'OF', 'M'], 0, False)
                        if ok and item:
                            item_type = item
                            if item_type != '':
                                year = (int(num_order[3:5]) if num_order[:2] == 'PA' else int(num_order[2:4]))
                                if year >= 24:
                                    if item_type == 'M':
                                        table_name = 'verification."m_drawing_verification"'
                                        while True:
                                            clickedButton3 = dlg3.exec()
                                            if clickedButton3 == 1:
                                                qty = dlg3.textValue()
                                                if qty != '' and (qty.isdigit() and int(qty) > 0):
                                                    conn = None
                                                    try:
                                                    # read the connection parameters
                                                        params = config()
                                                    # connect to the PostgreSQL server
                                                        conn = psycopg2.connect(**params)
                                                        cur = conn.cursor()

                                                    # execution of commands
                                                        for i in range(int(qty)):
                                                            commands_insert_drawing = f"""INSERT INTO {table_name} ("num_order") VALUES ('{num_order}')"""
                                                            cur.execute(commands_insert_drawing)

                                                    # close communication with the PostgreSQL database server
                                                        cur.close()
                                                    # commit the changes
                                                        conn.commit()

                                                        dlg = QtWidgets.QMessageBox()
                                                        new_icon = QtGui.QIcon()
                                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                        dlg.setWindowIcon(new_icon)
                                                        dlg.setWindowTitle("Indice Planos")
                                                        dlg.setText("Datos insertados con éxito")
                                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                                        dlg.exec()
                                                        del dlg,new_icon

                                                    except (Exception, psycopg2.DatabaseError) as error:
                                                        dlg = QtWidgets.QMessageBox()
                                                        new_icon = QtGui.QIcon()
                                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                        dlg.setWindowIcon(new_icon)
                                                        dlg.setWindowTitle("ERP EIPSA")
                                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                                    + str(error))
                                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                                        dlg.exec()
                                                        del dlg, new_icon
                                                    finally:
                                                        if conn is not None:
                                                            conn.close()
                                                    break
                                                dlg_error = QtWidgets.QMessageBox()
                                                new_icon = QtGui.QIcon()
                                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                dlg_error.setWindowIcon(new_icon)
                                                dlg_error.setWindowTitle("Indice Planos")
                                                dlg_error.setText("La cantidad no puede estar vacía o no es un valor válido")
                                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                                dlg_error.exec()
                                                del dlg_error,new_icon
                                            else:
                                                break
                                        break
                                    else:
                                        from TAGEdit_WorkshopDrawings_Window import Ui_EditTags_WorkshopDrawings_Window
                                        config_obj = configparser.ConfigParser()
                                        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
                                        dbparam = config_obj["postgresql"]
                                        # set your parameters for the database connection URI using the keys from the configfile.ini
                                        user_database = dbparam["user"]
                                        password_database = dbparam["password"]

                                        db_tags_tech = createConnection(user_database, password_database)
                                        if not db_tags_tech:
                                            sys.exit()

                                        self.edit_tags_app = Ui_EditTags_WorkshopDrawings_Window(self.username, db_tags_tech, num_order)
                                        self.edit_tags_app.show()

                                        self.edit_tags_app.closeEvent = self.on_close_event

                                        break
                                else:
                                    if item_type == 'M':
                                        table_name = 'verification."m_drawing_verification"'
                                    elif item_type == 'OF':
                                        table_name = 'verification."workshop_of_drawings"'
                                    elif item_type == 'Dimensional':
                                        table_name = 'verification."workshop_dim_drawings"'
                                    while True:
                                        clickedButton3 = dlg3.exec()
                                        if clickedButton3 == 1:
                                            qty = dlg3.textValue()
                                            if qty != '' and (qty.isdigit() and int(qty) > 0):
                                                conn = None
                                                try:
                                                # read the connection parameters
                                                    params = config()
                                                # connect to the PostgreSQL server
                                                    conn = psycopg2.connect(**params)
                                                    cur = conn.cursor()

                                                # execution of commands
                                                    for i in range(int(qty)):
                                                        commands_insert_drawing = f"""INSERT INTO {table_name} ("num_order") VALUES ('{num_order}')"""
                                                        cur.execute(commands_insert_drawing)

                                                # close communication with the PostgreSQL database server
                                                    cur.close()
                                                # commit the changes
                                                    conn.commit()

                                                    dlg = QtWidgets.QMessageBox()
                                                    new_icon = QtGui.QIcon()
                                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                    dlg.setWindowIcon(new_icon)
                                                    dlg.setWindowTitle("Indice Planos")
                                                    dlg.setText("Datos insertados con éxito")
                                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                                    dlg.exec()
                                                    del dlg,new_icon

                                                except (Exception, psycopg2.DatabaseError) as error:
                                                    dlg = QtWidgets.QMessageBox()
                                                    new_icon = QtGui.QIcon()
                                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                    dlg.setWindowIcon(new_icon)
                                                    dlg.setWindowTitle("ERP EIPSA")
                                                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                                                + str(error))
                                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                                    dlg.exec()
                                                    del dlg, new_icon
                                                finally:
                                                    if conn is not None:
                                                        conn.close()
                                                break
                                            dlg_error = QtWidgets.QMessageBox()
                                            new_icon = QtGui.QIcon()
                                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                            dlg_error.setWindowIcon(new_icon)
                                            dlg_error.setWindowTitle("Indice Planos")
                                            dlg_error.setText("La cantidad no puede estar vacía o no es un valor válido")
                                            dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                            dlg_error.exec()
                                            del dlg_error,new_icon
                                        else:
                                            break
                                    break
                        else:
                            break

                    self.query_drawings()

# Function to open material colour palette table
    def colour_palette_M(self):
        from ColourPaletteM_Window import Ui_PaletteColourM_Window

        self.palettecolourm_window = QtWidgets.QMainWindow()
        self.ui = Ui_PaletteColourM_Window()
        self.ui.setupUi(self.palettecolourm_window)
        self.palettecolourm_window.show()

# Function to open bolts colour palette table
    def colour_palette_T(self):
        from ColourPaletteT_Window import Ui_PaletteColourT_Window

        self.palettecolourt_window = QtWidgets.QMainWindow()
        self.ui = Ui_PaletteColourT_Window()
        self.ui.setupUi(self.palettecolourt_window)
        self.palettecolourt_window.show()

# Function to delete register of database
    def delete_register(self, table, name):
        selection_model = table.selectionModel()

        if not selection_model.hasSelection():
            return

        model = table.model()

        id_values = []
        selected_indexes = selection_model.selectedRows()
        for index in selected_indexes:
            # Obtaining first columns values
            item_index = model.index(index.row(), 0)
            if item_index.isValid():
                value = model.data(item_index)
                id_values.append(value)


        if len(id_values) != 0:
            dlg_yes_no = QtWidgets.QMessageBox()
            new_icon_yes_no = QtGui.QIcon()
            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg_yes_no.setWindowIcon(new_icon_yes_no)
            dlg_yes_no.setWindowTitle("ERP EIPSA")
            dlg_yes_no.setText("¿Estás seguro de que deseas eliminar los registros?\n")
            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
            result = dlg_yes_no.exec()
            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    for id_value in id_values:
                        commands_delete = f"""DELETE FROM {name} WHERE id = '{id_value}'"""
                        cur.execute(commands_delete)

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Indice Planos")
                    dlg.setText("Registros eliminados con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                    self.query_drawings()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

            del dlg_yes_no, new_icon_yes_no

# Function to add descriptions to drawings
    def add_description(self):
        self.numorder = self.Numorder_IndexDwg.text()

        if self.numorder=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Introduce un pedido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            if not re.match(r'^(P|PA)-\d{2}/\d{3}.*$', self.numorder):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("El número de pedido debe tener formato P-XX/YYY o PA-XX/YYY")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon

            else:
                query = ('''
                        SELECT num_order, product_type."variable"
                        FROM orders
                        INNER JOIN offers ON (offers."num_offer" = orders."num_offer")
                        INNER JOIN product_type ON (product_type."material" = offers."material")
                        WHERE
                        UPPER (orders."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query,(self.numorder,))
                    results_variable=cur.fetchone()
                    self.variable = results_variable[1] if results_variable != None else ''
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()
                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                if results_variable == None:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("EL número de pedido no existe")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon

                else:
                    query_flow = ('''
                        SELECT tags_data.tags_flow."num_order"
                        FROM tags_data.tags_flow
                        WHERE UPPER (tags_data.tags_flow."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                    query_temp = ('''
                        SELECT tags_data.tags_temp."num_order"
                        FROM tags_data.tags_temp
                        WHERE UPPER (tags_data.tags_temp."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                    query_level = ('''
                        SELECT tags_data.tags_level."num_order"
                        FROM tags_data.tags_level
                        WHERE UPPER (tags_data.tags_level."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                    query_others = ('''
                        SELECT tags_data.tags_others."num_order"
                        FROM tags_data.tags_others
                        WHERE UPPER (tags_data.tags_others."num_order") LIKE UPPER('%%'||%s||'%%')
                        ''')
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_flow,(self.numorder,))
                        results_flow=cur.fetchall()
                        cur.execute(query_temp,(self.numorder,))
                        results_temp=cur.fetchall()
                        cur.execute(query_level,(self.numorder,))
                        results_level=cur.fetchall()
                        cur.execute(query_others,(self.numorder,))
                        results_others=cur.fetchall()

                        if len(results_flow) != 0:
                            self.variable = 'Caudal'
                        elif len(results_temp) != 0:
                            self.variable = 'Temperatura'
                        elif len(results_level) != 0:
                            self.variable = 'Nivel'
                        elif len(results_others) != 0:
                            self.variable = 'Otros'
                        else:
                            self.variable = ''

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()
                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

                    if self.variable == 'Caudal':
                        self.table_toquery = "tags_data.tags_flow"
                    elif self.variable == 'Temperatura':
                        self.table_toquery = "tags_data.tags_temp"
                    elif self.variable == 'Nivel':
                        self.table_toquery = "tags_data.tags_level"
                    elif self.variable == 'Otros':
                        self.table_toquery ="tags_data.tags_others"
                    else:
                        self.table_toquery =""

                    if self.table_toquery == "tags_data.tags_flow":
                        if self.proxyDim.rowCount() != 0:
                            for row in range(self.proxyDim.rowCount()):
                                num_dim_drawing = self.proxyDim.data(self.proxyDim.index(row, 2))

                                query_data_flow = ('''
                                    SELECT tags_data.tags_flow."item_type"
                                    FROM tags_data.tags_flow
                                    WHERE UPPER (tags_data.tags_flow."num_order") LIKE UPPER('%%'||%s||'%%') and (tags_data.tags_flow."dim_drawing") = %s
                                    ''')
                                conn = None
                                try:
                                # read the connection parameters
                                    params = config()
                                # connect to the PostgreSQL server
                                    conn = psycopg2.connect(**params)
                                    cur = conn.cursor()
                                # execution of commands
                                    cur.execute(query_data_flow,(self.numorder, num_dim_drawing,))
                                    results_flow=cur.fetchall()

                                    item_type = results_flow[0][0]

                                    if item_type == 'RO':
                                        query_description = ('''
                                        SELECT item_type, line_size, rating, facing, schedule, element_material, plate_type, plate_thk
                                        FROM tags_data.tags_flow
                                        WHERE UPPER (num_order) LIKE UPPER('%%'||%s||'%%') and (dim_drawing) = %s
                                        ''')
                                        cur.execute(query_description,(self.numorder, num_dim_drawing,))
                                        results_description=cur.fetchall()

                                        description = (str(len(results_flow)) + "-" + results_description[0][0] + " " + results_description[0][1] + results_description[0][2] + 
                                                        " " + results_description[0][3] + " SCH " + results_description[0][4] + " " + results_description[0][5] + " " +
                                                        results_description[0][6] + " " + "ESPESOR " + results_description[0][7])

                                        commands_insert_drawing = f"""INSERT INTO verification."workshop_dim_drawings" ("description") VALUES ('{description}')"""
                                        cur.execute(commands_insert_drawing)

                                # close communication with the PostgreSQL database server
                                    cur.close()
                                # commit the changes
                                    conn.commit()
                                except (Exception, psycopg2.DatabaseError) as error:
                                    dlg = QtWidgets.QMessageBox()
                                    new_icon = QtGui.QIcon()
                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg.setWindowIcon(new_icon)
                                    dlg.setWindowTitle("ERP EIPSA")
                                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                                + str(error))
                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                    dlg.exec()
                                    del dlg, new_icon
                                finally:
                                    if conn is not None:
                                        conn.close()

# Function to execute query function when tags window is closed
    def on_close_event(self, event):
        self.query_drawings()
        event.accept()





if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    config_obj = configparser.ConfigParser()
    config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
    dbparam = config_obj["postgresql"]
    # set your parameters for the database connection URI using the keys from the configfile.ini
    user_database = dbparam["user"]
    password_database = dbparam["password"]

    db = createConnection_name(user_database, password_database, 'drawing_index')
    if not db:
        sys.exit()

    WorkshopDrawingIndex_Window = Ui_WorkshopDrawingIndex_Window(db, 'j.sanz')
    WorkshopDrawingIndex_Window.show()
    sys.exit(app.exec())
