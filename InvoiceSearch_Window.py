# Form implementation generated from reading ui file 'InvoiceSearch_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import configparser
from utils.Database_Manager import Create_DBconnection
import os
import sys

basedir = r"\\ERP-EIPSA-DATOS\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_InvoiceSearch_Window(object):
    """
    UI class for the Invoice Search window.
    """
    def __init__(self, username):
        self.username = username

    def setupUi(self, InvoiceSearch_Window):
        """
        Sets up the user interface for the InvoiceSearch_Window.

        Args:
            InvoiceSearch_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        InvoiceSearch_Window.setObjectName("InvoiceSearch_Window")
        InvoiceSearch_Window.resize(790, 595)
        InvoiceSearch_Window.setMinimumSize(QtCore.QSize(790, 595))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        InvoiceSearch_Window.setWindowIcon(icon)
        InvoiceSearch_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255)\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=InvoiceSearch_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setVerticalSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.hLayout2 = QtWidgets.QHBoxLayout()
        self.hLayout2.setObjectName("hLayout2")
        self.label_Filter = QtWidgets.QLabel(parent=self.frame)
        self.label_Filter.setMinimumSize(QtCore.QSize(80, 25))
        self.label_Filter.setMaximumSize(QtCore.QSize(80, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Filter.setFont(font)
        self.label_Filter.setObjectName("label_Filter")
        self.hLayout2.addWidget(self.label_Filter)
        self.Filter = QtWidgets.QLineEdit(parent=self.frame)
        self.Filter.setMinimumSize(QtCore.QSize(250, 25))
        self.Filter.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Filter.setFont(font)
        self.Filter.setObjectName("Filter")
        self.hLayout2.addWidget(self.Filter)
        self.Button_Query = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Query.setMinimumSize(QtCore.QSize(150, 35))
        self.Button_Query.setMaximumSize(QtCore.QSize(150, 35))
        self.Button_Query.setObjectName("Button_Query")
        self.Button_Query.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.hLayout2.addWidget(self.Button_Query)
        self.gridLayout_2.addLayout(self.hLayout2, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 2, 0, 1, 1)
        self.tableInvoices = QtWidgets.QTableWidget(parent=self.frame)
        self.tableInvoices.setAlternatingRowColors(False)
        self.tableInvoices.setObjectName("tableInvoices")
        self.tableInvoices.setColumnCount(5)
        for i in range(5):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableInvoices.setHorizontalHeaderItem(i, item)
        self.tableInvoices.setRowCount(0)
        self.tableInvoices.setSortingEnabled(False)
        self.tableInvoices.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableInvoices.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.gridLayout_2.addWidget(self.tableInvoices, 3, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        InvoiceSearch_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=InvoiceSearch_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 22))
        self.menubar.setObjectName("menubar")
        InvoiceSearch_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=InvoiceSearch_Window)
        self.statusbar.setObjectName("statusbar")
        InvoiceSearch_Window.setStatusBar(self.statusbar)

        self.retranslateUi(InvoiceSearch_Window)
        QtCore.QMetaObject.connectSlotsByName(InvoiceSearch_Window)
        self.Button_Query.clicked.connect(self.search_invoice) # type: ignore
        self.Filter.returnPressed.connect(self.search_invoice)
        self.tableInvoices.doubleClicked.connect(lambda item=item: self.edit_invoice(item, InvoiceSearch_Window))

        self.load_invoices()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, InvoiceSearch_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        InvoiceSearch_Window.setWindowTitle(_translate("InvoiceSearch_Window", "Buscar Factura"))
        self.tableInvoices.setSortingEnabled(True)
        self.label_Filter.setText(_translate("InvoiceSearch_Window", "Filtro:"))
        self.Button_Query.setText(_translate("InvoiceSearch_Window", "Buscar"))
        item = self.tableInvoices.horizontalHeaderItem(0)
        item.setText(_translate("InvoiceSearch_Window", "Nº Factura"))
        item = self.tableInvoices.horizontalHeaderItem(1)
        item.setText(_translate("InvoiceSearch_Window", "Nº Pedido"))
        item = self.tableInvoices.horizontalHeaderItem(2)
        item.setText(_translate("InvoiceSearch_Window", "Descripción"))
        item = self.tableInvoices.horizontalHeaderItem(3)
        item.setText(_translate("InvoiceSearch_Window", "Valor Unit. €"))
        item = self.tableInvoices.horizontalHeaderItem(4)
        item.setText(_translate("InvoiceSearch_Window", "Valor Unit. $"))


    def load_invoices(self):
        """
        Queries the database for all invoices, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        commands_searchinvoice = (f"""
                                SELECT invoice."num_invoice", invoice."our_ref", detail."description", detail."price", detail."price_usd"
                                FROM purch_fact.invoice_header AS invoice
                                JOIN purch_fact.invoice_detail AS detail ON (invoice."id" = detail."invoice_header_id")
                                ORDER BY invoice."num_invoice"
                                """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_searchinvoice)
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableInvoices.setRowCount(len(results))

        tablerow=0

    # fill the Qt Table with the query results
        for row in results:
            for column in range(5):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                if column == 0:
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                else:
                    it.setFlags(it.flags())
                self.tableInvoices.setItem(tablerow, column, it)

            tablerow+=1

        self.tableInvoices.verticalHeader().hide()
        self.tableInvoices.setItemDelegate(AlignDelegate(self.tableInvoices))
        self.tableInvoices.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        # self.tableInvoices.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableInvoices.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableInvoices.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font: 800 10pt;}")


    def search_invoice(self):
        """
        Queries the database for filtered invoices, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        filter=self.Filter.text()

        if filter=="" or filter==" ":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Buscar Factura")
            dlg.setText("Introduce un filtro")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            commands_searchinvoice = ("""
                                SELECT invoice."num_invoice", invoice."our_ref", detail."description", detail."price", detail."price_usd"
                                FROM purch_fact.invoice_detail AS detail
                                INNER JOIN purch_fact.invoice_header AS invoice ON (invoice."id" = detail."invoice_header_id")
                                WHERE detail."description" ILIKE '%%'||%s||'%%'
                                ORDER BY invoice."num_invoice"
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_searchinvoice, (filter,))
                results=cur.fetchall()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.tableInvoices.setRowCount(len(results))

            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(5):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags())
                    self.tableInvoices.setItem(tablerow, column, it)

                tablerow+=1

            self.tableInvoices.verticalHeader().hide()
            self.tableInvoices.setItemDelegate(AlignDelegate(self.tableInvoices))
            self.tableInvoices.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
            # self.tableInvoices.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableInvoices.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableInvoices.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font: 800 10pt;}")


    def edit_invoice(self, item, InvoiceSearch_Window):
        """
        Opens the invoice editing window when the user selects an invoice from the search results.

        Args:
            item: The selected item in the invoice table, representing the invoice to be edited.
            InvoiceSearch_Window: The window that contains the search results, which will be closed after the invoice
                                editing window is opened.
        """
        if item.column() == 0:
            num_invoice = self.tableInvoices.item(item.row(), 0).text()

            from InvoiceNew_Window import Ui_InvoiceNew_Window
            config_obj = configparser.ConfigParser()
            config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
            dbparam = config_obj["postgresql"]
            # set your parameters for the database connection URI using the keys from the configfile.ini
            user_database = dbparam["user"]
            password_database = dbparam["password"]

            db_invoices = Create_DBconnection(user_database, password_database, 'invoice ' + num_invoice)
            if not db_invoices:
                sys.exit()

            self.invoices_app = Ui_InvoiceNew_Window(db_invoices, self.username, num_invoice)
            self.invoices_app.show()
            InvoiceSearch_Window.close()


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     InvoiceSearch_Window = QtWidgets.QMainWindow()
#     ui = Ui_InvoiceSearch_Window()
#     ui.setupUi(InvoiceSearch_Window)
#     InvoiceSearch_Window.show()
#     sys.exit(app.exec())