# Form implementation generated from reading ui file 'QueryOffer_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import re
from PyQt6 import QtCore, QtGui, QtWidgets
import psycopg2
from config import config
import locale
import pandas as pd
import os
from datetime import *
from openpyxl.styles import NamedStyle
import tkinter as tk
from tkinter import filedialog

basedir = r"\\ERP-EIPSA-DATOS\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        if index.column() == 3:  # Check column and paint when apply
            value = index.data()

            if value == "Adjudicada":  
                color = QtGui.QColor(0, 255, 0)  # Green if "Adjudicada"
            elif value == "Perdida":
                color = QtGui.QColor(255, 124, 128)  # Red if "Perdida"
            elif value == "Estimación":
                color = QtGui.QColor(142, 162, 219)  # Blue if "Estimación"
            elif value == "Presentada":
                color = QtGui.QColor(255, 255, 0)  # Yellow if "Presentada"
            elif value == "Declinada":
                color = QtGui.QColor(244, 176, 132)  # Orange if "Declinada"
            else:
                color = QtGui.QColor(255, 255, 255)  # White for rest

            option.backgroundBrush = color


class CustomTableWidget(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            hidden = False

            for col, filters in self.column_filters.items():
                if filters:
                    item = self.item(row, col)
                    item_value = item.text() if item else ""
                    if item_value not in filters:
                        hidden = True
                        break

            self.setRowHidden(row, hidden)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column_index in [9, 13, 15, 16]:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)


    def custom_sort(self, column, order):
        """
        Custom sorting method for date and money columns. Sorts the specified column based on date and money values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column in [13, 15, 16]:
            row_count = self.rowCount()

            indexes = list(range(row_count))
            indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd/MM/yyyy"))

            if order == QtCore.Qt.SortOrder.DescendingOrder:
                indexes.reverse()

            hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

            rows = self.rowCount()
            for i in range(rows):
                self.insertRow(i)

            for new_row, old_row in enumerate(indexes):
                for col in range(self.columnCount()):
                    item = self.takeItem(old_row + rows, col)
                    self.setItem(new_row, col, item)

            for i in range(rows):
                self.removeRow(rows)

            for row in hidden_rows:
                self.setRowHidden(row, True)

        elif column in [9]:
            row_count = self.rowCount()

            indexes = list(range(row_count))
            indexes.sort(key=lambda i: float(self.item(i, column).text().replace(" €","").replace(".", "").replace(",", ".")) if self.item(i, column).text() else float('inf'))

            if order == QtCore.Qt.SortOrder.DescendingOrder:
                indexes.reverse()

            hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

            rows = self.rowCount()
            for i in range(rows):
                self.insertRow(i)

            for new_row, old_row in enumerate(indexes):
                for col in range(self.columnCount()):
                    item = self.takeItem(old_row + rows, col)
                    self.setItem(new_row, col, item)

            for i in range(rows):
                self.removeRow(rows)

            for row in hidden_rows:
                self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class Ui_QueryOffer_Window(QtWidgets.QMainWindow):
    """
    UI class for the Query Offer window.
    """
    def __init__(self, username):
        """
        Initializes the Ui_QueryOffer_Window.
        """
        super().__init__()
        self.username = username
        self.setupUi(self)

    def setupUi(self, QueryOffer_Window):
        """
        Sets up the user interface for the QueryOffer_Window.

        Args:
            QueryOffer_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        QueryOffer_Window.setObjectName("QueryOffer_Window")
        QueryOffer_Window.resize(845, 590)
        QueryOffer_Window.setMinimumSize(QtCore.QSize(1000, 590))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        QueryOffer_Window.setWindowIcon(icon)
        QueryOffer_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255)\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=QueryOffer_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setVerticalSpacing(10)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.toolDeleteFilter = QtWidgets.QToolButton(self.frame)
        self.toolDeleteFilter.setObjectName("Save_Button")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Delete.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolDeleteFilter.setIcon(icon)
        self.toolDeleteFilter.setIconSize(QtCore.QSize(25, 25))
        self.gridLayout_2.addWidget(self.toolDeleteFilter, 0, 0, 1, 1)
        self.toolExpExcel = QtWidgets.QToolButton(self.frame)
        self.toolExpExcel.setObjectName("ExpExcel_Button")
        self.toolExpExcel.setToolTip("Exportar a Excel")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Excel.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolExpExcel.setIcon(icon)
        self.toolExpExcel.setIconSize(QtCore.QSize(25, 25))
        self.gridLayout_2.addWidget(self.toolExpExcel, 0, 1, 1, 1)
        self.label_Months= QtWidgets.QLabel(parent=self.frame)
        self.label_Months.setMinimumSize(QtCore.QSize(90, 25))
        # self.label_Months.setMaximumSize(QtCore.QSize(90, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_Months.setFont(font)
        self.label_Months.setObjectName("label_Months")
        self.gridLayout_2.addWidget(self.label_Months, 1, 0, 1, 2)
        self.Month1_QueryOffer = QtWidgets.QComboBox(parent=self.frame)
        self.Month1_QueryOffer.setMinimumSize(QtCore.QSize(120, 25))
        self.Month1_QueryOffer.setMaximumSize(QtCore.QSize(120, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Month1_QueryOffer.setFont(font)
        self.Month1_QueryOffer.setObjectName("Month1_QueryOffer")
        self.gridLayout_2.addWidget(self.Month1_QueryOffer, 1, 2, 1, 1)
        self.Month2_QueryOffer = QtWidgets.QComboBox(parent=self.frame)
        self.Month2_QueryOffer.setMinimumSize(QtCore.QSize(120, 25))
        self.Month2_QueryOffer.setMaximumSize(QtCore.QSize(120, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Month2_QueryOffer.setFont(font)
        self.Month2_QueryOffer.setObjectName("Month2_QueryOffer")
        self.gridLayout_2.addWidget(self.Month2_QueryOffer, 1, 3, 1, 1)
        self.Year_QueryOffer = QtWidgets.QLineEdit(parent=self.frame)
        self.Year_QueryOffer.setMinimumSize(QtCore.QSize(120, 25))
        self.Year_QueryOffer.setMaximumSize(QtCore.QSize(120, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Year_QueryOffer.setFont(font)
        self.Year_QueryOffer.setObjectName("Year_QueryOffer")
        self.gridLayout_2.addWidget(self.Year_QueryOffer, 1, 4, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 2, 0, 1, 1)
        self.tableQueryOffer = CustomTableWidget()
        self.tableQueryOffer.setObjectName("tableQueryOffer")
        self.tableQueryOffer.setColumnCount(21)
        self.tableQueryOffer.setRowCount(0)
        for i in range(21):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableQueryOffer.setHorizontalHeaderItem(i, item)
        self.tableQueryOffer.setSortingEnabled(True)
        self.tableQueryOffer.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.gridLayout_2.addWidget(self.tableQueryOffer, 3, 0, 1, 11)
        self.label_SumItems = QtWidgets.QLabel(parent=self.frame)
        self.label_SumItems.setMinimumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setMaximumSize(QtCore.QSize(40, 10))
        self.label_SumItems.setText("")
        self.label_SumItems.setObjectName("label_SumItems")
        self.gridLayout_2.addWidget(self.label_SumItems, 4, 7, 1, 1)
        self.label_SumValue = QtWidgets.QLabel(parent=self.frame)
        self.label_SumValue.setMinimumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setMaximumSize(QtCore.QSize(80, 20))
        self.label_SumValue.setText("")
        self.label_SumValue.setObjectName("label_SumValue")
        self.gridLayout_2.addWidget(self.label_SumValue, 4, 8, 1, 1)
        self.label_CountItems = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems.setMinimumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setMaximumSize(QtCore.QSize(60, 10))
        self.label_CountItems.setText("")
        self.label_CountItems.setObjectName("label_CountItems")
        self.gridLayout_2.addWidget(self.label_CountItems, 4, 9, 1, 1)
        self.label_CountValue = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue.setMinimumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setMaximumSize(QtCore.QSize(80, 10))
        self.label_CountValue.setText("")
        self.label_CountValue.setObjectName("label_CountValue")
        self.gridLayout_2.addWidget(self.label_CountValue, 4, 10, 1, 1)

        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        QueryOffer_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=QueryOffer_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 845, 22))
        self.menubar.setObjectName("menubar")
        QueryOffer_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=QueryOffer_Window)
        self.statusbar.setObjectName("statusbar")
        QueryOffer_Window.setStatusBar(self.statusbar)
        self.tableQueryOffer.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        list_months = [''] + [str(x) for x in range(1,13)]
        self.Month1_QueryOffer.addItems(list_months)
        self.Month2_QueryOffer.addItems(list_months)

        self.retranslateUi(QueryOffer_Window)
        QtCore.QMetaObject.connectSlotsByName(QueryOffer_Window)
        self.toolDeleteFilter.clicked.connect(self.delete_allFilters) # type: ignore
        self.toolExpExcel.clicked.connect(self.export_data)  # type: ignore
        self.Month1_QueryOffer.currentIndexChanged.connect(self.query_offer_filtered)
        self.Month2_QueryOffer.currentIndexChanged.connect(self.query_offer_filtered)
        self.Year_QueryOffer.returnPressed.connect(self.query_offer_filtered)
        self.tableQueryOffer.itemSelectionChanged.connect(self.countSelectedCells)
        self.tableQueryOffer.itemDoubleClicked.connect(self.on_item_double_clicked)
        self.tableQueryOffer.horizontalHeader().sectionDoubleClicked.connect(self.on_header_section_clicked)

        self.query_all_offers()

# Function to translate and updates the text of various UI elements
    def retranslateUi(self, QueryOffer_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        QueryOffer_Window.setWindowTitle(_translate("QueryOffer_Window", "Consultar Oferta"))
        item = self.tableQueryOffer.horizontalHeaderItem(0)
        item.setText(_translate("QueryOffer_Window", "Nº Oferta"))
        item = self.tableQueryOffer.horizontalHeaderItem(1)
        item.setText(_translate("QueryOffer_Window", "Año Oferta"))
        item = self.tableQueryOffer.horizontalHeaderItem(2)
        item.setText(_translate("QueryOffer_Window", "Responsable"))
        item = self.tableQueryOffer.horizontalHeaderItem(3)
        item.setText(_translate("QueryOffer_Window", "Estado"))
        item = self.tableQueryOffer.horizontalHeaderItem(4)
        item.setText(_translate("QueryOffer_Window", "Referencia"))
        item = self.tableQueryOffer.horizontalHeaderItem(5)
        item.setText(_translate("QueryOffer_Window", "Cliente"))
        item = self.tableQueryOffer.horizontalHeaderItem(6)
        item.setText(_translate("QueryOffer_Window", "Cl. Final / Planta"))
        item = self.tableQueryOffer.horizontalHeaderItem(7)
        item.setText(_translate("QueryOffer_Window", "Proyecto"))
        item = self.tableQueryOffer.horizontalHeaderItem(8)
        item.setText(_translate("QueryOffer_Window", "Nac. /Ext."))
        item = self.tableQueryOffer.horizontalHeaderItem(9)
        item.setText(_translate("QueryOffer_Window", "Material"))
        item = self.tableQueryOffer.horizontalHeaderItem(10)
        item.setText(_translate("QueryOffer_Window", "Importe"))
        item = self.tableQueryOffer.horizontalHeaderItem(11)
        item.setText(_translate("QueryOffer_Window", "Tipo Tarifa"))
        item = self.tableQueryOffer.horizontalHeaderItem(12)
        item.setText(_translate("QueryOffer_Window", "Notas"))
        item = self.tableQueryOffer.horizontalHeaderItem(13)
        item.setText(_translate("QueryOffer_Window", "Nº Equipos"))
        item = self.tableQueryOffer.horizontalHeaderItem(14)
        item.setText(_translate("QueryOffer_Window", "Fecha Recepción"))
        item = self.tableQueryOffer.horizontalHeaderItem(15)
        item.setText(_translate("QueryOffer_Window", "Portal"))
        item = self.tableQueryOffer.horizontalHeaderItem(16)
        item.setText(_translate("QueryOffer_Window", "Fecha Límite"))
        item = self.tableQueryOffer.horizontalHeaderItem(17)
        item.setText(_translate("QueryOffer_Window", "Fecha Presentación"))
        item = self.tableQueryOffer.horizontalHeaderItem(18)
        item.setText(_translate("QueryOffer_Window", "Veces Rec."))
        item = self.tableQueryOffer.horizontalHeaderItem(19)
        item.setText(_translate("QueryOffer_Window", "Seguimiento"))
        item = self.tableQueryOffer.horizontalHeaderItem(20)
        item.setText(_translate("QueryOffer_Window", "Ptos. Importantes"))
        self.label_Months.setText(_translate("QueryOffer_Window", "Meses/Año:"))

# Function to delete all filters when tool button is clicked
    def delete_allFilters(self):
        """
        Resets all filters and updates the table model with unique values for each column.
        """
        for column in range(self.tableQueryOffer.columnCount()):
            if column in self.tableQueryOffer.rows_hidden:
                for item in self.tableQueryOffer.rows_hidden[column]:
                    self.tableQueryOffer.setRowHidden(item, False)
            header_item = self.tableQueryOffer.horizontalHeaderItem(column)
            header_item.setIcon(QtGui.QIcon())

        self.tableQueryOffer.list_filters=[]
        self.tableQueryOffer.column_filters = {}
        self.tableQueryOffer.column_actions = {}
        self.tableQueryOffer.checkbox_states = {}
        self.tableQueryOffer.rows_hidden = {}
        self.tableQueryOffer.general_rows_to_hide = set()

    def query_all_offers(self):
        """
        Queries the database for all offers, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        self.tableQueryOffer.setRowCount(0)

        commands_queryoffer = ("""
                        (SELECT offers."num_offer", EXTRACT(YEAR FROM (offers."register_date")) as year_offer, users_data.initials."initials", offers."state", offers."num_ref_offer", offers."client",
                        offers."final_client", offers."project", offers."nac_ext", offers."material", offers."offer_amount", offers."rate_type", offers."notes", offers."items_number",
                        TO_CHAR(offers."recep_date",'dd/MM/yyyy'), offers."portal", TO_CHAR(offers."limit_date",'dd/MM/yyyy'), TO_CHAR(offers."presentation_date",'dd/MM/yyyy'), offers."rec_times", offers."tracking", offers."important"
                        FROM offers
                        INNER JOIN product_type ON (offers."material"=product_type."material")
                        INNER JOIN users_data.initials ON (offers."responsible"=users_data.initials."username")
                        ORDER BY offers."num_offer")
                        UNION ALL
                        (SELECT CAST(received_offers."id_offer" AS TEXT), EXTRACT(YEAR FROM (received_offers."register_date")) as year_offer, users_data.initials."initials", received_offers."state", received_offers."num_ref_offer", received_offers."client",
                        received_offers."final_client", '' as project, 'Exterior' as nac_ext, received_offers."material", '' as amount, '' as rate_type, received_offers."description", received_offers."items_number",
                        TO_CHAR(received_offers."recep_date",'dd/MM/yyyy'), '' as portal, TO_CHAR(received_offers."limit_date",'dd/MM/yyyy'), '' as presentation_date, 0 as rec_times, '' as tracking, '' as important
                        FROM received_offers
                        INNER JOIN product_type ON (received_offers."material"=product_type."material")
                        INNER JOIN users_data.initials ON (received_offers."responsible"=users_data.initials."username")
                        ORDER BY received_offers."id_offer")
                        """)

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_queryoffer)
            results=cur.fetchall()
            self.tableQueryOffer.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(21):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableQueryOffer.setItem(tablerow, column, it)

                self.tableQueryOffer.setItemDelegateForRow(tablerow, AlignDelegate(self.tableQueryOffer))
                tablerow+=1

            # self.tableQueryOffer.verticalHeader().hide()
            self.tableQueryOffer.setSortingEnabled(False)
            self.tableQueryOffer.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableQueryOffer.horizontalHeader().setDefaultSectionSize(150)
            # self.tableQueryOffer.horizontalHeader().setSectionResizeMode(4,QtWidgets.QHeaderView.ResizeMode.Interactive)
            # self.tableQueryOffer.horizontalHeader().setSectionResizeMode(18,QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableQueryOffer.horizontalHeader().setSectionResizeMode(20,QtWidgets.QHeaderView.ResizeMode.Stretch)


        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

    def query_offer_filtered(self):
        """
        Queries the database for filtered offers, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        self.tableQueryOffer.setRowCount(0)
        month1 = self.Month1_QueryOffer.currentText()
        month2 = self.Month2_QueryOffer.currentText()
        year = int(self.Year_QueryOffer.text()) if self.Year_QueryOffer.text() != '' else None

        if month1=='' and month2!='':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Consultar Pedido")
            dlg.setText("No puede haber un segundo mes sin haber introducido un primer mes")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            self.tableQueryOffer.setRowCount(0)
            commands_queryoffer = ("""
                        (SELECT offers."num_offer", EXTRACT(YEAR FROM (offers."register_date")) as year_offer, users_data.initials."initials", offers."state", offers."num_ref_offer", offers."client",
                        offers."final_client", offers."project", offers."nac_ext", offers."material", offers."offer_amount", offers."rate_type", offers."notes", offers."items_number",
                        TO_CHAR(offers."recep_date",'dd/MM/yyyy'), offers."portal", TO_CHAR(offers."limit_date",'dd/MM/yyyy'), TO_CHAR(offers."presentation_date",'dd/MM/yyyy'), offers."rec_times", offers."tracking", offers."important"
                        FROM offers
                        INNER JOIN product_type ON (offers."material"=product_type."material")
                        INNER JOIN users_data.initials ON (offers."responsible"=users_data.initials."username")
                        WHERE (EXTRACT(YEAR FROM offers."register_date") = %s OR %s IS NULL)
                        ORDER BY offers."num_offer")
                        UNION ALL
                        (SELECT CAST(received_offers."id_offer" AS TEXT), EXTRACT(YEAR FROM (received_offers."register_date")) as year_offer, users_data.initials."initials", received_offers."state", received_offers."num_ref_offer", received_offers."client",
                        received_offers."final_client", '' as project, 'Exterior' as nac_ext, received_offers."material", '' as amount, '' as rate_type, received_offers."description", received_offers."items_number",
                        TO_CHAR(received_offers."recep_date",'dd/MM/yyyy'), '' as portal, TO_CHAR(received_offers."limit_date",'dd/MM/yyyy'), '' as presentation_date, 0 as rec_times, '' as tracking, '' as important
                        FROM received_offers
                        INNER JOIN product_type ON (received_offers."material"=product_type."material")
                        INNER JOIN users_data.initials ON (received_offers."responsible"=users_data.initials."username")
                        WHERE EXTRACT(YEAR FROM received_offers."register_date") = %s OR %s IS NULL
                        ORDER BY received_offers."id_offer")
                        """)
            commands_queryoffer_dates1 = ("""
                        (SELECT offers."num_offer", EXTRACT(YEAR FROM (offers."register_date")) as year_offer, users_data.initials."initials", offers."state", offers."num_ref_offer", offers."client",
                        offers."final_client", offers."project", offers."nac_ext", offers."material", offers."offer_amount", offers."rate_type", offers."notes", offers."items_number",
                        TO_CHAR(offers."recep_date",'dd/MM/yyyy'), offers."portal", TO_CHAR(offers."limit_date",'dd/MM/yyyy'), TO_CHAR(offers."presentation_date",'dd/MM/yyyy'), offers."rec_times", offers."tracking", offers."important"
                        FROM offers
                        INNER JOIN product_type ON (offers."material"=product_type."material")
                        INNER JOIN users_data.initials ON (offers."responsible"=users_data.initials."username")
                        WHERE offers."offer_month" = %s
                        AND
                        (EXTRACT(YEAR FROM offers."register_date") = %s OR %s IS NULL)
                        ORDER BY offers."num_offer")
                        UNION ALL
                        (SELECT CAST(received_offers."id_offer" AS TEXT), EXTRACT(YEAR FROM (received_offers."register_date")) as year_offer, users_data.initials."initials", received_offers."state", received_offers."num_ref_offer", received_offers."client",
                        received_offers."final_client", '' as project, 'Exterior' as nac_ext, received_offers."material", '' as amount, '' as rate_type, received_offers."description", received_offers."items_number",
                        TO_CHAR(received_offers."recep_date",'dd/MM/yyyy'), '' as portal, TO_CHAR(received_offers."limit_date",'dd/MM/yyyy'), '' as presentation_date, 0 as rec_times, '' as tracking, '' as important
                        FROM received_offers
                        INNER JOIN product_type ON (received_offers."material"=product_type."material")
                        INNER JOIN users_data.initials ON (received_offers."responsible"=users_data.initials."username")
                        WHERE EXTRACT(MONTH FROM received_offers."register_date") = %s
                        AND
                        EXTRACT(YEAR FROM received_offers."register_date") = %s OR %s IS NULL
                        ORDER BY received_offers."id_offer")
                        """)
            commands_queryoffer_dates2 = ("""
                        (SELECT offers."num_offer", EXTRACT(YEAR FROM (offers."register_date")) as year_offer, users_data.initials."initials", offers."state", offers."num_ref_offer", offers."client",
                        offers."final_client", offers."project", offers."nac_ext", 'Exterior' as nac_ext, offers."material", offers."offer_amount", offers."rate_type", offers."notes", offers."items_number",
                        TO_CHAR(offers."recep_date",'dd/MM/yyyy'), offers."portal", TO_CHAR(offers."limit_date",'dd/MM/yyyy'), TO_CHAR(offers."presentation_date",'dd/MM/yyyy'), offers."rec_times", offers."tracking", offers."important"
                        FROM offers
                        INNER JOIN product_type ON (offers."material"=product_type."material")
                        INNER JOIN users_data.initials ON (offers."responsible"=users_data.initials."username")
                        WHERE offers."offer_month" BETWEEN %s AND %s
                        AND
                        (EXTRACT(YEAR FROM offers."register_date") = %s OR %s IS NULL)
                        ORDER BY offers."num_offer")
                        UNION ALL
                        (SELECT CAST(received_offers."id_offer" AS TEXT), EXTRACT(YEAR FROM (received_offers."register_date")) as year_offer, users_data.initials."initials", received_offers."state", received_offers."num_ref_offer", received_offers."client",
                        received_offers."final_client", '' as project, received_offers."material", '' as amount, '' as rate_type, received_offers."description", received_offers."items_number",
                        TO_CHAR(received_offers."recep_date",'dd/MM/yyyy'), '' as portal, TO_CHAR(received_offers."limit_date",'dd/MM/yyyy'), '' as presentation_date, 0 as rec_times, '' as tracking, '' as important
                        FROM received_offers
                        INNER JOIN product_type ON (received_offers."material"=product_type."material")
                        INNER JOIN users_data.initials ON (received_offers."responsible"=users_data.initials."username")
                        WHERE EXTRACT(MONTH FROM received_offers."register_date") BETWEEN %s AND %s
                        AND
                        EXTRACT(YEAR FROM received_offers."register_date") = %s OR %s IS NULL
                        ORDER BY received_offers."id_offer")
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                if month1 == '' and month2 == '':
                    data=(year,year,year,year,)
                    cur.execute(commands_queryoffer,data)
                elif month1 != '' and month2 == '':
                    data=(month1,year,year,month1,year,year,)
                    cur.execute(commands_queryoffer_dates1, data)
                elif month1 != '' and month2 != '':
                    data=(month1,month2,year,year,month1,month2,year,year,)
                    cur.execute(commands_queryoffer_dates2, data)
                results=cur.fetchall()
                self.tableQueryOffer.setRowCount(len(results))
                tablerow=0

            # fill the Qt Table with the query results
                for row in results:
                    for column in range(21):
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableQueryOffer.setItem(tablerow, column, it)

                    self.tableQueryOffer.setItemDelegateForRow(tablerow, AlignDelegate(self.tableQueryOffer))
                    tablerow+=1

                # self.tableQueryOffer.verticalHeader().hide()
                self.tableQueryOffer.setSortingEnabled(False)
                self.tableQueryOffer.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
                self.tableQueryOffer.horizontalHeader().setDefaultSectionSize(150)
                # self.tableQueryOffer.horizontalHeader().setSectionResizeMode(4,QtWidgets.QHeaderView.ResizeMode.Interactive)
                # self.tableQueryOffer.horizontalHeader().setSectionResizeMode(18,QtWidgets.QHeaderView.ResizeMode.Interactive)
                self.tableQueryOffer.horizontalHeader().setSectionResizeMode(20,QtWidgets.QHeaderView.ResizeMode.Stretch)


            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

    def countSelectedCells(self):
        """
        Counts the number of selected cells and sums their values. Updates the UI labels with the count and sum.
        """
        if len(self.tableQueryOffer.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

            sum_value = sum([self.euro_string_to_float(ix.data()) if (ix.data() is not None and (re.match(r'^[\d.,]+\s€$', ix.data()) and ix.column() == 10))
                            else (float(ix.data()) if (ix.data() is not None and ix.data().replace(',', '.', 1).replace('.', '', 1).isdigit() and ix.column() == 13) else 0) for ix in self.tableQueryOffer.selectedIndexes()])
            count_value = len([ix for ix in self.tableQueryOffer.selectedIndexes() if ix.data() != ""])
            if sum_value > 0:
                self.label_SumItems.setText("Suma:")
                self.label_SumValue.setText(locale.format_string("%.2f", sum_value, grouping=True))
            if count_value > 0:
                self.label_CountItems.setText("Recuento:")
                self.label_CountValue.setText(str(count_value))
        else:
            self.label_SumItems.setText("")
            self.label_SumValue.setText("")
            self.label_CountItems.setText("")
            self.label_CountValue.setText("")

    def euro_string_to_float(self, euro_str):
        """
        Converts a string representing an amount in euros to a float.

        Args:
            euro_str (str): A string representing the amount in euros (e.g., "1.234,56 €").
        
        Returns:
            float: The numeric value of the amount as a float.
        """
        match = re.match(r'^([\d.,]+)\s€$', euro_str)
        if match:
            number_str = match.group(1)
            number_str = number_str.replace('.', '').replace(',', '.')
            return float(number_str)
        else:
            return 0.0

    def on_item_double_clicked(self, item):
        """
        Handles double-click events on items in a QTableWidget. Opens different forms based on the column of the clicked item.
        
        Args:
            item (QtWidgets.QTableWidgetItem): The item that was double-clicked.
        """
        if item.column() in [10,17,18]:
            cell_content = item.text()
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Ofertas")
            dlg.setText(cell_content)
            dlg.exec()
            del dlg, new_icon
        elif item.column() == 0:
            self.editofferform(item)

    def export_data(self):
        """
        Exports the visible data from the table to an Excel file. If no data is loaded, displays a warning message.
        """
        if self.tableQueryOffer.rowCount() > 0:
            df = pd.DataFrame()
            for col in range(self.tableQueryOffer.columnCount()):
                header = self.tableQueryOffer.horizontalHeaderItem(col).text()
                column_data = []
                for row in range(self.tableQueryOffer.rowCount()):
                    if not self.tableQueryOffer.isRowHidden(row):
                        item = self.tableQueryOffer.item(row,col)
                        if item is not None:
                            if col in [14, 16, 17]:  # date column
                                date_str = item.text()
                                if date_str:  
                                    date_obj = datetime.strptime(date_str, "%d/%m/%Y")
                                    column_data.append(date_obj)
                                else:
                                    column_data.append('')
                            elif col in [10]:  # currency columns
                                currency_str = item.text()
                                if currency_str:
                                    currency_str=currency_str.replace(".","")
                                    currency_str=currency_str.replace(",",".")
                                    currency_str=currency_str[:currency_str.find(" €")]
                                    currency_value = float(currency_str)
                                    column_data.append(currency_value)
                                else:
                                    column_data.append('')
                            elif col in [13]:  # integer columns
                                integer_str = item.text()
                                if integer_str:
                                    integer_value = int(integer_str)
                                    column_data.append(integer_value)
                                else:
                                    column_data.append('')
                            else:
                                column_data.append(item.text())
                        else:
                            column_data.append('')
                df[header] = column_data

            root = tk.Tk()
            root.withdraw()

            file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel Files", "*.xlsx")])

            if file_path:
                # df.to_excel(file_path, index=False)
                writer = pd.ExcelWriter(file_path, engine='openpyxl')
                df.to_excel(writer, index=False, sheet_name='Sheet1')

                # Set date format
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')
                currency_style  = NamedStyle(name='currency_style ', number_format='#,##0.00" €"')
                for col_num in range(1, self.tableQueryOffer.columnCount() + 1):
                    if col_num in [14,16,17]:  
                        for row_num in range(2, self.tableQueryOffer.rowCount() + 2):
                            cell = writer.sheets['Sheet1'].cell(row=row_num, column=col_num)
                            cell.style = date_style

                    elif col_num in [10]:  
                        for row_num in range(2, self.tableQueryOffer.rowCount() + 2):
                            cell = writer.sheets['Sheet1'].cell(row=row_num, column=col_num)
                            cell.style = currency_style

                writer._save()

            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Consultar Oferta")
            dlg.setText("Datos exportados con éxito")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()
            del dlg,new_icon

        else:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Consultar Oferta")
            dlg.setText("No hay datos para exportar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableQueryOffer.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableQueryOffer.horizontalHeader().height()
        popup_pos = self.tableQueryOffer.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableQueryOffer.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function when double clicked cell is in client column
    def editofferform(self, item):
        """
        Opens the offer edit form for the offer number displayed in the clicked item.
        
        Args:
            item (QtWidgets.QTableWidgetItem): The item containing the offer number.
        """
        from OfferEdit_Window import Ui_Edit_Offer_Window
        num_offer=item.text()
        self.edit_offer_window=QtWidgets.QMainWindow()
        self.ui=Ui_Edit_Offer_Window(self.username, num_offer)
        self.ui.setupUi(self.edit_offer_window)
        self.edit_offer_window.show()




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    QueryOffer_Window = Ui_QueryOffer_Window('d.marquez')
    QueryOffer_Window.show()
    sys.exit(app.exec())
