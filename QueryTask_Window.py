# Form implementation generated from reading ui file 'QueryTask_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
from EditTask_Window import Ui_EditTask_Window


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_QueryTask_Window(object):
    def __init__(self, name, date=None):
        self.name=name
        if date:
            self.dateselected = date.toString("yyyy-MM-dd")
    # def __init__(self):
    #     self.name="Luis Bravo"

    def setupUi(self, QueryTask_Window):
        QueryTask_Window.setObjectName("QueryTask_Window")
        QueryTask_Window.resize(400, 561)
        QueryTask_Window.setMinimumSize(QtCore.QSize(600, 575))
        QueryTask_Window.setMaximumSize(QtCore.QSize(600, 575))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        QueryTask_Window.setWindowIcon(icon)
        QueryTask_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=QueryTask_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(550, 500))
        self.frame.setMaximumSize(QtCore.QSize(550, 500))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 0, 0, 1, 1)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addWidget(self.Button_Cancel)
        self.tableWidget = QtWidgets.QTableWidget(parent=self.frame)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.gridLayout_2.addWidget(self.tableWidget, 2, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        QueryTask_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=QueryTask_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 22))
        self.menubar.setObjectName("menubar")
        QueryTask_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=QueryTask_Window)
        self.statusbar.setObjectName("statusbar")
        QueryTask_Window.setStatusBar(self.statusbar)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableWidget.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        QueryTask_Window.setWindowFlags(QtCore.Qt.WindowType.WindowMinimizeButtonHint)

        self.retranslateUi(QueryTask_Window)
        QtCore.QMetaObject.connectSlotsByName(QueryTask_Window)

        self.tableWidget.itemDoubleClicked.connect(self.on_item_double_clicked)
        self.Button_Cancel.clicked.connect(QueryTask_Window.close)
        self.QueryTask()


    def retranslateUi(self, QueryTask_Window):
        _translate = QtCore.QCoreApplication.translate
        QueryTask_Window.setWindowTitle(_translate("QueryTask_Window", "Tareas"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("QueryTask_Window", "ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("QueryTask_Window", "Tarea"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("QueryTask_Window", "Fecha Fin"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("QueryTask_Window", "Estado"))
        self.Button_Cancel.setText(_translate("QueryTask_Window", "Salir"))


    def QueryTask(self):
        conn = None
        commands_QueryTask_All = ("""
                                    SELECT "id", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state"
                                    FROM tasks
                                    WHERE ("responsible" = %s
                                    AND 
                                    "state" = 'Pendiente')
                                    """)
        commands_QueryTask_date = ("""
                                    SELECT "id", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state"
                                    FROM tasks
                                    WHERE ("responsible" = %s
                                    AND 
                                    "task_date" = %s
                                    AND 
                                    "state" = 'Pendiente')
                                    """)
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            if hasattr(self, 'dateselected'):
                cur.execute(commands_QueryTask_date, (self.name, self.dateselected,))
            else:
                cur.execute(commands_QueryTask_All, (self.name,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableWidget.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(4):
                    it=QtWidgets.QTableWidgetItem(str(row[column]))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableWidget.setItem(tablerow, column, it)

                tablerow+=1

            self.tableWidget.verticalHeader().hide()
            self.tableWidget.setItemDelegate(AlignDelegate(self.tableWidget))

        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


    def on_item_double_clicked(self, item):
        if item.column() == 1:
            self.edittask(item)


    def edittask(self, item):
        task = item.text()
        id = item.tableWidget().item(item.row(), 0).text()
        date = item.tableWidget().item(item.row(), 2).text()
        state = item.tableWidget().item(item.row(), 3).text()

        self.edittaskwindow=QtWidgets.QMainWindow()
        self.ui=Ui_EditTask_Window(self.name, id, task, date, state)
        self.ui.setupUi(self.edittaskwindow)
        self.edittaskwindow.show()
        # QueryTask_Window.hide()
        # self.ui.Button_Cancel.clicked.connect(QueryTask_Window.show)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    QueryTask_Window = QtWidgets.QMainWindow()
    ui = Ui_QueryTask_Window()
    ui.setupUi(QueryTask_Window)
    QueryTask_Window.show()
    sys.exit(app.exec())