# Form implementation generated from reading ui file 'UpdateTableExist_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from tkinter.filedialog import askopenfilename
import sys
import psycopg2
from config import config
import pandas as pd
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_UpdateTableExist_Window(object):
    def setupUi(self, UpdateTableExist_Window):
        UpdateTableExist_Window.setObjectName("UpdateTableExist_Window")
        UpdateTableExist_Window.resize(640, 330)
        UpdateTableExist_Window.setMinimumSize(QtCore.QSize(640, 330))
        UpdateTableExist_Window.setMaximumSize(QtCore.QSize(640, 330))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        UpdateTableExist_Window.setWindowIcon(icon)
        UpdateTableExist_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=UpdateTableExist_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.hLayout1 = QtWidgets.QHBoxLayout()
        self.hLayout1.setObjectName("hLayout1")
        self.label_TableName = QtWidgets.QLabel(parent=self.frame)
        self.label_TableName.setMinimumSize(QtCore.QSize(200, 55))
        self.label_TableName.setMaximumSize(QtCore.QSize(200, 55))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_TableName.setFont(font)
        self.label_TableName.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_TableName.setObjectName("label_TableName")
        self.hLayout1.addWidget(self.label_TableName)
        self.TableName_ImportTableExist = QtWidgets.QComboBox(parent=self.frame)
        self.TableName_ImportTableExist.setMinimumSize(QtCore.QSize(250, 25))
        self.TableName_ImportTableExist.setMaximumSize(QtCore.QSize(250, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.TableName_ImportTableExist.setFont(font)
        self.TableName_ImportTableExist.setObjectName("TableName_ImportTableExist")
        self.hLayout1.addWidget(self.TableName_ImportTableExist)
        self.verticalLayout.addLayout(self.hLayout1)
        self.hLayout = QtWidgets.QHBoxLayout()
        self.hLayout.setObjectName("hLayout")
        self.label_SelectFile = QtWidgets.QLabel(parent=self.frame)
        self.label_SelectFile.setMinimumSize(QtCore.QSize(200, 55))
        self.label_SelectFile.setMaximumSize(QtCore.QSize(200, 55))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_SelectFile.setFont(font)
        self.label_SelectFile.setObjectName("label_SelectFile")
        self.hLayout.addWidget(self.label_SelectFile)
        self.Button_Select = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Select.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Select.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Select.setObjectName("Button_Select")
        self.hLayout.addWidget(self.Button_Select)
        self.verticalLayout.addLayout(self.hLayout)
        self.label_name_file = QtWidgets.QLabel(parent=self.frame)
        self.label_name_file.setMinimumSize(QtCore.QSize(0, 25))
        self.label_name_file.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_name_file.setFont(font)
        self.label_name_file.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_name_file.setObjectName("label_name_file")
        self.verticalLayout.addWidget(self.label_name_file)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.verticalLayout.addItem(spacerItem)
        self.hLayout2 = QtWidgets.QHBoxLayout()
        self.hLayout2.setObjectName("hLayout2")
        self.Button_Import = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Import.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Import.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Import.setObjectName("Button_Import")
        self.hLayout2.addWidget(self.Button_Import)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.hLayout2.addWidget(self.Button_Cancel)
        self.verticalLayout.addLayout(self.hLayout2)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        UpdateTableExist_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=UpdateTableExist_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 22))
        self.menubar.setObjectName("menubar")
        UpdateTableExist_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=UpdateTableExist_Window)
        self.statusbar.setObjectName("statusbar")
        UpdateTableExist_Window.setStatusBar(self.statusbar)

        self.retranslateUi(UpdateTableExist_Window)
        self.Button_Cancel.clicked.connect(UpdateTableExist_Window.close) # type: ignore
        self.Button_Import.clicked.connect(self.importtableexist)
        self.Button_Select.clicked.connect(self.fileselection)
        QtCore.QMetaObject.connectSlotsByName(UpdateTableExist_Window)

        query_databasetables = """SELECT table_name
                                FROM information_schema.tables
                                WHERE table_schema = 'purch_fact' AND table_type = 'BASE TABLE';"""

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(query_databasetables)
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        tables_names=[x[0] for x in results]
        tables_names.sort()
        self.TableName_ImportTableExist.addItems(tables_names)


    def retranslateUi(self, UpdateTableExist_Window):
        _translate = QtCore.QCoreApplication.translate
        UpdateTableExist_Window.setWindowTitle(_translate("UpdateTableExist_Window", "Importar Tabla Existente"))
        self.label_TableName.setText(_translate("UpdateTableExist_Window", "Nombre Tabla:"))
        self.label_SelectFile.setText(_translate("UpdateTableExist_Window", "Seleccionar Archivo:"))
        self.Button_Select.setText(_translate("UpdateTableExist_Window", "Seleccionar"))
        self.label_name_file.setText(_translate("UpdateTableExist_Window", ""))
        self.Button_Import.setText(_translate("UpdateTableExist_Window", "Importar"))
        self.Button_Cancel.setText(_translate("UpdateTableExist_Window", "Cancelar"))


#Function to import data into and existing table from and Excel where first row is column name
    def importtableexist(self):
        table_name='purch_fact.' + self.TableName_ImportTableExist.currentText()

        if self.label_name_file.text() == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Selecciona un archivo para importar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            excel_file=self.label_name_file.text().split("Archivo: ")[1]

            params = config()
            conn = psycopg2.connect(**params)
            cursor = conn.cursor()

        #Importing excel file into dataframe
            df_table = pd.read_excel(excel_file, dtype={'ot_num': str, 'plate_thk':str})
            # df_table['total_qty_elements'] = df_table['total_qty_elements'].apply(lambda x: 'nan' if pd.isna(x) else int(x))
            # df_table['id_dest_country'] = df_table['id_dest_country'].apply(lambda x: 'nan' if pd.isna(x) else int(x))
            # df_table['id_client'] = df_table['id_client'].apply(lambda x: 'nan' if pd.isna(x) else int(x))
            df_table = df_table.astype(str)
            # df_table['id'] = df_table['id'].astype(int)
            
            df_table.replace('nan', '', inplace=True)
            df_table.replace('NaT', '', inplace=True)

            # df_table['date_dispatch'] = df_table['date_dispatch'].apply(self.format_date)

            # df_table['date_dispatch'] = pd.to_datetime(df_table['date_dispatch'], errors='coerce')
            # df_table['date_dispatch'] = df_table['date_dispatch'].dt.strftime('%d/%m/%Y')

#             df_table['date_dispatch'] = df_table['date_dispatch'].apply(
#     lambda x: pd.to_datetime(x, errors='coerce') if x != '' else x  # Coerce fechas y dejar vacíos como NaT
# )

# # Ahora formatear las fechas válidas y mantener el texto original
#             df_table['date_dispatch'] = df_table['date_dispatch'].apply(
#                 lambda x: x.strftime('%d/%m/%Y') if isinstance(x, pd.Timestamp) else x  # Si es fecha, formatear; si no, mantener texto
#             )

            print(df_table)

            try:
                for index, row in df_table.iterrows():
                    if "id" in row:
                        id_value = row["id"]
                        # id2_value = row["num_order"]

                    # Creating string for columns names and values
                        columns_values = [(column, row[column]) for column in df_table.columns if not pd.isnull(row[column])]
                        
                        columns = ', '.join([column for column, _ in columns_values])
                        values = ', '.join([f"'{value.replace('.', ',')}'" if column in ['tax_base_amount','orif_diam', 'dv_diam', 'plate_thk','offer_amount','order_amount','rawmat_value', 'value', 'cost'] else ('NULL' if value == '' and column in ['rating', 'plate_thk','rev_date','nc_date','date_action','pay_way_id','iva_id','bank_id','inter_agent_porc','dest_id', 'class_id', 'm_unit_id', 'physical_stock', 'available_stock', 'pending_stock', 'quot_head_id', 'supply_id', 'currency_id', 'quantity', 'discount', 'position_supply', 'currency_value', 'supplier_id', 'discount', 'pending', 'deliv_quant_1', 'deliv_quant_2', 'deliv_quant_3', 'client_id', 'test_qty','order_qty','master_1','element_1','master_2','element_2','master_3','element_3','master_4','element_4','deliv_date_1','deliv_date_2','deliv_date_3','order_date','delivery_date',
'address_delivnote','date_delivnote','desination','transport','zc_delivnote','city_delivnote','date_dispatch', 'con1_euro','con2_euro','con3_euro','con4_euro','con5_euro','con1_dollar','con2_dollar','con3_dollar','con4_dollar','con5_dollar','cot_euro_dollar','total_qty_elements','iva', 'date_delivnote', 'aginterm_ok', 'pay_date','date_dispatch','id_dest_country','id_client','date_invoice','price','price_usd',
'time_cut', 'time_lanthe', 'time_drill', 'time_miling', 'time_welding', 'time_mounting', 'time_pyrometry', 'time_quality', 'time_others', 'time_total', 'start_date', 'end_date', 'qty_ot', 'supplies_id', 'contractual_date', 'verif_m_drawing_date',
'qty_f_orifice_flange', 'qty_f_line_flange', 'qty_f_gasket', 'qty_f_bolts', 'qty_f_plug', 'qty_f_extractor', 'qty_f_plate', 'qty_f_nipple', 'qty_f_handle', 'qty_f_chring', 'qty_f_tube', 'qty_f_piece2', 'qty_t_bar', 'qty_t_tube', 'qty_t_flange', 'qty_t_sensor','qty_t_head','qty_t_btb','qty_t_nippleextcomp','qty_t_spring','qty_t_puntal','qty_t_plug','qty_t_tw','qty_t_extcable','qty_l_body','qty_l_cover','qty_l_studs','qty_l_nipplehex','qty_l_valve','qty_l_flange','qty_l_dv','qty_l_scale','qty_l_illuminator','qty_l_gasketglass','qty_l_glass','qty_l_float','qty_l_mica','qty_l_flags','qty_l_gasketflange','qty_l_nippletub','qty_l_antifrost','time_cut','time_lanthe','time_drill','time_miling','time_welding','time_mounting','time_pyrometry','time_quality','time_others','rawmat_value','totalcut','totallanthe','totaldrill','totalmill','totalweld','totalmounting','totalpyrometry','totalquality','totalother','totaltime',
'id','year','warehouse','machine_id'] else "'{}'".format(value.replace('\'', '\'\''))) for column, value in columns_values])
                        
                        # values = ', '.join(['NULL' if value == '' and column in ['iva'] else (f"'{value}'" if column in ['data_adic1','data_adic2'] else value)for column, value in columns_values])
                    # Creating the SET  and WHERE clause with proper formatting
                        set_clause = ", ".join([f"{column} = {value}" for column, value in zip(columns.split(", ")[1:], values.split(", ")[1:])])
                        # print(set_clause)

                        where_clause = f"id = '\{id_value}\'"

                    # Creating the update query and executing it after checking existing tags and id
                        sql_update = f'UPDATE {table_name} SET {set_clause} WHERE {where_clause}'
                        # print(sql_update)
                        cursor.execute(sql_update)
                        conn.commit()
                        # sql_check = f'SELECT * FROM {table_name} WHERE "id_tag_temp" = \'{id_value}\''
                        # cursor.execute(sql_check)
                        # result_check=cursor.fetchall()


                        # if len(result_check) == 0:
                        #     dlg = QtWidgets.QMessageBox()
                        #     new_icon = QtGui.QIcon()
                        #     new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        #     dlg.setWindowIcon(new_icon)
                        #     dlg.setWindowTitle("ERP EIPSA")
                        #     dlg.setText(f"El ID \'{id_value}\' no existe \n"
                        #                 "Este TAG no se actualizará")
                        #     dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        #     dlg.exec()
                        #     del dlg, new_icon

                        # else:
                        #     cursor.execute(sql_update)
                

            # Closing cursor and database connection
                conn.commit()
                cursor.close()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Datos actualizados con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                print(error)
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

    def format_date(self, value):
        if value == '' or value is None:  # If value is empty, return 'NULL'
            return ''
        try:
            # Try to convert value to date
            date = pd.to_datetime(value, errors='raise')
            return date.strftime('%d/%m/%Y')  # Apply format if it is a date
        except (ValueError, TypeError):
            return value # If it is not valid, return value

#Function for selecting file to import
    def fileselection(self):
        fname = askopenfilename(filetypes=[("Archivos de Excel", "*.xlsx")],
                            title="Seleccionar archivo Excel")
        if fname:
            self.label_name_file.setText("Archivo: " + fname)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    UpdateTableExist_Window = QtWidgets.QMainWindow()
    ui = Ui_UpdateTableExist_Window()
    ui.setupUi(UpdateTableExist_Window)
    UpdateTableExist_Window.show()
    sys.exit(app.exec())