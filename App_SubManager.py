# Form implementation generated from reading ui file 'App_SubManager.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from PyQt6.QtCore import Qt
import psycopg2
import sys
from config import config, get_path
import configparser
from utils.Database_Manager import Database_Connection, Create_DBconnection
from datetime import *
import re
from PDF_Styles import CustomPDF_A3
from PDF_Viewer import PDF_Viewer
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from io import BytesIO
import numpy as np



class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class ImageCalendarWidget(QtWidgets.QCalendarWidget):
    """
    A custom QCalendarWidget that highlights specific dates by painting an image on the calendar cells.

    This widget allows the user to set a list of dates (`task_dates`) and draws a custom image
    on the corresponding calendar cells when these dates are displayed.

    Attributes:
    -----------
    task_dates : list
        A list of QDate objects that represent the dates on which the image will be displayed.
    """
    def __init__(self, parent=None):
        """
        Initializes the ImageCalendarWidget instance.

        Args:
        -----------
        parent : QWidget, optional
            The parent widget, if any. Defaults to None.

        Initializes the `task_dates` attribute as an empty list.
        """
        super().__init__(parent)
        self.task_dates = []

    def set_task_dates(self, dates):
        """
        Sets the dates on which the custom image will be drawn and refreshes the calendar.

        Args:
        -----------
        dates : list of QDate
            A list of QDate objects representing the dates on which the image should appear.
        """
        self.task_dates = dates
        self.updateCells()

    def paintCell(self, painter, rect, date):
        """
        Customizes the painting of calendar cells to include a flag image on specific dates.

        Args:
        -----------
        painter : QPainter
            The QPainter object responsible for rendering the cell.
        rect : QRect
            The rectangular area of the cell to be painted.
        date : QDate
            The date associated with the cell being painted.
        """
        QtWidgets.QCalendarWidget.paintCell(self, painter, rect, date)

        if date in self.task_dates:
            image_path = str(get_path("Resources", "Iconos", "Flag.png"))
            image = QtGui.QImage(image_path)
            if not image.isNull():
                image_scaled = image.scaled(rect.width() // 4, rect.height() // 4, QtCore.Qt.AspectRatioMode.KeepAspectRatio, QtCore.Qt.TransformationMode.SmoothTransformation)
                image_rect = image_scaled.rect()
                image_rect.moveTopRight(rect.topRight() - QtCore.QPoint(2, -5))
                painter.drawImage(image_rect, image_scaled)


class CustomTableWidget(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states,
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text.
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked():
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(str(get_path("Resources", "Iconos", "Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")

        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()

        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()

# Function to obtain the unique matching applied filters
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column_index == 5:
            self.custom_sort_dates(column_index, sortOrder)
        elif column_index == 7:
            self.custom_sort_currency(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

# Function to sort column based on date datatype
    def custom_sort_dates(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function to sort column based on currency datatype
    def custom_sort_currency(self, column, order):
        """
        Custom sorting method for currency-formatted text columns.
        Sorts the specified column based on numeric currency values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()


        indexes = list(range(row_count))

        def parse_currency(text):
            """
            Convierte un string de moneda a float, eliminando símbolos y separadores.
            Adapta según el formato de tu app (coma decimal, punto de miles, etc.)
            """
            if not text:
                return 0.0

            # Eliminar cualquier símbolo no numérico excepto coma/punto
            clean = re.sub(r"[^\d,.-]", "", text)

            # Si hay coma y punto, asumir formato europeo "1.234,56"
            if "," in clean and "." in clean:
                clean = clean.replace(".", "").replace(",", ".")
            # Si solo hay coma, tratamos la coma como decimal
            elif "," in clean:
                clean = clean.replace(",", ".")
            # Si solo hay punto -> ya es decimal estándar

            try:
                return float(clean)
            except ValueError:
                return 0.0

        # Ordenamos usando la conversión
        indexes.sort(key=lambda i: parse_currency(self.item(i, column).text()))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guardar las filas ocultas para restaurarlas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)


# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class Ui_App_SubManager(object):
    """
    Main application window for the submanager app.

        Args:
        name (str): The name of the user.
        username (str): The username of the user.
    """
    def __init__(self, name, username):
        """
        Initializes the main window, setting up the user interface and storing user-specific details.

        Args:
            name (str): The name of the user.
            username (str): The username of the user.
        """
        self.name=name
        self.username=username
        self.pdf_viewer = PDF_Viewer()


    def setupUi(self, App_SubManager):
        """
        Sets up the user interface components for the main application window.

        Args:
            App_SubManager (QtWidgets.QMainWindow): The main window object to set up.
        """
        App_SubManager.setObjectName("App_SubManager")
        App_SubManager.resize(945, 860)
        App_SubManager.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_SubManager.setWindowIcon(icon)
        App_SubManager.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_SubManager)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Logo.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        self.Button_Graphs = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Graphs.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Graphs.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Graphs.setToolTip('Gráficos')
        self.Button_Graphs.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Graphs.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Graphs.setText("")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Chart.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Graphs.setIcon(icon14)
        self.Button_Graphs.setIconSize(QtCore.QSize(40, 40))
        self.Button_Graphs.setObjectName("Button_Graphs")
        self.Header.addWidget(self.Button_Graphs)
        spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem10)
        self.Button_ClientsResume = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ClientsResume.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_ClientsResume.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_ClientsResume.setToolTip('Resumen Clientes')
        self.Button_ClientsResume.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_ClientsResume.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_ClientsResume.setText("")
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Customers.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ClientsResume.setIcon(icon15)
        self.Button_ClientsResume.setIconSize(QtCore.QSize(40, 40))
        self.Button_ClientsResume.setObjectName("Button_ClientsResume")
        self.Header.addWidget(self.Button_ClientsResume)
        spacerItem13 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem13)
        self.Button_Reports = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Reports.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Reports.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Reports.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Reports.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Reports.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Reports.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Reports.setIcon(icon5)
        self.Button_Reports.setIconSize(QtCore.QSize(40, 40))
        self.Button_Reports.setObjectName("Button_Reports")
        self.Button_Reports.setToolTip("Informes")
        self.Header.addWidget(self.Button_Reports)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem3)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setToolTip('Configuración')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "User.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem4 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem4)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_QueryOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOffer.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryOffer.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryOffer.setFont(font)
        self.Button_QueryOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Offer_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOffer.setIcon(icon5)
        self.Button_QueryOffer.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryOffer.setObjectName("Button_QueryOffer")
        self.verticalLayout_3.addWidget(self.Button_QueryOffer)
        self.Button_QueryOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOrder.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryOrder.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryOrder.setFont(font)
        self.Button_QueryOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Order_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOrder.setIcon(icon8)
        self.Button_QueryOrder.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryOrder.setObjectName("Button_QueryOrder")
        self.verticalLayout_3.addWidget(self.Button_QueryOrder)
        self.Button_QueryTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryTag.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryTag.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryTag.setFont(font)
        self.Button_QueryTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTag.setIcon(icon11)
        self.Button_QueryTag.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryTag.setObjectName("Button_QueryTag")
        self.verticalLayout_3.addWidget(self.Button_QueryTag)
        self.Button_QueryDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryDoc.setFont(font)
        self.Button_QueryDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Documents_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryDoc.setIcon(icon4)
        self.Button_QueryDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryDoc.setObjectName("Button_QueryDoc")
        self.verticalLayout_3.addWidget(self.Button_QueryDoc)
        self.Button_Purchasing = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Purchasing.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Purchasing.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Purchasing.setFont(font)
        self.Button_Purchasing.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Purchasing.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Purchasing.setIcon(icon1)
        self.Button_Purchasing.setIconSize(QtCore.QSize(40, 40))
        self.Button_Purchasing.setObjectName("Button_Purchasing")
        self.verticalLayout_3.addWidget(self.Button_Purchasing)
        self.Button_Invoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Invoice.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Invoice.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Invoice.setFont(font)
        self.Button_Invoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Invoice.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Invoice.setIcon(icon1)
        self.Button_Invoice.setIconSize(QtCore.QSize(40, 40))
        self.Button_Invoice.setObjectName("Button_Invoice")
        self.verticalLayout_3.addWidget(self.Button_Invoice)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem5 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem5)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.tableOffer = CustomTableWidget()
        self.tableOffer.setMinimumSize(QtCore.QSize(650, 280))
        self.tableOffer.setObjectName("tableOffer")
        self.tableOffer.setColumnCount(12)
        self.tableOffer.setRowCount(0)
        for i in range(12):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableOffer.setHorizontalHeaderItem(i, item)
        self.tableOffer.verticalHeader().setVisible(False)
        self.tableOffer.setSortingEnabled(False)
        self.tableOffer.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.MainLayout.addWidget(self.tableOffer)
        spacerItem6 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem6)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
        self.Calendar = ImageCalendarWidget(parent=self.frame)
        self.Calendar.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Calendar.sizePolicy().hasHeightForWidth())
        self.Calendar.setSizePolicy(sizePolicy)
        self.Calendar.setMinimumSize(QtCore.QSize(300, 400))
        self.Calendar.setMaximumSize(QtCore.QSize(583, 400))
        self.Calendar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.Calendar.setStyleSheet("QCalendarWidget QWidget{\n"
"background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QTableView{\n"
"    background-color: white;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton {\n"
"    color: white;\n"
"    font-size:20px;\n"
"    icon-size:30px 30px;\n"
"    background-color:rgb(3, 174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QToolButton::hover {\n"
"    background-color : #019ad2;\n"
"}\n"
"\n"
"QCalendarWidget QToolButton::pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border: 3px solid;\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QCalendarWidget QSpinBox{\n"
"    background-color: rgb(255, 255, 255);\n"
"    border: 2px solid;\n"
"    border-color: rgb(3,174, 236);\n"
"}\n"
"\n"
"QCalendarWidget QAbstractItemView:enabled{\n"
"    selection-background-color: rgb(3, 174, 236);\n"
"    selection-color: white;\n"
"}\n"
"\n"
"#qt_calendar_prevmonth {\n"
"    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/back_arrow.png);\n"
"}\n"
"#qt_calendar_nextmonth {\n"
"    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/forward_arrow.png);\n"
"\n"
"}")
        self.Calendar.setSelectedDate(QtCore.QDate.currentDate())
        self.Calendar.setGridVisible(True)
        self.Calendar.setNavigationBarVisible(True)
        self.Calendar.setDateEditEnabled(True)
        self.Calendar.setObjectName("Calendar")
        self.Calendar.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.BottomLayout.addWidget(self.Calendar)
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_SubManager.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_SubManager)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_SubManager.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_SubManager)
        self.statusbar.setObjectName("statusbar")
        App_SubManager.setStatusBar(self.statusbar)
        self.tableOffer.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.retranslateUi(App_SubManager)
        QtCore.QMetaObject.connectSlotsByName(App_SubManager)

        self.Button_QueryOffer.clicked.connect(self.query_offer)
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.Button_QueryTag.clicked.connect(self.query_tag)
        self.Button_QueryDoc.clicked.connect(self.query_documents)
        self.Button_Purchasing.clicked.connect(self.query_purchase)
        self.Button_Invoice.clicked.connect(self.query_invoice)
        self.Button_Graphs.clicked.connect(self.stats_offers)
        self.Button_ClientsResume.clicked.connect(self.clients_generalresume)
        self.Button_Profile.clicked.connect(self.showMenu)
        self.tableOffer.itemDoubleClicked.connect(self.on_item_double_clicked)
        self.tableOffer.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.Button_Reports.clicked.connect(self.generate_report)
        # self.Calendar.activated.connect(self.show_selected_date_tasks)
        # self.Calendar.customContextMenuRequested.connect(self.show_context_menu)

        # self.setup_task_dates()


        commands_appcomercial = ("""
                    SELECT "num_offer","state","responsible","client","final_client",TO_CHAR("presentation_date", 'DD-MM-YYYY'),"material",
                            "offer_amount","probability","notes","important","tracking"
                    FROM offers
                    WHERE (("state" = 'Presentada'
                    OR
                    "state" = 'Registrada'
                    ))
                    ORDER BY "num_offer"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_appcomercial)
            results=cur.fetchall()
            self.tableOffer.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(12):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableOffer.setItem(tablerow, column, it)

                tablerow+=1

            self.tableOffer.verticalHeader().hide()
            self.tableOffer.setItemDelegate(AlignDelegate(self.tableOffer))
            self.tableOffer.setSortingEnabled(False)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, App_SubManager):
        """
        Translates and updates the text of various UI elements in the given App_Comercial.
        """
        _translate = QtCore.QCoreApplication.translate
        App_SubManager.setWindowTitle(_translate("App_SubManager", "ERP EIPSA - Dirección"))
        self.HeaderName.setText(_translate("App_SubManager", self.name))
        self.Button_QueryOffer.setText(_translate("App_SubManager", "    Consultar Ofertas"))
        self.Button_QueryOrder.setText(_translate("App_SubManager", "   Consultar Pedidos"))
        self.Button_QueryTag.setText(_translate("App_SubManager", "    Consultar TAG(s)"))
        self.Button_QueryDoc.setText(_translate("App_SubManager", "    Consultar Docs."))
        self.Button_Purchasing.setText(_translate("App_SubManager", "   Consultar Compras"))
        self.Button_Invoice.setText(_translate("App_SubManager", "   Consultar Facturas"))
        self.tableOffer.setSortingEnabled(True)
        item = self.tableOffer.horizontalHeaderItem(0)
        item.setText(_translate("App_SubManager", "Nº Oferta"))
        item = self.tableOffer.horizontalHeaderItem(1)
        item.setText(_translate("App_SubManager", "Estado"))
        item = self.tableOffer.horizontalHeaderItem(2)
        item.setText(_translate("App_SubManager", "Responsable"))
        item = self.tableOffer.horizontalHeaderItem(3)
        item.setText(_translate("App_SubManager", "Cliente"))
        item = self.tableOffer.horizontalHeaderItem(4)
        item.setText(_translate("App_SubManager", "Cl. Final / Planta"))
        item = self.tableOffer.horizontalHeaderItem(5)
        item.setText(_translate("App_SubManager", "Fecha Pres."))
        item = self.tableOffer.horizontalHeaderItem(6)
        item.setText(_translate("App_SubManager", "Material"))
        item = self.tableOffer.horizontalHeaderItem(7)
        item.setText(_translate("App_SubManager", "Importe"))
        item = self.tableOffer.horizontalHeaderItem(8)
        item.setText(_translate("App_SubManager", "Prob. Adj."))
        item = self.tableOffer.horizontalHeaderItem(9)
        item.setText(_translate("App_SubManager", "Notas"))
        item = self.tableOffer.horizontalHeaderItem(10)
        item.setText(_translate("App_SubManager", "Ptos. Importantes"))
        item = self.tableOffer.horizontalHeaderItem(11)
        item.setText(_translate("App_SubManager", "Seguimiento"))
        __sortingEnabled = self.tableOffer.isSortingEnabled()
        self.tableOffer.setSortingEnabled(False)
        self.tableOffer.setSortingEnabled(__sortingEnabled)

# Function to open window with offer query
    def query_offer(self):
        """
        Opens a new window for querying offers.
        """
        from OfferQuery_Window import Ui_QueryOffer_Window
        self.query_offer_window=Ui_QueryOffer_Window(self.username)
        self.query_offer_window.show()

# Function to open window for query orders
    def query_order(self):
        """
        Opens a new window for querying orders.
        Displays the UI to search and view details of existing orders.
        """
        from OrderQuery_Window import Ui_QueryOrder_Window
        self.query_order_window=QtWidgets.QMainWindow()
        self.ui=Ui_QueryOrder_Window()
        self.ui.setupUi(self.query_order_window)
        self.query_order_window.show()

# Function to open window for query tags
    def query_tag(self):
        """
        Opens a window for editing tags.
        """
        from TAGEdit_Commercial_Window import Ui_EditTags_Commercial_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_tag_com = Create_DBconnection(user_database, password_database)
        if not db_tag_com:
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Commercial_Window(db_tag_com, self.name)
        self.edit_tags_app.showMaximized()

# Function to open window for query documents
    def query_documents(self):
        """
        Opens a new window for querying documents.
        """
        from DocQuery_Window import Ui_QueryDoc_Window
        self.querydoc_menu=QtWidgets.QMainWindow()
        self.ui=Ui_QueryDoc_Window()
        self.ui.setupUi(self.querydoc_menu)
        self.querydoc_menu.show()

# Function to open window with purchase query
    def query_purchase(self):
        """
        Opens a window for querying purchases.
        """
        from PurchasingGeneralQuery_Window import Ui_PurchasingGeneralQuery_Window
        self.purchasegeneral_query_window=QtWidgets.QMainWindow()
        self.ui=Ui_PurchasingGeneralQuery_Window()
        self.ui.setupUi(self.purchasegeneral_query_window)
        self.purchasegeneral_query_window.showMaximized()

# Function to open window with invoice query
    def query_invoice(self):
        """
        Opens a window for querying invoices.
        """
        from InvoiceGeneralQuery_Window import Ui_InvoiceGeneralQuery_Window
        self.invoice_query_window=QtWidgets.QMainWindow()
        self.ui=Ui_InvoiceGeneralQuery_Window()
        self.ui.setupUi(self.invoice_query_window)
        self.invoice_query_window.showMaximized()

# Function to open menu of offer statistics
    def stats_offers(self):
        """
        Opens a new window for viewing offer statistics.
        """
        from OfferStats_Menu import Ui_StatsOffer_Menu
        self.statswindow=QtWidgets.QMainWindow()
        self.ui=Ui_StatsOffer_Menu()
        self.ui.setupUi(self.statswindow)
        self.statswindow.show()

# Function to open clien resume window
    def clients_generalresume(self):
        """
        Opens a new window to display a general resume of client data.
        """
        from ClientsGeneralResume_Window import Ui_ClientsGeneralResume_Window
        self.clients_general_resume_window=QtWidgets.QMainWindow()
        self.ui=Ui_ClientsGeneralResume_Window()
        self.ui.setupUi(self.clients_general_resume_window)
        self.clients_general_resume_window.show()

# Function to open window with tasks query
    def querytask(self, date=None):
        """
        Opens a new window for querying tasks.

        Args:
            date (QDate, optional): The date to filter tasks. Defaults to None.
        """
        from TaskQuery_Window import Ui_QueryTask_Window
        self.querytaskwindow=Ui_QueryTask_Window(self.name, date)
        self.querytaskwindow.show()
        self.querytaskwindow.Button_Cancel.clicked.connect(self.setup_task_dates)

# Function to add a new task
    def newtask(self, date):
        """
        Opens a new window for creating a new task.

        Args:
            date (QDate): The date associated with the new task.
        """
        from TaskAdd_Window import Ui_AddTask_Window
        self.newtaskwindow=QtWidgets.QMainWindow()
        self.ui=Ui_AddTask_Window(self.name, date)
        self.ui.setupUi(self.newtaskwindow)
        self.newtaskwindow.show()
        self.ui.Button_Cancel.clicked.connect(self.setup_task_dates)

# Function to open calendar menu
    def show_context_menu(self, point):
        """
        Displays a context menu at the specified point in the calendar widget.
        Provides options to add or edit tasks for the selected date.

        Args:
            point (QPoint): The location where the context menu will appear.
        """
        selected_date = self.Calendar.selectedDate()
        menu = QMenu(self.centralwidget)

        menu.setStyleSheet("QMenu { border: 1px solid black; width: 150px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")

        action1 = menu.addAction("Agregar tareas")
        action1.triggered.connect(lambda: self.newtask(selected_date))
        action2 = menu.addAction("Editar tareas")
        action2.triggered.connect(lambda: self.querytask(selected_date))

        menu.exec(self.Calendar.mapToGlobal(point))

# Function to open context menu when profile button is clicked
    def showMenu(self):
        """
        Displays a context menu when the profile button is clicked.
        Provides options to edit the password.
        """
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contraseña")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))

# Function to open window for editing password
    def editpassword(self):
        """
        Opens a new window for editing the user's password.
        """
        from PasswordEdit_Window import Ui_EditPasswordWindow
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()

# Function to check if column index of double clicked cell is equal to first column index
    def on_item_double_clicked(self, item):
        """
        Handles the double-click event on items in a table.

        Args:
            item (QTableWidgetItem): The item that was double-clicked.
        """
        if item.column() == 2:
            self.clientresume(item)

        elif item.column() in [9,10,11]:
            cell_content = item.text()
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Ofertas")
            dlg.setText(cell_content)
            dlg.exec()

# Function when double clicked cell is in first column
    def clientresume(self, item):
        """
        Opens a window displaying the resume of a selected client.

        Args:
            item (QTableWidgetItem): The item containing the client's name.
        """
        from ClientResume_Window import Ui_ClientResume_Window
        clientname=item.text()
        self.client_resume_window=QtWidgets.QMainWindow()
        self.ui=Ui_ClientResume_Window(clientname)
        self.ui.setupUi(self.client_resume_window)
        self.client_resume_window.show()

# Function to stablish dates with task assigned to put icon on calendar
    def setup_task_dates(self):
        """
        Sets up task dates for the calendar widget.
        Handles errors with a message box and updates the calendar with task dates.
        """
        commands_loaddatestasks_LB = ("""
                    SELECT "task_date","task"
                    FROM tasks
                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_loaddatestasks_LB)
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dates_with_tasks_raw=[x[0] for x in results]
            dates_with_tasks=list(set(dates_with_tasks_raw))

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()
        # task_dates = [QtCore.QDate.currentDate().addDays(0), QtCore.QDate.currentDate().addDays(3)]
        task_dates = dates_with_tasks
        self.Calendar.set_task_dates(task_dates)

# Function to show tasks of the selected date
    def show_selected_date_tasks(self):
        """
        Displays tasks for the selected date in a message box.
        Handles errors with a message box.
        """
        self.click_count = 0
        selected_date = self.Calendar.selectedDate()
        if self.name == 'Carlos Crespo':
            creator=self.name[0] + self.name[self.name.find(' ')+1] + 'H'
        else:
            creator=self.name[0] + self.name[self.name.find(' ')+1]
        returned = self.get_tasks_for_date(creator, selected_date)

        if returned:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            final_text=''

            for item in returned:
                responsible = item[0]
                tasks = item [1]
                task_text = "<br><br>-".join(tasks)
                final_text += "<br><br>" + f"<b>{responsible}:</b><br>-" + task_text

            dlg.setText(f"<html><body>Tareas para la fecha {selected_date.toString('dd-MM-yyyy')}:{final_text}</body></html>")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()
            del dlg, new_icon

# Function to obtain tasks associated to a date
    def get_tasks_for_date(self, creator, date):
        """
        Retrieves tasks for a specific date.

        Args:
            creator (str): The creator or responsible person for the tasks.
            date (QDate): The date for which tasks are being retrieved.

        Returns:
            list: A list of tasks for the specified date.
        """
        commands_loaddatestasks_LB = ("""
                    SELECT "responsible","task_date","task","state","creator"
                    FROM tasks
                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                    AND
                    "task_date" IS NOT NULL
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_loaddatestasks_LB)
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dict_responsibles_tasks={}

            for i in range(len(results)):
                responsible=results[i][0]
                key=QtCore.QDate(results[i][1].year, results[i][1].month, results[i][1].day)
                value="(" + results[i][4]+") " + results[i][2] + " (" + results[i][3] + ")"

                if responsible not in dict_responsibles_tasks:
                    dict_responsibles_tasks[responsible] = [{key: [value]}]

                else:
                    for item in dict_responsibles_tasks[responsible]:
                        if key not in item:
                            item[key] = [value]

                        else:
                            item[key].append(value)

            value_to_return = []
            for item in dict_responsibles_tasks.keys():
                for element in dict_responsibles_tasks[item]:
                    if date in element:
                        value_to_return.append([item,dict_responsibles_tasks[item][dict_responsibles_tasks[item].index(element)][date]])

            return value_to_return

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableOffer.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableOffer.horizontalHeader().height()
        popup_pos = self.tableOffer.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableOffer.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to generate reports
    def generate_report(self):
        """
        Generates a report based on chosen selection
        """

        query_graph_commercial_1 = ("""
                        SELECT offers.num_offer, offers.state, offers.responsible,
                        COALESCE(offers.offer_amount, 0::money) AS offer_amount, COALESCE(orders.order_amount, 0::money) AS order_amount
                        FROM offers
                        LEFT JOIN orders ON offers.num_offer = orders.num_offer
                        WHERE EXTRACT(YEAR FROM offers.register_date) = EXTRACT(YEAR FROM CURRENT_DATE)
                        """)

        query_graph_commercial_2 = ("""
                            SELECT num_offer, state, responsible, 'offers' AS source_table
                            FROM offers
                            WHERE EXTRACT(YEAR FROM offers.register_date) = EXTRACT(YEAR FROM CURRENT_DATE)

                            UNION ALL

                            SELECT id_offer, state, responsible, 'received_offers' AS source_table
                            FROM received_offers
                            WHERE EXTRACT(YEAR FROM received_offers.register_date) = EXTRACT(YEAR FROM CURRENT_DATE)
                            """)

        query_graph_calculation_1 = ("""
                        SELECT offers.num_offer, offers.state, offers.responsible_calculations,
                        COALESCE(offers.offer_amount, 0::money) AS offer_amount, COALESCE(orders.order_amount, 0::money) AS order_amount
                        FROM offers
                        LEFT JOIN orders ON offers.num_offer = orders.num_offer
                        WHERE EXTRACT(YEAR FROM offers.register_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND offers.responsible_calculations <> 'N/A'
                        """)

        query_graph_calculation_2 = ("""
                            SELECT num_offer, state, responsible_calculations, 'offers' AS source_table
                            FROM offers
                            WHERE EXTRACT(YEAR FROM offers.register_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND responsible_calculations <> 'N/A'
                            """)

        query_last_weekly_summary = ("""
                            SELECT * FROM (
                            SELECT num_offer, state, responsible, client, final_client, TO_CHAR(presentation_date, 'DD/MM/YYYY'), material, offer_amount, 'offers' AS source_table
                            FROM offers
                            WHERE register_date >= date_trunc('week', CURRENT_DATE) AND register_date <= CURRENT_DATE

                            UNION ALL

                            SELECT id_offer as num_offer, state, responsible, client, final_client, '' as presentation_date, material, '' as offer_amount, 'received_offers' AS source_table
                            FROM received_offers
                            WHERE register_date >= date_trunc('week', CURRENT_DATE) AND register_date <= CURRENT_DATE) as final_table

                            ORDER BY array_position(
                            ARRAY['Recibida', 'Registrada', 'Presentada', 'Adjudicada', 'Perdida', 'Declinada'], state), num_offer
                            """)

        query_active_summary = ("""
                            SELECT * FROM (
                            SELECT num_offer, state, responsible, client, final_client, TO_CHAR(presentation_date, 'DD/MM/YYYY'), material, offer_amount, responsible_calculations, probability
                            FROM offers
                            WHERE state IN ('Registrada', 'Presentada')

                            UNION ALL

                            SELECT id_offer, state, responsible, client, final_client, '' as presentation_date, material, '' as offer_amount, '' as responsible_calculation, '' as probability
                            FROM received_offers
                            WHERE state IN ('Recibida')) as final_table

                            ORDER BY state
                            """)

        with Database_Connection(config()) as conn:
            with conn.cursor() as cur:

                cur.execute(query_graph_commercial_1)
                results_graph_commercial_1 = cur.fetchall()
                df_graph_commercial_1 = pd.DataFrame(results_graph_commercial_1, columns=['Nº Oferta', 'Estado', 'Responsable', 'Importe Oferta', 'Importe Pedido'])

                df_graph_commercial_1['Importe Oferta'] = df_graph_commercial_1['Importe Oferta']\
                                            .str.replace('€', '', regex=False) \
                                            .str.replace('.', '', regex=False) \
                                            .str.replace(',', '.', regex=False) \
                                            .astype(float)

                df_graph_commercial_1['Importe Pedido'] = df_graph_commercial_1['Importe Pedido']\
                                            .str.replace('€', '', regex=False) \
                                            .str.replace('.', '', regex=False) \
                                            .str.replace(',', '.', regex=False) \
                                            .astype(float)

                df_graph_commercial_1['Importe Final'] = df_graph_commercial_1.apply(lambda row: row['Importe Pedido'] if row['Estado'] == 'Adjudicada' else row['Importe Oferta'], axis=1)

                cur.execute(query_graph_commercial_2)
                results_graph_commercial_2 = cur.fetchall()
                df_graph_commercial_2 = pd.DataFrame(results_graph_commercial_2, columns=['Nº Oferta', 'Estado', 'Responsable', 'Tabla'])

                cur.execute(query_graph_calculation_1)
                results_graph_calculation_1 = cur.fetchall()
                df_graph_calculation_1 = pd.DataFrame(results_graph_calculation_1, columns=['Nº Oferta', 'Estado', 'Responsable', 'Importe Oferta', 'Importe Pedido'])

                df_graph_calculation_1['Importe Oferta'] = df_graph_calculation_1['Importe Oferta']\
                                            .str.replace('€', '', regex=False) \
                                            .str.replace('.', '', regex=False) \
                                            .str.replace(',', '.', regex=False) \
                                            .astype(float)

                df_graph_calculation_1['Importe Pedido'] = df_graph_calculation_1['Importe Pedido']\
                                            .str.replace('€', '', regex=False) \
                                            .str.replace('.', '', regex=False) \
                                            .str.replace(',', '.', regex=False) \
                                            .astype(float)

                df_graph_calculation_1['Importe Final'] = df_graph_calculation_1.apply(lambda row: row['Importe Pedido'] if row['Estado'] == 'Adjudicada' else row['Importe Oferta'], axis=1)

                cur.execute(query_graph_calculation_2)
                results_graph_calculation_2 = cur.fetchall()
                df_graph_calculation_2 = pd.DataFrame(results_graph_calculation_2, columns=['Nº Oferta', 'Estado', 'Responsable', 'Tabla'])

                cur.execute(query_last_weekly_summary)
                results_weekly = cur.fetchall()
                df_weekly = pd.DataFrame(results_weekly, columns=['Nº Oferta', 'Estado', 'Responsable', 'Cliente', 'Cl. Final', 'Fecha Pres.', 'Material', 'Importe', 'Tabla'])

                df_weekly['Importe Euros'] = df_weekly['Importe']\
                                            .str.replace('€', '', regex=False) \
                                            .str.replace('.', '', regex=False) \
                                            .str.replace(',', '.', regex=False) \
                                            .astype(float)

                cur.execute(query_active_summary)
                results_active = cur.fetchall()
                df_active = pd.DataFrame(results_active, columns=['Nº Oferta', 'Estado', 'Responsable', 'Cliente', 'Cl. Final', 'Fecha Pres.', 'Material', 'Importe', 'Responsable Cálculo', 'Probabilidad'])

                df_active['Importe Euros'] = df_active['Importe']\
                                            .str.replace('€', '', regex=False) \
                                            .str.replace('.', '', regex=False) \
                                            .str.replace(',', '.', regex=False) \
                                            .astype(float)

        pdf = CustomPDF_A3()

        pdf.add_font('DejaVuSansCondensed', '', str(get_path("Resources", "Iconos", "DejaVuSansCondensed.ttf")))
        pdf.add_font('DejaVuSansCondensed-Bold', '', str(get_path("Resources", "Iconos", "DejaVuSansCondensed-Bold.ttf")))

        pdf.set_auto_page_break(auto=True)
        pdf.set_margins(0.5, 0.5)

        pdf.set_fill_color(3, 174, 236)

        pdf.add_page()

        pdf.image(str(get_path("Resources", "Iconos", "Eipsa Logo Blanco.png")), 1, 0.8, 7, 2)
        pdf.ln(3)

        pdf.set_font('Helvetica', 'B', size=6)
        y_position = 0.5
        pdf.set_xy(16.05, y_position)
        pdf.fixed_height_multicell(3, 0.6, 'TOTAL IMPORTE RECIBIDO ' + str(datetime.today().year), fill=True)
        pdf.set_xy(19.05, y_position)
        pdf.cell(0.4, 0.6,'')
        pdf.fixed_height_multicell(3, 0.6, 'TOTAL IMPORTE OFERTADO ' + str(datetime.today().year), fill=True)
        pdf.set_xy(22.45, y_position)
        pdf.cell(0.4, 0.6,'')
        pdf.fixed_height_multicell(3, 0.6, 'TOTAL IMPORTE BUDGETARY ' + str(datetime.today().year), fill=True)
        pdf.set_xy(25.85, y_position)
        pdf.cell(0.4, 0.6, '')
        pdf.fixed_height_multicell(3, 0.6, 'TOTAL IMPORTE ADJUDICADO ' + str(datetime.today().year), fill=True)

        pdf.set_font('DejaVuSansCondensed-Bold','', size=6)
        y_position = 1.1
        pdf.set_xy(16.05, y_position)
        pdf.fixed_height_multicell(3, 0.3, self.euro_format(df_graph_commercial_1['Importe Oferta'].sum()), fill=False)
        pdf.set_xy(19.05, y_position)
        pdf.cell(0.4, 0.6,'')
        pdf.fixed_height_multicell(3, 0.3, self.euro_format(df_graph_commercial_1[df_graph_commercial_1['Estado'] != 'Budgetary']['Importe Oferta'].sum()), fill=False)
        pdf.set_xy(22.45, y_position)
        pdf.cell(0.4, 0.3, '')
        pdf.fixed_height_multicell(3, 0.3, self.euro_format(df_graph_commercial_1[df_graph_commercial_1['Estado'] == 'Budgetary']['Importe Oferta'].sum()), fill=False)
        pdf.set_xy(25.85, y_position)
        pdf.cell(0.4, 0.3, '')
        pdf.fixed_height_multicell(3, 0.3, self.euro_format(df_graph_commercial_1[df_graph_commercial_1['Estado'] == 'Adjudicada']['Importe Oferta'].sum()), fill=False)

        pdf.set_font('Helvetica', 'B', size=6)
        y_position = 1.6
        pdf.set_xy(16.05, y_position)
        pdf.fixed_height_multicell(3, 0.6, 'TOTAL OFERTAS RECIBIDAS ' + str(datetime.today().year), fill=True)
        pdf.set_xy(19.05, y_position)
        pdf.cell(0.4, 0.6, '')
        pdf.fixed_height_multicell(3, 0.6, 'TOTAL OFERTAS REALIZADAS ' + str(datetime.today().year), fill=True)
        pdf.set_xy(22.45, y_position)
        pdf.cell(0.4, 0.6, '')
        pdf.fixed_height_multicell(3, 0.6, 'TOTAL BUDGETARIES ' + str(datetime.today().year), fill=True)
        pdf.set_xy(25.85, y_position)
        pdf.cell(0.4, 0.6, '')
        pdf.fixed_height_multicell(3, 0.6, 'TOTAL OFERTAS ADJUDICADAS ' + str(datetime.today().year), fill=True)
        pdf.set_xy(26.4, y_position)

        pdf.set_font('DejaVuSansCondensed-Bold','', size=6)
        y_position = 2.2
        pdf.set_xy(16.05, y_position)
        pdf.fixed_height_multicell(3, 0.3, str(df_graph_commercial_2.shape[0]), fill=False)
        pdf.set_xy(19.05, y_position)
        pdf.cell(0.4, 0.3, '')
        pdf.fixed_height_multicell(3, 0.3, str(df_graph_commercial_2[df_graph_commercial_2['Estado'] != 'Budgetary'].shape[0]), fill=False)
        pdf.set_xy(22.45, y_position)
        pdf.cell(0.4, 0.3, '')
        pdf.fixed_height_multicell(3, 0.3, str(df_graph_commercial_2[df_graph_commercial_2['Estado'] == 'Budgetary'].shape[0]), fill=False)
        pdf.set_xy(25.85, y_position)
        pdf.cell(0.4, 0.3, '')
        pdf.fixed_height_multicell(3, 0.3, str(df_graph_commercial_2[df_graph_commercial_2['Estado'] == 'Adjudicada'].shape[0]), fill=False)

        pivot_table_commercial_1 = df_graph_commercial_1.pivot_table(index='Responsable', columns='Estado', values='Importe Final', aggfunc='sum', fill_value=0)

        categories = pivot_table_commercial_1.index.tolist()
        states = pivot_table_commercial_1.columns.tolist()
        values = pivot_table_commercial_1.values

        x = np.arange(len(categories))           # Categories position
        width = 0.8 / len(states)               # Bar width

        state_colors = {
            "Adjudicada": "#2ca02c",
            "Presentada": "#ffe70eda",
            "Registrada": "#9467bd",
            "Perdida": "#d62728",
            "Declinada": "#ff7f0e",
            "Budgetary": "#949193"
        }

        fig, ax = plt.subplots(figsize=(8,5))

        for i, state in enumerate(states):
            color = state_colors.get(state, "#119efc")
            ax.bar(x + i*width, values[:, i], width=width, label=state, color=color)

        ax.set_xticks(x + width*(len(states)-1)/2)  # Center ticks
        ax.set_xticklabels(categories)

        ax.yaxis.set_major_formatter(FuncFormatter(self.euro_format_axis))
        ax.set_ylabel("Importe")
        ax.set_title("Importes por responsable y estado")
        ax.legend()

        img_graph_1 = BytesIO()
        plt.savefig(img_graph_1, format='PNG')
        plt.close()
        img_graph_1.seek(0)

        pivot_table_commercial_2 = df_graph_commercial_2.pivot_table(index='Responsable', columns='Estado', values='Nº Oferta', aggfunc='count', fill_value=0)

        categories = pivot_table_commercial_2.index.tolist()
        states = pivot_table_commercial_2.columns.tolist()
        values = pivot_table_commercial_2.values

        x = np.arange(len(categories))           # Categories position
        width = 0.8 / len(states)               # Bar width

        state_colors = {
            "Adjudicada": "#2ca02c",
            "Budgetary": "#949193",
            "Declinada": "#ff7f0e",
            "No Ofertada": "#F511A9",
            "Perdida": "#d62728",
            "Presentada": "#ffe70eda",
            "Registrada": "#9467bd",
        }

        fig, ax = plt.subplots(figsize=(8,5))

        for i, state in enumerate(states):
            color = state_colors.get(state, "#119efc")
            ax.bar(x + i*width, values[:, i], width=width, label=state, color=color)

        ax.set_xticks(x + width*(len(states)-1)/2)  # Center ticks
        ax.set_xticklabels(categories)

        ax.set_ylabel("Recuento")
        ax.set_title("Recuento de ofertas por estado")
        ax.legend()

        img_graph_2 = BytesIO()
        plt.savefig(img_graph_2, format='PNG', bbox_inches='tight')
        plt.close()
        img_graph_2.seek(0)

        y_position = 3
        pdf.image(img_graph_1, x=2.5, y=y_position, w=9.8, h=4.5)
        pdf.image(img_graph_2, x=16.95, y=y_position, w=9.8, h=4.5)
        pdf.ln(5)

        pivot_table_calculation_1 = df_graph_calculation_1.pivot_table(index='Responsable', columns='Estado', values='Importe Final', aggfunc='sum', fill_value=0)

        categories = pivot_table_calculation_1.index.tolist()
        states = pivot_table_calculation_1.columns.tolist()
        values = pivot_table_calculation_1.values

        x = np.arange(len(categories))           # Categories position
        width = 0.8 / len(states)               # Bar width

        state_colors = {
            "Adjudicada": "#2ca02c",
            "Budgetary": "#949193",
            "Declinada": "#ff7f0e",
            "No Ofertada": "#F511A9",
            "Perdida": "#d62728",
            "Presentada": "#ffe70eda",
            "Registrada": "#9467bd",
        }

        fig, ax = plt.subplots(figsize=(8,5))

        for i, state in enumerate(states):
            color = state_colors.get(state, "#119efc")
            ax.bar(x + i*width, values[:, i], width=width, label=state, color=color)

        ax.set_xticks(x + width*(len(states)-1)/2)  # Center ticks
        ax.set_xticklabels(categories)

        ax.yaxis.set_major_formatter(FuncFormatter(self.euro_format_axis))
        ax.set_ylabel("Importe")
        ax.set_title("Importes por responsable y estado")
        ax.legend()

        img_graph_3 = BytesIO()
        plt.savefig(img_graph_3, format='PNG')
        plt.close()
        img_graph_3.seek(0)

        pivot_table_calculation_2 = df_graph_calculation_2.pivot_table(index='Responsable', columns='Estado', values='Nº Oferta', aggfunc='count', fill_value=0)

        categories = pivot_table_calculation_2.index.tolist()
        states = pivot_table_calculation_2.columns.tolist()
        values = pivot_table_calculation_2.values

        x = np.arange(len(categories))           # Categories position
        width = 0.8 / len(states)               # Bar width

        state_colors = {
            "Adjudicada": "#2ca02c",
            "Presentada": "#ffe70eda",
            "Registrada": "#9467bd",
            "Perdida": "#d62728",
            "Declinada": "#ff7f0e",
            "Budgetary": "#949193"
        }

        fig, ax = plt.subplots(figsize=(8,5))

        for i, state in enumerate(states):
            color = state_colors.get(state, "#119efc")
            ax.bar(x + i*width, values[:, i], width=width, label=state, color=color)

        ax.set_xticks(x + width*(len(states)-1)/2)  # Center ticks
        ax.set_xticklabels(categories)

        ax.set_ylabel("Recuento")
        ax.set_title("Recuento de ofertas por estado")
        ax.legend()

        img_graph_4 = BytesIO()
        plt.savefig(img_graph_4, format='PNG', bbox_inches='tight')
        plt.close()
        img_graph_4.seek(0)

        y_position = pdf.get_y()
        pdf.image(img_graph_3, x=2.5, y=y_position, w=9.8, h=4.5)
        pdf.image(img_graph_4, x=16.95, y=y_position, w=9.8, h=4.5)
        pdf.ln(5)

        pdf.set_fill_color(255, 255, 64)
        pdf.set_font('Helvetica', 'B', size=7)
        pdf.cell(19.75, 0.5, 'RESUMEN SEMANAL', fill=True)
        pdf.cell(3, 0.5, (datetime.today() - timedelta(days=datetime.today().weekday())).strftime('%d/%m/%Y'), fill=True, align='C')
        pdf.cell(3, 0.5, '-', fill=True, align='C')
        pdf.cell(3, 0.5, (datetime.today().strftime('%d/%m/%Y')), fill=True, align='C')
        pdf.ln(0.5)

        pdf.set_fill_color(3, 174, 236)
        pdf.cell(4, 0.5, 'RECIBIDAS:')
        pdf.cell(4, 0.5, str(df_weekly.shape[0]), align='L')
        pdf.cell(2.35, 0.5, '')
        pdf.cell(4, 0.5, 'REALIZADAS:')
        pdf.cell(4, 0.5, str(df_weekly[df_weekly['Tabla'] == 'offers'].shape[0]), align='L')
        pdf.cell(2.35, 0.5, '')
        pdf.cell(4, 0.5, 'ADJUDICADAS:')
        pdf.cell(4, 0.5, str(df_weekly[df_weekly['Estado'] == 'Adjudicada'].shape[0]), align='L')
        pdf.ln(0.5)

        pdf.cell(3, 0.3, 'OFERTA', fill=True, border=1, align='C')
        pdf.cell(3, 0.3, 'ESTADO', fill=True, border=1, align='C')
        pdf.cell(2, 0.3, 'RESP.', fill=True, border=1, align='C')
        pdf.cell(5.5, 0.3, 'CLIENTE', fill=True, border=1, align='C')
        pdf.cell(5.5, 0.3, 'CLIENTE FINAL', fill=True, border=1, align='C')
        pdf.cell(3, 0.3, 'F. PRES.', fill=True, border=1, align='C')
        pdf.cell(4.25, 0.3, 'MATERIAL', fill=True, border=1, align='C')
        pdf.cell(2.5, 0.3, 'IMPORTE', fill=True, border=1, align='C')
        pdf.ln()

        pdf.set_font('DejaVuSansCondensed', size=6)
        for _, row in df_weekly.iterrows():
            # getting the required height of the row
            h_client = pdf.get_multicell_height(5.5, 0.3, '' if row['Cliente'] is None else str(row['Cliente']))
            h_clfinal = pdf.get_multicell_height(5.5, 0.3, '' if row['Cl. Final'] is None else str(row['Cl. Final']))
            h_material = pdf.get_multicell_height(4.25, 0.3, '' if row['Material'] is None else str(row['Material']))

            row_height = max(h_client, h_clfinal, h_material, 0.3)  # altura mínima 0.3

            # Setting values for table
            pdf.cell(3, row_height, '' if row['Nº Oferta'] is None else str(row['Nº Oferta']), border=1, align='C')
            pdf.cell(3, row_height, '' if row['Estado'] is None else str(row['Estado']), border=1, align='C')
            pdf.cell(2, row_height, '' if row['Responsable'] is None else str(row['Responsable']), border=1, align='C')

            if h_client > h_clfinal and h_client > h_material:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(5.5, 0.3, '' if row['Cliente'] is None else str(row['Cliente']), border=1, align='C')
                pdf.set_xy(x + 5.5, y)  # move to correct position
            else:
                pdf.cell(5.5, row_height, '' if row['Cliente'] is None else str(row['Cliente']), border=1, align='C')

            if h_clfinal > h_client and h_clfinal > h_material:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(5.5, 0.3, '' if row['Cl. Final'] is None else str(row['Cl. Final']), border=1, align='C')
                pdf.set_xy(x + 5.5, y)
            else:
                pdf.cell(5.5, row_height, '' if row['Cl. Final'] is None else str(row['Cl. Final']), border=1, align='C')

            pdf.cell(3, row_height, '' if row['Fecha Pres.'] is None else str(row['Fecha Pres.']), border=1, align='C')

            if h_material > h_client and h_material > h_clfinal:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(4.25, 0.3, '' if row['Material'] is None else str(row['Material']), border=1, align='C')
                pdf.set_xy(x + 4.25, y)
            else:
                pdf.cell(4.25, row_height, '' if row['Material'] is None else str(row['Material']), border=1, align='C')

            pdf.cell(2.5, row_height, '' if row['Importe'] is None else str(row['Importe']), border=1, align='C')
            pdf.ln(row_height)

        pdf.set_font('DejaVuSansCondensed-Bold', size=7)
        pdf.cell(22, 0.3, '')
        pdf.cell(4.25, 0.3, 'TOTAL:', align='R')
        pdf.cell(2.5, 0.3, self.euro_format(df_weekly['Importe Euros'].sum()), align='C')
        pdf.ln(0.5)

        pdf.set_fill_color(255, 255, 64)
        pdf.cell(28.75, 0.5, 'OFERTAS EN ACTIVO', fill=True)
        pdf.ln(0.5)

        pdf.set_fill_color(3, 174, 236)

        df_received = df_active[df_active['Estado'] == 'Recibida'].sort_values(by=['Responsable', 'Nº Oferta'])

        if df_received.shape[0] > 0:
            pdf.cell(3, 0.5, 'RECIBIDAS:')
            pdf.cell(3, 0.5, str(df_received.shape[0]), align='L')
            pdf.ln(0.5)

            pdf.cell(2.25, 0.3, 'OFERTA', fill=True, border=1, align='C')
            pdf.cell(2.25, 0.3, 'RESP.', fill=True, border=1, align='C')
            pdf.cell(2.25, 0.3, 'CÁLCULO', fill=True, border=1, align='C')
            pdf.cell(5, 0.3, 'CLIENTE', fill=True, border=1, align='C')
            pdf.cell(5, 0.3, 'CLIENTE FINAL', fill=True, border=1, align='C')
            pdf.cell(2, 0.3, 'F. PRES.', fill=True, border=1, align='C')
            pdf.cell(2, 0.3, 'PROB.', fill=True, border=1, align='C')
            pdf.cell(5, 0.3, 'MATERIAL', fill=True, border=1, align='C')
            pdf.cell(3, 0.3, 'IMPORTE', fill=True, border=1, align='C')
            pdf.ln()

            pdf.set_font('DejaVuSansCondensed', size=6)
            for _, row in df_received.iterrows():
                # getting the required height of the row
                h_client = pdf.get_multicell_height(5, 0.3, '' if row['Cliente'] is None else str(row['Cliente']))
                h_clfinal = pdf.get_multicell_height(5, 0.3, '' if row['Cl. Final'] is None else str(row['Cl. Final']))
                h_material = pdf.get_multicell_height(5, 0.3, '' if row['Material'] is None else str(row['Material']))

                row_height = max(h_client, h_clfinal, h_material, 0.3)  # altura mínima 0.3

                # Setting values for table
                pdf.cell(2.25, row_height, '' if row['Nº Oferta'] is None else str(row['Nº Oferta']), border=1, align='C')
                pdf.cell(2.25, row_height, '' if row['Responsable'] is None else str(row['Responsable']), border=1, align='C')
                pdf.cell(2.25, row_height, '' if row['Responsable Cálculo'] is None else str(row['Responsable Cálculo']), border=1, align='C')

                if h_client > h_clfinal and h_client > h_material:
                    x = pdf.get_x()
                    y = pdf.get_y()
                    pdf.multi_cell(5, 0.3, '' if row['Cliente'] is None else str(row['Cliente']), border=1, align='C')
                    pdf.set_xy(x + 5, y)  # move to correct position
                else:
                    pdf.cell(5, row_height, '' if row['Cliente'] is None else str(row['Cliente']), border=1, align='C')

                if h_clfinal > h_client and h_clfinal > h_material:
                    x = pdf.get_x()
                    y = pdf.get_y()
                    pdf.multi_cell(5, 0.3, '' if row['Cl. Final'] is None else str(row['Cl. Final']), border=1, align='C')
                    pdf.set_xy(x + 5, y)
                else:
                    pdf.cell(5, row_height, '' if row['Cl. Final'] is None else str(row['Cl. Final']), border=1, align='C')

                pdf.cell(2, row_height, '' if row['Fecha Pres.'] is None else str(row['Fecha Pres.']), border=1, align='C')
                pdf.cell(2, row_height, '' if row['Probabilidad'] is None else str(row['Probabilidad']), border=1, align='C')

                if h_material > h_client and h_material > h_clfinal:
                    x = pdf.get_x()
                    y = pdf.get_y()
                    pdf.multi_cell(5, 0.3, '' if row['Material'] is None else str(row['Material']), border=1, align='C')
                    pdf.set_xy(x + 5, y)
                else:
                    pdf.cell(5, row_height, '' if row['Material'] is None else str(row['Material']), border=1, align='C')

                pdf.cell(3, row_height, '' if row['Importe'] is None else str(row['Importe']), border=1, align='C')
                pdf.ln(row_height)

            pdf.set_font('DejaVuSansCondensed-Bold', size=7)
            pdf.cell(20.75, 0.3, '')
            pdf.cell(5, 0.3, 'TOTAL:', align='R')
            pdf.cell(3, 0.3, self.euro_format(df_received['Importe Euros'].sum()), align='C')
            pdf.ln()

        df_registered = df_active[df_active['Estado'] == 'Registrada'].sort_values(by=['Responsable', 'Nº Oferta'])

        pdf.set_font('Helvetica', 'B', size=7)
        pdf.cell(3, 0.5, 'REGISTRADAS:')
        pdf.cell(3, 0.5, str(df_registered.shape[0]), align='L')
        pdf.ln(0.5)

        pdf.cell(2.25, 0.3, 'OFERTA', fill=True, border=1, align='C')
        pdf.cell(2.25, 0.3, 'RESP.', fill=True, border=1, align='C')
        pdf.cell(2.25, 0.3, 'CÁLCULO', fill=True, border=1, align='C')
        pdf.cell(5, 0.3, 'CLIENTE', fill=True, border=1, align='C')
        pdf.cell(5, 0.3, 'CLIENTE FINAL', fill=True, border=1, align='C')
        pdf.cell(2, 0.3, 'F. PRES.', fill=True, border=1, align='C')
        pdf.cell(2, 0.3, 'PROB.', fill=True, border=1, align='C')
        pdf.cell(5, 0.3, 'MATERIAL', fill=True, border=1, align='C')
        pdf.cell(3, 0.3, 'IMPORTE', fill=True, border=1, align='C')
        pdf.ln()

        pdf.set_font('DejaVuSansCondensed', size=6)
        for _, row in df_registered.iterrows():
            # getting the required height of the row
            h_client = pdf.get_multicell_height(5, 0.3, '' if row['Cliente'] is None else str(row['Cliente']))
            h_clfinal = pdf.get_multicell_height(5, 0.3, '' if row['Cl. Final'] is None else str(row['Cl. Final']))
            h_material = pdf.get_multicell_height(5, 0.3, '' if row['Material'] is None else str(row['Material']))

            row_height = max(h_client, h_clfinal, h_material, 0.3)  # altura mínima 0.3

            # Setting values for table
            pdf.cell(2.25, row_height, '' if row['Nº Oferta'] is None else str(row['Nº Oferta']), border=1, align='C')
            pdf.cell(2.25, row_height, '' if row['Responsable'] is None else str(row['Responsable']), border=1, align='C')
            pdf.cell(2.25, row_height, '' if row['Responsable Cálculo'] is None else str(row['Responsable Cálculo']), border=1, align='C')

            if h_client > h_clfinal and h_client > h_material:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(5, 0.3, '' if row['Cliente'] is None else str(row['Cliente']), border=1, align='C')
                pdf.set_xy(x + 5, y)  # move to correct position
            else:
                pdf.cell(5, row_height, '' if row['Cliente'] is None else str(row['Cliente']), border=1, align='C')

            if h_clfinal > h_client and h_clfinal > h_material:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(5, 0.3, '' if row['Cl. Final'] is None else str(row['Cl. Final']), border=1, align='C')
                pdf.set_xy(x + 5, y)
            else:
                pdf.cell(5, row_height, '' if row['Cl. Final'] is None else str(row['Cl. Final']), border=1, align='C')

            pdf.cell(2, row_height, '' if row['Fecha Pres.'] is None else str(row['Fecha Pres.']), border=1, align='C')
            pdf.cell(2, row_height, '' if row['Probabilidad'] is None else str(row['Probabilidad']), border=1, align='C')

            if h_material > h_client and h_material > h_clfinal:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(5, 0.3, '' if row['Material'] is None else str(row['Material']), border=1, align='C')
                pdf.set_xy(x + 5, y)
            else:
                pdf.cell(5, row_height, '' if row['Material'] is None else str(row['Material']), border=1, align='C')

            pdf.cell(3, row_height, '' if row['Importe'] is None else str(row['Importe']), border=1, align='C')
            pdf.ln(row_height)

        pdf.set_font('DejaVuSansCondensed-Bold', size=7)
        pdf.cell(20.75, 0.3, '')
        pdf.cell(5, 0.3, 'TOTAL:', align='R')
        pdf.cell(3, 0.3, self.euro_format(df_registered['Importe Euros'].sum()), align='C')
        pdf.ln()

        df_presented = df_active[df_active['Estado'] == 'Presentada'].sort_values(by=['Responsable', 'Nº Oferta'])

        pdf.set_font('Helvetica', 'B', size=7)
        pdf.cell(3, 0.5, 'PRESENTADAS:')
        pdf.cell(3, 0.5, str(df_presented.shape[0]), align='L')
        pdf.ln(0.5)

        pdf.cell(2.25, 0.3, 'OFERTA', fill=True, border=1, align='C')
        pdf.cell(2.25, 0.3, 'RESP.', fill=True, border=1, align='C')
        pdf.cell(2.25, 0.3, 'CÁLCULO', fill=True, border=1, align='C')
        pdf.cell(5, 0.3, 'CLIENTE', fill=True, border=1, align='C')
        pdf.cell(5, 0.3, 'CLIENTE FINAL', fill=True, border=1, align='C')
        pdf.cell(2, 0.3, 'F. PRES.', fill=True, border=1, align='C')
        pdf.cell(2, 0.3, 'PROB.', fill=True, border=1, align='C')
        pdf.cell(5, 0.3, 'MATERIAL', fill=True, border=1, align='C')
        pdf.cell(3, 0.3, 'IMPORTE', fill=True, border=1, align='C')
        pdf.ln()

        pdf.set_font('DejaVuSansCondensed', size=6)
        for _, row in df_presented.iterrows():
            # getting the required height of the row
            h_client = pdf.get_multicell_height(5, 0.3, '' if row['Cliente'] is None else str(row['Cliente']))
            h_clfinal = pdf.get_multicell_height(5, 0.3, '' if row['Cl. Final'] is None else str(row['Cl. Final']))
            h_material = pdf.get_multicell_height(5, 0.3, '' if row['Material'] is None else str(row['Material']))

            row_height = max(h_client, h_clfinal, h_material, 0.3)  # altura mínima 0.3

            # Setting values for table
            pdf.cell(2.25, row_height, '' if row['Nº Oferta'] is None else str(row['Nº Oferta']), border=1, align='C')
            pdf.cell(2.25, row_height, '' if row['Responsable'] is None else str(row['Responsable']), border=1, align='C')
            pdf.cell(2.25, row_height, '' if row['Responsable Cálculo'] is None else str(row['Responsable Cálculo']), border=1, align='C')

            if h_client > h_clfinal and h_client > h_material:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(5, 0.3, '' if row['Cliente'] is None else str(row['Cliente']), border=1, align='C')
                pdf.set_xy(x + 5, y)  # move to correct position
            else:
                pdf.cell(5, row_height, '' if row['Cliente'] is None else str(row['Cliente']), border=1, align='C')

            if h_clfinal > h_client and h_clfinal > h_material:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(5, 0.3, '' if row['Cl. Final'] is None else str(row['Cl. Final']), border=1, align='C')
                pdf.set_xy(x + 5, y)
            else:
                pdf.cell(5, row_height, '' if row['Cl. Final'] is None else str(row['Cl. Final']), border=1, align='C')

            pdf.cell(2, row_height, '' if row['Fecha Pres.'] is None else str(row['Fecha Pres.']), border=1, align='C')
            pdf.cell(2, row_height, '' if row['Probabilidad'] is None else str(row['Probabilidad']), border=1, align='C')

            if h_material > h_client and h_material > h_clfinal:
                x = pdf.get_x()
                y = pdf.get_y()
                pdf.multi_cell(5, 0.3, '' if row['Material'] is None else str(row['Material']), border=1, align='C')
                pdf.set_xy(x + 5, y)
            else:
                pdf.cell(5, row_height, '' if row['Material'] is None else str(row['Material']), border=1, align='C')

            pdf.cell(3, row_height, '' if row['Importe'] is None else str(row['Importe']), border=1, align='C')
            pdf.ln(row_height)

        pdf.set_font('DejaVuSansCondensed-Bold', size=7)
        pdf.cell(20.75, 0.3, '')
        pdf.cell(5, 0.3, 'TOTAL:', align='R')
        pdf.cell(3, 0.3, self.euro_format(df_presented['Importe Euros'].sum()), align='C')

        pdf_buffer = pdf.output()

        temp_file_path = str(get_path("Resources", "pdfviewer", "temp", "commercial_report.pdf"))

        with open(temp_file_path, "wb") as temp_file:
            temp_file.write(pdf_buffer)

        self.pdf_viewer.open(QtCore.QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
        self.pdf_viewer.showMaximized()


    def euro_format(self, valor):
        return f"{valor:,.2f} €".replace(',', 'X').replace('.', ',').replace('X', '.')


    def euro_format_axis(self, x, pos):
        if x >= 1_000_000:
            return f'{x/1_000_000:.1f}M€'.replace('.', ',')
        elif x >= 1_000:
            return f'{x/1_000:.0f}k€'.replace('.', ',')
        else:
            return f'{x:.0f}€'







if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    App_SubManager = QtWidgets.QMainWindow()
    ui = Ui_App_SubManager('Fernando Gallego','f.gallego')
    ui.setupUi(App_SubManager)
    App_SubManager.showMaximized()
    sys.exit(app.exec())