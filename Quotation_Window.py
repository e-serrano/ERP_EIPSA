# Form implementation generated from reading ui file 'Quotation_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import datetime
import os
from datetime import *

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class CustomTableWidgetQuotation(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())


    def filter_by_text(self, column_index):
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        if column_index == 2:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)


    def custom_sort(self, column, order):
    # Obtén la cantidad de filas en la tabla
        row_count = self.rowCount()

        # Crea una lista de índices ordenados según las fechas
        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        # Si el orden es descendente, invierte la lista
        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guarda el estado actual de las filas ocultas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        # Actualiza las filas en la tabla en el orden ordenado
        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class CustomTableWidgetRecord(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())


    def filter_by_text(self, column_index):
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)


    def custom_sort(self, column, order):
    # Obtén la cantidad de filas en la tabla
        row_count = self.rowCount()

        # Crea una lista de índices ordenados según las fechas
        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        # Si el orden es descendente, invierte la lista
        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guarda el estado actual de las filas ocultas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        # Actualiza las filas en la tabla en el orden ordenado
        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_Quotation_Window(QtWidgets.QMainWindow):
    def __init__(self, username):
        super().__init__()
        self.username=username
        self.setupUi(self)

    def setupUi(self, Quotation_Window):
        Quotation_Window.setObjectName("Quotation_Window")
        Quotation_Window.resize(int(1174//1.5), int(604//1.5))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Quotation_Window.setWindowIcon(icon)
        if self.username == 'd.marquez':
            Quotation_Window.setStyleSheet("QWidget {\n"
    "background-color: #121212; color: rgb(255, 255, 255)\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 13px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .2em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    "QComboBox:editable {\n"
    "border: 1px solid white;\n"
    "border-radius: 3px;\n"
    "}\n"
    "QComboBox QAbstractItemView{\n"
    "min-width: 1200px;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item {\n"
    "min-height: 35px;\n"
    "border: .5px solid white;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item:hover {\n"
    "background-color: blue;\n"
    "}"
    )
        else:
            Quotation_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid white;\n"
"}\n"
"\n"
"QComboBox QAbstractItemView{\n"
    "min-width: 1200px;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item {\n"
    "min-height: 35px;\n"
    "}\n"
    "\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 12px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .2em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=Quotation_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_Date = QtWidgets.QLabel(parent=self.frame)
        self.label_Date.setMinimumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        self.label_Date.setMaximumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Date.setFont(font)
        self.label_Date.setObjectName("label_Date")
        self.gridLayout_2.addWidget(self.label_Date, 1, 1, 1, 1)
        self.Date_Quotation = QtWidgets.QLineEdit(parent=self.frame)
        self.Date_Quotation.setMinimumSize(QtCore.QSize(int(100//1.5), int(35//1.5)))
        self.Date_Quotation.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Date_Quotation.setFont(font)
        self.Date_Quotation.setObjectName("Date_Quotation")
        self.gridLayout_2.addWidget(self.Date_Quotation, 1, 2, 1, 4)
        self.label_Supplier = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Supplier.setFont(font)
        self.label_Supplier.setObjectName("label_Supplier")
        self.gridLayout_2.addWidget(self.label_Supplier, 1, 6, 1, 1)
        self.Supplier_Quotation = QtWidgets.QComboBox(parent=self.frame)
        self.Supplier_Quotation.setEditable(True)
        self.Supplier_Quotation.setMinimumSize(QtCore.QSize(int(300//1.5), int(35//1.5)))
        self.Supplier_Quotation.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Supplier_Quotation.setFont(font)
        self.Supplier_Quotation.setObjectName("Supplier_Quotation")
        self.gridLayout_2.addWidget(self.Supplier_Quotation, 1, 7, 1, 7)
        self.label_Obs = QtWidgets.QLabel(parent=self.frame)
        self.label_Obs.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.label_Obs.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Obs.setFont(font)
        self.label_Obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.label_Obs.setObjectName("label_Obs")
        self.gridLayout_2.addWidget(self.label_Obs, 2, 1, 1, 1)
        self.Notes_Quotation = QtWidgets.QTextEdit(parent=self.frame)
        self.Notes_Quotation.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Notes_Quotation.setFont(font)
        self.Notes_Quotation.setObjectName("Notes_Quotation")
        self.gridLayout_2.addWidget(self.Notes_Quotation, 2, 2, 1, 12)
        self.label_IDCot = QtWidgets.QLabel(parent=self.frame)
        self.label_IDCot.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.label_IDCot.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        self.label_IDCot.setObjectName("label_IDCot")
        self.label_IDCot.setText("")
        if self.username == 'd.marquez':
            self.label_IDCot.setStyleSheet("color: #121212")
        else:
            self.label_IDCot.setStyleSheet("color: white")
        self.gridLayout_2.addWidget(self.label_IDCot, 8, 2, 1, 1)
        self.label_Supply = QtWidgets.QLabel(parent=self.frame)
        self.label_Supply.setMinimumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        self.label_Supply.setMaximumSize(QtCore.QSize(int(75//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Supply.setFont(font)
        self.label_Supply.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Supply.setObjectName("label_Supply")
        self.gridLayout_2.addWidget(self.label_Supply, 5, 1, 1, 1)
        self.Supply_Quotation = QtWidgets.QComboBox(parent=self.frame)
        self.Supply_Quotation.setEditable(True)
        self.Supply_Quotation.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Supply_Quotation.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Supply_Quotation.setFont(font)
        self.Supply_Quotation.setObjectName("Supply_Quotation")
        self.gridLayout_2.addWidget(self.Supply_Quotation, 6, 1, 1, 10)
        self.label_Quantity = QtWidgets.QLabel(parent=self.frame)
        self.label_Quantity.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.label_Quantity.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Quantity.setFont(font)
        self.label_Quantity.setObjectName("label_Quantity")
        self.gridLayout_2.addWidget(self.label_Quantity, 5, 11, 1, 1)
        self.Quantity_Quotation = QtWidgets.QLineEdit(parent=self.frame)
        self.Quantity_Quotation.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.Quantity_Quotation.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Quantity_Quotation.setFont(font)
        self.Quantity_Quotation.setObjectName("Quantity_Quotation")
        self.gridLayout_2.addWidget(self.Quantity_Quotation, 6, 11, 1, 1)
        self.label_Value = QtWidgets.QLabel(parent=self.frame)
        self.label_Value.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.label_Value.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Value.setFont(font)
        self.label_Value.setObjectName("label_Value")
        self.gridLayout_2.addWidget(self.label_Value, 5, 12, 1, 1)
        self.Value_Quotation = QtWidgets.QLineEdit(parent=self.frame)
        self.Value_Quotation.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.Value_Quotation.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Value_Quotation.setFont(font)
        self.Value_Quotation.setObjectName("Value_Quotation")
        self.gridLayout_2.addWidget(self.Value_Quotation, 6, 12, 1, 1)
        self.label_Currency = QtWidgets.QLabel(parent=self.frame)
        self.label_Currency.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.label_Currency.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Currency.setFont(font)
        self.label_Currency.setObjectName("label_Currency")
        self.gridLayout_2.addWidget(self.label_Currency, 5, 13, 1, 1)
        self.Currency_Quotation = QtWidgets.QComboBox(parent=self.frame)
        self.Currency_Quotation.setMinimumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        self.Currency_Quotation.setMaximumSize(QtCore.QSize(int(70//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Currency_Quotation.setFont(font)
        self.Currency_Quotation.setObjectName("Currency_Quotation")
        self.gridLayout_2.addWidget(self.Currency_Quotation, 6, 13, 1, 1)
        self.label_ObsRecord = QtWidgets.QLabel(parent=self.frame)
        self.label_ObsRecord.setMinimumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        self.label_ObsRecord.setMaximumSize(QtCore.QSize(int(50//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_ObsRecord.setFont(font)
        self.label_ObsRecord.setObjectName("label_ObsRecord")
        self.gridLayout_2.addWidget(self.label_ObsRecord, 7, 1, 1, 1)
        self.ObsRecord_Quotation = QtWidgets.QTextEdit(parent=self.frame)
        self.ObsRecord_Quotation.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.ObsRecord_Quotation.setFont(font)
        self.ObsRecord_Quotation.setObjectName("ObsRecord_Quotation")
        self.gridLayout_2.addWidget(self.ObsRecord_Quotation, 7, 2, 1, 12)
        self.label_IDRecord = QtWidgets.QLabel(parent=self.frame)
        self.label_IDRecord.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.label_IDRecord.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        self.label_IDRecord.setObjectName("label_IDRecord")
        self.label_IDRecord.setText("")
        if self.username == 'd.marquez':
            self.label_IDRecord.setStyleSheet("color: #121212")
        else:
            self.label_IDRecord.setStyleSheet("color: white")
        self.gridLayout_2.addWidget(self.label_IDRecord, 8, 3, 1, 1)
        self.label_Details = QtWidgets.QLabel(parent=self.frame)
        self.label_Details.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.label_Details.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(16//1.5))
        font.setBold(True)
        self.label_Details.setFont(font)
        self.label_Details.setObjectName("label_Details")
        self.gridLayout_2.addWidget(self.label_Details, 8, 1, 1, 1)
        self.tableRecords = CustomTableWidgetRecord()
        self.tableRecords.setObjectName("tableRecords")
        self.tableRecords.setColumnCount(9)
        self.tableRecords.setRowCount(0)
        for i in range(9):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(14//1.5))
            font.setBold(True)
            item.setFont(font)
            self.tableRecords.setHorizontalHeaderItem(i, item)
        self.tableRecords.hideColumn(8)
        self.gridLayout_2.addWidget(self.tableRecords, 12, 1, 1, 17)
        self.tableQuotations = CustomTableWidgetQuotation()
        self.tableQuotations.setObjectName("tableQuotations")
        self.tableQuotations.setColumnCount(6)
        self.tableQuotations.setRowCount(0)
        for i in range(6):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(14//1.5))
            font.setBold(True)
            item.setFont(font)
            self.tableQuotations.setHorizontalHeaderItem(i, item)
        self.gridLayout_2.addWidget(self.tableQuotations, 13, 1, 1, 17)
        self.Position = QtWidgets.QLineEdit(parent=self.frame)
        self.Position.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Position.setMaximumSize(QtCore.QSize(500, int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))
        self.Position.setFont(font)
        self.Position.setObjectName("Position")
        self.gridLayout_2.addWidget(self.Position, 14, 1, 1, 2)
        self.Button_AddQuot = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddQuot.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_AddQuot.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_AddQuot.setObjectName("Button_AddQuot")
        self.gridLayout_2.addWidget(self.Button_AddQuot, 1, 17, 1, 1)
        self.Button_ModifyQuot = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyQuot.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_ModifyQuot.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_ModifyQuot.setObjectName("Button_ModifyQuot")
        self.gridLayout_2.addWidget(self.Button_ModifyQuot, 2, 17, 1, 1)
        self.Button_Reload = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Reload.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_Reload.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_Reload.setObjectName("Button_Reload")
        self.gridLayout_2.addWidget(self.Button_Reload, 4, 17, 1, 1)
        self.Button_AddRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddRecord.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_AddRecord.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_AddRecord.setObjectName("Button_AddRecord")
        self.gridLayout_2.addWidget(self.Button_AddRecord, 6, 17, 1, 1)
        self.Button_ModifyRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyRecord.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_ModifyRecord.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_ModifyRecord.setObjectName("Button_ModifyRecord")
        self.gridLayout_2.addWidget(self.Button_ModifyRecord, 7, 17, 1, 1)
        self.Button_DeleteRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_DeleteRecord.setMinimumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_DeleteRecord.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_DeleteRecord.setObjectName("Button_DeleteRecord")
        self.gridLayout_2.addWidget(self.Button_DeleteRecord, 8, 17, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 1, 1, 1)
        Quotation_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Quotation_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1174, 22))
        self.menubar.setObjectName("menubar")
        Quotation_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Quotation_Window)
        self.statusbar.setObjectName("statusbar")
        Quotation_Window.setStatusBar(self.statusbar)
        self.tableQuotations.setSortingEnabled(False)
        self.tableQuotations.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableQuotations.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.retranslateUi(Quotation_Window)
        QtCore.QMetaObject.connectSlotsByName(Quotation_Window)

        commands_suppliers = ("""
                        SELECT * 
                        FROM purch_fact.suppliers
                        ORDER BY purch_fact.suppliers.name
                        """)
        commands_supplies = ("""
                        SELECT reference, description, ROUND(physical_stock,2), ROUND(available_stock,2), ROUND(pending_stock,2), id
                        FROM purch_fact.supplies
                        ORDER BY reference ASC
                        """)
        commands_currency = ("""
                        SELECT * 
                        FROM purch_fact.currency
                        ORDER BY purch_fact.currency.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_suppliers)
            results_suppliers=cur.fetchall()
            cur.execute(commands_supplies)
            results_supplies=cur.fetchall()
            cur.execute(commands_currency)
            results_currency=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_suppliers=[x[1] for x in results_suppliers]
        self.Supplier_Quotation.addItems([''] + list_suppliers)

        self.list_supplies=[x[0] + ' | ' + x[1] + ' | ' + str(x[2]) + ' | ' + str(x[3]) + ' | ' + str(x[4])  + ' | ID:' + str(x[5]) for x in results_supplies]
        # self.list_supplies=[x[0] + ' | ' + x[1] for x in results_supplies]
        self.Supply_Quotation.addItems([''] + self.list_supplies)

        list_currency=[x[2] for x in results_currency]
        self.Currency_Quotation.addItems(list_currency)

        self.Date_Quotation.setText(date.today().strftime("%d/%m/%Y"))

        self.tableQuotations.itemClicked.connect(self.loadformquotation)
        self.tableRecords.itemClicked.connect(self.loadformsupply)
        self.tableQuotations.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.tableRecords.horizontalHeader().sectionClicked.connect(self.on_header_sectionrecords_clicked)
        self.Button_AddQuot.clicked.connect(self.addquotation)
        self.Button_AddRecord.clicked.connect(self.addrecord)
        self.Button_ModifyQuot.clicked.connect(self.modifyquotation)
        self.Button_Reload.clicked.connect(self.loadtablequotations)
        self.Button_ModifyRecord.clicked.connect(self.modifyrecord)
        self.Button_DeleteRecord.clicked.connect(self.deleterecord)
        self.Position.textChanged.connect(self.position_table)
        self.loadtablequotations()


    def retranslateUi(self, Quotation_Window):
        _translate = QtCore.QCoreApplication.translate
        Quotation_Window.setWindowTitle(_translate("Quotation_Window", "Cotización"))
        self.label_Quantity.setText(_translate("Quotation_Window", "Cantidad:"))
        self.Button_AddRecord.setText(_translate("Quotation_Window", "Agregar Reg."))
        self.Button_ModifyRecord.setText(_translate("Quotation_Window", "Modif. Reg."))
        self.Button_Reload.setText(_translate("Quotation_Window", "Recargar Tabla"))
        self.Button_DeleteRecord.setText(_translate("Quotation_Window", "Eliminar Reg."))
        self.label_ObsRecord.setText(_translate("Quotation_Window", "Obs:"))
        item = self.tableQuotations.horizontalHeaderItem(0)
        item.setText(_translate("Quotation_Window", "ID"))
        item = self.tableQuotations.horizontalHeaderItem(1)
        item.setText(_translate("Quotation_Window", "Proveedor"))
        item = self.tableQuotations.horizontalHeaderItem(2)
        item.setText(_translate("Quotation_Window", "Fecha"))
        item = self.tableQuotations.horizontalHeaderItem(3)
        item.setText(_translate("Quotation_Window", "Teléfono"))
        item = self.tableQuotations.horizontalHeaderItem(4)
        item.setText(_translate("Quotation_Window", "Forma Pago"))
        item = self.tableQuotations.horizontalHeaderItem(5)
        item.setText(_translate("Quotation_Window", "Obs."))
        self.label_Supplier.setText(_translate("Quotation_Window", "Proveedor:"))
        item = self.tableRecords.horizontalHeaderItem(0)
        item.setText(_translate("Quotation_Window", "ID"))
        item = self.tableRecords.horizontalHeaderItem(1)
        item.setText(_translate("Quotation_Window", "Insumo"))
        item = self.tableRecords.horizontalHeaderItem(2)
        item.setText(_translate("Quotation_Window", "Descripción"))
        item = self.tableRecords.horizontalHeaderItem(3)
        item.setText(_translate("Quotation_Window", "Cantidad"))
        item = self.tableRecords.horizontalHeaderItem(4)
        item.setText(_translate("Quotation_Window", "Valor"))
        item = self.tableRecords.horizontalHeaderItem(5)
        item.setText(_translate("Quotation_Window", "Divisa"))
        item = self.tableRecords.horizontalHeaderItem(6)
        item.setText(_translate("Quotation_Window", "Valor €"))
        item = self.tableRecords.horizontalHeaderItem(7)
        item.setText(_translate("Quotation_Window", "Obs."))
        self.Button_AddQuot.setText(_translate("Quotation_Window", "Crear Cotiz."))
        self.Button_ModifyQuot.setText(_translate("Quotation_Window", "Modif. Cotiz."))
        self.label_Supply.setText(_translate("Quotation_Window", "Insumo:"))
        self.label_Date.setText(_translate("Quotation_Window", "Fecha:"))
        self.label_Details.setText(_translate("Quotation_Window", "Detalle:"))
        self.label_Value.setText(_translate("Quotation_Window", "Valor:"))
        self.label_Obs.setText(_translate("Quotation_Window", "Obs:"))
        self.label_Currency.setText(_translate("Quotation_Window", "Divisa:"))


# Function to add quotation data to database
    def addquotation(self):
        quotation_date=self.Date_Quotation.text()
        supplier_name=self.Supplier_Quotation.currentText()
        notes=self.Notes_Quotation.toPlainText()

        if quotation_date == "" or supplier_name== "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Cotización")
            dlg.setText("Rellena la fecha y el nombre del proveedor como mínimo")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(quotation_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Cotización")
            dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_newquotation = ("""
                                INSERT INTO purch_fact.quotation_header (
                                supplier_id,quot_date,notes
                                )
                                VALUES (%s,%s,%s)
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplier = "SELECT id FROM purch_fact.suppliers WHERE name = %s"
                cur.execute(query_supplier, (supplier_name,))
                result_supplier = cur.fetchone()

            # get id from table
                supplier_id = result_supplier[0]
            # execution of principal command
                data=(supplier_id,quotation_date,notes,)
                cur.execute(commands_newquotation, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Crear Cotización")
                dlg.setText("Cotización creada con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg,new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_idquotation = "SELECT id FROM purch_fact.quotation_header ORDER BY id"
                cur.execute(query_idquotation)
                result_idquotation = cur.fetchall()

            # get id from table
                idquotation = result_idquotation[-1][0]
                self.label_IDCot.setText(str(idquotation))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

        self.tableRecords.setRowCount(0)

# Function to add quotation data to database
    def addrecord(self):
        quotation_id=self.label_IDCot.text()
        supply_name=self.Supply_Quotation.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        quantity=self.Quantity_Quotation.text()
        currency_value=self.Value_Quotation.text()
        currency=self.Currency_Quotation.currentText()
        obsrecord=self.ObsRecord_Quotation.toPlainText()
        supply_id=self.Supply_Quotation.currentText().split("|")[-1].strip().split(":")[1]

        data_id=[]

        for row in range(self.tableRecords.rowCount()):
            item_text=self.tableRecords.item(row, 8).text()
            data_id.append(item_text)

        if supply_id in data_id:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("El artículo ya está registrado")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            if quotation_id == "":
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Agregar Registros")
                dlg.setText("Por favor, para añadir registros elige una cotización existente o crea una nueva")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg,new_icon

            else:
                commands_newrecord = ("""
                                    INSERT INTO purch_fact.quotation_details (
                                    quot_header_id,supply_id,quantity,currency_id,currency_value,value,notes
                                    )
                                    VALUES (%s,%s,%s,%s,%s,%s,%s)
                                    """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    query_currencyid = "SELECT id,euro_value FROM purch_fact.currency WHERE symbol_currency = %s"
                    cur.execute(query_currencyid, (currency,))
                    result_currencyid = cur.fetchone()

                # get id from table
                    currency_id = result_currencyid[0]
                    euro_value = result_currencyid[1]
                    euro_value=euro_value.replace(",",".")
                    euro_value=euro_value[:euro_value.find(" €")]
                    value = round(float(currency_value) * float(euro_value),2)
                # execution of principal command
                    data=(quotation_id,supply_id,quantity,currency_id,currency_value,value,obsrecord,)
                    cur.execute(commands_newrecord, data)
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablerecords()

                self.Quantity_Quotation.setText("")
                self.Value_Quotation.setText("")
                self.ObsRecord_Quotation.setText("")
                self.Supply_Quotation.setCurrentIndex(0)

                self.Supply_Quotation.setFocus()

# Function to load data of quotation in form fields
    def loadformquotation(self,item):
        data_quotation=[]

        for column in range(6):
            item_text=self.tableQuotations.item(item.row(), column).text()
            data_quotation.append(item_text)

        self.label_IDCot.setText(data_quotation[0])
        self.Supplier_Quotation.setCurrentText(data_quotation[1])
        self.Date_Quotation.setText(data_quotation[2])
        self.Notes_Quotation.setPlainText(data_quotation[5])

        self.label_IDRecord.setText("")
        self.Supply_Quotation.setCurrentIndex(0)
        self.Quantity_Quotation.setText("")
        self.Value_Quotation.setText("")
        self.Currency_Quotation.setCurrentText("€")
        self.ObsRecord_Quotation.setText("")

        self.loadtablerecords()

# Function to load data of supply in form fields
    def loadformsupply(self,item):
        data_supply=[]

        for column in range(9):
            item_text=self.tableRecords.item(item.row(), column).text()
            data_supply.append(item_text)

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            query_stocks = "SELECT physical_stock, available_stock, pending_stock FROM purch_fact.supplies WHERE id = %s"
            cur.execute(query_stocks, (data_supply[8],))
            result_stocks = cur.fetchone()

        # get id from table
            stock = result_stocks[0]
            available = result_stocks[1]
            pending = result_stocks[2]

            self.Supply_Quotation.setCurrentText(data_supply[1] + " | " + data_supply[2] + " | " + str(round(stock,2)) + " | " + str(round(available,2)) + " | " + str(round(pending, 2)) + " | ID:" + data_supply[8])

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.label_IDRecord.setText(data_supply[0])
        self.Quantity_Quotation.setText(data_supply[3])
        self.Value_Quotation.setText(data_supply[4])
        self.Currency_Quotation.setCurrentText(data_supply[5])
        self.ObsRecord_Quotation.setText(data_supply[7])

# Function to modify quotation data
    def modifyquotation(self):
        id_quotation=self.label_IDCot.text()
        date=self.Date_Quotation.text()
        supplier=self.Supplier_Quotation.currentText()
        notes=self.Notes_Quotation.toPlainText()

        if id_quotation=="" or (date==" " or date==""):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Cotización")
            dlg.setText("Selecciona una cotización existente e introduce una fecha válida")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Cotización")
            dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            #SQL Query for updating values in database
            commands_updatequotation = ("""
                        UPDATE purch_fact.quotation_header
                        SET "supplier_id" = %s, "quot_date" = %s, "notes" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
                query_supplier = "SELECT id FROM purch_fact.suppliers WHERE name = %s"
                cur.execute(query_supplier, (supplier,))
                result_supplier = cur.fetchone()

            # get id from table
                supplier_id = result_supplier[0]
            # execution of commands one by one
                data=(supplier_id,date,notes,id_quotation,)
                cur.execute(commands_updatequotation,data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Modificar Cotización")
                dlg.setText("Cotización modificada con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg,new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to modify records data
    def modifyrecord(self):
        id_record=self.label_IDRecord.text()
        supply_name=self.Supply_Quotation.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        quantity=self.Quantity_Quotation.text()
        currency_value=self.Value_Quotation.text()
        currency=self.Currency_Quotation.currentText()
        obsrecord=self.ObsRecord_Quotation.toPlainText()

        if id_record=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Registro")
            dlg.setText("Selecciona un registro existente para modificar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            #SQL Query for updating values in database
            commands_updaterecord = ("""
                        UPDATE purch_fact.quotation_details
                        SET "supply_id" = %s, "quantity" = %s, "currency_id" = %s,
                        "currency_value" = %s, "value" = %s, "notes" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = "SELECT id FROM purch_fact.supplies WHERE reference = %s"
                cur.execute(query_supplyid, (supply_name,))
                result_supplyid = cur.fetchone()

                query_currencyid = "SELECT id,euro_value FROM purch_fact.currency WHERE symbol_currency = %s"
                cur.execute(query_currencyid, (currency,))
                result_currencyid = cur.fetchone()

            # get id from table
                supply_id = result_supplyid[0]
                currency_id = result_currencyid[0]
                euro_value = result_currencyid[1]
                euro_value=euro_value.replace(",",".")
                euro_value=euro_value[:euro_value.find(" €")]
                value = round(float(currency_value) * float(euro_value),2)
            # execution of principal command
                data=(supply_id,quantity,currency_id,currency_value,value,obsrecord,id_record,)
                cur.execute(commands_updaterecord, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.Quantity_Quotation.setText("")
            self.Value_Quotation.setText("")
            self.ObsRecord_Quotation.setText("")
            self.Supply_Quotation.setCurrentIndex(0)
            
            self.loadtablerecords()

# Function to delete record data
    def deleterecord(self):
        record_id=self.label_IDRecord.text()

        if record_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Registros")
            dlg.setText("Selecciona un registro existente")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            commands_deleterecord = ("""
                                DELETE FROM purch_fact.quotation_details
                                WHERE purch_fact.quotation_details.id = %s
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of principal command
                data=(record_id,)
                cur.execute(commands_deleterecord, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.Supply_Quotation.setCurrentIndex(0)
            
            self.loadtablerecords()

# Function to load table of quotations
    def loadtablequotations(self):
        commands_querytablequotations = ("""
                        SELECT purch_fact.quotation_header.id,
                        purch_fact.suppliers."name",
                        TO_CHAR(purch_fact.quotation_header."quot_date",'DD-MM-YYYY'),
                        purch_fact.suppliers."phone_number",
                        purch_fact.pay_way."pay_way_type",
                        purch_fact.quotation_header."notes"
                        FROM purch_fact.quotation_header
                        LEFT JOIN purch_fact.suppliers ON (purch_fact.suppliers."id" = purch_fact.quotation_header."supplier_id")
                        LEFT JOIN purch_fact.pay_way ON (purch_fact.pay_way."id" = purch_fact.suppliers."pay_way_id")
                        ORDER BY purch_fact.quotation_header.id DESC
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytablequotations)
            results_quotations=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableQuotations.setRowCount(len(results_quotations))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))

    # fill the Qt Table with the query results
        for row in results_quotations:
            for column in range(6):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableQuotations.setItem(tablerow, column, it)

            self.tableQuotations.setItemDelegateForRow(tablerow, AlignDelegate(self.tableQuotations))
            tablerow+=1

        self.tableQuotations.verticalHeader().hide()
        self.tableQuotations.setSortingEnabled(False)
        if self.username == 'd.marquez':
            self.tableQuotations.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableQuotations.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableQuotations.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        for i in range(6):
            self.tableQuotations.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableQuotations.setColumnWidth(i, 100)
        self.tableQuotations.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableQuotations.horizontalHeader().setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableQuotations.hideColumn(0)

# Function to load records
    def loadtablerecords(self):
        id_quoation=self.label_IDCot.text()
        commands_queryrecord = ("""
                        SELECT purch_fact.quotation_details."id",purch_fact.supplies."reference", purch_fact.supplies."description",
                        purch_fact.quotation_details."quantity",purch_fact.quotation_details."currency_value",
                        purch_fact.currency."symbol_currency",
                        purch_fact.quotation_details."value",purch_fact.quotation_details."notes",purch_fact.quotation_details."supply_id"
                        FROM purch_fact.quotation_details
                        LEFT JOIN purch_fact.currency ON (purch_fact.currency."id" = purch_fact.quotation_details."currency_id")
                        LEFT JOIN purch_fact.supplies ON (purch_fact.supplies."id" = purch_fact.quotation_details."supply_id")
                        LEFT JOIN purch_fact.quotation_header ON (purch_fact.quotation_header."id" = purch_fact.quotation_details."quot_header_id")
                        LEFT JOIN purch_fact.suppliers ON (purch_fact.suppliers."id" = purch_fact.quotation_header."supplier_id")
                        WHERE purch_fact.quotation_details.quot_header_id = %s
                        ORDER BY purch_fact.supplies.reference ASC
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_queryrecord,(id_quoation,))
            results_record=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableRecords.setRowCount(len(results_record))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(14//1.5))

    # fill the Qt Table with the query results
        for row in results_record:
            for column in range(9):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableRecords.setItem(tablerow, column, it)

            self.tableRecords.setItemDelegateForRow(tablerow, AlignDelegate(self.tableRecords))
            tablerow+=1

        self.tableRecords.verticalHeader().hide()
        self.tableRecords.setSortingEnabled(False)
        if self.username == 'd.marquez':
            self.tableRecords.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        for i in range(9):
            self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableRecords.setColumnWidth(i, 100)
        self.tableRecords.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableRecords.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.tableRecords.horizontalHeader().setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableRecords.hideColumn(0)
        self.tableRecords.hideColumn(8)

# Function to check date format
    def is_valid_date(self, date_str):
        formats = ['%d/%m/%Y', '%d-%m-%Y']
        
        for fmt in formats:
            try:
                datetime.strptime(date_str, fmt)
                return True
            except ValueError:
                pass
            
        return False

# Function when clicking on quotation table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableQuotations.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableQuotations.horizontalHeader().height()
        popup_pos = self.tableQuotations.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableQuotations.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function when clicking on records table header
    def on_header_sectionrecords_clicked(self, logical_index):
        header_pos = self.tableRecords.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableRecords.horizontalHeader().height()
        popup_pos = self.tableRecords.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableRecords.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to move table to specific item by text search
    def position_table(self):
        text_position = self.Position.text()

        self.tableQuotations.clearSelection()

        for i in range(self.tableQuotations.rowCount()):
            item = self.tableQuotations.item(i, 1)
            if item is not None and text_position.upper() in item.text().upper():
                item.setSelected(True)
                self.tableQuotations.scrollToItem(item)
                return

# Function to events for keys
    def keyPressEvent(self, event: QtGui.QKeyEvent):
        if event.key() == QtCore.Qt.Key.Key_Escape:
            focused_widget = QtWidgets.QApplication.focusWidget()
            if isinstance(focused_widget, QtWidgets.QLineEdit) or isinstance(focused_widget, QtWidgets.QTextEdit):
                focused_widget.clear()
            elif isinstance(focused_widget, QtWidgets.QComboBox):
                focused_widget.setCurrentIndex(0)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Quotation_Window = QtWidgets.QMainWindow()
    ui = Ui_Quotation_Window('d.marquez')
    ui.setupUi(Quotation_Window)
    Quotation_Window.showMaximized()
    sys.exit(app.exec())
