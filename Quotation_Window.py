# Form implementation generated from reading ui file 'Quotation_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import datetime


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]

    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        menu.setStyleSheet("QMenu { color: black; }"
                                        "QMenu::item:selected { background-color: #33bdef; }"
                                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        unique_values = set()
        for row in range(self.rowCount()):
            if not self.isRowHidden(row):
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())

        action_all = menu.addAction("Seleccionar todo")
        action_all.triggered.connect(lambda: self.filter_column(column_index, None))
        menu.addSeparator()

        action_all = menu.addAction("Ordenar ascendente")
        action_all.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        action_all = menu.addAction("Ordenar descendente")
        action_all.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []  # List to stack checkboxes created

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if value in self.list_filters:
                checkbox.setCheckState(QtCore.Qt.CheckState(0))
            else:
                checkbox.setCheckState(QtCore.Qt.CheckState(2))

            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)  # Adding checkbox to list

        # Connecting checkboxes to function self.filter_column
        for value, checkbox in zip(sorted(unique_values), checkboxes):
            checkbox.clicked.connect(lambda checked, value=value: self.filter_column(column_index, value))

        # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


    def filter_column(self, column_index, value):
        if value is None:
            for row in range(self.rowCount()):
                self.setRowHidden(row, False)
                self.list_filters=[]
        elif value in self.list_filters:
            self.list_filters.remove(value)
        else:
            self.list_filters.append(value)
        
        for row in range(self.rowCount()):
            item = self.item(row, column_index)
            if value is None:
                pass
            elif item.text() not in self.list_filters:
                self.setRowHidden(row, False)
            else:
                self.setRowHidden(row, True)


    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)


    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_Quotation_Window(object):
    def setupUi(self, Quotation_Window):
        Quotation_Window.setObjectName("Quotation_Window")
        Quotation_Window.resize(int(1174//1.5), int(604//1.5))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Quotation_Window.setWindowIcon(icon)
        Quotation_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=Quotation_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_Date = QtWidgets.QLabel(parent=self.frame)
        self.label_Date.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_Date.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Date.setFont(font)
        self.label_Date.setObjectName("label_Date")
        self.gridLayout_2.addWidget(self.label_Date, 1, 1, 1, 1)
        self.Date_Quotation = QtWidgets.QLineEdit(parent=self.frame)
        self.Date_Quotation.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Date_Quotation.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Date_Quotation.setFont(font)
        self.Date_Quotation.setObjectName("Date_Quotation")
        self.gridLayout_2.addWidget(self.Date_Quotation, 1, 2, 1, 4)
        self.label_Supplier = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Supplier.setFont(font)
        self.label_Supplier.setObjectName("label_Supplier")
        self.gridLayout_2.addWidget(self.label_Supplier, 1, 6, 1, 1)
        self.Supplier_Quotation = QtWidgets.QComboBox(parent=self.frame)
        self.Supplier_Quotation.setMinimumSize(QtCore.QSize(int(300//1.5), int(25//1.5)))
        self.Supplier_Quotation.setMaximumSize(QtCore.QSize(int(300//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Supplier_Quotation.setFont(font)
        self.Supplier_Quotation.setObjectName("Supplier_Quotation")
        self.gridLayout_2.addWidget(self.Supplier_Quotation, 1, 7, 1, 4)
        self.label_Obs = QtWidgets.QLabel(parent=self.frame)
        self.label_Obs.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.label_Obs.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Obs.setFont(font)
        self.label_Obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.label_Obs.setObjectName("label_Obs")
        self.gridLayout_2.addWidget(self.label_Obs, 1, 11, 1, 1)
        self.Notes_Quotation = QtWidgets.QTextEdit(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Notes_Quotation.setFont(font)
        self.Notes_Quotation.setObjectName("Notes_Quotation")
        self.gridLayout_2.addWidget(self.Notes_Quotation, 1, 12, 2, 1)
        self.label_IDCot = QtWidgets.QLabel(parent=self.frame)
        self.label_IDCot.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_IDCot.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        self.label_IDCot.setObjectName("label_IDCot")
        self.label_IDCot.setText("")
        self.label_IDCot.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_2.addWidget(self.label_IDCot, 2, 1, 1, 1)
        self.label_Supply = QtWidgets.QLabel(parent=self.frame)
        self.label_Supply.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_Supply.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Supply.setFont(font)
        self.label_Supply.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Supply.setObjectName("label_Supply")
        self.gridLayout_2.addWidget(self.label_Supply, 3, 1, 1, 1)
        self.Supply_Quotation = QtWidgets.QComboBox(parent=self.frame)
        self.Supply_Quotation.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.Supply_Quotation.setMaximumSize(QtCore.QSize(int(500//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Supply_Quotation.setFont(font)
        self.Supply_Quotation.setObjectName("Supply_Quotation")
        self.gridLayout_2.addWidget(self.Supply_Quotation, 4, 1, 1, 8)
        self.label_Quantity = QtWidgets.QLabel(parent=self.frame)
        self.label_Quantity.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.label_Quantity.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Quantity.setFont(font)
        self.label_Quantity.setObjectName("label_Quantity")
        self.gridLayout_2.addWidget(self.label_Quantity, 3, 9, 1, 1)
        self.Quantity_Quotation = QtWidgets.QLineEdit(parent=self.frame)
        self.Quantity_Quotation.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.Quantity_Quotation.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Quantity_Quotation.setFont(font)
        self.Quantity_Quotation.setObjectName("Quantity_Quotation")
        self.gridLayout_2.addWidget(self.Quantity_Quotation, 4, 9, 1, 1)
        self.label_Value = QtWidgets.QLabel(parent=self.frame)
        self.label_Value.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.label_Value.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Value.setFont(font)
        self.label_Value.setObjectName("label_Value")
        self.gridLayout_2.addWidget(self.label_Value, 3, 10, 1, 1)
        self.Value_Quotation = QtWidgets.QLineEdit(parent=self.frame)
        self.Value_Quotation.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.Value_Quotation.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Value_Quotation.setFont(font)
        self.Value_Quotation.setObjectName("Value_Quotation")
        self.gridLayout_2.addWidget(self.Value_Quotation, 4, 10, 1, 1)
        self.label_Currency = QtWidgets.QLabel(parent=self.frame)
        self.label_Currency.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.label_Currency.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Currency.setFont(font)
        self.label_Currency.setObjectName("label_Currency")
        self.gridLayout_2.addWidget(self.label_Currency, 3, 11, 1, 1)
        self.Currency_Quotation = QtWidgets.QComboBox(parent=self.frame)
        self.Currency_Quotation.setMinimumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        self.Currency_Quotation.setMaximumSize(QtCore.QSize(int(70//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Currency_Quotation.setFont(font)
        self.Currency_Quotation.setObjectName("Currency_Quotation")
        self.gridLayout_2.addWidget(self.Currency_Quotation, 4, 11, 1, 1)
        self.label_ObsRecord = QtWidgets.QLabel(parent=self.frame)
        self.label_ObsRecord.setMinimumSize(QtCore.QSize(int(50//1.5), int(25//1.5)))
        self.label_ObsRecord.setMaximumSize(QtCore.QSize(int(50//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_ObsRecord.setFont(font)
        self.label_ObsRecord.setObjectName("label_ObsRecord")
        self.gridLayout_2.addWidget(self.label_ObsRecord, 3, 12, 1, 1)
        self.ObsRecord_Quotation = QtWidgets.QTextEdit(parent=self.frame)
        self.ObsRecord_Quotation.setMaximumSize(QtCore.QSize(16777215, int(100//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.ObsRecord_Quotation.setFont(font)
        self.ObsRecord_Quotation.setObjectName("ObsRecord_Quotation")
        self.gridLayout_2.addWidget(self.ObsRecord_Quotation, 4, 12, 2, 1)
        self.label_IDRecord = QtWidgets.QLabel(parent=self.frame)
        self.label_IDRecord.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_IDRecord.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        self.label_IDRecord.setObjectName("label_IDRecord")
        self.label_IDRecord.setText("")
        self.label_IDRecord.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_2.addWidget(self.label_IDRecord, 5, 1, 1, 1)
        self.label_Details = QtWidgets.QLabel(parent=self.frame)
        self.label_Details.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_Details.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Details.setFont(font)
        self.label_Details.setObjectName("label_Details")
        self.gridLayout_2.addWidget(self.label_Details, 8, 1, 1, 1)
        self.tableRecords = CustomTableWidget()
        self.tableRecords.setObjectName("tableRecords")
        self.tableRecords.setColumnCount(8)
        self.tableRecords.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableRecords.setHorizontalHeaderItem(7, item)
        self.gridLayout_2.addWidget(self.tableRecords, 12, 1, 1, 17)
        self.tableQuotations = CustomTableWidget()
        self.tableQuotations.setObjectName("tableQuotations")
        self.tableQuotations.setColumnCount(6)
        self.tableQuotations.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(5, item)
        self.gridLayout_2.addWidget(self.tableQuotations, 13, 1, 1, 17)
        self.Button_AddQuot = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddQuot.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_AddQuot.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_AddQuot.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_AddQuot.setObjectName("Button_AddQuot")
        self.gridLayout_2.addWidget(self.Button_AddQuot, 1, 14, 1, 1)
        self.Button_ModifyQuot = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyQuot.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_ModifyQuot.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_ModifyQuot.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_ModifyQuot.setObjectName("Button_ModifyQuot")
        self.gridLayout_2.addWidget(self.Button_ModifyQuot, 2, 14, 1, 1)
        self.Button_AddRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddRecord.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_AddRecord.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_AddRecord.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_AddRecord.setObjectName("Button_AddRecord")
        self.gridLayout_2.addWidget(self.Button_AddRecord, 4, 14, 1, 1)
        self.Button_ModifyRecord = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifyRecord.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.Button_ModifyRecord.setMaximumSize(QtCore.QSize(int(130//1.5), int(35//1.5)))
        self.Button_ModifyRecord.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_ModifyRecord.setObjectName("Button_ModifyRecord")
        self.gridLayout_2.addWidget(self.Button_ModifyRecord, 5, 14, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 1, 1, 1)
        Quotation_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Quotation_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1174, 22))
        self.menubar.setObjectName("menubar")
        Quotation_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Quotation_Window)
        self.statusbar.setObjectName("statusbar")
        Quotation_Window.setStatusBar(self.statusbar)
        self.tableQuotations.setSortingEnabled(False)
        self.tableQuotations.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableQuotations.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.retranslateUi(Quotation_Window)
        QtCore.QMetaObject.connectSlotsByName(Quotation_Window)

        commands_suppliers = ("""
                        SELECT * 
                        FROM purch_fact.suppliers_test
                        ORDER BY purch_fact.suppliers_test.name
                        """)
        commands_supplies = ("""
                        SELECT * 
                        FROM purch_fact.supplies_test
                        """)
        commands_currency = ("""
                        SELECT * 
                        FROM purch_fact.currency
                        ORDER BY purch_fact.currency.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_suppliers)
            results_suppliers=cur.fetchall()
            cur.execute(commands_supplies)
            results_supplies=cur.fetchall()
            cur.execute(commands_currency)
            results_currency=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        list_suppliers=[x[1] for x in results_suppliers]
        self.Supplier_Quotation.addItems(list_suppliers)

        list_supplies=[x[3] + ' | ' + x[4] for x in results_supplies]
        self.Supply_Quotation.addItems(sorted(list_supplies))

        list_currency=[x[2] for x in results_currency]
        self.Currency_Quotation.addItems(list_currency)

        self.tableQuotations.itemClicked.connect(self.loadformquotation)
        self.tableRecords.itemClicked.connect(self.loadformsupply)
        self.tableQuotations.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.tableRecords.horizontalHeader().sectionClicked.connect(self.on_header_sectionrecords_clicked)
        self.Button_AddQuot.clicked.connect(self.addquotation)
        self.Button_AddRecord.clicked.connect(self.addrecord)
        self.Button_ModifyQuot.clicked.connect(self.modifyquotation)
        self.Button_ModifyRecord.clicked.connect(self.modifyrecord)
        self.loadtablequotations()


    def retranslateUi(self, Quotation_Window):
        _translate = QtCore.QCoreApplication.translate
        Quotation_Window.setWindowTitle(_translate("Quotation_Window", "Cotización"))
        self.label_Quantity.setText(_translate("Quotation_Window", "Cantidad:"))
        self.Button_AddRecord.setText(_translate("Quotation_Window", "Agregar Reg."))
        self.Button_ModifyRecord.setText(_translate("Quotation_Window", "Modif. Reg."))
        self.label_ObsRecord.setText(_translate("Quotation_Window", "Obs:"))
        item = self.tableQuotations.horizontalHeaderItem(0)
        item.setText(_translate("Quotation_Window", "ID"))
        item = self.tableQuotations.horizontalHeaderItem(1)
        item.setText(_translate("Quotation_Window", "Proveedor"))
        item = self.tableQuotations.horizontalHeaderItem(2)
        item.setText(_translate("Quotation_Window", "Fecha"))
        item = self.tableQuotations.horizontalHeaderItem(3)
        item.setText(_translate("Quotation_Window", "Teléfono"))
        item = self.tableQuotations.horizontalHeaderItem(4)
        item.setText(_translate("Quotation_Window", "Forma Pago"))
        item = self.tableQuotations.horizontalHeaderItem(5)
        item.setText(_translate("Quotation_Window", "Obs."))
        self.label_Supplier.setText(_translate("Quotation_Window", "Proveedor:"))
        item = self.tableRecords.horizontalHeaderItem(0)
        item.setText(_translate("Quotation_Window", "ID"))
        item = self.tableRecords.horizontalHeaderItem(1)
        item.setText(_translate("Quotation_Window", "Insumo"))
        item = self.tableRecords.horizontalHeaderItem(2)
        item.setText(_translate("Quotation_Window", "Descripción"))
        item = self.tableRecords.horizontalHeaderItem(3)
        item.setText(_translate("Quotation_Window", "Cantidad"))
        item = self.tableRecords.horizontalHeaderItem(4)
        item.setText(_translate("Quotation_Window", "Valor"))
        item = self.tableRecords.horizontalHeaderItem(5)
        item.setText(_translate("Quotation_Window", "Divisa"))
        item = self.tableRecords.horizontalHeaderItem(6)
        item.setText(_translate("Quotation_Window", "Valor €"))
        item = self.tableRecords.horizontalHeaderItem(7)
        item.setText(_translate("Quotation_Window", "Obs."))
        self.Button_AddQuot.setText(_translate("Quotation_Window", "Crear Cotiz."))
        self.Button_ModifyQuot.setText(_translate("Quotation_Window", "Modif. Cotiz."))
        self.label_Supply.setText(_translate("Quotation_Window", "Insumo:"))
        self.label_Date.setText(_translate("Quotation_Window", "Fecha:"))
        self.label_Details.setText(_translate("Quotation_Window", "Detalle:"))
        self.label_Value.setText(_translate("Quotation_Window", "Valor:"))
        self.label_Obs.setText(_translate("Quotation_Window", "Obs:"))
        self.label_Currency.setText(_translate("Quotation_Window", "Divisa:"))


# Function to add quotation data to database
    def addquotation(self):
        quotation_date=self.Date_Quotation.text()
        supplier_name=self.Supplier_Quotation.currentText()
        notes=self.Notes_Quotation.toPlainText()

        if quotation_date == "" or supplier_name== "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Cotización")
            dlg.setText("Rellena la fecha y el nombre del proveedor como mínimo")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        elif not self.is_valid_date(quotation_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Cotización")
            dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            commands_newquotation = ("""
                                INSERT INTO purch_fact.quot_header_test (
                                supplier_id,quot_date,notes
                                )
                                VALUES (%s,%s,%s)
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplier = "SELECT id FROM purch_fact.suppliers_test WHERE name = %s"
                cur.execute(query_supplier, (supplier_name,))
                result_supplier = cur.fetchone()

            # get id from table
                supplier_id = result_supplier[0]
            # execution of principal command
                data=(supplier_id,quotation_date,notes,)
                cur.execute(commands_newquotation, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Crear Cotización")
                dlg.setText("Cotización creada con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg,new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablequotations()

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_idquotation = "SELECT id FROM purch_fact.quot_header_test ORDER BY id"
                cur.execute(query_idquotation)
                result_idquotation = cur.fetchall()

            # get id from table
                idquotation = result_idquotation[-1][0]
                self.label_IDCot.setText(str(idquotation))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()


# Function to add quotation data to database
    def addrecord(self):
        quotation_id=self.label_IDCot.text()
        supply_name=self.Supply_Quotation.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        quantity=self.Quantity_Quotation.text()
        currency_value=self.Value_Quotation.text()
        currency=self.Currency_Quotation.currentText()
        obsrecord=self.ObsRecord_Quotation.toPlainText()

        if quotation_id == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Registros")
            dlg.setText("Por favor, para añadir registros elige una cotización existente o crea una nueva")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon

        else:
            commands_newrecord = ("""
                                INSERT INTO purch_fact.quot_det_test (
                                quot_head_id,supply_id,quantity,currency_id,currency_value,value,notes
                                )
                                VALUES (%s,%s,%s,%s,%s,%s,%s)
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = "SELECT id FROM purch_fact.supplies_test WHERE reference = %s"
                cur.execute(query_supplyid, (supply_name,))
                result_supplyid = cur.fetchone()

                query_currencyid = "SELECT id,euro_value FROM purch_fact.currency WHERE symbol_currency = %s"
                cur.execute(query_currencyid, (currency,))
                result_currencyid = cur.fetchone()

            # get id from table
                supply_id = result_supplyid[0]
                currency_id = result_currencyid[0]
                euro_value = result_currencyid[1]
                euro_value=euro_value.replace(",",".")
                euro_value=euro_value[:euro_value.find(" €")]
                value = round(float(currency_value) * float(euro_value),2)
            # execution of principal command
                data=(quotation_id,supply_id,quantity,currency_id,currency_value,value,obsrecord,)
                cur.execute(commands_newrecord, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablerecords()


# Function to load data of quotation in form fields
    def loadformquotation(self,item):
        data_quotation=[]

        for column in range(6):
            item_text=self.tableQuotations.item(item.row(), column).text()
            data_quotation.append(item_text)

        self.label_IDCot.setText(data_quotation[0])
        self.Supplier_Quotation.setCurrentText(data_quotation[1])
        self.Date_Quotation.setText(data_quotation[2])
        self.Notes_Quotation.setPlainText(data_quotation[5])

        self.label_IDRecord.setText("")
        self.Supply_Quotation.setCurrentText("- - - - - | - - - - -")
        self.Quantity_Quotation.setText("")
        self.Value_Quotation.setText("")
        self.Currency_Quotation.setCurrentText("€")
        self.ObsRecord_Quotation.setText("")

        self.loadtablerecords()


# Function to load data of supply in form fields
    def loadformsupply(self,item):
        data_supply=[]

        for column in range(8):
            item_text=self.tableRecords.item(item.row(), column).text()
            data_supply.append(item_text)

        self.label_IDRecord.setText(data_supply[0])
        self.Supply_Quotation.setCurrentText(data_supply[1] + " | " + data_supply[2])
        self.Quantity_Quotation.setText(data_supply[3])
        self.Value_Quotation.setText(data_supply[4])
        self.Currency_Quotation.setCurrentText(data_supply[5])
        self.ObsRecord_Quotation.setText(data_supply[7])


# Function to modify quotation data
    def modifyquotation(self):
        id_quotation=self.label_IDCot.text()
        date=self.Date_Quotation.text()
        supplier=self.Supplier_Quotation.currentText()
        notes=self.Notes_Quotation.toPlainText()

        if id_quotation=="" or (date==" " or date==""):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Cotización")
            dlg.setText("Selecciona una cotización existente e introduce una fecha válida")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not self.is_valid_date(date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Crear Cotización")
            dlg.setText("La fecha no tiene el formato esperado (dd-mm-yyyy o dd/mm/yyyy)")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            #SQL Query for updating values in database
            commands_updatequotation = ("""
                        UPDATE purch_fact.quot_header_test
                        SET "supplier_id" = %s, "quot_date" = %s, "notes" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
                query_supplier = "SELECT id FROM purch_fact.suppliers_test WHERE name = %s"
                cur.execute(query_supplier, (supplier,))
                result_supplier = cur.fetchone()

            # get id from table
                supplier_id = result_supplier[0]
            # execution of commands one by one
                data=(supplier_id,date,notes,id_quotation,)
                cur.execute(commands_updatequotation,data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Modificar Cotización")
                dlg.setText("Cotización modificada con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg,new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablequotations()


# Function to modify records data
    def modifyrecord(self):
        id_record=self.label_IDRecord.text()
        supply_name=self.Supply_Quotation.currentText()
        supply_name=supply_name[:supply_name.find(" |")]
        quantity=self.Quantity_Quotation.text()
        currency_value=self.Value_Quotation.text()
        currency=self.Currency_Quotation.currentText()
        obsrecord=self.ObsRecord_Quotation.toPlainText()

        if id_record=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Registro")
            dlg.setText("Selecciona un registro existente para modificar")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            #SQL Query for updating values in database
            commands_updaterecord = ("""
                        UPDATE purch_fact.quot_det_test
                        SET "supply_id" = %s, "quantity" = %s, "currency_id" = %s,
                        "currency_value" = %s, "value" = %s, "notes" = %s
                        WHERE "id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                query_supplyid = "SELECT id FROM purch_fact.supplies_test WHERE reference = %s"
                cur.execute(query_supplyid, (supply_name,))
                result_supplyid = cur.fetchone()

                query_currencyid = "SELECT id,euro_value FROM purch_fact.currency WHERE symbol_currency = %s"
                cur.execute(query_currencyid, (currency,))
                result_currencyid = cur.fetchone()

            # get id from table
                supply_id = result_supplyid[0]
                currency_id = result_currencyid[0]
                euro_value = result_currencyid[1]
                euro_value=euro_value.replace(",",".")
                euro_value=euro_value[:euro_value.find(" €")]
                value = round(float(currency_value) * float(euro_value),2)
            # execution of principal command
                data=(supply_id,quantity,currency_id,currency_value,value,obsrecord,id_record,)
                cur.execute(commands_updaterecord, data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablerecords()


# Function to load table of quotations
    def loadtablequotations(self):
        commands_querytablequotations = ("""
                        SELECT purch_fact.quot_header_test.id,
                        purch_fact.suppliers_test."name",
                        TO_CHAR(purch_fact.quot_header_test."quot_date",'DD-MM-YYYY'),
                        purch_fact.suppliers_test."phone_number",
                        purch_fact.pay_way."pay_way_type",
                        purch_fact.quot_header_test."notes"
                        FROM purch_fact.quot_header_test
                        LEFT JOIN purch_fact.suppliers_test ON (purch_fact.suppliers_test."id" = purch_fact.quot_header_test."supplier_id")
                        LEFT JOIN purch_fact.pay_way ON (purch_fact.pay_way."id" = purch_fact.suppliers_test."pay_way_id")
                        ORDER BY purch_fact.quot_header_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querytablequotations)
            results_quotations=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        self.tableQuotations.setRowCount(len(results_quotations))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))

    # fill the Qt Table with the query results
        for row in results_quotations:
            for column in range(6):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableQuotations.setItem(tablerow, column, it)

            self.tableQuotations.setItemDelegateForRow(tablerow, AlignDelegate(self.tableQuotations))
            tablerow+=1

        self.tableQuotations.verticalHeader().hide()
        self.tableQuotations.setSortingEnabled(False)
        self.tableQuotations.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


# Function to load records
    def loadtablerecords(self):
        id_quoation=self.label_IDCot.text()
        commands_queryrecord = ("""
                        SELECT purch_fact.quot_det_test."id",purch_fact.supplies_test."reference", purch_fact.supplies_test."description",
                        purch_fact.quot_det_test."quantity",purch_fact.quot_det_test."currency_value",
                        purch_fact.currency."symbol_currency",
                        purch_fact.quot_det_test."value",purch_fact.quot_det_test."notes"
                        FROM purch_fact.quot_det_test
                        LEFT JOIN purch_fact.currency ON (purch_fact.currency."id" = purch_fact.quot_det_test."currency_id")
                        LEFT JOIN purch_fact.supplies_test ON (purch_fact.supplies_test."id" = purch_fact.quot_det_test."supply_id")
                        LEFT JOIN purch_fact.quot_header_test ON (purch_fact.quot_header_test."id" = purch_fact.quot_det_test."quot_head_id")
                        LEFT JOIN purch_fact.suppliers_test ON (purch_fact.suppliers_test."id" = purch_fact.quot_header_test."supplier_id")
                        WHERE purch_fact.quot_det_test.quot_head_id = %s
                        ORDER BY purch_fact.quot_det_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_queryrecord,(id_quoation,))
            results_record=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        self.tableRecords.setRowCount(len(results_record))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))

    # fill the Qt Table with the query results
        for row in results_record:
            for column in range(8):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableRecords.setItem(tablerow, column, it)

            self.tableRecords.setItemDelegateForRow(tablerow, AlignDelegate(self.tableRecords))
            tablerow+=1

        self.tableRecords.verticalHeader().hide()
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


# Function to check date format
    def is_valid_date(self, date_str):
        formats = ['%d/%m/%Y', '%d-%m-%Y']
        
        for fmt in formats:
            try:
                datetime.datetime.strptime(date_str, fmt)
                return True
            except ValueError:
                pass
            
        return False


#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableQuotations.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableQuotations.horizontalHeader().height()
        popup_pos = self.tableQuotations.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableQuotations.show_unique_values_menu(logical_index, popup_pos, header_height)

    def on_header_sectionrecords_clicked(self, logical_index):
        header_pos = self.tableRecords.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableRecords.horizontalHeader().height()
        popup_pos = self.tableRecords.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableRecords.show_unique_values_menu(logical_index, popup_pos, header_height)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Quotation_Window = QtWidgets.QMainWindow()
    ui = Ui_Quotation_Window()
    ui.setupUi(Quotation_Window)
    Quotation_Window.showMaximized()
    sys.exit(app.exec())
