# Form implementation generated from reading ui file 'App_Invoicing.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
import sys
from datetime import *
import configparser
from Database_Connection import createConnection
from Clients_Window import Ui_Clients_Window
from Banks_Window import Ui_Banks_Window
from Countries_Window import Ui_Countries_Window
from PayWay_Window import Ui_PayWay_Window
from EditPassword_Window import Ui_EditPasswordWindow
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class ImageCalendarWidget(QtWidgets.QCalendarWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.task_dates = []

    def set_task_dates(self, dates):
        self.task_dates = dates
        self.updateCells()

    def paintCell(self, painter, rect, date):
        QtWidgets.QCalendarWidget.paintCell(self, painter, rect, date)

        if date in self.task_dates:
            image_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Flag.png"))
            image = QtGui.QImage(image_path)
            if not image.isNull():
                image_scaled = image.scaled(rect.width() // 4, rect.height() // 4, QtCore.Qt.AspectRatioMode.KeepAspectRatio, QtCore.Qt.TransformationMode.SmoothTransformation)
                image_rect = image_scaled.rect()
                image_rect.moveTopRight(rect.topRight() - QtCore.QPoint(2, -5))
                painter.drawImage(image_rect, image_scaled)


class Ui_App_Invoicing(object):
    def __init__(self, name, username):
        self.name=name
        self.username=username


    def setupUi(self, App_Invoicing):
        App_Invoicing.setObjectName("App_Invoicing")
        App_Invoicing.resize(945, 860)
        App_Invoicing.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Invoicing.setWindowIcon(icon)
        App_Invoicing.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Invoicing)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Logo.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem3)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setToolTip('Configuraci√≥n')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/User.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem4 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem4)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_Invoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Invoice.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Invoice.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Invoice.setFont(font)
        self.Button_Invoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Invoice.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Invoice.setIcon(icon3)
        self.Button_Invoice.setIconSize(QtCore.QSize(40, 40))
        self.Button_Invoice.setCheckable(False)
        self.Button_Invoice.setAutoRepeat(False)
        self.Button_Invoice.setAutoExclusive(False)
        self.Button_Invoice.setObjectName("Button_Invoice")
        self.verticalLayout_3.addWidget(self.Button_Invoice)
        self.Button_QueryInvoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryInvoice.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryInvoice.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryInvoice.setFont(font)
        self.Button_QueryInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Invoice_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryInvoice.setIcon(icon4)
        self.Button_QueryInvoice.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryInvoice.setObjectName("Button_QueryInvoice")
        self.verticalLayout_3.addWidget(self.Button_QueryInvoice)
        self.Button_ExpirationInvoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_ExpirationInvoice.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_ExpirationInvoice.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_ExpirationInvoice.setFont(font)
        self.Button_ExpirationInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Invoice_Expiring.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ExpirationInvoice.setIcon(icon5)
        self.Button_ExpirationInvoice.setIconSize(QtCore.QSize(40, 40))
        self.Button_ExpirationInvoice.setObjectName("Button_ExpirationInvoice")
        self.verticalLayout_3.addWidget(self.Button_ExpirationInvoice)
        self.Button_Clients = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Clients.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Clients.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Clients.setFont(font)
        self.Button_Clients.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Customers.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Clients.setIcon(icon6)
        self.Button_Clients.setIconSize(QtCore.QSize(40, 40))
        self.Button_Clients.setObjectName("Button_Clients")
        self.verticalLayout_3.addWidget(self.Button_Clients)
        if self.name in ['Miguel Sahuquillo']:
            self.Button_Banks = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_Banks.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_Banks.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_Banks.setFont(font)
            self.Button_Banks.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Banks.setText(("    Bancos"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Banks.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Banks.setIcon(icon7)
            self.Button_Banks.setIconSize(QtCore.QSize(40, 40))
            self.Button_Banks.setObjectName("Button_Banks")
            self.Button_Banks.clicked.connect(self.banks)
            self.verticalLayout_3.addWidget(self.Button_Banks)
        elif self.name in ['Javier Zofio']:
            self.Button_PendInvoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_PendInvoice.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_PendInvoice.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_PendInvoice.setFont(font)
            self.Button_PendInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_PendInvoice.setText(("  Fact. Ptes S/Cliente"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Invoice_Pending.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_PendInvoice.setIcon(icon7)
            self.Button_PendInvoice.setIconSize(QtCore.QSize(40, 40))
            self.Button_PendInvoice.setObjectName("Button_PendInvoice")
            self.verticalLayout_3.addWidget(self.Button_PendInvoice)

        if self.name in ['Miguel Sahuquillo']:
            self.Button_Countries = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_Countries.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_Countries.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_Countries.setFont(font)
            self.Button_Countries.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Countries.setText(("    Pa√≠s Destino"))
            icon8 = QtGui.QIcon()
            icon8.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Countries.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Countries.setIcon(icon8)
            self.Button_Countries.setIconSize(QtCore.QSize(40, 40))
            self.Button_Countries.setObjectName("Button_Countries")
            self.Button_Countries.clicked.connect(self.countries)
            self.verticalLayout_3.addWidget(self.Button_Countries)
        elif self.name in ['Javier Zofio']:
            self.Button_Transactions = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_Transactions.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_Transactions.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_Transactions.setFont(font)
            self.Button_Transactions.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Transactions.setText(("  Datos Cobro-Pago"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Payments.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Transactions.setIcon(icon7)
            self.Button_Transactions.setIconSize(QtCore.QSize(40, 40))
            self.Button_Transactions.setObjectName("Button_Transactions")
            self.verticalLayout_3.addWidget(self.Button_Transactions)

        if self.name in ['Miguel Sahuquillo']:
            self.Button_PayWay = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_PayWay.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_PayWay.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_PayWay.setFont(font)
            self.Button_PayWay.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_PayWay.setText(("    Forma De Pago"))
            icon9 = QtGui.QIcon()
            icon9.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/PayWay.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_PayWay.setIcon(icon9)
            self.Button_PayWay.setIconSize(QtCore.QSize(40, 40))
            self.Button_PayWay.setObjectName("Button_PayWay")
            self.Button_PayWay.clicked.connect(self.payway)
            self.verticalLayout_3.addWidget(self.Button_PayWay)
        elif self.name in ['Javier Zofio']:
            self.Button_PendInvoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_PendInvoice.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_PendInvoice.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_PendInvoice.setFont(font)
            self.Button_PendInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_PendInvoice.setText(("  Agt. Int. Liquid"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Agents.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_PendInvoice.setIcon(icon7)
            self.Button_PendInvoice.setIconSize(QtCore.QSize(40, 40))
            self.Button_PendInvoice.setObjectName("Button_PendInvoice")
            self.verticalLayout_3.addWidget(self.Button_PendInvoice)
            self.Button_ExpExcel = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_ExpExcel.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_ExpExcel.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_ExpExcel.setFont(font)
            self.Button_ExpExcel.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_ExpExcel.setText(("  Exportar a Excel"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Excel.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ExpExcel.setIcon(icon7)
            self.Button_ExpExcel.setIconSize(QtCore.QSize(40, 40))
            self.Button_ExpExcel.setObjectName("Button_ExpExcel")
            self.verticalLayout_3.addWidget(self.Button_ExpExcel)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem5 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem5)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.table = QtWidgets.QTableWidget(parent=self.frame)
        self.table.setMinimumSize(QtCore.QSize(int(650), int(280)))
        self.table.setObjectName("table")
        self.table.setColumnCount(0)
        self.table.setRowCount(0)
        self.table.verticalHeader().setVisible(False)
        self.MainLayout.addWidget(self.table)
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem5)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
#         self.Calendar = QtWidgets.QCalendarWidget(parent=self.frame)
#         self.Calendar.setEnabled(True)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.Calendar.sizePolicy().hasHeightForWidth())
#         self.Calendar.setSizePolicy(sizePolicy)
#         self.Calendar.setMinimumSize(QtCore.QSize(int(200), int(400)))
#         self.Calendar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
#         font = QtGui.QFont()
#         font.setPointSize(int(10))
#         self.Calendar.setFont(font)
#         self.Calendar.setStyleSheet("QCalendarWidget QWidget{\n"
# "background-color: rgb(3, 174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QTableView{\n"
# "    background-color: white;\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton {\n"
# "    color: white;\n"
# "    font-size:15px;\n"
# "    icon-size:20px 20px;\n"
# "    background-color:rgb(3, 174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton::hover {\n"
# "    background-color : #019ad2;\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton::pressed {\n"
# "    background-color: rgb(1, 140, 190);\n"
# "    border: 3px solid;\n"
# "    border-color: rgb(255, 255, 255);\n"
# "}\n"
# "\n"
# "QCalendarWidget QSpinBox{\n"
# "    background-color: rgb(255, 255, 255);\n"
# "    border: 2px solid;\n"
# "    border-color: rgb(3,174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QAbstractItemView:enabled{\n"
# "    selection-background-color: rgb(3, 174, 236);\n"
# "    selection-color: white;\n"
# "}\n"
# "\n"
# "#qt_calendar_prevmonth {\n"
# "    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/back_arrow.png);\n"
# "}\n"
# "#qt_calendar_nextmonth {\n"
# "    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/forward_arrow.png);\n"
# "}")
#         self.Calendar.setSelectedDate(QtCore.QDate.currentDate())
#         self.Calendar.setGridVisible(True)
#         self.Calendar.setNavigationBarVisible(True)
#         self.Calendar.setDateEditEnabled(True)
#         self.Calendar.setObjectName("Calendar")
#         self.BottomLayout.addWidget(self.Calendar)
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Invoicing.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Invoicing)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Invoicing.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Invoicing)
        self.statusbar.setObjectName("statusbar")
        App_Invoicing.setStatusBar(self.statusbar)

        self.retranslateUi(App_Invoicing)
        QtCore.QMetaObject.connectSlotsByName(App_Invoicing)

        
        # self.Button_EditOffer.clicked.connect(self.edit_offer)
        # self.Button_QueryOffer.clicked.connect(self.query_offer)
        self.Button_Clients.clicked.connect(self.clients)
        # self.Button_EditOrder.clicked.connect(self.edit_order)
        # self.Button_QueryOrder.clicked.connect(self.query_order)
        # self.Button_NewTag.clicked.connect(self.new_tag)
        # self.Button_EditTag.clicked.connect(self.edit_tag)
        # self.Button_QueryTag.clicked.connect(self.query_tag)
        # self.Button_Profile.clicked.connect(self.showMenu)


    def retranslateUi(self, App_Invoicing):
        _translate = QtCore.QCoreApplication.translate
        App_Invoicing.setWindowTitle(_translate("App_Invoicing", "ERP EIPSA - Facturaci√≥n"))
        self.HeaderName.setText(_translate("App_Invoicing", self.name))
        self.Button_Invoice.setText(_translate("App_Invoicing", "    Facturar"))
        self.Button_QueryInvoice.setText(_translate("App_Invoicing", "    Ver Facturaci√≥n"))
        self.Button_ExpirationInvoice.setText(_translate("App_Invoicing", "    Venc. Facturas"))
        self.Button_Clients.setText(_translate("App_Invoicing", "    Clientes"))


    def banks(self):
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_banks = createConnection(user_database, password_database)
        if not db_banks:
            sys.exit()

        self.banks_window=Ui_Banks_Window(db_banks)
        self.banks_window.show()

    def payway(self):
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_payway = createConnection(user_database, password_database)
        if not db_payway:
            sys.exit()

        self.payway_window=Ui_PayWay_Window(db_payway)
        self.payway_window.show()

    def countries(self):
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_countries = createConnection(user_database, password_database)
        if not db_countries:
            sys.exit()

        self.countries_window=Ui_Countries_Window(db_countries)
        self.countries_window.show()


    # def edit_offer(self):
    #     self.edit_offer_window=QtWidgets.QMainWindow()
    #     self.ui=Ui_EditOffer_Menu()
    #     self.ui.setupUi(self.edit_offer_window)
    #     self.edit_offer_window.show()
    #     self.ui.Button_Cancel.clicked.connect(self.update_table)


    # def query_offer(self):
    #     self.query_offer_window=QtWidgets.QMainWindow()
    #     self.ui=Ui_QueryOffer_Window()
    #     self.ui.setupUi(self.query_offer_window)
    #     self.query_offer_window.show()


    def clients(self):
        self.clients_window=QtWidgets.QMainWindow()
        self.ui=Ui_Clients_Window(self.name)
        self.ui.setupUi(self.clients_window)
        self.clients_window.show()


    # def edit_order(self):
    #     self.edit_order_window=QtWidgets.QMainWindow()
    #     self.ui=Ui_Edit_Order_Window()
    #     self.ui.setupUi(self.edit_order_window)
    #     self.edit_order_window.show()
    #     self.ui.Button_Cancel.clicked.connect(self.update_table)


    # def query_order(self):
    #     self.query_order_window=QtWidgets.QMainWindow()
    #     self.ui=Ui_QueryOrder_Window()
    #     self.ui.setupUi(self.query_order_window)
    #     self.query_order_window.show()


    # def new_tag(self):
    #     self.new_tag_window=QtWidgets.QMainWindow()
    #     self.ui=Ui_CreateTag_Menu()
    #     self.ui.setupUi(self.new_tag_window)
    #     self.new_tag_window.show()


    # def edit_tag(self):
    #     self.edittags_menu=QtWidgets.QMainWindow()
    #     self.ui=Ui_EditTags_Menu()
    #     self.ui.setupUi(self.edittags_menu)
    #     self.edittags_menu.show()


    # def query_tag(self):
    #     self.querytag_window=QtWidgets.QMainWindow()
    #     self.ui=Ui_QueryTags_Window('Invoicing')
    #     self.ui.setupUi(self.querytag_window)
    #     self.querytag_window.show()


    def showMenu(self):
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contrase√±a")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))


    def editpassword(self):
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     App_Invoicing = QtWidgets.QMainWindow()
#     ui = Ui_App_Invoicing()
#     ui.setupUi(App_Invoicing)
#     App_Invoicing.showMaximized()
#     sys.exit(app.exec())