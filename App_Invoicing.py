# Form implementation generated from reading ui file 'App_Invoicing.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from PyQt6.QtCore import QUrl
import sys
from datetime import *
import configparser
from utils.Database_Manager import Create_DBconnection, Database_Connection, Access_Connection
from utils.Show_Message import MessageHelper
import os
from config import config, get_path
import psycopg2
from psycopg2.extras import execute_values
import pandas as pd
import re
from PDF_Viewer import PDF_Viewer
from PDF_Styles import pending_invoices, ag_int_liquid
import math
from config_keys import ACCESS_INVOICING_FILE, ACCESS_INVOICING_PWD

basedir = r"\\ERP-EIPSA-DATOS\DATOS\Comunes\EIPSA-ERP"

ZOOM_MULTIPLIER = math.sqrt(2.0)

class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class Ui_App_Invoicing(object):
    """
    Ui_App_Invoicing represents the invoicing application interface.

    Attributes:
        name (str): The name of the application or user.
        username (str): The username of the logged-in user.
        pdf_viewer (PDF_Viewer): An instance of the PDF_Viewer class used to display PDFs.
    """
    def __init__(self, name, username):
        """
        Initializes the Ui_App_Invoicing object with a user-specific name and username.

        Args:
            name (str): The name associated with the application or user.
            username (str): The username of the current user.

        Side Effects:
            Creates an instance of the PDF_Viewer class for PDF handling.
        """
        self.name=name
        self.username=username
        self.pdf_viewer = PDF_Viewer()


    def setupUi(self, App_Invoicing):
        """
        Sets up the user interface components for the main application window.

        Args:
            App_Invoicing (QtWidgets.QMainWindow): The main window object to set up.
        """
        App_Invoicing.setObjectName("App_Invoicing")
        App_Invoicing.resize(945, 860)
        App_Invoicing.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Invoicing.setWindowIcon(icon)
        App_Invoicing.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Invoicing)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Logo.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)

        if self.name == 'Miguel Sahuquillo':
            self.Button_Sending = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Sending.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Sending.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Sending.setToolTip('Enviar Factura/Albar√°n')
            self.Button_Sending.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Sending.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Sending.setText("")
            self.Button_Sending.setIconSize(QtCore.QSize(40, 40))
            self.Button_Sending.setObjectName("Button_Sending")
            self.Header.addWidget(self.Button_Sending)
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Invoice_Send.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Sending.setIcon(icon2)
            self.Button_Sending.clicked.connect(self.send_documents)
            self.Button_Tags = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Tags.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Tags.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Tags.setToolTip('Editar Tags')
            self.Button_Tags.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Tags.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Tags.setText("")
            self.Button_Tags.setIconSize(QtCore.QSize(40, 40))
            self.Button_Tags.setObjectName("Button_Tags")
            self.Header.addWidget(self.Button_Tags)
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Tags.setIcon(icon1)
            self.Button_Tags.clicked.connect(self.edit_tag)
            self.Button_Order_Control = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Order_Control.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Order_Control.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Order_Control.setToolTip('Control Pedidos')
            self.Button_Order_Control.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Order_Control.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Order_Control.setText("")
            self.Button_Order_Control.setIconSize(QtCore.QSize(40, 40))
            self.Button_Order_Control.setObjectName("Button_Order_Control")
            self.Header.addWidget(self.Button_Order_Control)
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Documents_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Order_Control.setIcon(icon1)
            self.Button_Order_Control.clicked.connect(self.order_control)

        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.Button_Notification = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Notification.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setToolTip('Notificaciones')
        self.Button_Notification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Notification.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Notification.setText("")
        self.Button_Notification.setIconSize(QtCore.QSize(40, 40))
        self.Button_Notification.setObjectName("Button_Notification")
        self.Header.addWidget(self.Button_Notification)
        spacerItem15 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem15)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setToolTip('Configuraci√≥n')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "User.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem4 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem4)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_QueryOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOrder.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryOrder.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryOrder.setFont(font)
        self.Button_QueryOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Order_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOrder.setIcon(icon8)
        self.Button_QueryOrder.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryOrder.setObjectName("Button_QueryOrder")
        self.verticalLayout_3.addWidget(self.Button_QueryOrder)
        self.Button_Invoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Invoice.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Invoice.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Invoice.setFont(font)
        self.Button_Invoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Invoice.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Invoice.setIcon(icon3)
        self.Button_Invoice.setIconSize(QtCore.QSize(40, 40))
        self.Button_Invoice.setCheckable(False)
        self.Button_Invoice.setAutoRepeat(False)
        self.Button_Invoice.setAutoExclusive(False)
        self.Button_Invoice.setObjectName("Button_Invoice")
        self.verticalLayout_3.addWidget(self.Button_Invoice)
        self.Button_QueryInvoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryInvoice.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryInvoice.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryInvoice.setFont(font)
        self.Button_QueryInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Invoice_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryInvoice.setIcon(icon4)
        self.Button_QueryInvoice.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryInvoice.setObjectName("Button_QueryInvoice")
        self.verticalLayout_3.addWidget(self.Button_QueryInvoice)
        self.Button_ExpirationInvoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_ExpirationInvoice.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_ExpirationInvoice.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_ExpirationInvoice.setFont(font)
        self.Button_ExpirationInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Invoice_Expiring.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ExpirationInvoice.setIcon(icon5)
        self.Button_ExpirationInvoice.setIconSize(QtCore.QSize(40, 40))
        self.Button_ExpirationInvoice.setObjectName("Button_ExpirationInvoice")
        self.verticalLayout_3.addWidget(self.Button_ExpirationInvoice)
        self.Button_Clients = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Clients.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Clients.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Clients.setFont(font)
        self.Button_Clients.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Customers.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Clients.setIcon(icon6)
        self.Button_Clients.setIconSize(QtCore.QSize(40, 40))
        self.Button_Clients.setObjectName("Button_Clients")
        self.verticalLayout_3.addWidget(self.Button_Clients)

        if self.name in ['Miguel Sahuquillo']:
            self.Button_Banks = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_Banks.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_Banks.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_Banks.setFont(font)
            self.Button_Banks.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Banks.setText(("    Bancos"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Banks.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Banks.setIcon(icon7)
            self.Button_Banks.setIconSize(QtCore.QSize(40, 40))
            self.Button_Banks.setObjectName("Button_Banks")
            self.Button_Banks.clicked.connect(self.banks)
            self.verticalLayout_3.addWidget(self.Button_Banks)
            self.Button_Countries = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_Countries.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_Countries.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_Countries.setFont(font)
            self.Button_Countries.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Countries.setText(("    Pa√≠s Destino"))
            icon8 = QtGui.QIcon()
            icon8.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Countries.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Countries.setIcon(icon8)
            self.Button_Countries.setIconSize(QtCore.QSize(40, 40))
            self.Button_Countries.setObjectName("Button_Countries")
            self.Button_Countries.clicked.connect(self.countries)
            self.verticalLayout_3.addWidget(self.Button_Countries)
            self.Button_PayWay = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_PayWay.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_PayWay.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_PayWay.setFont(font)
            self.Button_PayWay.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_PayWay.setText(("    Forma De Pago"))
            icon9 = QtGui.QIcon()
            icon9.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "PayWay.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_PayWay.setIcon(icon9)
            self.Button_PayWay.setIconSize(QtCore.QSize(40, 40))
            self.Button_PayWay.setObjectName("Button_PayWay")
            self.Button_PayWay.clicked.connect(self.payway)
            self.verticalLayout_3.addWidget(self.Button_PayWay)
            self.Button_NewOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_NewOffer.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_NewOffer.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_NewOffer.setFont(font)
            self.Button_NewOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon3 = QtGui.QIcon()
            icon3.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Offer_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_NewOffer.setIcon(icon3)
            self.Button_NewOffer.setIconSize(QtCore.QSize(40, 40))
            self.Button_NewOffer.setCheckable(False)
            self.Button_NewOffer.setAutoRepeat(False)
            self.Button_NewOffer.setAutoExclusive(False)
            self.Button_NewOffer.setObjectName("Button_NewOffer")
            self.verticalLayout_3.addWidget(self.Button_NewOffer)
            self.Button_EditOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_EditOffer.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_EditOffer.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_EditOffer.setFont(font)
            self.Button_EditOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon4 = QtGui.QIcon()
            icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Offer_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_EditOffer.setIcon(icon4)
            self.Button_EditOffer.setIconSize(QtCore.QSize(40, 40))
            self.Button_EditOffer.setObjectName("Button_EditOffer")
            self.verticalLayout_3.addWidget(self.Button_EditOffer)
            self.Button_NewOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_NewOrder.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_NewOrder.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_NewOrder.setFont(font)
            self.Button_NewOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Order_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_NewOrder.setIcon(icon6)
            self.Button_NewOrder.setIconSize(QtCore.QSize(40, 40))
            self.Button_NewOrder.setObjectName("Button_NewOrder")
            self.verticalLayout_3.addWidget(self.Button_NewOrder)
            self.Button_NewTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_NewTag.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_NewTag.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_NewTag.setFont(font)
            self.Button_NewTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon9 = QtGui.QIcon()
            icon9.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_NewTag.setIcon(icon9)
            self.Button_NewTag.setIconSize(QtCore.QSize(40, 40))
            self.Button_NewTag.setObjectName("Button_NewTag")
            self.verticalLayout_3.addWidget(self.Button_NewTag)
            self.Button_EditTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_EditTag.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_EditTag.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_EditTag.setFont(font)
            self.Button_EditTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon10 = QtGui.QIcon()
            icon10.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_EditTag.setIcon(icon10)
            self.Button_EditTag.setIconSize(QtCore.QSize(40, 40))
            self.Button_EditTag.setObjectName("Button_EditTag")
            self.verticalLayout_3.addWidget(self.Button_EditTag)
            self.Button_NewOffer.clicked.connect(self.new_offer)
            self.Button_EditOffer.clicked.connect(self.edit_offer)
            self.Button_NewOrder.clicked.connect(self.new_order)
            self.Button_NewTag.clicked.connect(self.new_tag)
            self.Button_EditTag.clicked.connect(self.edit_tag)

        elif self.name in ['Javier Zofio']:
            self.Button_PendInvoice = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_PendInvoice.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_PendInvoice.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_PendInvoice.setFont(font)
            self.Button_PendInvoice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_PendInvoice.setText(("  Fact. Ptes S/Cliente"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Invoice_Pending.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_PendInvoice.setIcon(icon7)
            self.Button_PendInvoice.setIconSize(QtCore.QSize(40, 40))
            self.Button_PendInvoice.setObjectName("Button_PendInvoice")
            self.verticalLayout_3.addWidget(self.Button_PendInvoice)
            self.Button_PendInvoice.clicked.connect(self.pending_invoice)

            self.Button_Transactions = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_Transactions.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_Transactions.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_Transactions.setFont(font)
            self.Button_Transactions.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Transactions.setText(("  Datos Cobro-Pago"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Payments.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Transactions.setIcon(icon7)
            self.Button_Transactions.setIconSize(QtCore.QSize(40, 40))
            self.Button_Transactions.setObjectName("Button_Transactions")
            self.verticalLayout_3.addWidget(self.Button_Transactions)
            self.Button_Transactions.clicked.connect(self.query_transactions)

            self.Button_AgtInt = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_AgtInt.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_AgtInt.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_AgtInt.setFont(font)
            self.Button_AgtInt.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_AgtInt.setText(("  Agt. Int. Liquid"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Agents.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_AgtInt.setIcon(icon7)
            self.Button_AgtInt.setIconSize(QtCore.QSize(40, 40))
            self.Button_AgtInt.setObjectName("Button_AgtInt")
            self.verticalLayout_3.addWidget(self.Button_AgtInt)
            self.Button_ExpExcel = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_ExpExcel.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_ExpExcel.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_ExpExcel.setFont(font)
            self.Button_ExpExcel.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_ExpExcel.setText(("  Exportar a Excel"))
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Excel.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ExpExcel.setIcon(icon7)
            self.Button_ExpExcel.setIconSize(QtCore.QSize(40, 40))
            self.Button_ExpExcel.setObjectName("Button_ExpExcel")
            self.verticalLayout_3.addWidget(self.Button_ExpExcel)
            self.Button_AgtInt.clicked.connect(self.ag_int_liq)

        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem5 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem5)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.table = QtWidgets.QTableWidget(parent=self.frame)
        self.table.setMinimumSize(QtCore.QSize(int(650), int(280)))
        self.table.setObjectName("table")
        self.table.setColumnCount(0)
        self.table.setRowCount(0)
        self.table.verticalHeader().setVisible(False)
        self.MainLayout.addWidget(self.table)
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem5)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Invoicing.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Invoicing)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Invoicing.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Invoicing)
        self.statusbar.setObjectName("statusbar")
        App_Invoicing.setStatusBar(self.statusbar)

        self.retranslateUi(App_Invoicing)
        QtCore.QMetaObject.connectSlotsByName(App_Invoicing)

        self.Button_Invoice.clicked.connect(self.invoice)
        self.Button_QueryInvoice.clicked.connect(self.query_invoice)
        self.Button_ExpirationInvoice.clicked.connect(self.query_expiring_invoice)
        self.Button_Clients.clicked.connect(self.clients)
        self.Button_Profile.clicked.connect(self.showMenu)
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.Button_Notification.clicked.connect(self.notifications)

        self.load_notifications()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, App_Invoicing):
        """
        Translates and updates the text of various UI elements in the given App_Comercial.
        """
        _translate = QtCore.QCoreApplication.translate
        App_Invoicing.setWindowTitle(_translate("App_Invoicing", "ERP EIPSA - Facturaci√≥n"))
        self.HeaderName.setText(_translate("App_Invoicing", self.name))
        self.Button_Invoice.setText(_translate("App_Invoicing", "    Facturar"))
        self.Button_QueryInvoice.setText(_translate("App_Invoicing", "    Ver Facturaci√≥n"))
        self.Button_ExpirationInvoice.setText(_translate("App_Invoicing", "    Venc. Facturas"))
        self.Button_Clients.setText(_translate("App_Invoicing", "    Clientes"))
        self.Button_QueryOrder.setText(_translate("App_Invoicing", "   Consultar Pedidos"))

        if self.username in ['m.sahuquillo']:
            self.Button_NewOffer.setText(_translate("App_Invoicing", "        Nueva Oferta"))
            self.Button_EditOffer.setText(_translate("App_Invoicing", "    Editar Oferta"))
            self.Button_NewOrder.setText(_translate("App_Comercial", "    Nuevo Pedido"))
            self.Button_NewTag.setText(_translate("App_Comercial", "    Nuevo(s) TAG(s)"))
            self.Button_EditTag.setText(_translate("App_Comercial", "    Editar TAG(s)"))

# Function to open window to send documents
    def send_documents(self):
        """
        Opens the Invoice Send Menu window, which allows users to send documents.
        """
        from InvoiceSend_Menu import Ui_InvoiceSend_Menu
        self.send_invoice_menu=QtWidgets.QMainWindow()
        self.ui=Ui_InvoiceSend_Menu()
        self.ui.setupUi(self.send_invoice_menu)
        self.send_invoice_menu.show()

# Function to open window for new invoices
    def invoice(self):
        """
        Opens the New Invoice window, where users can create new invoices.
        """
        from InvoiceNew_Window import Ui_InvoiceNew_Window
        dbparam = config()
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_invoices = Create_DBconnection(user_database, password_database)
        if not db_invoices:
            sys.exit()

        self.invoices_app = Ui_InvoiceNew_Window(db_invoices, self.username)
        self.invoices_app.showMaximized()

# Function to open window for query all invoices
    def query_invoice(self):
        """
        Opens the Invoice Query window, allowing users to view all invoices.
        """
        from InvoiceQuery_Window import Ui_QueryInvoice_Window
        self.query_invoice_window=QtWidgets.QMainWindow()
        self.ui=Ui_QueryInvoice_Window(self.username)
        self.ui.setupUi(self.query_invoice_window)
        self.query_invoice_window.showMaximized()

# Function to open window for query expending invoices
    def query_expiring_invoice(self):
        """
        Opens the Expiring Invoice Query window, allowing users to view invoices that are nearing expiration.
        """
        from InvoiceExpiration_Window import Ui_ExpiringInvoice_Window
        self.query_expiring_invoice_window=QtWidgets.QMainWindow()
        self.ui=Ui_ExpiringInvoice_Window()
        self.ui.setupUi(self.query_expiring_invoice_window)
        self.query_expiring_invoice_window.showMaximized()

# Function to open window for query transactions
    def query_transactions(self):
        """
        Opens the Transactions Query window, allowing users to view invoice-related transactions.
        """
        from InvoiceTransactions_Window import Ui_TransactionsInvoice_Window
        self.query_transactions_window=QtWidgets.QMainWindow()
        self.ui=Ui_TransactionsInvoice_Window()
        self.ui.setupUi(self.query_transactions_window)
        self.query_transactions_window.showMaximized()

# Function to open window for manage banks
    def banks(self):
        """
        Opens the Banks Management window, allowing users to manage bank information.
        """
        from Banks_Window import Ui_Banks_Window
        dbparam = config()
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_banks = Create_DBconnection(user_database, password_database)
        if not db_banks:
            sys.exit()

        self.banks_window=Ui_Banks_Window(db_banks)
        self.banks_window.show()

# Function to open window for manage payway
    def payway(self):
        """
        Opens the Payway Management window, allowing users to manage payment methods.
        """
        from PayWay_Window import Ui_PayWay_Window
        dbparam = config()
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_payway = Create_DBconnection(user_database, password_database)
        if not db_payway:
            sys.exit()

        self.payway_window=Ui_PayWay_Window(db_payway)
        self.payway_window.show()

# Function to open window for manage countries
    def countries(self):
        """
        Opens the Countries Management window, allowing users to manage country information.
        """
        from Countries_Window import Ui_Countries_Window
        dbparam = config()
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_countries = Create_DBconnection(user_database, password_database)
        if not db_countries:
            sys.exit()

        self.countries_window=Ui_Countries_Window(db_countries)
        self.countries_window.show()

# Function to open window for manage clients
    def clients(self):
        """
        Opens the Clients Management window, allowing users to manage client information.
        """
        from Clients_Window import Ui_Clients_Window
        self.clients_window=QtWidgets.QMainWindow()
        self.ui=Ui_Clients_Window(self.name, self.username)
        self.ui.setupUi(self.clients_window)
        self.clients_window.show()

# Function to query pending invoices
    def pending_invoice(self):
        """
        Opens a dialog to input a date range and retrieves pending invoices from the database within that range.
        The results are processed and displayed in a DataFrame.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Facturas Pendientes')
        dlg.setLabelText('Fecha Desde (dd-mm-yyyy):')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Facturas Pendientes')
        dlg2.setLabelText('Fecha Hasta (dd-mm-yyyy):')

        while True:
            clickedButton = dlg.exec()
            if clickedButton == 1:
                date_1 = dlg.textValue()
                if date_1 != '' and re.match(r'^\d{2}-\d{2}-\d{4}$', date_1):
                    while True:
                        clickedButton2 = dlg2.exec()
                        if clickedButton2 == 1:
                            date_2 = dlg2.textValue()
                            if date_2 != '' and re.match(r'^\d{2}-\d{2}-\d{4}$', date_2):
                                conn = None
                                try:
                                # read the connection parameters
                                    params = config()
                                # connect to the PostgreSQL server
                                    conn = psycopg2.connect(**params)
                                    cur = conn.cursor()
                                # execution of commands
                                    commands_pendinginvoices = (""" SELECT clients."code", clients."name", invoice."num_invoice", TO_CHAR(invoice."date_invoice",'dd/MM/yyyy'), 
                                                                    TO_CHAR(DATE (
                                                                        CASE
                                                                            WHEN EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1 > 12 THEN EXTRACT(YEAR FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1
                                                                            ELSE EXTRACT(YEAR FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days"))
                                                                        END || '-' ||
                                                                        CASE
                                                                            WHEN EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1 > 12 THEN '01'
                                                                            ELSE EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days"))
                                                                        END || '-' ||
                                                                        CASE
                                                                            WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) < COALESCE(NULLIF(clients."vto_prog1",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog1",''), '1')
                                                                            WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) < COALESCE(NULLIF(clients."vto_prog2",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog2",''), '1')
                                                                            WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) > COALESCE(NULLIF(clients."vto_prog2",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog1",''), '1')
                                                                            ELSE TO_CHAR(EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")),'FM00')
                                                                        END
                                                                    ),'dd/MM/yyyy') AS exp_date,
                                                                    invoice."obs_delivnote",
                                                                    CAST(invoice."tax_base_amount" + (invoice."tax_base_amount" * invoice."iva"/100) AS NUMERIC) AS total_fact,
                                                                    CASE
                                                                        WHEN invoice."pay_date" IS NOT NULL THEN DATE (
                                                                            CASE
                                                                                WHEN EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1 > 12 THEN EXTRACT(YEAR FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1
                                                                                ELSE EXTRACT(YEAR FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days"))
                                                                            END || '-' ||
                                                                            CASE
                                                                                WHEN EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1 > 12 THEN '01'
                                                                                ELSE EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days"))
                                                                            END || '-' ||
                                                                            CASE
                                                                                WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) < COALESCE(NULLIF(clients."vto_prog1",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog1",''), '1')
                                                                                WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) < COALESCE(NULLIF(clients."vto_prog2",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog2",''), '1')
                                                                                WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) > COALESCE(NULLIF(clients."vto_prog2",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog1",''), '1')
                                                                                ELSE TO_CHAR(EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")),'FM00')
                                                                            END
                                                                            ) - invoice."pay_date"
                                                                        ELSE DATE (
                                                                            CASE
                                                                                WHEN EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1 > 12 THEN EXTRACT(YEAR FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1
                                                                                ELSE EXTRACT(YEAR FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days"))
                                                                            END || '-' ||
                                                                            CASE
                                                                                WHEN EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) + 1 > 12 THEN '01'
                                                                                ELSE EXTRACT(MONTH FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days"))
                                                                            END || '-' ||
                                                                            CASE
                                                                                WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) < COALESCE(NULLIF(clients."vto_prog1",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog1",''), '1')
                                                                                WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) < COALESCE(NULLIF(clients."vto_prog2",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog2",''), '1')
                                                                                WHEN EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")) > COALESCE(NULLIF(clients."vto_prog2",''), '1')::numeric THEN COALESCE(NULLIF(clients."vto_prog1",''), '1')
                                                                                ELSE TO_CHAR(EXTRACT(DAY FROM (invoice."date_invoice" + INTERVAL '1 day' * pay_way."num_days")),'FM00')
                                                                            END
                                                                            ) - CURRENT_DATE
                                                                    END AS difference
                                                                FROM 
                                                                    purch_fact.invoice_header AS invoice
                                                                    INNER JOIN purch_fact.clients_test AS clients ON (invoice."id_client" = clients."id")
                                                                    INNER JOIN purch_fact.pay_way AS pay_way ON (clients."pay_way_id" = pay_way."id")
                                                                WHERE 
                                                                    invoice."pay_date" IS NULL 
                                                                    AND invoice."date_invoice" BETWEEN %s AND %s
                                                                """)

                                    data = (date_1, date_2,)
                                    cur.execute(commands_pendinginvoices, data)

                                    results = cur.fetchall()
                                    df = pd.DataFrame(results, columns=["code", "name", "num_invoice", "date_invoice", "exp_date", "obs_delivnote", "total_invoice", "difference"])

                                # close communication with the PostgreSQL database server
                                    cur.close()
                                # commit the changes
                                    conn.commit()

                                    self.generate_pending_invoices_pdf(df)

                                except (Exception, psycopg2.DatabaseError) as error:
                                    dlg = QtWidgets.QMessageBox()
                                    new_icon = QtGui.QIcon()
                                    new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg.setWindowIcon(new_icon)
                                    dlg.setWindowTitle("ERP EIPSA")
                                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                                + str(error))
                                    print(error)
                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                    dlg.exec()
                                    del dlg, new_icon
                                finally:
                                    if conn is not None:
                                        conn.close()
                                break
                            dlg_error = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_error.setWindowIcon(new_icon)
                            dlg_error.setWindowTitle("Facturas Pendientes")
                            dlg_error.setText("La fecha no puede estar vac√≠o y debe tener un formato v√°lido.")
                            dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_error.exec()
                            del dlg_error,new_icon
                        else:
                            break
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Facturas Pendientes")
                dlg_error.setText("La fecha no puede estar vac√≠o y debe tener un formato v√°lido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to query intermediate agent liquidation
    def ag_int_liq(self):
        """
        Opens a dialog to input a date range and retrieves agent transactions from the database within that range.
        The results are processed and displayed in a DataFrame.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Agte. Interm. Liquidaci√≥n')
        dlg.setLabelText('Fecha Desde (dd-mm-yyyy):')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Agte. Interm. Liquidaci√≥n')
        dlg2.setLabelText('Fecha Hasta (dd-mm-yyyy):')

        while True:
            clickedButton = dlg.exec()
            if clickedButton == 1:
                date_1 = dlg.textValue()
                if date_1 != '' and re.match(r'^\d{2}-\d{2}-\d{4}$', date_1):
                    while True:
                        clickedButton2 = dlg2.exec()
                        if clickedButton2 == 1:
                            date_2 = dlg2.textValue()
                            if date_2 != '' and re.match(r'^\d{2}-\d{2}-\d{4}$', date_2):
                                conn = None
                                try:
                                # read the connection parameters
                                    params = config()
                                # connect to the PostgreSQL server
                                    conn = psycopg2.connect(**params)
                                    cur = conn.cursor()
                                # execution of commands
                                    commands_ag_int = (""" SELECT invoice."num_invoice", TO_CHAR(invoice."date_invoice",'dd/MM/yyyy'), CAST(invoice."tax_base_amount" AS NUMERIC),
                                                                    invoice."aginterm", invoice."aginterm_state",
                                                                    CAST(country."porc" AS NUMERIC), clients."name"
                                                                FROM 
                                                                    purch_fact.invoice_header AS invoice
                                                                    INNER JOIN purch_fact.destination_country AS country ON (invoice."id_dest_country" = country."id")
                                                                    INNER JOIN purch_fact.clients_test AS clients ON (invoice."id_client" = clients."id")
                                                                    INNER JOIN purch_fact.pay_way AS pay_way ON (clients."pay_way_id" = pay_way."id")
                                                                WHERE 
                                                                    invoice."pay_date" IS NULL 
                                                                    AND invoice."date_invoice" BETWEEN %s AND %s
                                                                    AND invoice."aginterm" <> ''
                                                                ORDER BY clients."name"
                                                                """)

                                    data = (date_1, date_2,)
                                    cur.execute(commands_ag_int, data)

                                    results = cur.fetchall()
                                    df = pd.DataFrame(results, columns=["num_invoice", "date_invoice", "tax_base", "agint", "agint_state", "porc", "name"])

                                # close communication with the PostgreSQL database server
                                    cur.close()
                                # commit the changes
                                    conn.commit()

                                    self.generate_ag_int_pdf(df)

                                except (Exception, psycopg2.DatabaseError) as error:
                                    dlg = QtWidgets.QMessageBox()
                                    new_icon = QtGui.QIcon()
                                    new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg.setWindowIcon(new_icon)
                                    dlg.setWindowTitle("ERP EIPSA")
                                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                                + str(error))
                                    print(error)
                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                    dlg.exec()
                                    del dlg, new_icon
                                finally:
                                    if conn is not None:
                                        conn.close()
                                break
                            dlg_error = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_error.setWindowIcon(new_icon)
                            dlg_error.setWindowTitle("Agte. Interm. Liquidaci√≥n")
                            dlg_error.setText("La fecha no puede estar vac√≠o y debe tener un formato v√°lido.")
                            dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_error.exec()
                            del dlg_error,new_icon
                        else:
                            break
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Agte. Interm. Liquidaci√≥n")
                dlg_error.setText("La fecha no puede estar vac√≠o y debe tener un formato v√°lido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to open the context menu when profile picture is clicked
    def showMenu(self):
        """
        Displays a context menu when the profile button is clicked. 
        Provides options to edit the password.
        """
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contrase√±a")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))

# Function to open window for editing password
    def editpassword(self):
        """
        Opens a new window for editing the user's password. 
        """
        from PasswordEdit_Window import Ui_EditPasswordWindow
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()

# Function to generate pdf for pending invoices
    def generate_pending_invoices_pdf(self, df):
        """
        Generates a PDF report of pending invoices for clients.

        Args:
            df (DataFrame): A DataFrame containing client data and invoice details.
        """
        list_clients = df['code'].unique().tolist()

        pdf = pending_invoices()
        pdf.set_auto_page_break(auto=True, margin=1)
        pdf.add_page()
        pdf.add_font('DejaVuSansCondensed', '', str(get_path("Resources", "Iconos", "DejaVuSansCondensed.ttf")))
        pdf.add_font('DejaVuSansCondensed-Bold', '', str(get_path("Resources", "Iconos", "DejaVuSansCondensed-Bold.ttf")))
        pdf.set_font('Helvetica', 'B', 10)
        pdf.cell(15, 0.5, self.format_date_spanish(date.today()))
        pdf.ln(1)

        for code in list_clients:
            pdf.set_font('Helvetica', 'B', 10)
            df_client = df[df['code'] == code]
            pdf.set_fill_color(185, 205, 229)
            pdf.cell(3, 0.5, code, align="R", fill=True,)
            pdf.cell(0.2, 0.5, ' | ', align="C")
            pdf.cell(15, 0.5, df_client.iloc[0, 1], fill=True, )
            pdf.ln(0.5)

            pdf.set_text_color(97,106,118)
            pdf.cell(2, 1, 'N¬∫ Factura')
            pdf.cell(2, 1, 'Importe')
            pdf.cell(2, 1, 'F. Factura')
            pdf.cell(2, 1, 'F. Vto.')
            pdf.cell(2, 1, 'Observaciones')
            pdf.set_text_color(0,0,0)
            pdf.ln(1)

            for row in range(df_client.shape[0]):
                pdf.set_font("DejaVuSansCondensed", size=10)
                pdf.cell(2, 0.5, df_client.iloc[row, 2])
                pdf.cell(2, 0.5, self.format_number(df_client.iloc[row, 6]))
                pdf.cell(2, 0.5, df_client.iloc[row, 3])
                if df_client.iloc[row, 7] > 0:
                    pdf.set_fill_color(169, 208, 142)
                elif df_client.iloc[row, 7] < 0 and df_client.iloc[row, 7] > -30:
                    pdf.set_fill_color(255, 230, 153)
                else:
                    pdf.set_fill_color(217, 150, 148)
                pdf.cell(2, 0.5, df_client.iloc[row, 4], fill=True,)
                pdf.cell(2, 0.5, pdf.cell(3, 1, df_client.iloc[row, 5]))
                pdf.ln(0.5)

            pdf.ln(0.5)

            pdf.set_text_color(144,60,57)
            pdf.cell(2, 0.5, 'Total S/Cl.:', border=1)
            pdf.set_font('DejaVuSansCondensed-Bold', size = 10)
            pdf.cell(3.2, 0.5, self.format_number(df_client['total_invoice'].sum()), border=1)
            pdf.set_text_color(0,0,0)
            pdf.ln(1)

        pdf_buffer = pdf.output()

        temp_file_path = os.path.abspath(str(get_path("Resources","pdfviewer","temp", "temp.pdf")))

        with open(temp_file_path, "wb") as temp_file:
            temp_file.write(pdf_buffer)

        pdf.close()

        self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
        self.pdf_viewer.showMaximized()

# Function to generate pdf for pending invoices
    def generate_ag_int_pdf(self, df):
        """
        Generates a PDF report of agent intermediary (AG) states and their invoices.

        Args:
            df (DataFrame): A DataFrame containing agent and invoice information.
        """
        list_ag = df['agint'].unique().tolist()

        pdf = ag_int_liquid()
        pdf.set_auto_page_break(auto=True, margin=1)
        pdf.add_page()
        pdf.add_font('DejaVuSansCondensed', '', str(get_path("Resources", "Iconos", "DejaVuSansCondensed.ttf")))
        pdf.add_font('DejaVuSansCondensed-Bold', '', str(get_path("Resources", "Iconos", "DejaVuSansCondensed-Bold.ttf")))

        pdf.set_font('Helvetica', 'B', 20)
        pdf.cell(12, 1, 'Estado Agentes Intermediarios')
        pdf.set_font('Helvetica', 'B', 10)
        pdf.cell(7, 1, self.format_date_spanish(date.today()), align='R')

        y_position = pdf.get_y()

        pdf.set_draw_color(47, 54, 153)
        pdf.set_line_width(0.1)
        pdf.line(1, y_position + 1, 20, y_position + 1)
        pdf.set_line_width(0.01)
        pdf.set_draw_color(0, 0, 0)

        for code in list_ag:
            pdf.set_font('Helvetica', 'B', 10)
            df_agent = df[df['agint'] == code]
            pdf.set_xy(1, y_position + 2)

            pdf.cell(4.25, 0.5, 'Agente intermediario:', align='R')
            pdf.set_fill_color(255, 255, 153)
            pdf.set_text_color(186,20,25)
            pdf.cell(4, 0.5, code, align="C", fill=True,)
            pdf.set_text_color(0,0,0)
            pdf.cell(5.5, 0.5, 'Comision:', align='R')
            pdf.set_fill_color(255, 255, 153)
            pdf.set_text_color(186,20,25)
            pdf.cell(4, 0.5, '{:.2f}'.format(df_agent.iloc[0,5]) + ' %', align="C", fill=True,)
            pdf.set_text_color(0,0,0)

            pdf.ln(1)

            pdf.cell(4.25, 0.5, 'Total Facturado s/Agte.:', align='R')
            pdf.set_fill_color(255, 255, 153)
            pdf.set_text_color(186,20,25)
            pdf.set_font('DejaVuSansCondensed-Bold', size=10)
            pdf.cell(4, 0.5, self.format_number(df_agent['tax_base'].sum()), align="C", fill=True,)
            pdf.set_text_color(0,0,0)
            pdf.cell(5.5, 0.5, 'Total asignado por comision:', align='R')
            pdf.set_fill_color(255, 255, 153)
            pdf.set_text_color(186,20,25)
            pdf.set_font('DejaVuSansCondensed-Bold', size=10)
            pdf.cell(4, 0.5, self.format_number(float(df_agent['tax_base'].sum()) * float(df_agent.iloc[0,5]) / 100), align="C", fill=True,)
            pdf.set_text_color(0,0,0)

            y_position = pdf.get_y()
            pdf.line(1, y_position + 1, 20, y_position + 1)

            list_states = df['agint_state'].unique().tolist()

            for state in list_states:
                y_position = pdf.get_y()
                pdf.set_xy(7.5, y_position + 1.5)
                pdf.set_text_color(0,0,0)
                pdf.cell(2, 1, 'Estado:', align='C', border='LTB')
                pdf.set_fill_color(255, 255, 153)
                pdf.set_text_color(186,20,25)
                pdf.set_font('Helvetica', 'B', 13)
                pdf.cell(3.5, 1, state, align="C", border='RTB', fill=True)
                pdf.set_text_color(0,0,0)

                pdf.ln(1.5)

                pdf.set_font('Helvetica', 'B', 10)
                pdf.cell(2, 0.5, 'N¬∫ Fact.:', align='C')
                pdf.cell(10, 0.5, 'Cliente:', align='C')
                pdf.cell(2, 0.5, 'Fecha:', align='C')
                pdf.cell(3, 0.5, 'Base Fac.:', align='C')
                pdf.cell(2, 0.5, 'Comisi√≥n:', align='C')
                pdf.set_font('Helvetica', '', 10)

                y_position = pdf.get_y()
                pdf.line(1, y_position + 0.5, 20, y_position + 0.5)

                pdf.ln(0.5)

                df_state = df[df_agent['agint_state'] == state]
                for row in range(df_state.shape[0]):
                    pdf.cell(2, 0.5, df_state.iloc[row, 0], align='C')
                    pdf.cell(10, 0.5, df_state.iloc[row, 6], align='C')
                    pdf.cell(2, 0.5, df_state.iloc[row, 1], align='C')
                    pdf.set_font('DejaVuSansCondensed', size=10)
                    pdf.cell(3, 0.5, self.format_number(df_state.iloc[row, 2]), align='C')
                    pdf.cell(2, 0.5, self.format_number(df_state.iloc[row, 2] * df_agent.iloc[row,5] / 100), align='C')
                    pdf.set_font('Helvetica', '', 10)
                    pdf.ln(0.5)

                pdf.ln(0.5)

                y_position = pdf.get_y()
                pdf.set_xy(3.75,y_position)
                pdf.set_text_color(0,114,188)
                pdf.set_font('Helvetica', 'BU', 10)
                pdf.cell(3, 1, 'Total Facturado:', align='C', border='LTB')
                pdf.set_fill_color(255, 255, 153)
                pdf.set_text_color(186,20,25)
                pdf.set_font('DejaVuSansCondensed-Bold', size=13)
                pdf.cell(3.5, 1, self.format_number(df_state['tax_base'].sum()), align="C", border='TB', fill=True)
                pdf.set_text_color(0,114,188)
                pdf.set_font('Helvetica', 'BU', 10)
                pdf.cell(3, 1, 'Total estado:', align='C', border='TB')
                pdf.set_fill_color(255, 255, 153)
                pdf.set_text_color(186,20,25)
                pdf.set_font('DejaVuSansCondensed-Bold', size=13)
                pdf.cell(3.5, 1, self.format_number(df_state['tax_base'].sum() * df_agent.iloc[0,5] / 100), align="C", border='RTB', fill=True)
                pdf.set_text_color(0,0,0)

                y_position = pdf.get_y()
                pdf.line(1, y_position + 1.5, 20, y_position + 1.5)

                pdf.ln(0.5)

        #     # pdf.add_page()

        pdf_buffer = pdf.output()

        temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp.pdf"))))

        with open(temp_file_path, "wb") as temp_file:
            temp_file.write(pdf_buffer)

        pdf.close()

        self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
        self.pdf_viewer.showMaximized()

# Function to format amount values
    def format_number(self, number):
        """
        Formats a number as a string with two decimal places and a euro symbol.

        Args:
            number (float): The number to format.
            
        Returns:
            str: The formatted number as a string with the euro symbol.
        """
    # Convertir el n√∫mero a una cadena con el formato deseado
        formatted_number = '{:,.2f}'.format(number)

        # Reemplazar el punto decimal por coma
        formatted_number = formatted_number.replace('.', ':')
        formatted_number = formatted_number.replace(',', '.')
        formatted_number = formatted_number.replace(':', ',')

        # Agregar el s√≠mbolo de euro al final
        formatted_number += ' ‚Ç¨'

        return formatted_number

# Function to format date to long in spanish
    def format_date_spanish(self, date_toformat):
        """
        Formats a date object to a long string in Spanish.

        Args:
            date_toformat (date): The date to format.
            
        Returns:
            str: The formatted date as a string in the format "day de month de year".
        """
        months = ("enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre")
        day = date_toformat.day
        month = months[date_toformat.month - 1]
        year = date_toformat.year
        messsage = "{} de {} de {}".format(day, month, year)

        return messsage

# Function to open window for tag edition
    def edit_tag(self):
        """
        Opens a window for editing tags in the facturation system.
        """
        from TAGEdit_Facturation_Window import Ui_EditTags_Facturation_Window
        dbparam = config()
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_tags_fact = Create_DBconnection(user_database, password_database)
        if not db_tags_fact:
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Facturation_Window(self.name, db_tags_fact)
        self.edit_tags_app.showMaximized()

# Function to open window to query orders
    def query_order(self):
        """
        Opens a window for querying orders.
        """
        from OrderQuery_Window import Ui_QueryOrder_Window
        self.query_order_window=Ui_QueryOrder_Window()
        self.query_order_window.show()

# Function to load number of notifications
    def load_notifications(self):
        """
        Loads and displays notifications for the user from various tables in the 'notifications' schema.
        """
        query_tables_notifications = """SELECT table_name
                                FROM information_schema.tables
                                WHERE table_schema = 'notifications' AND table_type = 'BASE TABLE';"""

        try:
            with Database_Connection(config()) as conn:
                with conn.cursor() as cur:
                    cur.execute(query_tables_notifications)
                    results=cur.fetchall()
                    tables_names=[x[0] for x in results]

            notifications = []

            for table in tables_names:
                with Database_Connection(config()) as conn:
                    with conn.cursor() as cur:
                        commands_notifications = f" SELECT * FROM notifications.{table} WHERE username = '{self.username}' and state = 'Pendiente'"
                        cur.execute(commands_notifications)
                        results=cur.fetchall()

                for x in results:
                    notifications.append(x)

        except (Exception, psycopg2.DatabaseError) as error:
            MessageHelper.show_message("Ha ocurrido el siguiente error:\n"
                        + str(error), "critical")

        if len(notifications) != 0:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Notif_on.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        else:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Notif_off.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Notification.setIcon(icon13)

# Function to open window to check notifications
    def notifications(self):
        """
        Opens a new window to show active notifications. 
        """
        from NotificationsHistory_Window import Ui_HistoryNotifications_Window
        self.notification_window=Ui_HistoryNotifications_Window(self.username)
        self.notification_window.show()
        self.notification_window.Button_Cancel.clicked.connect(self.load_notifications)

# Function to open window for create offers
    def new_offer(self):
        """
        Opens a new window for creating a new offer in the application. 
        """
        from OfferNew_Window import Ui_New_Offer_Window
        self.projectoffer_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_Offer_Window(self.username)
        self.ui.setupUi(self.projectoffer_window)
        self.projectoffer_window.show()

# Function to open window for edit offers
    def edit_offer(self):
        """
        Opens a new window for editing an existing offer. 
        """
        from OfferEdit_Menu import Ui_EditOffer_Menu
        self.edit_offer_menu=QtWidgets.QMainWindow()
        self.ui=Ui_EditOffer_Menu(self.username)
        self.ui.setupUi(self.edit_offer_menu)
        self.edit_offer_menu.show()
        # self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for create orders
    def new_order(self):
        """
        Opens a new window for creating a new order. 
        """
        from OrderNewAddData_Window import Ui_New_OrderAddData_Window
        self.new_orderAddData_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_OrderAddData_Window()
        self.ui.setupUi(self.new_orderAddData_window)
        self.new_orderAddData_window.show()
        # self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for create tags
    def new_tag(self):
        """
        Opens a new window for creating new tags. 
        """
        from TAGCreate_Menu import Ui_CreateTag_Menu
        self.new_tag_window=QtWidgets.QMainWindow()
        self.ui=Ui_CreateTag_Menu()
        self.ui.setupUi(self.new_tag_window)
        self.new_tag_window.show()

# Function to open window to edit tags
    def edit_tag(self):
        """
        Opens the "Edit Tags Commercial" window, establishes a database connection and closes the current menu.

        Args:
            EditTags_Menu (QtWidgets.QMainWindow): The Edit Tags menu window to be closed after opening the new window.
        """
        from TAGEdit_Commercial_Window import Ui_EditTags_Commercial_Window
        dbparam = config()
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_tag_com = Create_DBconnection(user_database, password_database)
        if not db_tag_com:
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Commercial_Window(db_tag_com)
        self.edit_tags_app.showMaximized()


# Function to open window to edit orders
    def order_control(self):
        """
        Opens the order window for managing order operations.
        """
        from Invoicing_Order_Control_Window import Ui_Invoicing_Order_Control_Window
        dbparam = config()
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_order_control = Create_DBconnection(user_database, password_database, 'order_control_connection')
        if not db_order_control:
            sys.exit()

        self.order_control_window = Ui_Invoicing_Order_Control_Window(db_order_control, self.username)
        self.order_control_window.showMaximized()



# Function to update invoice data coming from Access File
    def update_invoices(self):
        with Access_Connection(ACCESS_INVOICING_FILE, ACCESS_INVOICING_PWD) as conn_access:
            with conn_access.cursor() as cur_access:

        # √öltimos 50 registros
                cur_access.execute("""
                    SELECT TOP 50 FactencabId, FactencabNumFact, FactencabFecha
                    FROM FACT_ENCAB
                    ORDER BY FactencabId DESC
                """)
                access_rows = cur_access.fetchall()

            # Convertimos a dict {id: (numfact, fecha)}
                access_dict = {row[0]: (row[1], row[2]) for row in access_rows}
                access_ids = list(access_dict.keys())
                print(access_rows)

        # =============================
        # üî∏ 2. Conexi√≥n a PostgreSQL
        # =============================

        # with Database_Connection(config()) as conn_pg:
        #     with conn_pg.cursor() as cur_pg:
        # # Leemos solo esos IDs en PG
        #         cur_pg.execute("""
        #             SELECT factencabid, factencabnumfact, factencabfecha
        #             FROM fact_encab
        #             WHERE factencabid = ANY(%s)
        #         """, (access_ids,))
        #         pg_rows = cur_pg.fetchall()
        #     pg_dict = {row[0]: (row[1], row[2]) for row in pg_rows}

        # # =============================
        # # üßÆ 3. Detectar cambios
        # # =============================
        #     access_set = set(access_dict.keys())
        #     pg_set = set(pg_dict.keys())

        #     # Insertar ‚Üí est√°n en Access pero no en PG
        #     to_insert = access_set - pg_set

        #     # Modificar ‚Üí est√°n en ambos pero con valores distintos
        #     to_update = {
        #         id_: access_dict[id_]
        #         for id_ in (access_set & pg_set)
        #         if access_dict[id_] != pg_dict[id_]
        #     }

        #     # Eliminar ‚Üí est√°n en PG pero no en Access
        #     to_delete = pg_set - access_set

        # # =============================
        # # üöÄ 4. Insertar y actualizar en bloque
        # # =============================
        # # Inserciones
        #     with conn_pg.cursor() as cur_pg:
        #         if to_insert:
        #             insert_data = [(id_, access_dict[id_][0], access_dict[id_][1]) for id_ in to_insert]
        #             execute_values(cur_pg, """
        #                 INSERT INTO fact_encab (factencabid, factencabnumfact, factencabfecha)
        #                 VALUES %s
        #             """, insert_data)

        #         # Actualizaciones ‚Üí usando UPSERT para evitar separar l√≥gicas
        #         if to_update:
        #             upsert_data = [(id_, data[0], data[1]) for id_, data in to_update.items()]
        #             execute_values(cur_pg, """
        #                 INSERT INTO fact_encab (factencabid, factencabnumfact, factencabfecha)
        #                 VALUES %s
        #                 ON CONFLICT (factencabid)
        #                 DO UPDATE SET
        #                     factencabnumfact = EXCLUDED.factencabnumfact,
        #                     factencabfecha = EXCLUDED.factencabfecha
        #             """, upsert_data)

        #         # =============================
        #         # üßπ 5. Eliminar registros
        #         # =============================
        #         if to_delete:
        #             cur_pg.execute("""
        #                 DELETE FROM fact_encab
        #                 WHERE factencabid = ANY(%s)
        #             """, (list(to_delete),))

        #     conn_pg.commit()





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    App_Invoicing = QtWidgets.QMainWindow()
    ui = Ui_App_Invoicing('Miguel Sahuquillo', 'm.sahuquillo')
    ui.setupUi(App_Invoicing)
    App_Invoicing.showMaximized()
    sys.exit(app.exec())