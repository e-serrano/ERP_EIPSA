# Form implementation generated from reading ui file 'QueryTask_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
from TaskEdit_Window import Ui_EditTask_Window
from TaskHistory_Window import Ui_HistoryTask_Window
import pandas as pd
from PyQt6.QtWidgets import QApplication, QFileDialog, QAbstractItemView
from PyQt6.QtGui import QKeySequence, QTextDocument, QTextCursor
from PyQt6.QtCore import Qt
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_QueryTask_Window(QtWidgets.QMainWindow):
    """
    UI class for the Task Query window.
    """
    def __init__(self, name, date=None):
        """
        Initializes the Ui_QueryTask_Window.

        Args:
            id (str): The ID of the task.
            task (str): The task description.
            date (str): The task date in "dd-MM-yyyy" format.
            state (str): The state or status of the task.
        """
        super().__init__()
        self.name=name
        if date:
            self.dateselected = date.toString("yyyy-MM-dd")
        self.setupUi(self)

    def setupUi(self, QueryTask_Window):
        """
        Sets up the user interface for the QueryTask_Window.

        Args:
            QueryTask_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        QueryTask_Window.setObjectName("QueryTask_Window")
        QueryTask_Window.resize(400, 561)
        QueryTask_Window.setMinimumSize(QtCore.QSize(600, 575))
        # QueryTask_Window.setMaximumSize(QtCore.QSize(600, 575))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        QueryTask_Window.setWindowIcon(icon)
        QueryTask_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=QueryTask_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        # self.frame.setMinimumSize(QtCore.QSize(550, 500))
        # self.frame.setMaximumSize(QtCore.QSize(550, 500))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 0, 0, 1, 2)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addWidget(self.Button_Cancel, 1, 0, 1, 1)
        self.Button_History = QtWidgets.QPushButton(parent=self.frame)
        self.Button_History.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_History.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_History.setObjectName("Button_History")
        self.gridLayout_2.addWidget(self.Button_History, 1, 1, 1, 1)
        self.Button_Export = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Export.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Export.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Export.setObjectName("Button_Export")
        self.gridLayout_2.addWidget(self.Button_Export, 1, 2, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem3, 1, 3, 1, 1)
        self.tableTasks = QtWidgets.QTableWidget(parent=self.frame)
        self.tableTasks.setObjectName("tableWidget")
        if self.name in ['Luis Bravo', 'Fernando Gallego']:
            self.tableTasks.setColumnCount(6)
        else:
            self.tableTasks.setColumnCount(5)
        self.tableTasks.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableTasks.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableTasks.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableTasks.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableTasks.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableTasks.setHorizontalHeaderItem(4, item)
        if self.name in ['Luis Bravo', 'Fernando Gallego']:
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableTasks.setHorizontalHeaderItem(5, item)
        self.tableTasks.setSelectionMode(QAbstractItemView.SelectionMode.ContiguousSelection)
        self.gridLayout_2.addWidget(self.tableTasks, 2, 0, 1, 4)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        QueryTask_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=QueryTask_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 22))
        self.menubar.setObjectName("menubar")
        QueryTask_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=QueryTask_Window)
        self.statusbar.setObjectName("statusbar")
        QueryTask_Window.setStatusBar(self.statusbar)
        self.tableTasks.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableTasks.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableTasks.setSortingEnabled(True)
        self.tableTasks.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        QueryTask_Window.setWindowFlag(QtCore.Qt.WindowType.WindowCloseButtonHint, False)

        self.retranslateUi(QueryTask_Window)
        QtCore.QMetaObject.connectSlotsByName(QueryTask_Window)

        self.tableTasks.itemDoubleClicked.connect(self.on_item_double_clicked)
        self.Button_Cancel.clicked.connect(QueryTask_Window.close)
        self.Button_History.clicked.connect(lambda: self.historytask(QueryTask_Window))
        self.Button_Export.clicked.connect(self.export_to_excel)
        self.queryTask()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, QueryTask_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        QueryTask_Window.setWindowTitle(_translate("QueryTask_Window", "Tareas"))
        item = self.tableTasks.horizontalHeaderItem(0)
        item.setText(_translate("QueryTask_Window", "ID"))
        item = self.tableTasks.horizontalHeaderItem(1)
        item.setText(_translate("QueryTask_Window", "Creador"))
        item = self.tableTasks.horizontalHeaderItem(2)
        item.setText(_translate("QueryTask_Window", "Tarea"))
        item = self.tableTasks.horizontalHeaderItem(3)
        item.setText(_translate("QueryTask_Window", "Fecha Fin"))
        item = self.tableTasks.horizontalHeaderItem(4)
        item.setText(_translate("QueryTask_Window", "Estado"))
        if self.name in ['Luis Bravo', 'Fernando Gallego']:
            item = self.tableTasks.horizontalHeaderItem(5)
            item.setText(_translate("QueryTask_Window", "Responsable"))
        self.Button_Cancel.setText(_translate("QueryTask_Window", "Salir"))
        self.Button_History.setText(_translate("QueryTask_Window", "Historial"))
        self.Button_Export.setText(_translate("QueryTask_Window", "Exportar"))


    def queryTask(self):
        """
        Queries the database for tasks, configures and populates tables with the query results, 
        and updates the UI accordingly. Handles potential database errors and updates the UI with appropriate messages.
        """
        conn = None
        commands_QueryTask_All_LB = ("""
                                    SELECT "id", "creator", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state", "responsible"
                                    FROM tasks
                                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                                    AND 
                                    "state" = 'Pendiente')
                                    ORDER BY "id"
                                    """)
        commands_QueryTask_date_LB = ("""
                                    SELECT "id", "creator", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state", "responsible"
                                    FROM tasks
                                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                                    AND 
                                    "task_date" = %s
                                    AND 
                                    "state" = 'Pendiente')
                                    ORDER BY "id"
                                    """)
        commands_QueryTask_All = ("""
                                    SELECT "id", "creator", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state"
                                    FROM tasks
                                    WHERE ("responsible" = %s
                                    AND 
                                    "state" = 'Pendiente')
                                    ORDER BY "id"
                                    """)
        commands_QueryTask_date = ("""
                                    SELECT "id", "creator", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state"
                                    FROM tasks
                                    WHERE ("responsible" = %s
                                    AND 
                                    "task_date" = %s
                                    AND 
                                    "state" = 'Pendiente')
                                    ORDER BY "id"
                                    """)
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            if hasattr(self, 'dateselected'):
                if self.name in ['Fernando Gallego']:
                    cur.execute(commands_QueryTask_date_LB, (self.dateselected,))
                else:
                    cur.execute(commands_QueryTask_date, (self.name, self.dateselected,))
            else:
                if self.name in ['Fernando Gallego']:
                    cur.execute(commands_QueryTask_All_LB)
                else:
                    cur.execute(commands_QueryTask_All, (self.name,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableTasks.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                if self.name in ['Fernando Gallego']:
                    for column in range(6):
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableTasks.setItem(tablerow, column, it)
                else:
                    for column in range(5):
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableTasks.setItem(tablerow, column, it)

                tablerow+=1

            self.tableTasks.verticalHeader().hide()
            self.tableTasks.setItemDelegate(AlignDelegate(self.tableTasks))

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


    def update_tasks(self):
        """
        Modifies the selected entry in database after validating form inputs.
        """
        self.tableTasks.setSortingEnabled(False)
        self.tableTasks.setRowCount(0)
        conn = None
        commands_QueryTask_All_LB = ("""
                                    SELECT "id", "creator", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state", "responsible"
                                    FROM tasks
                                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                                    AND 
                                    "state" = 'Pendiente')
                                    ORDER BY "id"
                                    """)
        commands_QueryTask_date_LB = ("""
                                    SELECT "id", "creator", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state", "responsible"
                                    FROM tasks
                                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                                    AND 
                                    "task_date" = %s
                                    AND 
                                    "state" = 'Pendiente')
                                    ORDER BY "id"
                                    """)
        commands_QueryTask_All = ("""
                                    SELECT "id", "creator", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state"
                                    FROM tasks
                                    WHERE ("responsible" = %s
                                    AND 
                                    "state" = 'Pendiente')
                                    ORDER BY "id"
                                    """)
        commands_QueryTask_date = ("""
                                    SELECT "id", "creator", "task", TO_CHAR("task_date", 'DD-MM-YYYY'), "state"
                                    FROM tasks
                                    WHERE ("responsible" = %s
                                    AND 
                                    "task_date" = %s
                                    AND 
                                    "state" = 'Pendiente')
                                    ORDER BY "id"
                                    """)
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            if hasattr(self, 'dateselected'):
                if self.name in ['Fernando Gallego']:
                    cur.execute(commands_QueryTask_date_LB, (self.dateselected,))
                else:
                    cur.execute(commands_QueryTask_date, (self.name, self.dateselected,))
            else:
                if self.name in ['Fernando Gallego']:
                    cur.execute(commands_QueryTask_All_LB)
                else:
                    cur.execute(commands_QueryTask_All, (self.name,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableTasks.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                if self.name in ['Fernando Gallego']:
                    for column in range(6):
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableTasks.setItem(tablerow, column, it)
                else:
                    for column in range(5):
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableTasks.setItem(tablerow, column, it)

                tablerow+=1

            self.tableTasks.verticalHeader().hide()
            self.tableTasks.setItemDelegate(AlignDelegate(self.tableTasks))
            self.tableTasks.setSortingEnabled(True)

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


    def on_item_double_clicked(self, item):
        """
        Handles double-click events on items in a QTableWidget.
        
        Args:
            item (QtWidgets.QTableWidgetItem): The item that was double-clicked.
        """
        self.edittask(item)


    def edittask(self, item):
        """
        Opens a window to edit the selected task details.

        Args:
            item (QTableWidgetItem): The table widget item containing task information.
        """
        task = item.tableWidget().item(item.row(), 2).text()
        id = item.tableWidget().item(item.row(), 0).text()
        date = item.tableWidget().item(item.row(), 3).text()
        state = item.tableWidget().item(item.row(), 4).text()

        self.edittaskwindow=QtWidgets.QMainWindow()
        self.ui=Ui_EditTask_Window(id, task, date, state)
        self.ui.setupUi(self.edittaskwindow)
        self.edittaskwindow.show()
        self.ui.Button_Cancel.clicked.connect(self.update_tasks)


    def historytask(self,QueryTask_Window):
        """
        Opens a window to display the task history and hides the query window.

        Args:
            QueryTask_Window (QMainWindow): The main query task window to be hidden.
        """
        self.historytaskwindow=Ui_HistoryTask_Window(self.name)
        self.historytaskwindow.show()
        QueryTask_Window.hide()
        self.historytaskwindow.Button_Cancel.clicked.connect(QueryTask_Window.show)


    def export_to_excel(self):
        """
        Exports the visible data from the table to an Excel file. If no data is loaded, displays a warning message.
        """
        file_name, _ = QFileDialog.getSaveFileName(self, "Guardar como Excel", "", "Archivos Excel (*.xlsx);;Todos los archivos (*)")

        if file_name:
            df = pd.DataFrame()
            for col in range(self.tableTasks.columnCount()):
                header = self.tableTasks.horizontalHeaderItem(col).text()
                column_data = [self.tableTasks.item(row, col).text() for row in range(self.tableTasks.rowCount())]
                df[header] = column_data

            with pd.ExcelWriter(file_name, engine='openpyxl') as writer:
                df.to_excel(writer, index=False)


    def keyPressEvent(self, event):
        """
        Handles custom key events for cell operations in the table.

        Args:
            event (QtGui.QKeyEvent): The key event to handle.
        """
        super().keyPressEvent(event)
        if event.matches(QtGui.QKeySequence.StandardKey.Copy):
            selected_indexes = self.tableTasks.selectedIndexes()
            if selected_indexes:
                clipboard = QApplication.clipboard()
                text = self.get_selected_text(selected_indexes)
                clipboard.setText(text)


    def get_selected_text(self, indexes):
        """
        Retrieves the text from the selected cells and returns it as a plain text string.

        Args:
            indexes (list of QModelIndex): A list of QModelIndex objects representing the selected cells.
        
        Returns:
            str: A string containing the text from the selected cells.
        """
        rows = set()
        cols = set()
        for index in indexes:
            rows.add(index.row())
            cols.add(index.column())

        text_doc = QTextDocument()
        cursor = QTextCursor(text_doc)

        header_labels = [self.tableTasks.horizontalHeaderItem(col).text() for col in sorted(cols)]
        for label in header_labels:
            cursor.insertText(label)
            cursor.insertText('\t')  # Tab separating columns
        cursor.insertText('\n')   # Line break at end of row

        for row in sorted(rows):
            for col in sorted(cols):
                cell_data = self.tableTasks.item(row, col).data(Qt.ItemDataRole.DisplayRole)
                cursor.insertText(cell_data)
                cursor.insertText('\t')  # Tab separating columns
            cursor.insertText('\n')  # Line break at end of row

        return text_doc.toPlainText()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    QueryTask_Window = Ui_QueryTask_Window('Carlos Crespo')
    QueryTask_Window.show()
    sys.exit(app.exec())