# Form implementation generated from reading ui file 'App_Verification.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from PyQt6.QtCore import Qt
import psycopg2
import sys
import configparser
from Database_Connection import createConnection
from config import config
from datetime import *
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class ImageCalendarWidget(QtWidgets.QCalendarWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.task_dates = []

    def set_task_dates(self, dates):
        self.task_dates = dates
        self.updateCells()

    def paintCell(self, painter, rect, date):
        QtWidgets.QCalendarWidget.paintCell(self, painter, rect, date)

        if date in self.task_dates:
            image_path = os.path.abspath(os.path.join(basedir, "Resources/Iconos/Flag.png")) 
            image = QtGui.QImage(image_path)
            if not image.isNull():
                image_scaled = image.scaled(rect.width() // 4, rect.height() // 4, QtCore.Qt.AspectRatioMode.KeepAspectRatio, QtCore.Qt.TransformationMode.SmoothTransformation)
                image_rect = image_scaled.rect()
                image_rect.moveTopRight(rect.topRight() - QtCore.QPoint(2, -5))
                painter.drawImage(image_rect, image_scaled)


class Ui_App_Verification(object):
    def __init__(self, name, username):
        self.name=name
        self.username=username


    def setupUi(self, App_Verification):
        App_Verification.setObjectName("App_Verification")
        App_Verification.resize(1254, 860)
        App_Verification.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Verification.setWindowIcon(icon)
        App_Verification.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Verification)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Logo.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem5)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem6 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem6)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Mario.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon6)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem7 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem7)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_QueryTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryTag.setMinimumSize(QtCore.QSize(int(200), int(50)))
        self.Button_QueryTag.setMaximumSize(QtCore.QSize(int(200), int(50)))
        font = QtGui.QFont()
        font.setPointSize(int(12))
        font.setBold(True)
        self.Button_QueryTag.setFont(font)
        self.Button_QueryTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/TAG_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTag.setIcon(icon1)
        self.Button_QueryTag.setIconSize(QtCore.QSize(int(40), int(40)))
        self.Button_QueryTag.setObjectName("Button_QueryTag")
        self.verticalLayout_3.addWidget(self.Button_QueryTag)
        self.Button_Verification = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Verification.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Verification.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Verification.setFont(font)
        self.Button_Verification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Verification.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Verification.setIcon(icon1)
        self.Button_Verification.setIconSize(QtCore.QSize(40, 40))
        self.Button_Verification.setObjectName("Button_Verification")
        self.verticalLayout_3.addWidget(self.Button_Verification)
        self.Button_Hydro = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Hydro.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Hydro.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Hydro.setFont(font)
        self.Button_Hydro.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Hydro.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Hydro.setIcon(icon2)
        self.Button_Hydro.setIconSize(QtCore.QSize(40, 40))
        self.Button_Hydro.setObjectName("Button_Hydro")
        self.verticalLayout_3.addWidget(self.Button_Hydro)
        self.Button_Liquid = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Liquid.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Liquid.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Liquid.setFont(font)
        self.Button_Liquid.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Liquid.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Liquid.setIcon(icon3)
        self.Button_Liquid.setIconSize(QtCore.QSize(40, 40))
        self.Button_Liquid.setObjectName("Button_Liquid")
        self.verticalLayout_3.addWidget(self.Button_Liquid)
        self.Button_Hardness = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Hardness.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Hardness.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Hardness.setFont(font)
        self.Button_Hardness.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Hardness.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Hardness.setIcon(icon4)
        self.Button_Hardness.setIconSize(QtCore.QSize(40, 40))
        self.Button_Hardness.setObjectName("Button_Hardness")
        self.verticalLayout_3.addWidget(self.Button_Hardness)
        self.Button_Calibration = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Calibration.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Calibration.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Calibration.setFont(font)
        self.Button_Calibration.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Calibration.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Calibration.setIcon(icon7)
        self.Button_Calibration.setIconSize(QtCore.QSize(100, 100))
        self.Button_Calibration.setObjectName("Button_Calibration")
        self.verticalLayout_3.addWidget(self.Button_Calibration)
        self.Button_Suppliers = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Suppliers.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_Suppliers.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_Suppliers.setFont(font)
        self.Button_Suppliers.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Supplier.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Suppliers.setIcon(icon7)
        self.Button_Suppliers.setIconSize(QtCore.QSize(100, 100))
        self.Button_Suppliers.setObjectName("Button_Suppliers")
        self.verticalLayout_3.addWidget(self.Button_Suppliers)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem8 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem8)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.tableMaster = QtWidgets.QTableWidget(parent=self.frame)
        self.tableMaster.setMinimumSize(QtCore.QSize(650, 280))
        self.tableMaster.setObjectName("tableMaster")
        self.tableMaster.setColumnCount(0)
        self.tableMaster.setRowCount(0)
        self.tableMaster.verticalHeader().setVisible(False)
        self.MainLayout.addWidget(self.tableMaster)
        spacerItem9 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem9)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
#         self.Calendar = ImageCalendarWidget(parent=self.frame)
#         self.Calendar.setEnabled(True)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.Calendar.sizePolicy().hasHeightForWidth())
#         self.Calendar.setSizePolicy(sizePolicy)
#         self.Calendar.setMinimumSize(QtCore.QSize(300, 400))
#         self.Calendar.setMaximumSize(QtCore.QSize(583, 400))
#         self.Calendar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
#         self.Calendar.setStyleSheet("QCalendarWidget QWidget{\n"
# "background-color: rgb(3, 174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QTableView{\n"
# "    background-color: white;\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton {\n"
# "    color: white;\n"
# "    font-size:20px;\n"
# "    icon-size:30px 30px;\n"
# "    background-color:rgb(3, 174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton::hover {\n"
# "    background-color : #019ad2;\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton::pressed {\n"
# "    background-color: rgb(1, 140, 190);\n"
# "    border: 3px solid;\n"
# "    border-color: rgb(255, 255, 255);\n"
# "}\n"
# "\n"
# "QCalendarWidget QSpinBox{\n"
# "    background-color: rgb(255, 255, 255);\n"
# "    border: 2px solid;\n"
# "    border-color: rgb(3,174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QAbstractItemView:enabled{\n"
# "    selection-background-color: rgb(3, 174, 236);\n"
# "    selection-color: white;\n"
# "}\n"
# "\n"
# "#qt_calendar_prevmonth {\n"
# "    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/back_arrow.png);\n"
# "}\n"
# "#qt_calendar_nextmonth {\n"
# "    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/forward_arrow.png);\n"
# "\n"
# "}")
#         self.Calendar.setSelectedDate(QtCore.QDate.currentDate())
#         self.Calendar.setGridVisible(True)
#         self.Calendar.setNavigationBarVisible(True)
#         self.Calendar.setDateEditEnabled(True)
#         self.Calendar.setObjectName("Calendar")
#         self.Calendar.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
#         self.BottomLayout.addWidget(self.Calendar)
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Verification.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Verification)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1254, 22))
        self.menubar.setObjectName("menubar")
        App_Verification.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Verification)
        self.statusbar.setObjectName("statusbar")
        App_Verification.setStatusBar(self.statusbar)

        self.retranslateUi(App_Verification)
        QtCore.QMetaObject.connectSlotsByName(App_Verification)

        self.Button_QueryTag.clicked.connect(self.query_tag)
        self.Button_Verification.clicked.connect(self.verification)
        self.Button_Hydro.clicked.connect(self.hydrotest)
        self.Button_Liquid.clicked.connect(self.liquidtest)
        self.Button_Hardness.clicked.connect(self.hardtest)
        self.Button_Calibration.clicked.connect(self.calibration)
        self.Button_Suppliers.clicked.connect(self.suppliers_delivnote)
        self.Button_Profile.clicked.connect(self.showMenu)
        # self.Calendar.activated.connect(self.show_selected_date_tasks)
        # self.Calendar.customContextMenuRequested.connect(self.show_context_menu)
        # self.setup_task_dates()


    def retranslateUi(self, App_Verification):
        _translate = QtCore.QCoreApplication.translate
        App_Verification.setWindowTitle(_translate("App_Verification", "ERP EIPSA"))
        self.HeaderName.setText(_translate("App_Verification", self.name))
        self.Button_QueryTag.setText(_translate("App_Verification", "    Consultar TAG(s)"))
        self.Button_Verification.setText(_translate("App_Verification", "    Verificación"))
        self.Button_Liquid.setText(_translate("App_Verification", "  Liq. Penetrantes"))
        self.Button_Hydro.setText(_translate("App_Verification", "    Prueba Hidro."))
        self.Button_Hardness.setText(_translate("App_Verification", "    Prueba Dureza"))
        self.Button_Calibration.setText(_translate("App_Verification", "    Calibraciones"))
        self.Button_Suppliers.setText(_translate("App_Verification", "    Proveedores"))
        self.tableMaster.setSortingEnabled(True)


    def query_tag(self):
        from TAGEdit_Workshop_Window import Ui_EditTags_Workshop_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_tags_tech = createConnection(user_database, password_database)
        if not db_tags_tech:
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Workshop_Window(self.name, db_tags_tech)
        self.edit_tags_app.show()



    def verification(self):
        from Verification_Menu import Ui_Verification_Menu
        self.verif_menu=QtWidgets.QMainWindow()
        self.ui=Ui_Verification_Menu()
        self.ui.setupUi(self.verif_menu)
        self.verif_menu.show()


    def hydrotest(self):
        from TestHydro_Menu import Ui_TestHydro_Menu
        self.testhydro_menu=QtWidgets.QMainWindow()
        self.ui=Ui_TestHydro_Menu()
        self.ui.setupUi(self.testhydro_menu)
        self.testhydro_menu.show()


    def liquidtest(self):
        from TestLiquid_Menu import Ui_TestLiquid_Menu
        self.testliquid_menu=QtWidgets.QMainWindow()
        self.ui=Ui_TestLiquid_Menu()
        self.ui.setupUi(self.testliquid_menu)
        self.testliquid_menu.show()


    def hardtest(self):
        from TestHard_Menu import Ui_TestHard_Menu
        self.testhard_menu=QtWidgets.QMainWindow()
        self.ui=Ui_TestHard_Menu()
        self.ui.setupUi(self.testhard_menu)
        self.testhard_menu.show()


    def calibration(self):
        from Calibration_ThermoElements_Window import Ui_Calibration_ThermoElements_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_calibration = createConnection(user_database, password_database)
        if not db_calibration:
            sys.exit()

        self.calibration_window = Ui_Calibration_ThermoElements_Window(db_calibration)
        self.calibration_window.showMaximized()


    def suppliers_delivnote(self):
        from VerifSupplierInsert_Window import Ui_VerifSupplierInsert_Window
        self.verifsupplier_window=QtWidgets.QMainWindow()
        self.ui=Ui_VerifSupplierInsert_Window()
        self.ui.setupUi(self.verifsupplier_window)
        self.verifsupplier_window.show()


    def showMenu(self):
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contraseña")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))


    def editpassword(self):
        from PasswordEdit_Window import Ui_EditPasswordWindow
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()


    def newtask(self, date):
        from TaskAdd_Window import Ui_AddTask_Window
        self.newtaskwindow=QtWidgets.QMainWindow()
        self.ui=Ui_AddTask_Window(self.name, date)
        self.ui.setupUi(self.newtaskwindow)
        self.newtaskwindow.show()
        self.ui.Button_Cancel.clicked.connect(self.setup_task_dates)


    def querytask(self, date=None):
        from TaskQuery_Window import Ui_QueryTask_Window
        self.querytaskwindow=Ui_QueryTask_Window(self.name, date)
        self.querytaskwindow.show()
        self.querytaskwindow.Button_Cancel.clicked.connect(self.setup_task_dates)


    def show_context_menu(self, point):
        selected_date = self.Calendar.selectedDate()
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 150px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")

        action1 = menu.addAction("Agregar tareas")
        action1.triggered.connect(lambda: self.newtask(selected_date))
        action2 = menu.addAction("Editar tareas")
        action2.triggered.connect(lambda: self.querytask(selected_date))

        menu.exec(self.Calendar.mapToGlobal(point))

# Function to stablish dates with task assigned to put icon on calendar
    def setup_task_dates(self):
        commands_loaddatestasks_LB = ("""
                    SELECT "task_date","task"
                    FROM tasks
                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        commands_loaddatestasks = ("""
                    SELECT "task_date","task"
                    FROM tasks
                    WHERE ("responsible" = %s
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            if self.name == 'Luis Bravo':
                cur.execute(commands_loaddatestasks_LB)
            else:
                cur.execute(commands_loaddatestasks,(self.name,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dates_with_tasks_raw=[x[0] for x in results]
            dates_with_tasks=list(set(dates_with_tasks_raw))

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()
        # task_dates = [QtCore.QDate.currentDate().addDays(0), QtCore.QDate.currentDate().addDays(3)]
        task_dates = dates_with_tasks
        self.Calendar.set_task_dates(task_dates)


    def show_selected_date_tasks(self):
        self.click_count = 0
        selected_date = self.Calendar.selectedDate()
        if self.name == 'Carlos Crespo':
            creator=self.name[0] + self.name[self.name.find(' ')+1] + 'H'
        else:
            creator=self.name[0] + self.name[self.name.find(' ')+1]
        returned = self.get_tasks_for_date(creator, selected_date)

        if returned:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            final_text=''

            for item in returned:
                responsible = item[0]
                tasks = item [1]
                task_text = "<br><br>-".join(tasks)
                final_text += "<br><br>" + f"<b>{responsible}:</b><br>-" + task_text

            dlg.setText(f"<html><body>Tareas para la fecha {selected_date.toString('dd-MM-yyyy')}:{final_text}</body></html>")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()
            del dlg, new_icon


#Function to obtain tasks associated to a date
    def get_tasks_for_date(self, creator, date):
        commands_loaddatestasks_LB = ("""
                    SELECT "responsible","task_date","task","state","creator"
                    FROM tasks
                    WHERE ("creator" IN ('CCH', 'SS', 'LB')
                    AND
                    "task_date" IS NOT NULL
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        commands_loaddatestasks = ("""
                    SELECT "responsible","task_date","task","state","creator"
                    FROM tasks
                    WHERE ("responsible" = %s
                    AND
                    "task_date" IS NOT NULL
                    AND
                    "state" = 'Pendiente')
                    ORDER BY "task_date"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            if self.name == 'Luis Bravo':
                cur.execute(commands_loaddatestasks_LB)
            else:
                cur.execute(commands_loaddatestasks,(self.name,))
            results=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dict_responsibles_tasks={}

            for i in range(len(results)):
                responsible=results[i][0]
                key=QtCore.QDate(results[i][1].year, results[i][1].month, results[i][1].day)
                value="(" + results[i][4]+") " + results[i][2] + " (" + results[i][3] + ")"

                if responsible not in dict_responsibles_tasks:
                    dict_responsibles_tasks[responsible] = [{key: [value]}]

                else:
                    for item in dict_responsibles_tasks[responsible]:
                        if key not in item:
                            item[key] = [value]

                        else:
                            item[key].append(value)

            value_to_return = []
            for item in dict_responsibles_tasks.keys():
                for element in dict_responsibles_tasks[item]:
                    if date in element:
                        value_to_return.append([item,dict_responsibles_tasks[item][dict_responsibles_tasks[item].index(element)][date]])

            return value_to_return

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     App_Verification = QtWidgets.QMainWindow()
#     ui = Ui_App_Verification('Mario Gil', 'm.gil')
#     ui.setupUi(App_Verification)
#     App_Verification.show()
#     sys.exit(app.exec())
