# Form implementation generated from reading ui file 'VerificationInsert_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import os
import re
from datetime import *

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if value is None:
            self.column_filters[column_index] = set()
        elif checked:
            self.column_filters[column_index].add(value)
        elif value in self.column_filters[column_index]:
            self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if filters and item_value not in filters:
                        show_row = False
                        break

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

    # Update hidden rows for this column
        if checked:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

    # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class Ui_VerificationInsert_Window(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


    def setupUi(self, VerificationInsert_Window):
        VerificationInsert_Window.setObjectName("VerificationInsert_Window")
        VerificationInsert_Window.resize(400, 561)
        VerificationInsert_Window.setMinimumSize(QtCore.QSize(1000, 675))
        # VerificationInsert_Window.setMaximumSize(QtCore.QSize(800, 675))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        VerificationInsert_Window.setWindowIcon(icon)
        VerificationInsert_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=VerificationInsert_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 0, 0, 1, 2)
        self.label_order = QtWidgets.QLabel(parent=self.frame)
        self.label_order.setMinimumSize(QtCore.QSize(105, 25))
        self.label_order.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_order.setFont(font)
        self.label_order.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_order.setObjectName("label_order")
        self.gridLayout_2.addWidget(self.label_order, 1, 0, 1, 1)
        self.num_order = QtWidgets.QLineEdit(parent=self.frame)
        self.num_order.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.num_order.setFont(font)
        self.num_order.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.num_order.setObjectName("num_order")
        self.gridLayout_2.addWidget(self.num_order, 1, 1, 1, 5)
        self.Button_PPI = QtWidgets.QPushButton(parent=self.frame)
        self.Button_PPI.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_PPI.setObjectName("Button_PPI")
        self.gridLayout_2.addWidget(self.Button_PPI, 2, 0, 1, 2)
        self.Button_EXP = QtWidgets.QPushButton(parent=self.frame)
        self.Button_EXP.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_EXP.setObjectName("Button_EXP")
        self.gridLayout_2.addWidget(self.Button_EXP, 2, 2, 1, 2)
        self.Button_M_Drawing = QtWidgets.QPushButton(parent=self.frame)
        self.Button_M_Drawing.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_M_Drawing.setMaximumSize(QtCore.QSize(16777215, 35))
        self.Button_M_Drawing.setObjectName("Button_M_Drawing")
        self.gridLayout_2.addWidget(self.Button_M_Drawing, 2, 4, 1, 2)
        self.Button_OF_Drawing = QtWidgets.QPushButton(parent=self.frame)
        self.Button_OF_Drawing.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_OF_Drawing.setObjectName("Button_OF_Drawing")
        self.gridLayout_2.addWidget(self.Button_OF_Drawing, 3, 0, 1, 2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem3, 4, 2, 1, 1)
        self.select_all_dim = QtWidgets.QCheckBox('Todos dim.')
        self.gridLayout_2.addWidget(self.select_all_dim, 5, 1, 1, 1)
        self.select_all_of_eq = QtWidgets.QCheckBox('Todos OF Eq.')
        self.gridLayout_2.addWidget(self.select_all_of_eq, 5, 2, 1, 1)
        self.select_all_of_sensor = QtWidgets.QCheckBox('Todos OF Sensor')
        self.gridLayout_2.addWidget(self.select_all_of_sensor, 5, 3, 1, 1)
        self.select_all_of_sensor.setVisible(False)
        self.select_all = QtWidgets.QCheckBox('Todos')
        self.gridLayout_2.addWidget(self.select_all, 5, 5, 1, 1)
        self.tableTags = CustomTableWidget()
        self.tableTags.setObjectName("tableWidget")
        self.tableTags.setColumnCount(0)
        self.tableTags.setRowCount(0)
        self.gridLayout_2.addWidget(self.tableTags, 6, 0, 1, 6)
        self.label_date = QtWidgets.QLabel(parent=self.frame)
        self.label_date.setMinimumSize(QtCore.QSize(105, 25))
        self.label_date.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_date.setFont(font)
        self.label_date.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_date.setObjectName("label_date")
        self.gridLayout_2.addWidget(self.label_date, 7, 0, 1, 1)
        self.date_test = QtWidgets.QLineEdit(parent=self.frame)
        self.date_test.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.date_test.setFont(font)
        self.date_test.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.date_test.setObjectName("date_test")
        self.gridLayout_2.addWidget(self.date_test, 7, 1, 1, 1)
        self.label_state = QtWidgets.QLabel(parent=self.frame)
        self.label_state.setMinimumSize(QtCore.QSize(105, 25))
        self.label_state.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_state.setFont(font)
        self.label_state.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_state.setObjectName("label_state")
        self.gridLayout_2.addWidget(self.label_state, 7, 2, 1, 1)
        self.state_test = QtWidgets.QComboBox(parent=self.frame)
        self.state_test.setMinimumSize(QtCore.QSize(105, 25))
        self.state_test.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.state_test.setFont(font)
        self.state_test.setObjectName("state_test")
        self.gridLayout_2.addWidget(self.state_test, 7, 3, 1, 1)
        self.label_obs = QtWidgets.QLabel(parent=self.frame)
        self.label_obs.setMinimumSize(QtCore.QSize(105, 25))
        self.label_obs.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_obs.setFont(font)
        self.label_obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_obs.setObjectName("label_obs")
        self.gridLayout_2.addWidget(self.label_obs, 7, 4, 1, 1)
        self.obs_test = QtWidgets.QTextEdit(parent=self.frame)
        self.obs_test.setMinimumSize(QtCore.QSize(105, 25))
        self.obs_test.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.obs_test.setFont(font)
        self.obs_test.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.obs_test.setObjectName("obs_test")
        self.gridLayout_2.addWidget(self.obs_test, 7, 5, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem1, 8, 2, 1, 1)
        self.Button_Insert = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Insert.setMinimumSize(QtCore.QSize(100, 35))
        # self.Button_Insert.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Insert.setObjectName("Button_Insert")
        self.gridLayout_2.addWidget(self.Button_Insert, 9, 0, 1, 2)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        # self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addWidget(self.Button_Cancel, 9, 4, 1, 2)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        VerificationInsert_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=VerificationInsert_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 22))
        self.menubar.setObjectName("menubar")
        VerificationInsert_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=VerificationInsert_Window)
        self.statusbar.setObjectName("statusbar")
        VerificationInsert_Window.setStatusBar(self.statusbar)
        self.tableTags.verticalHeader().setVisible(True)
        self.tableTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableTags.setSortingEnabled(False)
        self.tableTags.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        VerificationInsert_Window.setWindowFlag(QtCore.Qt.WindowType.WindowCloseButtonHint, False)

        self.retranslateUi(VerificationInsert_Window)
        QtCore.QMetaObject.connectSlotsByName(VerificationInsert_Window)

        self.Button_Cancel.clicked.connect(VerificationInsert_Window.close)
        self.num_order.returnPressed.connect(self.querytags)
        self.Button_Insert.clicked.connect(self.insert)
        self.Button_PPI.clicked.connect(lambda: self.insert_ppi(self.num_order.text().upper()))
        self.Button_EXP.clicked.connect(lambda: self.insert_exp(self.num_order.text().upper()))
        self.Button_M_Drawing.clicked.connect(lambda: self.insert_m_drawings(self.num_order.text().upper()))
        self.Button_OF_Drawing.clicked.connect(lambda: self.insert_of_drawings(self.num_order.text().upper()))
        self.tableTags.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.select_all.clicked.connect(self.toggle_checkboxes)
        self.select_all_dim.clicked.connect(self.toggle_dim_checkboxes)
        self.select_all_of_eq.clicked.connect(self.toggle_of_eq_checkboxes)
        self.select_all_of_sensor.clicked.connect(self.toggle_of_sensor_checkboxes)
        self.tableTags.itemClicked.connect(self.loadform)

        self.load_values()


    def retranslateUi(self, VerificationInsert_Window):
        _translate = QtCore.QCoreApplication.translate
        VerificationInsert_Window.setWindowTitle(_translate("VerificationInsert_Window", "Verificación"))
        self.label_order.setText(_translate("VerificationInsert_Window", "Nº Pedido:"))
        self.label_date.setText(_translate("VerificationInsert_Window", "Fecha:"))
        self.label_state.setText(_translate("VerificationInsert_Window", "Estado:"))
        self.label_obs.setText(_translate("VerificationInsert_Window", "Observaciones:"))
        self.Button_Cancel.setText(_translate("VerificationInsert_Window", "Cancelar"))
        self.Button_Insert.setText(_translate("VerificationInsert_Window", "Insertar"))
        self.Button_PPI.setText(_translate("VerificationInsert_Window", "PPI"))
        self.Button_EXP.setText(_translate("VerificationInsert_Window", "EXP"))
        self.Button_M_Drawing.setText(_translate("VerificationInsert_Window", "Planos M"))
        self.Button_OF_Drawing.setText(_translate("VerificationInsert_Window", "Planos OF"))


    def querytags(self):
        self.tableTags.setRowCount(0)
        self.num_order_value = self.num_order.text().upper()
        if self.num_order_value not in ['ALMACÉN', 'ALMACEN', 'INTERNO', 'PROTOTIPOS'] and self.num_order_value[:2] != 'PA':
            query_material = ("""
                            SELECT orders."num_order",orders."num_offer",product_type."variable"
                            FROM offers
                            INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                            INNER JOIN product_type ON (offers."material"=product_type."material")
                            WHERE (UPPER(orders."num_order") LIKE UPPER('%%'||%s||'%%')
                            )
                            ORDER BY orders."num_order"
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(query_material,(self.num_order_value,))
                results=cur.fetchall()
                material = results[0][2]

                if material == 'Caudal':
                    self.table_name = "tags_data.tags_flow"
                    self.column_id = "id_tag_flow"
                    commands_tags = f" SELECT {self.column_id}, tag, num_order, item_type, dim_drawing, of_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), final_verif_dim_obs, TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), final_verif_of_eq_obs FROM {self.table_name} WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') ORDER BY {self.column_id}"
                    self.num_columns = 11
                    column_headers = ['ID', 'TAG', 'Nº Pedido', 'Tipo Equipo', 'Plano Dim.', 'OF Equipo', 'Fecha Dim.', 'Obs. Dim', 'Fecha OF', 'Obs. OF','']
                    self.select_all_of_sensor.setVisible(False)
                elif material == 'Temperatura':
                    self.table_name = "tags_data.tags_temp"
                    self.column_id = "id_tag_temp"
                    commands_tags = f" SELECT {self.column_id}, tag, num_order, item_type, dim_drawing, of_drawing, of_sensor_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), final_verif_dim_obs, TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), final_verif_of_eq_obs, TO_CHAR(final_verif_of_sensor_date, 'DD/MM/YYYY'), final_verif_of_sensor_obs FROM {self.table_name} WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') ORDER BY {self.column_id}"
                    self.num_columns = 14
                    column_headers = ['ID', 'TAG', 'Nº Pedido', 'Tipo Equipo', 'Plano Dim.', 'OF Equipo', 'OF Sensor', 'Fecha Dim.', 'Obs. Dim', 'Fecha OF Vaina', 'Obs. OF Vaina', 'Fecha OF Sensor', 'Obs. OF Sensor','']
                    self.select_all_of_sensor.setVisible(True)
                elif material == 'Nivel':
                    self.table_name = "tags_data.tags_level"
                    self.column_id = "id_tag_level"
                    commands_tags = f" SELECT {self.column_id}, tag, num_order, item_type, dim_drawing, of_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), final_verif_dim_obs, TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), final_verif_of_eq_obs FROM {self.table_name} WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') ORDER BY {self.column_id}"
                    self.num_columns = 11
                    column_headers = ['ID', 'TAG', 'Nº Pedido', 'Tipo Equipo', 'Plano Dim.', 'OF Equipo', 'Fecha Dim.', 'Obs. Dim', 'Fecha OF', 'Obs. OF','']
                    self.select_all_of_sensor.setVisible(False)

                cur.execute(commands_tags)
                results=cur.fetchall()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                self.tableTags.setRowCount(len(results))
                self.tableTags.setColumnCount(self.num_columns)
                tablerow=0

            # fill the Qt Table with the query results
                for row in results:
                    for column in range(self.num_columns):
                        if column == (self.num_columns - 1):
                            checkbox = QtWidgets.QCheckBox(self)
                            checkbox.setChecked(False)
                            self.tableTags.setCellWidget(tablerow, column, checkbox)
                        elif column in [4,5,6] and self.num_columns == 14:
                            value = row[column]
                            if value is None:
                                value = ''
                                it = QtWidgets.QTableWidgetItem(str(value))
                                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                                self.tableTags.setItem(tablerow, column, it)
                            else:
                                checkbox = QtWidgets.QCheckBox(value)
                                checkbox.setChecked(False)
                                self.tableTags.setCellWidget(tablerow, column, checkbox)
                        elif column in [4,5] and self.num_columns == 11:
                            value = row[column]
                            if value is None:
                                value = ''
                                it = QtWidgets.QTableWidgetItem(str(value))
                                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                                self.tableTags.setItem(tablerow, column, it)
                            else:
                                checkbox = QtWidgets.QCheckBox(value)
                                checkbox.setChecked(False)
                                self.tableTags.setCellWidget(tablerow, column, checkbox)
                        else:
                            value = row[column]
                            if value is None:
                                value = ''
                            it = QtWidgets.QTableWidgetItem(str(value))
                            it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                            self.tableTags.setItem(tablerow, column, it)

                    tablerow+=1

                self.tableTags.verticalHeader().hide()
                self.tableTags.setItemDelegate(AlignDelegate(self.tableTags))
                self.tableTags.setSortingEnabled(False)
                self.tableTags.setHorizontalHeaderLabels(column_headers)
                self.tableTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
                self.tableTags.horizontalHeader().setSectionResizeMode(self.num_columns - 1, QtWidgets.QHeaderView.ResizeMode.Stretch)

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()


    def toggle_checkboxes(self, state):
        if state:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, (self.num_columns - 1))
                    checkbox.setChecked(True)
        else:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, (self.num_columns - 1))
                    checkbox.setChecked(False)

    def toggle_dim_checkboxes(self, state):
        if state:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 4)
                    if checkbox is not None:
                        checkbox.setChecked(True)
        else:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 4)
                    if checkbox is not None:
                        checkbox.setChecked(False)

    def toggle_of_eq_checkboxes(self, state):
        if state:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 5)
                    if checkbox is not None:
                        checkbox.setChecked(True)
        else:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 5)
                    if checkbox is not None:
                        checkbox.setChecked(False)


    def toggle_of_sensor_checkboxes(self, state):
        if state:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 6)
                    if checkbox is not None:
                        checkbox.setChecked(True)
        else:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 6)
                    if checkbox is not None:
                        checkbox.setChecked(False)

    def insert(self):
        num_order = self.num_order.text().upper()
        test_date = self.date_test.text()
        state = self.state_test.currentText()
        notes = self.obs_test.toPlainText()

        if num_order == '' or test_date == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Rellena todos los campos. Solo el campo de observaciones puede quedarse vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', test_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            if num_order not in ['ALMACÉN', 'ALMACEN', 'INTERNO', 'PROTOTIPOS'] and num_order[:2] != 'PA':
                row_list =[]
                for row in range(0, self.tableTags.rowCount() + 1):
                    item = self.tableTags.cellWidget(row, (self.num_columns - 1))
                    if item is not None:
                        if item.checkState() == QtCore.Qt.CheckState.Checked:
                            row_list.append(row)

                if len(row_list) == 0:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("No has seleccionado ningún TAG")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon
                else:
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        for row_value in row_list:
                            id_value = int(self.tableTags.item(row_value, 0).text())
                            item_dim = self.tableTags.cellWidget(row_value, 4)
                            item_eq = self.tableTags.cellWidget(row_value, 5)

                            if item_dim is not None:
                                if item_dim.checkState() == QtCore.Qt.CheckState.Checked:
                                    commands_verification = f"UPDATE {self.table_name} SET final_verif_dim_date = '{test_date}', final_verif_dim_state = '{state}', final_verif_dim_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                    cur.execute(commands_verification)

                            if item_eq is not None:
                                if item_eq.checkState() == QtCore.Qt.CheckState.Checked:
                                    commands_verification = f"UPDATE {self.table_name} SET final_verif_of_eq_date = '{test_date}', final_verif_of_eq_state = '{state}', final_verif_of_eq_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                    cur.execute(commands_verification)

                            if self.table_name == "tags_data.tags_temp":
                                item_sensor = self.tableTags.cellWidget(0, 6)
                                if item_sensor is not None:
                                    if item_sensor.checkState() == QtCore.Qt.CheckState.Checked:
                                        commands_verification = f"UPDATE {self.table_name} SET final_verif_of_sensor_date = '{test_date}', final_verif_of_sensor_state = '{state}', final_verif_of_sensor_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                        cur.execute(commands_verification)

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Verificación")
                        dlg.setText("Datos insertados con éxito")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg,new_icon

                        self.querytags()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()


        self.load_values()


    def insert_ppi(self, numorder):
        if numorder == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación")
            dlg.setText("Introduce un número de pedido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            from Verif_PpiInsert_Window import Ui_Verif_PpiInsert_Window
            self.ppiinsert_window_menu=QtWidgets.QMainWindow()
            self.ui=Ui_Verif_PpiInsert_Window(numorder)
            self.ui.setupUi(self.ppiinsert_window_menu)
            self.ppiinsert_window_menu.show()


    def insert_exp(self, numorder):
        if numorder == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación")
            dlg.setText("Introduce un número de pedido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            from Verif_ExpInsert_Window import Ui_Verif_ExpInsert_Window
            self.expinsert_window_menu=QtWidgets.QMainWindow()
            self.ui=Ui_Verif_ExpInsert_Window(numorder)
            self.ui.setupUi(self.expinsert_window_menu)
            self.expinsert_window_menu.show()

    def insert_m_drawings(self, numorder):
        if numorder == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación")
            dlg.setText("Introduce un número de pedido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            from Verif_M_DrawingInsert_Window import Ui_Verif_M_DrawingInsert_Window
            self.m_drawing_insert_window_menu=QtWidgets.QMainWindow()
            self.ui=Ui_Verif_M_DrawingInsert_Window(numorder)
            self.ui.setupUi(self.m_drawing_insert_window_menu)
            self.m_drawing_insert_window_menu.show()

    def insert_of_drawings(self, numorder):
        if numorder == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación")
            dlg.setText("Introduce un número de pedido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            from Verif_OF_DrawingInsert_Window import Ui_Verif_OF_DrawingInsert_Window
            self.of_drawing_insert_window_menu=QtWidgets.QMainWindow()
            self.ui=Ui_Verif_OF_DrawingInsert_Window(numorder)
            self.ui.setupUi(self.of_drawing_insert_window_menu)
            self.of_drawing_insert_window_menu.show()


# Function to load form
    def loadform(self,item):
        data_order=[]
        if self.tableTags.columnCount() == 14:
            list_columns = [7,8]
        else:
            list_columns = [6,7]

        for column in list_columns:
            item_text=self.tableTags.item(item.row(), column).text() if self.tableTags.item(item.row(), column) is not None else ""
            data_order.append(item_text)

        self.date_test.setText(data_order[0])
        self.obs_test.setText(data_order[1])


#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableTags.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableTags.horizontalHeader().height()
        popup_pos = self.tableTags.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableTags.show_unique_values_menu(logical_index, popup_pos, header_height)


    def load_values(self):
        actual_date=date.today()
        actual_date=actual_date.strftime("%d/%m/%Y")
        self.date_test.setText(actual_date)

        query_states = ("""
                            SELECT "state_verif"
                            FROM verification.states_verification
                            ORDER BY "id"
                            """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_states)
            results=cur.fetchall()
            list_states = [x[0] for x in results]
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.state_test.addItems(list_states)


    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key.Key_F5:
            self.load_values()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    VerificationInsert_Window = Ui_VerificationInsert_Window()
    VerificationInsert_Window.show()
    sys.exit(app.exec())