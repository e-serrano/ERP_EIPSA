# Form implementation generated from reading ui file 'VerificationInsert_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import os
import re
from datetime import *
import locale
import fnmatch
from tkinter.filedialog import askopenfilename, askopenfilenames
import random
from Verif_Order_Window import Ui_Verif_Order_Window

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class AlignDelegate_Custom(QtWidgets.QStyledItemDelegate):
    """
    A custom delegate class that aligns the text in table cells to the center and applies custom colors based on
    a specific column's value. The colors are fetched from a PostgreSQL database.
    """
    def __init__(self, column_name, parent=None):
        """
        Initializes the custom delegate, fetching color data from the database and setting the column name.

        Args:
            column_name (str): The name of the column used for color-based checks.
            parent (QWidget, optional): The parent widget. Defaults to None.
        """
        super().__init__(parent)
        self.colors_dict = self.get_colors_from_database()
        self.column_name = column_name

    def get_colors_from_database(self):
        """
        Retrieves color data from a PostgreSQL database and returns a dictionary with state-to-color mappings.

        Returns:
            dict: A dictionary where the key is the state and the value is a QColor object.
        """
        colors_dict = {}

        conn = None
        try:
            # read the connection parameters
            params = config()
            # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
            # execution of commands
            commands_colors = "SELECT state_verif, r_channel, g_channel, b_channel FROM verification.states_verification"
            cur.execute(commands_colors)
            results = cur.fetchall()

            for result in results:
                state, red, green, blue = result
                colors_dict[state] = QtGui.QColor(red, green, blue)

            # close communication with the PostgreSQL database server
            cur.close()
            # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            # Handle the error appropriately
            pass
        finally:
            if conn is not None:
                conn.close()

        return colors_dict

    def initStyleOption(self, option, index):
        """
        Overrides the style option to center-align the text and apply colors based on the column value.

        Args:
            option (QStyleOptionViewItem): The style option to be modified.
            index (QModelIndex): The index of the item being styled.
        """
        super(AlignDelegate_Custom, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        state_column = -1

        table_widget = option.widget

        for column in range(table_widget.columnCount()):
            header_item = table_widget.horizontalHeaderItem(column)
            if header_item and header_item.text() == self.column_name:
                state_column = column
                break

        if state_column != -1:
            state_column_index = index.sibling(index.row(), state_column)
            value = str(state_column_index.data())

            if value in self.colors_dict:
                text_color = self.colors_dict[value]
            else:
                text_color = QtGui.QColor(0, 0, 0, 0)

            option.palette.setBrush(QtGui.QPalette.ColorRole.Text, text_color)

class ColorDelegate(QtWidgets.QStyledItemDelegate):
    """
    A delegate class that applies color to table cell text based on row index values. Colors are fetched from
    a PostgreSQL database.

    Attributes:
        colors_dict (dict): A dictionary mapping color IDs to QColor objects fetched from the database.
    """
    def __init__(self, parent=None):
        """
        Initializes the color delegate and fetches color data from the database.

        Args:
            parent (QWidget, optional): The parent widget. Defaults to None.
        """
        super().__init__(parent)
        self.colors_dict = self.get_colors_from_database()

    def get_colors_from_database(self):
        """
        Retrieves color data from a PostgreSQL database and returns a dictionary with ID-to-color mappings.

        Returns:
            dict: A dictionary where the key is the color ID and the value is a QColor object.
        """
        colors_dict = {}

        conn = None
        try:
            # read the connection parameters
            params = config()
            # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
            # execution of commands
            commands_colors = "SELECT id, r_channel, g_channel, b_channel FROM verification.states_verification"
            cur.execute(commands_colors)
            results = cur.fetchall()

            for result in results:
                id_color, red, green, blue = result
                colors_dict[id_color] = QtGui.QColor(red, green, blue)

            # close communication with the PostgreSQL database server
            cur.close()
            # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            # Handle the error appropriately
            pass
        finally:
            if conn is not None:
                conn.close()

        return colors_dict

    def initStyleOption(self, option, index):
        """
        Overrides the style option to apply color based on the row index.

        Args:
            option (QStyleOptionViewItem): The style option to be modified.
            index (QModelIndex): The index of the item being styled.
        """
        super().initStyleOption(option, index)
        color = self.colors_dict.get(index.row()+1, QtGui.QColor("white"))
        option.palette.setColor(QtGui.QPalette.ColorGroup.All, QtGui.QPalette.ColorRole.Text, color)

class CustomTableWidgetTags(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None, db_conn=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()
        self.sorted_column = None
        self.sort_order = None

        # Drag & drop setup
        self.setAcceptDrops(True)
        self.db_conn = db_conn

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sortByColumn(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sortByColumn(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            hidden = False

            for col, filters in self.column_filters.items():
                if filters:
                    item = self.item(row, col)
                    item_value = item.text() if item else ""
                    if item_value not in filters:
                        hidden = True
                        break

            self.setRowHidden(row, hidden)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                unique_values.add(item.text() if item else '')
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        self.sorted_column = column_index
        self.sort_order = sortOrder

        if 'Fecha' in self.horizontalHeaderItem(column_index).text():
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

# Function to sort column based on special datatypes
    def custom_sort(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd/MM/yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

# Function to get the current state of the table
    def get_sort_state(self):
        """
        Returns the current column and sort order of the table.

        Returns:
            tuple: A tuple containing the column index and the sort order (Qt.SortOrder).
        """
        header = self.horizontalHeader()
        sort_column = header.sortIndicatorSection()
        sort_order = header.sortIndicatorOrder()
        return sort_column, sort_order

# Function to get the current filter state of the table
    def get_filter_state(self):
        """
        Returns the current filter state of the table.

        Returns:
            dict: A dictionary where each key is a column index and the value is a list of filters applied to that column.
        """
        return {
            "checkbox_filters": {
                col: list(filters) for col, filters in self.column_filters.items() if filters
            },
            "text_filters": getattr(self, "text_filters", {})  # si usas text_filters
        }

# Function to restore the filter state of the table
    def restore_filter_state(self, saved_filters):
        """
        Restores the filter state of the table from a previously saved state.

        Args:
            saved_filters (dict): Filter state to restore, containing 'checkbox_filters' and 'text_filters'.
        """
        self.column_filters.clear()
        self.rows_hidden.clear()
        self.general_rows_to_hide.clear()

        # Restaura los filtros por checkbox
        for col, values in saved_filters.get("checkbox_filters", {}).items():
            for value in values:
                self.apply_filter(col, value, checked=True)

        # Restaura filtros por texto si existen
        for col, text in saved_filters.get("text_filters", {}).items():
            self.apply_filter(col, None, False, text_filter=text)

# Function to handle drag and drop events
    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            for url in event.mimeData().urls():
                if url.toLocalFile().lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
                    event.acceptProposedAction()
                    return
        event.ignore()

    def dragMoveEvent(self, event):
        self.dragEnterEvent(event)

    def dropEvent(self, event: QtGui.QDropEvent):
        if event.mimeData().hasUrls():
            for url in event.mimeData().urls():
                file_path = url.toLocalFile()
                if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
                    pos = event.position().toPoint()
                    row = self.rowAt(pos.y())
                    col = self.columnAt(pos.x())
                    images_item = self.item(row, 22) if col == 22 else self.item(row, 23)
                    images_value = images_item.text() if images_item is not None else ''

                    if row != -1 and col != -1:
                        self.setItem(row, col, QtWidgets.QTableWidgetItem(file_path))
                        self.save_path_to_db(row, col, file_path, images_value)
                        event.acceptProposedAction()
                    return
        event.ignore()

    def save_path_to_db(self, row, col, path, previous_value):
        # Only save if the column is 22 or 23
        if col not in [22, 23]:
            return

        # Obtain the ID, table name, and column ID from the row
        id_item = self.item(row, 0)
        table_item = self.item(row, 21)
        column_id_item =self.item(row, 20)

        if not id_item or not table_item:
            print("ID o tabla vacía")
            return

        record_id = id_item.text()
        table_name = table_item.text()
        column_id = column_id_item.text()

        column_name = "tag_images" if col == 22 else "tag_images2"

        try:
            if previous_value == '':
                cursor = self.db_conn.cursor()
                query = f'UPDATE {table_name} SET {column_name} = %s WHERE {column_id} = %s'
                cursor.execute(query, (path, record_id))
                self.db_conn.commit()
                cursor.close()

            else:
                dlg_yes_no = QtWidgets.QMessageBox()
                new_icon_yes_no = QtGui.QIcon()
                new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_yes_no.setWindowIcon(new_icon_yes_no)
                dlg_yes_no.setWindowTitle("ERP EIPSA")
                dlg_yes_no.setText(f"El tag ya tiene imagen\n"
                                    "¿Estás seguro de que deseas sobreescribir los datos?")
                dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                result = dlg_yes_no.exec()

                if result == QtWidgets.QMessageBox.StandardButton.Yes:
                    cursor = self.db_conn.cursor()
                    query = f'UPDATE {table_name} SET {column_name} = %s WHERE {column_id} = %s'
                    cursor.execute(query, (path, record_id))
                    self.db_conn.commit()
                    cursor.close()

                del dlg_yes_no, new_icon_yes_no
        except Exception as e:
            print(f"Error al guardar en DB: {e}")
            self.db_conn.rollback()




class CustomTableWidgetOthers(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            hidden = False

            for col, filters in self.column_filters.items():
                if filters:
                    item = self.item(row, col)
                    item_value = item.text() if item else ""
                    if item_value not in filters:
                        hidden = True
                        break

            self.setRowHidden(row, hidden)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                unique_values.add(item.text() if item else '')
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if 'Fecha' in self.horizontalHeaderItem(column_index).text():
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

# Function to sort column based on special datatypes
    def custom_sort(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class Ui_VerificationInsert_Window(QtWidgets.QMainWindow):
    """
    Main application window for the insertion of verification.

        Args:
        username (str): The username of the user.
    """
    def __init__(self, username):
        """
        Initializes the main window, setting up the user interface and storing user-specific details.

        Args:
            username (str): The username of the user.
        """
        super().__init__()
        self.username = username
        self.setupUi(self)

    def setupUi(self, VerificationInsert_Window):
        """
        Sets up the user interface components for the window.

        Args:
            VerificationInsert_Window (QtWidgets.QMainWindow): The main window object to set up.
        """
        screen_width = QtWidgets.QApplication.primaryScreen().geometry().width()
        VerificationInsert_Window.setObjectName("VerificationInsert_Window")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        VerificationInsert_Window.setWindowIcon(icon)
        if self.username == 'm.gil':
            VerificationInsert_Window.setStyleSheet("QWidget {\n"
    "background-color: #121212; color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}\n"
    "\n"
    "QComboBox {\n"
    "border: 1px solid white;\n"
    "border-radius: 3px;\n"
    "}\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 17px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n")
        else:
            VerificationInsert_Window.setStyleSheet("QWidget {\n"
    "background-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid black;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        self.centralwidget = QtWidgets.QWidget(parent=VerificationInsert_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 0, 0, 1, 2)
        self.label_order = QtWidgets.QLabel(parent=self.frame)
        self.label_order.setMinimumSize(QtCore.QSize(int(screen_width//6), 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_order.setFont(font)
        self.label_order.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_order.setObjectName("label_order")
        self.gridLayout_2.addWidget(self.label_order, 1, 0, 1, 1)
        self.num_order = QtWidgets.QLineEdit(parent=self.frame)
        self.num_order.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.num_order.setFont(font)
        self.num_order.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.num_order.setObjectName("num_order")
        self.gridLayout_2.addWidget(self.num_order, 1, 1, 1, 6)
        self.label_manometer1 = QtWidgets.QCheckBox(parent=self.frame)
        self.label_manometer1.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_manometer1.setFont(font)
        self.label_manometer1.setObjectName("label_manometer1")
        self.gridLayout_2.addWidget(self.label_manometer1, 2, 0, 1, 1)
        self.manometer1 = QtWidgets.QComboBox(parent=self.frame)
        self.manometer1.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.manometer1.setFont(font)
        self.manometer1.setObjectName("manometer1")
        self.gridLayout_2.addWidget(self.manometer1, 2, 1, 1, 1)
        self.label_pressure1 = QtWidgets.QLabel(parent=self.frame)
        self.label_pressure1.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_pressure1.setFont(font)
        self.label_pressure1.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_pressure1.setObjectName("label_pressure1")
        self.gridLayout_2.addWidget(self.label_pressure1, 2, 2, 1, 1)
        self.pressure1 = QtWidgets.QLineEdit(parent=self.frame)
        self.pressure1.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pressure1.setFont(font)
        self.pressure1.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.pressure1.setObjectName("pressure1")
        self.gridLayout_2.addWidget(self.pressure1, 2, 3, 1, 1)
        self.Button_VerifOrder = QtWidgets.QPushButton(parent=self.frame)
        self.Button_VerifOrder.setMinimumSize(QtCore.QSize(100, 25))
        self.Button_VerifOrder.setObjectName("Button_VerifOrder")
        self.gridLayout_2.addWidget(self.Button_VerifOrder, 2, 6, 1, 1)
        self.label_manometer2 = QtWidgets.QCheckBox(parent=self.frame)
        self.label_manometer2.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_manometer2.setFont(font)
        self.label_manometer2.setObjectName("label_manometer2")
        self.gridLayout_2.addWidget(self.label_manometer2, 3, 0, 1, 1)
        self.manometer2 = QtWidgets.QComboBox(parent=self.frame)
        self.manometer2.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.manometer2.setFont(font)
        self.manometer2.setObjectName("manometer2")
        self.gridLayout_2.addWidget(self.manometer2, 3, 1, 1, 1)
        self.label_pressure2 = QtWidgets.QLabel(parent=self.frame)
        self.label_pressure2.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_pressure2.setFont(font)
        self.label_pressure2.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_pressure2.setObjectName("label_pressure2")
        self.gridLayout_2.addWidget(self.label_pressure2, 3, 2, 1, 1)
        self.pressure2 = QtWidgets.QLineEdit(parent=self.frame)
        self.pressure2.setMinimumSize(QtCore.QSize(170, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pressure2.setFont(font)
        self.pressure2.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.pressure2.setObjectName("pressure2")
        self.gridLayout_2.addWidget(self.pressure2, 3, 3, 1, 1)
        self.label_lptest = QtWidgets.QCheckBox(parent=self.frame)
        self.label_lptest.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_lptest.setFont(font)
        self.label_lptest.setObjectName("label_lptest")
        self.gridLayout_2.addWidget(self.label_lptest, 4, 0, 1, 1)
        self.Button_SeePhoto = QtWidgets.QPushButton(parent=self.frame)
        self.Button_SeePhoto.setMinimumSize(QtCore.QSize(100, 25))
        self.Button_SeePhoto.setObjectName("Button_SeePhoto")
        self.Button_SeePhoto.setVisible(False)
        self.gridLayout_2.addWidget(self.Button_SeePhoto, 2, 4, 1, 2)
        self.Button_InsertPhoto = QtWidgets.QPushButton(parent=self.frame)
        self.Button_InsertPhoto.setMinimumSize(QtCore.QSize(100, 25))
        self.Button_InsertPhoto.setObjectName("Button_InsertPhoto")
        self.Button_InsertPhoto.setVisible(False)
        self.gridLayout_2.addWidget(self.Button_InsertPhoto, 3, 4, 1, 2)
        self.Button_Deverify = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Deverify.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Deverify.setObjectName("Button_Deverify")
        self.gridLayout_2.addWidget(self.Button_Deverify, 5, 0, 1, 1)
        params = config()
    # connect to the PostgreSQL server
        conn = psycopg2.connect(**params)
        self.tableTags = CustomTableWidgetTags(db_conn=conn)
        self.tableTags.setObjectName("tableWidget")
        self.tableTags.setColumnCount(0)
        self.tableTags.setRowCount(0)
        self.gridLayout_2.addWidget(self.tableTags, 6, 0, 1, 6)
        self.tableOthers = CustomTableWidgetOthers()
        self.tableOthers.setObjectName("tableWidget")
        self.tableOthers.setColumnCount(0)
        self.tableOthers.setRowCount(0)
        self.gridLayout_2.addWidget(self.tableOthers, 3, 6, 9, 1)
        self.label_CountItems_tags = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems_tags.setMinimumSize(QtCore.QSize(105, 25))
        self.label_CountItems_tags.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_CountItems_tags.setObjectName("label_CountItems_tags")
        self.gridLayout_2.addWidget(self.label_CountItems_tags, 9, 4, 1, 1)
        self.label_CountValue_tags = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue_tags.setMinimumSize(QtCore.QSize(105, 25))
        self.label_CountValue_tags.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_CountValue_tags.setObjectName("label_CountValue_tags")
        self.gridLayout_2.addWidget(self.label_CountValue_tags, 9, 5, 1, 1)
        self.label_CountItems_others = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems_others.setMinimumSize(QtCore.QSize(105, 25))
        self.label_CountItems_others.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_CountItems_others.setObjectName("label_CountItems_others")
        self.gridLayout_2.addWidget(self.label_CountItems_others, 12, 6, 1, 1)
        self.label_date = QtWidgets.QLabel(parent=self.frame)
        self.label_date.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_date.setFont(font)
        self.label_date.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_date.setObjectName("label_date")
        self.gridLayout_2.addWidget(self.label_date, 10, 0, 1, 1)
        self.date_test = QtWidgets.QLineEdit(parent=self.frame)
        self.date_test.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.date_test.setFont(font)
        self.date_test.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.date_test.setObjectName("date_test")
        self.gridLayout_2.addWidget(self.date_test, 10, 1, 1, 1)
        self.label_state = QtWidgets.QLabel(parent=self.frame)
        self.label_state.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_state.setFont(font)
        self.label_state.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_state.setObjectName("label_state")
        self.gridLayout_2.addWidget(self.label_state, 10, 2, 1, 1)
        self.state_test = QtWidgets.QComboBox(parent=self.frame)
        self.state_test.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.state_test.setFont(font)
        self.state_test.setObjectName("state_test")
        self.gridLayout_2.addWidget(self.state_test, 10, 3, 1, 1)
        self.label_obs = QtWidgets.QLabel(parent=self.frame)
        self.label_obs.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_obs.setFont(font)
        self.label_obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_obs.setObjectName("label_obs")
        self.gridLayout_2.addWidget(self.label_obs, 10, 4, 1, 1)
        self.obs_test = QtWidgets.QTextEdit(parent=self.frame)
        self.obs_test.setMinimumSize(QtCore.QSize(105, 25))
        self.obs_test.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.obs_test.setFont(font)
        self.obs_test.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.obs_test.setObjectName("obs_test")
        self.gridLayout_2.addWidget(self.obs_test, 10, 5, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem1, 11, 2, 1, 1)
        self.Button_Insert = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Insert.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Insert.setObjectName("Button_Insert")
        self.gridLayout_2.addWidget(self.Button_Insert, 12, 0, 1, 2)
        self.Button_Photos= QtWidgets.QPushButton(parent=self.frame)
        self.Button_Photos.setMinimumSize(QtCore.QSize(204, 35))
        self.Button_Photos.setObjectName("Button_Photos")
        self.gridLayout_2.addWidget(self.Button_Photos, 12, 2, 1, 2)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addWidget(self.Button_Cancel, 12, 4, 1, 2)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        VerificationInsert_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=VerificationInsert_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 22))
        self.menubar.setObjectName("menubar")
        VerificationInsert_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=VerificationInsert_Window)
        self.statusbar.setObjectName("statusbar")
        VerificationInsert_Window.setStatusBar(self.statusbar)
        self.tableTags.verticalHeader().setVisible(True)
        self.tableTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableTags.setSortingEnabled(False)
        if self.username == 'm.gil':
            self.tableTags.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableTags.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableTags.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        self.tableOthers.verticalHeader().setVisible(True)
        self.tableOthers.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableOthers.setSortingEnabled(False)
        if self.username == 'm.gil':
            self.tableOthers.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableOthers.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableOthers.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        VerificationInsert_Window.setWindowFlag(QtCore.Qt.WindowType.WindowCloseButtonHint, False)

        self.retranslateUi(VerificationInsert_Window)
        QtCore.QMetaObject.connectSlotsByName(VerificationInsert_Window)

        self.Button_Cancel.clicked.connect(VerificationInsert_Window.close)
        self.num_order.returnPressed.connect(self.query_tables)
        self.Button_Insert.clicked.connect(self.insert_all_data)
        self.Button_Photos.clicked.connect(lambda: self.insert_images(self.num_order.text().upper()))
        self.Button_SeePhoto.clicked.connect(self.open_temp_image)
        self.Button_InsertPhoto.clicked.connect(self.insert_temp_image)
        self.Button_VerifOrder.clicked.connect(self.verif_order)
        self.Button_Deverify.clicked.connect(self.deverify)
        self.tableTags.horizontalHeader().sectionDoubleClicked.connect(self.on_header_section_clicked)
        self.tableOthers.horizontalHeader().sectionDoubleClicked.connect(self.on_header_section_clicked_others)
        self.state_test.currentTextChanged.connect(self.change_text_color)
        self.tableOthers.itemSelectionChanged.connect(self.countSelectedCells_others)
        self.tableTags.itemSelectionChanged.connect(self.countSelectedCells_tags)
        self.tableTags.itemDoubleClicked.connect(self.item_double_clicked)
        self.tableOthers.itemDoubleClicked.connect(self.item_double_clicked)

        self.load_values()

# Function to translate and updates the text of various UI elements
    def retranslateUi(self, VerificationInsert_Window):
        """
        Translates and updates the text of various UI elements in the given App_Comercial.
        """
        _translate = QtCore.QCoreApplication.translate
        VerificationInsert_Window.setWindowTitle(_translate("VerificationInsert_Window", "Verificación"))
        self.label_order.setText(_translate("VerificationInsert_Window", "Nº Pedido:"))
        self.label_manometer1.setText(_translate("VerificationInsert_Window", "Manómetro 1:"))
        self.label_manometer2.setText(_translate("VerificationInsert_Window", "Manómetro 2:"))
        self.label_pressure1.setText(_translate("VerificationInsert_Window", "Presión 1:"))
        self.label_pressure2.setText(_translate("VerificationInsert_Window", "Presión 2:"))
        self.label_lptest.setText(_translate("VerificationInsert_Window", "Líquidos Penetrantes:"))
        self.label_date.setText(_translate("VerificationInsert_Window", "Fecha:"))
        self.label_state.setText(_translate("VerificationInsert_Window", "Estado:"))
        self.label_obs.setText(_translate("VerificationInsert_Window", "Observaciones:"))
        self.Button_Cancel.setText(_translate("VerificationInsert_Window", "Cancelar"))
        self.Button_Insert.setText(_translate("VerificationInsert_Window", "Insertar"))
        self.Button_SeePhoto.setText(_translate("VerificationInsert_Window", "Ver Foto"))
        self.Button_InsertPhoto.setText(_translate("VerificationInsert_Window", "Insertar Foto"))
        self.Button_Deverify.setText(_translate("VerificationInsert_Window", "Desverificar"))
        self.Button_VerifOrder.setText(_translate("VerificationInsert_Window", "Verif. Pedido"))

# Function to update data of both tables
    def query_tables(self):
        """
        Queries different tables based on the order number format.
        """
        self.num_order_value = self.num_order.text().upper()
        if self.num_order_value != '':
            self.tableTags.setRowCount(0)
            self.tableOthers.setRowCount(0)
            if self.num_order_value[:3] == 'AL-':
                self.querywarehouse()
                self.Button_Photos.setText("Fotos / PDF")
            else:
                self.querytags()
                self.queryothers()
                self.Button_Photos.setText("Fotos")

# Function to load data of table tags
    def querytags(self):
        """
        Loads data from tags tables based on the provided order number. The results are displayed in a table.
        """
        self.num_columns = 0
        self.tableTags.setRowCount(0)
        self.num_order_value = self.num_order.text().upper()

        if self.num_order_value not in ['ALMACÉN', 'ALMACEN', 'INTERNO', 'PROTOTIPOS']:
            query_material = ("""
                                SELECT orders."num_order",orders."num_offer",product_type."variable"
                                FROM offers
                                INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                                INNER JOIN product_type ON (offers."material"=product_type."material")
                                WHERE (UPPER(orders."num_order") LIKE UPPER('%%'||%s||'%%')
                                )
                                ORDER BY orders."num_order"
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(query_material,(self.num_order_value,))
                results=cur.fetchall()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            if len(results) != 0:
                commands_tags = (
                f"""SELECT id_tag_flow, tag, num_order, item_type || ' ' || line_size || ' ' || rating || ' ' || facing || ' ' || schedule || ' ' || 
                flange_material || ' ' || flange_type || ' ' || tube_material || ' ' || tapping_num_size || ' ' || element_material || ' ' || 
                plate_type || ' ' || plate_thk || ' ' || plate_std || ' ' || gasket_material || ' ' || bolts_nuts_material as item_colum,
                dim_drawing, of_drawing, '' as of_sensor_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), '' as final_verif_of_sensor_date,
                TO_CHAR(ph1_date, 'DD/MM/YYYY'), TO_CHAR(ph2_date, 'DD/MM/YYYY'), TO_CHAR(lp_date, 'DD/MM/YYYY'), inspection,
                final_verif_dim_state, final_verif_of_eq_state, '' as final_verif_of_sensor_state, ph1_state, ph2_state, lp_state, 'id_tag_flow' as id_column,'tags_data.tags_flow' as db_table, tag_images, tag_images2
                FROM tags_data.tags_flow
                WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') AND tag_state in ('PURCHASED', 'HOLD')

                UNION

                SELECT id_tag_temp, tag, num_order, item_type || ' ' || tw_type || ' ' || size || ' ' || rating || ' ' ||
                facing || ' ' || std_tw || ' ' || material_tw || ' ' || std_length || ' ' || ins_length || ' ' || root_diam || ' ' || tip_diam || ' ' || 
                sensor_element || ' ' || sheath_stem_material || ' ' || sheath_stem_diam || ' ' || insulation as item_colum,
                dim_drawing, of_drawing, of_sensor_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_sensor_date, 'DD/MM/YYYY'),
                TO_CHAR(ph1_date, 'DD/MM/YYYY'), TO_CHAR(ph2_date, 'DD/MM/YYYY'), TO_CHAR(lp_date, 'DD/MM/YYYY'), inspection,
                final_verif_dim_state, final_verif_of_eq_state, final_verif_of_sensor_state, ph1_state, ph2_state, lp_state, 'id_tag_temp' as id_column, 'tags_data.tags_temp' as db_table, tag_images, tag_images2
                FROM tags_data.tags_temp
                WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') AND tag_state in ('PURCHASED', 'HOLD')

                UNION

                SELECT id_tag_level, tag, num_order, item_type || ' ' || body_material || ' ' || proc_conn_size || ' ' || proc_conn_rating || ' ' || conn_type || ' ' || visibility || ' ' || gasket_mica as item_colum,
                dim_drawing, of_drawing, '' as of_sensor_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), '' as final_verif_of_sensor_date,
                TO_CHAR(ph1_date, 'DD/MM/YYYY'), TO_CHAR(ph2_date, 'DD/MM/YYYY'), TO_CHAR(lp_date, 'DD/MM/YYYY'), inspection,
                final_verif_dim_state, final_verif_of_eq_state, '' as final_verif_of_sensor_state, ph1_state, ph2_state, lp_state, 'id_tag_level' as id_column, 'tags_data.tags_level' as db_table, tag_images, tag_images2
                FROM tags_data.tags_level
                WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') AND tag_state in ('PURCHASED', 'HOLD')

                UNION

                SELECT id_tag_others, tag, num_order, description,
                dim_drawing, of_drawing, '' as of_sensor_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), '' as final_verif_of_sensor_date,
                TO_CHAR(ph1_date, 'DD/MM/YYYY'), TO_CHAR(ph2_date, 'DD/MM/YYYY'), TO_CHAR(lp_date, 'DD/MM/YYYY'), inspection,
                final_verif_dim_state, final_verif_of_eq_state, '' as final_verif_of_sensor_state, ph1_state, ph2_state, lp_state, 'id_tag_others' as id_column, 'tags_data.tags_others' as db_table, tag_images, tag_images2
                FROM tags_data.tags_others
                WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') AND tag_state in ('PURCHASED', 'HOLD')

                ORDER BY tag
                """)
                column_headers = ['ID', 'TAG', 'Nº Pedido', 'Tipo Equipo', 'Plano Dim.', 'OF Equipo', 'OF Sensor', 'Fecha Dim.', 'Fecha OF Equipo', 'Fecha OF Sensor', 'Fecha PH1', 'Fecha PH2', 'Fecha LP', 'NOI', 'E_dim', 'E_of', 'E_of_sensor', 'E_ph1', 'E_ph2', 'E_lp', 'id_column', 'db_table', 'Fotos', 'Fotos2']

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()

                    cur.execute(commands_tags)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    self.tableTags.setRowCount(len(results))
                    self.num_columns = 24
                    self.tableTags.setColumnCount(self.num_columns)
                    tablerow=0

                # fill the Qt Table with the query results
                    for row in results:
                        for column in range(self.num_columns):
                            value = row[column]

                            if value is None:
                                value = ''
                            else:
                                if column in [22, 23]:
                                    value = row[column].split("/")[-1]

                                it = QtWidgets.QTableWidgetItem(str(value))
                                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                                self.tableTags.setItem(tablerow, column, it)

                        tablerow+=1

                    self.tableTags.verticalHeader().hide()
                    self.tableTags.setItemDelegate(AlignDelegate(self.tableTags))
                    self.tableTags.setItemDelegateForColumn(7, AlignDelegate_Custom('E_dim', self.tableTags ))
                    self.tableTags.setItemDelegateForColumn(8, AlignDelegate_Custom('E_of',self.tableTags))
                    self.tableTags.setItemDelegateForColumn(9, AlignDelegate_Custom('E_of_sensor', self.tableTags))
                    self.tableTags.setItemDelegateForColumn(10, AlignDelegate_Custom('E_ph1',self.tableTags))
                    self.tableTags.setItemDelegateForColumn(11, AlignDelegate_Custom('E_ph2',self.tableTags))
                    self.tableTags.setItemDelegateForColumn(12, AlignDelegate_Custom('E_lp',self.tableTags))
                    self.tableTags.setSortingEnabled(False)
                    self.tableTags.setHorizontalHeaderLabels(column_headers)
                    self.tableTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
                    self.tableTags.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.Interactive)
                    self.tableTags.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.Interactive)
                    self.tableTags.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeMode.Interactive)
                    self.tableTags.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeMode.Interactive)
                    self.tableTags.horizontalHeader().setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeMode.Interactive)
                    self.tableTags.horizontalHeader().setSectionResizeMode(6, QtWidgets.QHeaderView.ResizeMode.Interactive)
                    self.tableTags.hideColumn(0)

                    for i in range (14, self.num_columns - 2):
                        self.tableTags.hideColumn(i)

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    print(error)
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                sort_column, sort_order = self.tableTags.get_sort_state()

                if sort_column is not None and sort_order is not None:
                    self.tableTags.sortByColumn(sort_column, sort_order)

                saved_filters = self.tableTags.get_filter_state()
                self.tableTags.restore_filter_state(saved_filters)

# Function to load data of table others
    def queryothers(self):
        """
        Loads data from multiple verification tables (PPI, EXP, M Drawings, OF Drawings, Dim Drawings) based on the provided order number. The results are displayed in a table.
        """
        self.tableOthers.setRowCount(0)
        self.num_order_value = self.num_order.text().upper()

        query_others = ("""
                        SELECT id, num_order, drawing_number, TO_CHAR(verif_m_drawing_date, 'DD/MM/YYYY'), verif_m_drawing_state FROM verification.m_drawing_verification WHERE UPPER(verification.m_drawing_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        UNION
                        SELECT id, num_order, 'PPI' as drawing_number, TO_CHAR(verif_ppi_date, 'DD/MM/YYYY'), verif_ppi_state FROM verification.ppi_verification WHERE UPPER(verification.ppi_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        UNION
                        SELECT id, num_order, 'EXP' as drawing_number, TO_CHAR(verif_exp_date, 'DD/MM/YYYY'), verif_exp_state FROM verification.exp_verification WHERE UPPER(verification.exp_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        UNION
                        SELECT id, num_order, drawing_number, TO_CHAR(verif_of_drawing_date, 'DD/MM/YYYY'), verif_of_drawing_state FROM verification.of_drawing_verification WHERE UPPER(verification.of_drawing_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        UNION
                        SELECT id, num_order, drawing_number, TO_CHAR(verif_dim_drawing_date, 'DD/MM/YYYY'), verif_dim_drawing_state FROM verification.dim_drawing_verification WHERE UPPER(verification.dim_drawing_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        ORDER BY drawing_number
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_others, (self.num_order_value, self.num_order_value, self.num_order_value, self.num_order_value, self.num_order_value,))
            results=cur.fetchall()

            column_headers = ['ID', 'Nº Pedido', 'Nº Plano', 'Fecha', 'state']

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableOthers.setRowCount(len(results))
            self.tableOthers.setColumnCount(5)
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(5):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableOthers.setItem(tablerow, column, it)

                tablerow+=1

            self.tableOthers.verticalHeader().hide()
            self.tableOthers.setItemDelegate(AlignDelegate(self.tableOthers))
            self.tableOthers.setItemDelegateForColumn(3, AlignDelegate_Custom('state', self.tableOthers))
            self.tableOthers.setSortingEnabled(False)
            self.tableOthers.setHorizontalHeaderLabels(column_headers)
            self.tableOthers.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableOthers.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableOthers.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableOthers.hideColumn(0)
            self.tableOthers.hideColumn(1)
            self.tableOthers.hideColumn(4)
            self.tableOthers.sortByColumn(2, QtCore.Qt.SortOrder.AscendingOrder)

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Funtion to load data of table wharehouse
    def querywarehouse(self):
        """
        Loads data for AL drawings based on the provided order number. The results are displayed in a table.
        """
        self.tableTags.setRowCount(0)
        self.num_order_value = self.num_order.text().upper()

        query_warehouse = ("""
                        SELECT id, num_order, drawing_number, printed_date, TO_CHAR(warehouse_date, 'DD/MM/YYYY'), TO_CHAR(verif_al_drawing_date, 'DD/MM/YYYY'),
                        description, image, document,  warehouse_state, verif_al_drawing_state
                        FROM verification.al_drawing_verification WHERE UPPER(verification.al_drawing_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_warehouse, (self.num_order_value,))
            results=cur.fetchall()

            column_headers = ['ID', 'Nº Pedido', 'Nº Plano', 'Fecha Emisión', 'Fecha Almacén', 'Fecha Verif.', 'Descripción', 'Foto', 'PDF Plano', 'E_warehouse', 'E_verif']

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableTags.setRowCount(len(results))
            self.tableTags.setColumnCount(11)
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(11):
                    value = row[column]
                    if value is None:
                        value = ''
                    else:
                        if column == (self.tableTags.columnCount() - 4) or column == (self.tableTags.columnCount() - 3):
                            value = row[column].split("/")[-1]
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableTags.setItem(tablerow, column, it)

                tablerow+=1

            self.tableTags.verticalHeader().hide()
            self.tableTags.setItemDelegate(AlignDelegate(self.tableTags))
            self.tableTags.setItemDelegateForColumn(5, AlignDelegate_Custom('E_verif', self.tableTags))
            self.tableTags.setSortingEnabled(False)
            self.tableTags.setHorizontalHeaderLabels(column_headers)
            self.tableTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableTags.horizontalHeader().setSectionResizeMode(8, QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableTags.horizontalHeader().setSectionResizeMode(9, QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableTags.hideColumn(0)
            self.tableTags.hideColumn(9)
            self.tableTags.hideColumn(10)
            self.tableTags.sortByColumn(2, QtCore.Qt.SortOrder.AscendingOrder)

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Function to insert all data
    def insert_all_data(self):
        """
        Inserts or updates data based on the order number format.
        """
        self.num_order_value = self.num_order.text().upper()
        if self.num_order_value != '':
            if self.num_order_value[:3] != 'AL-':
                self.update_tags()
            else:
                self.update_al_drawings()
        self.update_others()
        self.query_tables()

# Function to insert data on tags
    def update_tags(self):
        """
        Updates the selected data for a specific order based on user inputs and verification status.
        Data can be for OF Drawings, Dimensional Drawings, Hydrostatic Test or ND Test
        """
        num_order = self.num_order.text().upper()
        test_date = self.date_test.text()
        state = self.state_test.currentText()
        notes = self.obs_test.toPlainText()

        manometer1 = self.manometer1.currentText().split(" ")[0]
        pressure1 = self.pressure1.text()
        manometer2 = self.manometer2.currentText().split(" ")[0] if self.manometer2.currentText() != '' else ''
        pressure2 = self.pressure2.text()

        if num_order == '' or test_date == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Rellena todos los campos. Solo el campo de observaciones puede quedarse vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', test_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            if num_order not in ['ALMACÉN', 'ALMACEN', 'INTERNO', 'PROTOTIPOS']:
                selected_indexes = self.tableTags.selectedIndexes()

                if len(selected_indexes) == 0 and self.tableTags.rowCount() != 0:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("No has seleccionado ningún TAG")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon
                else:
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        for index in selected_indexes:
                            column_index = index.column()
                            row_index = index.row()
                            id_value = int(self.tableTags.item(row_index, 0).text())
                            tag = self.tableTags.item(row_index, 1).text()
                            table_name = self.tableTags.item(row_index, 21).text()
                            id_column = self.tableTags.item(row_index, 20).text()

                            if column_index == 4 and self.tableTags.item(row_index, column_index).text() != '':
                                item_date_dim = self.tableTags.item(row_index, 7)
                                date_dim = item_date_dim.text() if item_date_dim is not None else ''

                                if date_dim == '':
                                        commands_verification = f"UPDATE {table_name} SET final_verif_dim_date = '{test_date}', final_verif_dim_state = '{state}', final_verif_dim_obs = '{notes}', fab_state = 'FABRICADO' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_verification)

                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"El tag {tag} ya tiene datos dimensionales\n"
                                                        "¿Estás seguro de que deseas sobreescribir los datos?")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()

                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        commands_verification = f"UPDATE {table_name} SET final_verif_dim_date = '{test_date}', final_verif_dim_state = '{state}', final_verif_dim_obs = '{notes}' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_verification)

                                    del dlg_yes_no, new_icon_yes_no

                            elif column_index == 5 and self.tableTags.item(row_index, column_index).text() != '':
                                item_date_eq = self.tableTags.item(row_index, 8)
                                date_eq = item_date_eq.text() if item_date_eq is not None else ''
                                if date_eq == '':
                                        commands_verification = f"UPDATE {table_name} SET final_verif_of_eq_date = '{test_date}', final_verif_of_eq_state = '{state}', final_verif_of_eq_obs = '{notes}' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_verification)

                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"El tag {tag} ya tiene datos de equipo\n"
                                                        "¿Estás seguro de que deseas sobreescribir los datos?")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()

                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        commands_verification = f"UPDATE {table_name} SET final_verif_of_eq_date = '{test_date}', final_verif_of_eq_state = '{state}', final_verif_of_eq_obs = '{notes}' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_verification)

                                    del dlg_yes_no, new_icon_yes_no

                            elif column_index == 6 and table_name == "tags_data.tags_temp" and self.tableTags.item(row_index, column_index).text() != '':
                                item_date_sensor = self.tableTags.item(row_index, 9)
                                date_sensor = item_date_sensor.text() if item_date_sensor is not None else ''
                                if date_sensor == '':
                                    commands_verification = f"UPDATE {table_name} SET final_verif_of_sensor_date = '{test_date}', final_verif_of_sensor_state = '{state}', final_verif_of_sensor_obs = '{notes}' WHERE {id_column} = {id_value}"
                                    cur.execute(commands_verification)

                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"El tag {tag} ya tiene datos de sensor\n"
                                                        "¿Estás seguro de que deseas sobreescribir los datos?")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()

                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        commands_verification = f"UPDATE {table_name} SET final_verif_of_sensor_date = '{test_date}', final_verif_of_sensor_state = '{state}', final_verif_of_sensor_obs = '{notes}' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_verification)

                                    del dlg_yes_no, new_icon_yes_no

                            if self.label_manometer1.checkState() == QtCore.Qt.CheckState.Checked:
                                item_date_ph1 = self.tableTags.item(row_index, 10)
                                date_ph1 = item_date_ph1.text() if item_date_ph1 is not None else ''

                                if date_ph1 == '':
                                    commands_hydrotest = f"UPDATE {table_name} SET ph1_date = '{test_date}', ph1_manometer = '{manometer1}', ph1_pressure = '{pressure1}', ph1_state = '{state}', ph1_obs = '{notes}' WHERE {id_column} = {id_value}"
                                    cur.execute(commands_hydrotest)

                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"El tag {tag} ya tiene datos LP\n"
                                                        "¿Estás seguro de que deseas sobreescribir los datos?")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()

                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        commands_hydrotest = f"UPDATE {table_name} SET ph1_date = '{test_date}', ph1_manometer = '{manometer1}', ph1_pressure = '{pressure1}', ph1_state = '{state}', ph1_obs = '{notes}' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_hydrotest)

                                    del dlg_yes_no, new_icon_yes_no

                            if self.label_manometer2.checkState() == QtCore.Qt.CheckState.Checked:
                                item_date_ph2 = self.tableTags.item(row_index, 11)
                                date_ph2 = item_date_ph2.text() if item_date_ph2 is not None else ''

                                if date_ph2 == '':
                                    commands_hydrotest = f"UPDATE {table_name} SET ph2_date = '{test_date}', ph2_manometer = '{manometer2}', ph2_pressure = '{pressure2}', ph2_state = '{state}', ph2_obs = '{notes}' WHERE {id_column} = {id_value}"
                                    cur.execute(commands_hydrotest)

                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"El tag {tag} ya tiene datos LP\n"
                                                        "¿Estás seguro de que deseas sobreescribir los datos?")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()

                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        commands_hydrotest = f"UPDATE {table_name} SET ph2_date = '{test_date}', ph2_manometer = '{manometer2}', ph2_pressure = '{pressure2}', ph2_state = '{state}', ph2_obs = '{notes}' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_hydrotest)

                                    del dlg_yes_no, new_icon_yes_no

                            if self.label_lptest.checkState() == QtCore.Qt.CheckState.Checked:
                                query_hn_liq = ("""SELECT liquid, heat_number FROM verification.liquid_heat_number""")
                                cur.execute(query_hn_liq)
                                results_hn=cur.fetchall()

                                match_liq1 = list(filter(lambda x: x[0] == '9PR5', results_hn))
                                match_liq2 = list(filter(lambda x: x[0] == '9D1B', results_hn))
                                match_liq3 = list(filter(lambda x: x[0] == '996PB', results_hn))

                                hn_liq1=match_liq1[0][1]
                                hn_liq2=match_liq2[0][1]
                                hn_liq3=match_liq3[0][1]

                                item_date_lp = self.tableTags.item(row_index, 12)
                                date_lp = item_date_lp.text() if item_date_lp is not None else ''

                                if date_lp == '':
                                        commands_liquidtest = f"UPDATE {table_name} SET lp_date = '{test_date}', lp_hn_liq1 = '{hn_liq1}', lp_hn_liq2 = '{hn_liq2}', lp_hn_liq3 = '{hn_liq3}', lp_state = '{state}', lp_obs = '{notes}' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_liquidtest)

                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"El tag {tag} ya tiene datos LP\n"
                                                        "¿Estás seguro de que deseas sobreescribir los datos?")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()

                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        commands_liquidtest = f"UPDATE {table_name} SET lp_date = '{test_date}', lp_hn_liq1 = '{hn_liq1}', lp_hn_liq2 = '{hn_liq2}', lp_hn_liq3 = '{hn_liq3}', lp_state = '{state}', lp_obs = '{notes}' WHERE {id_column} = {id_value}"
                                        cur.execute(commands_liquidtest)

                                    del dlg_yes_no, new_icon_yes_no

                        if self.label_manometer1.checkState() == QtCore.Qt.CheckState.Checked:
                            self.label_manometer1.setCheckState(QtCore.Qt.CheckState.Unchecked)

                        if self.label_manometer2.checkState() == QtCore.Qt.CheckState.Checked:
                            self.label_manometer2.setCheckState(QtCore.Qt.CheckState.Unchecked)

                        if self.label_lptest.checkState() == QtCore.Qt.CheckState.Checked:
                            self.label_lptest.setCheckState(QtCore.Qt.CheckState.Unchecked)
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Verificación")
                        dlg.setText("Datos insertados con éxito")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg,new_icon

                        self.querytags()

                    except (Exception, psycopg2.DatabaseError) as error:
                        print(error)
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

# Function to update data for PPI, EXP, M drawings, OF drawings and Dimensional Drawings
    def update_others(self):
        """
        Updates the selected data for a specific order based on user inputs and verification status.
        Data can be for PPI, EXP, M Drawings, OF Drawings or Dimensional Drawings
        """
        num_order = self.num_order.text()
        verif_date = self.date_test.text()
        verif_state = self.state_test.currentText()
        verif_notes = self.obs_test.toPlainText()

        if num_order == "" or verif_date == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación PPI")
            dlg.setText("Rellene todos los campos. Solo el campo de observaciones puede quedar vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', verif_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación PPI")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            selected_indexes = self.tableOthers.selectedIndexes()

            if len(selected_indexes) == 0 and self.tableOthers.rowCount() != 0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("No has seleccionado ningún elemento de Otros")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon
            else:
                for index in selected_indexes:
                    conn = None
                    try:
                # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                        row_index = index.row()
                        id_value = int(self.tableOthers.item(row_index, 0).text())
                        drawing_number = self.tableOthers.item(row_index, 2).text()

                        if drawing_number == 'PPI':
                            commands_select_ppi = ("""
                            SELECT verif_ppi_date
                            FROM verification."ppi_verification"
                            WHERE "id" = %s
                            """)
                            commands_insert_ppi = ("""
                            UPDATE verification."ppi_verification"
                            SET "verif_ppi_date" = %s, "verif_ppi_state" = %s,"verif_ppi_obs" = %s
                            WHERE "id" = %s
                            """)
                            cur.execute(commands_select_ppi, (id_value, ))
                            results = cur.fetchall()

                            if len(results) != 0:
                                if results[0][0] is None:
                                    cur.execute(commands_insert_ppi, (verif_date, verif_state, verif_notes, id_value, ))
                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText("Ya ha datos existentes en el PPI\n"
                                                        "¿Deseas sobreescribirlos?\n")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()
                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        cur.execute(commands_insert_ppi, (verif_date, verif_state, verif_notes, id_value, ))
                                    del dlg_yes_no, new_icon_yes_no

                            else:
                                dlg = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg.setWindowIcon(new_icon)
                                dlg.setWindowTitle("PPI")
                                dlg.setText("No hay PPI creado para este pedido")
                                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                dlg.exec()
                                del dlg, new_icon

                        # close communication with the PostgreSQL database server
                            cur.close()
                        # commit the changes
                            conn.commit()

                        elif drawing_number == 'EXP':
                            commands_select_exp = ("""
                            SELECT verif_exp_date, id
                            FROM verification."exp_verification"
                            WHERE "id" = %s
                            """)
                            commands_insert_exp = ("""
                            UPDATE verification."exp_verification"
                            SET "verif_exp_date" = %s, "verif_exp_state" = %s,"verif_exp_obs" = %s
                            WHERE "id" = %s
                            """)
                            cur.execute(commands_select_exp, (id_value, ))
                            results = cur.fetchall()

                            if len(results) != 0:
                                if results[0][0] is None:
                                    cur.execute(commands_insert_exp, (verif_date, verif_state, verif_notes, id_value, ))
                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText("Ya ha datos existentes en el EXP\n"
                                                        "¿Deseas sobreescribirlos?\n")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()
                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        cur.execute(commands_insert_exp, (verif_date, verif_state, verif_notes, id_value, ))
                                    del dlg_yes_no, new_icon_yes_no

                            else:
                                dlg = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg.setWindowIcon(new_icon)
                                dlg.setWindowTitle("EXP")
                                dlg.setText("No hay EXP creado para este pedido")
                                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                dlg.exec()
                                del dlg, new_icon
                        # close communication with the PostgreSQL database server
                            cur.close()
                        # commit the changes
                            conn.commit()

                        elif drawing_number[:2] == 'M-':
                            commands_select_m_drawing = ("""
                            SELECT verif_m_drawing_date
                            FROM verification."m_drawing_verification"
                            WHERE "id" = %s
                            """)
                            commands_insert_m_drawing = ("""
                            UPDATE verification."m_drawing_verification"
                            SET "verif_m_drawing_date" = %s, "verif_m_drawing_state" = %s,"verif_m_drawing_obs" = %s
                            WHERE "id" = %s
                            """)
                            cur.execute(commands_select_m_drawing, (id_value, ))
                            results = cur.fetchall()

                            if len(results) != 0:
                                if results[0][0] is None:
                                    cur.execute(commands_insert_m_drawing, (verif_date, verif_state, verif_notes, id_value, ))
                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"Ya ha datos existentes para el plano {drawing_number}\n"
                                                "¿Deseas sobreescribirlos?\n")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()
                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        cur.execute(commands_insert_m_drawing, (verif_date, verif_state, verif_notes, id_value, ))
                                    del dlg_yes_no, new_icon_yes_no

                            else:
                                dlg = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg.setWindowIcon(new_icon)
                                dlg.setWindowTitle("Planos M")
                                dlg.setText("No existe el plano M " + drawing_number)
                                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                dlg.exec()
                                del dlg, new_icon
                        # close communication with the PostgreSQL database server
                            cur.close()
                        # commit the changes
                            conn.commit()

                        elif drawing_number[:2] == 'OF':
                            commands_select_of_drawing = ("""
                            SELECT verif_of_drawing_date
                            FROM verification."of_drawing_verification"
                            WHERE "id" = %s
                            """)
                            commands_insert_of_drawing = ("""
                            UPDATE verification."of_drawing_verification"
                            SET "verif_of_drawing_date" = %s, "verif_of_drawing_state" = %s,"verif_of_drawing_obs" = %s
                            WHERE "id" = %s
                            """)
                            cur.execute(commands_select_of_drawing, (id_value, ))
                            results = cur.fetchall()

                            if len(results) != 0:
                                if results[0][0] is None:
                                    cur.execute(commands_insert_of_drawing, (verif_date, verif_state, verif_notes, id_value, ))
                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"Ya ha datos existentes para el plano {drawing_number}\n"
                                                "¿Deseas sobreescribirlos?\n")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()
                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        cur.execute(commands_insert_of_drawing, (verif_date, verif_state, verif_notes, id_value, ))
                                    del dlg_yes_no, new_icon_yes_no

                            else:
                                dlg = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg.setWindowIcon(new_icon)
                                dlg.setWindowTitle("Planos OF")
                                dlg.setText("No existe el plano OF " + drawing_number)
                                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                dlg.exec()
                                del dlg, new_icon
                        # close communication with the PostgreSQL database server
                            cur.close()
                        # commit the changes
                            conn.commit()

                        else:
                            commands_select_dim_drawing = ("""
                            SELECT verif_dim_drawing_date
                            FROM verification."dim_drawing_verification"
                            WHERE "id" = %s
                            """)
                            commands_insert_dim_drawing = ("""
                            UPDATE verification."dim_drawing_verification"
                            SET "verif_dim_drawing_date" = %s, "verif_dim_drawing_state" = %s,"verif_dim_drawing_obs" = %s
                            WHERE "id" = %s
                            """)
                            cur.execute(commands_select_dim_drawing, (id_value, ))
                            results = cur.fetchall()

                            if len(results) != 0:
                                if results[0][0] is None:
                                    cur.execute(commands_insert_dim_drawing, (verif_date, verif_state, verif_notes, id_value, ))
                                else:
                                    dlg_yes_no = QtWidgets.QMessageBox()
                                    new_icon_yes_no = QtGui.QIcon()
                                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                                    dlg_yes_no.setText(f"Ya ha datos existentes para el plano {drawing_number}\n"
                                                "¿Deseas sobreescribirlos?\n")
                                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                    result = dlg_yes_no.exec()
                                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                        cur.execute(commands_insert_dim_drawing, (verif_date, verif_state, verif_notes, id_value, ))
                                    del dlg_yes_no, new_icon_yes_no

                            else:
                                dlg = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg.setWindowIcon(new_icon)
                                dlg.setWindowTitle("Planos Dimensionales")
                                dlg.setText("No existe el plano Dim. " + drawing_number)
                                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                dlg.exec()
                                del dlg, new_icon
                        # close communication with the PostgreSQL database server
                            cur.close()
                        # commit the changes
                            conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Verification")
                        dlg.setText(str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon

                    finally:
                        if conn is not None:
                            conn.close()

# Function to update data for AL drawings
    def update_al_drawings(self):
        """
        Updates the selected data for a specific order based on user inputs and verification status.
        Data is for AL drawings
        """
        num_order = self.num_order.text()
        verif_date = self.date_test.text()
        verif_state = self.state_test.currentText()
        verif_notes = self.obs_test.toPlainText()

        if num_order == "" or verif_date == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos AL")
            dlg.setText("Rellene todos los campos. Solo el campo de observaciones puede quedar vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', verif_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos AL")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            selected_indexes = self.tableTags.selectedIndexes()

            if len(selected_indexes) == 0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("No has seleccionado ningún TAG")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon
            else:
                for index in selected_indexes:
                    row_index = index.row()
                    id_value = self.tableTags.item(row_index, 0).text()
                    num_order = self.tableTags.item(row_index, 1).text()
                    al_drawing = self.tableTags.item(row_index, 2).text()

                    commands_select_al_drawing = ("""
                                SELECT verif_al_drawing_date
                                FROM verification."al_drawing_verification"
                                WHERE "id" = %s
                                """)
                    commands_insert_al_drawing = ("""
                                UPDATE verification."al_drawing_verification"
                                SET "verif_al_drawing_date" = %s, "verif_al_drawing_state" = %s,"verif_al_drawing_obs" = %s
                                WHERE "id" = %s
                                """)
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(commands_select_al_drawing, (id_value,))
                        results = cur.fetchall()

                        if len(results) != 0:
                            if results[0][0] is None:
                                cur.execute(commands_insert_al_drawing, (verif_date, verif_state, verif_notes, id_value, ))

                            else:
                                dlg_yes_no = QtWidgets.QMessageBox()
                                new_icon_yes_no = QtGui.QIcon()
                                new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                dlg_yes_no.setWindowTitle("ERP EIPSA")
                                dlg_yes_no.setText(f"Ya ha datos existentes para el plano {al_drawing}\n"
                                                    "¿Deseas sobreescribirlos?\n")
                                dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                result = dlg_yes_no.exec()
                                if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                    cur.execute(commands_insert_al_drawing, (verif_date, verif_state, verif_notes, id_value, ))

                                    self.obs_test.setText('')

                                del dlg_yes_no, new_icon_yes_no

                        else:
                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("Planos AL")
                            dlg.setText("No existe el plano AL " + al_drawing)
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                            dlg.exec()
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos AL")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon

                    finally:
                        if conn is not None:
                            conn.close()

# Function to open window for images
    def insert_images(self, numorder):
        """
        Inserts images and/or PDF documents into the database based on the selected order number.

        Args:
            numorder (str): The order number to process.
        """
        if numorder == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación")
            dlg.setText("Introduce un número de pedido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            if numorder[:2] == 'AL':
                selected_indexes = self.tableTags.selectedIndexes()
                if len(selected_indexes) == 0:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("No has seleccionado ningún TAG")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon
                else:
                    self.fname_image = askopenfilename(initialdir="//nas01/DATOS/Comunes/MARIO GIL/VERIFICACION/ALMACEN", filetypes=[("Archivos JPG", "*.jpg")],
                                title="Seleccionar imagen")
                    if self.fname_image:
                        for index in selected_indexes:
                            id_value = self.tableTags.item(index.row(), 0).text()
                            conn = None
                            try:
                            # read the connection parameters
                                params = config()
                            # connect to the PostgreSQL server
                                conn = psycopg2.connect(**params)
                                cur = conn.cursor()
                            # execution of commands
                                commands_image_al = ("""UPDATE verification.al_drawing_verification SET image = %s WHERE id = %s""")
                                cur.execute(commands_image_al, (self.fname_image, id_value))

                            # close communication with the PostgreSQL database server
                                cur.close()
                            # commit the changes
                                conn.commit()

                                self.query_tables()

                            except (Exception, psycopg2.DatabaseError) as error:
                                dlg = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg.setWindowIcon(new_icon)
                                dlg.setWindowTitle("ERP EIPSA")
                                dlg.setText("Ha ocurrido el siguiente error:\n"
                                            + str(error))
                                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                dlg.exec()
                                del dlg, new_icon
                            finally:
                                if conn is not None:
                                    conn.close()

                    self.fname_doc = askopenfilename(initialdir="//nas01/DATOS/Comunes/MARIO GIL/VERIFICACION/ALMACEN", filetypes=[("Archivos PDF", "*.pdf")],
                                title="Seleccionar PDF")
                    if self.fname_doc:
                        for index in selected_indexes:
                            id_value = self.tableTags.item(index.row(), 0).text()
                            conn = None
                            try:
                            # read the connection parameters
                                params = config()
                            # connect to the PostgreSQL server
                                conn = psycopg2.connect(**params)
                                cur = conn.cursor()
                            # execution of commands
                                commands_image_al = ("""UPDATE verification.al_drawing_verification SET document = %s WHERE id = %s""")
                                cur.execute(commands_image_al, (self.fname_doc, id_value))

                            # close communication with the PostgreSQL database server
                                cur.close()
                            # commit the changes
                                conn.commit()

                                self.query_tables()

                            except (Exception, psycopg2.DatabaseError) as error:
                                dlg = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg.setWindowIcon(new_icon)
                                dlg.setWindowTitle("ERP EIPSA")
                                dlg.setText("Ha ocurrido el siguiente error:\n"
                                            + str(error))
                                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                dlg.exec()
                                del dlg, new_icon
                            finally:
                                if conn is not None:
                                    conn.close()

            else:
                selected_indexes = self.tableTags.selectedIndexes()

                while True:
                    pic_type, ok = QtWidgets.QInputDialog.getItem(self, "Insertar Fotos", "Selecciona un tipo:", ['Foto Única', 'MultiFoto', 'Aleatorio'], 0, False)
                    if ok and pic_type:
                        if pic_type == 'Foto Única':
                            self.fname_image = askopenfilename(filetypes=[("Archivos JPG", "*.jpg")],
                                                title="Seleccionar imagen")
                            if self.fname_image:
                                if len(selected_indexes) == 0:
                                    dlg = QtWidgets.QMessageBox()
                                    new_icon = QtGui.QIcon()
                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg.setWindowIcon(new_icon)
                                    dlg.setWindowTitle("ERP EIPSA")
                                    dlg.setText("No has seleccionado ningún TAG")
                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg.exec()
                                    del dlg, new_icon

                                    self.Button_SeePhoto.setVisible(True)
                                    self.Button_InsertPhoto.setVisible(True)

                                else:
                                    conn = None
                                    try:
                                    # read the connection parameters
                                        params = config()
                                    # connect to the PostgreSQL server
                                        conn = psycopg2.connect(**params)
                                        cur = conn.cursor()
                                    # execution of commands
                                        for index in selected_indexes:
                                            id_value = int(self.tableTags.item(index.row(), 0).text())
                                            table_name = self.tableTags.item(index.row(), 21).text()
                                            id_column = self.tableTags.item(index.row(), 20).text()
                                            if index.column() == 22:
                                                commands_image_tag = f"UPDATE {table_name} SET tag_images = '{self.fname_image}' WHERE {id_column} = {id_value}"
                                            elif index.column() == 23:
                                                commands_image_tag = f"UPDATE {table_name} SET tag_images2 = '{self.fname_image}' WHERE {id_column} = {id_value}"
                                            cur.execute(commands_image_tag)

                                    # close communication with the PostgreSQL database server
                                        cur.close()
                                    # commit the changes
                                        conn.commit()

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("Verificación")
                                        dlg.setText("Datos insertados con éxito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg,new_icon

                                        self.querytags()

                                    except (Exception, psycopg2.DatabaseError) as error:
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                    + str(error))
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                        dlg.exec()
                                        del dlg, new_icon
                                    finally:
                                        if conn is not None:
                                            conn.close()
                            break

                        elif pic_type == 'MultiFoto':
                            self.fname_images = askopenfilenames(filetypes=[("Archivos JPG", "*.jpg")],
                                                title="Seleccionar imagen")
                            if self.fname_images:
                                if len(selected_indexes) == 0:
                                    dlg = QtWidgets.QMessageBox()
                                    new_icon = QtGui.QIcon()
                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg.setWindowIcon(new_icon)
                                    dlg.setWindowTitle("ERP EIPSA")
                                    dlg.setText("No has seleccionado ningún TAG")
                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg.exec()
                                    del dlg, new_icon

                                else:
                                    if len(selected_indexes) != len(self.fname_images):
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("La cantidad de tags seleccionados no coincide con la cantidad de fotos seleccionadas")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                        dlg.exec()
                                        del dlg, new_icon

                                    else:
                                        conn = None
                                        try:
                                        # read the connection parameters
                                            params = config()
                                        # connect to the PostgreSQL server
                                            conn = psycopg2.connect(**params)
                                            cur = conn.cursor()
                                        # execution of commands
                                            for i in range(len(selected_indexes)):
                                                id_value = int(self.tableTags.item(selected_indexes[i].row(), 0).text())
                                                table_name = self.tableTags.item(selected_indexes[i].row(), 21).text()
                                                id_column = self.tableTags.item(selected_indexes[i].row(), 20).text()
                                                if selected_indexes[i].column() == 22:
                                                    commands_image_tag = f"UPDATE {table_name} SET tag_images = '{self.fname_images[i]}' WHERE {id_column} = {id_value}"
                                                elif selected_indexes[i].column() == 23:
                                                    commands_image_tag = f"UPDATE {table_name} SET tag_images2 = '{self.fname_images[i]}' WHERE {id_column} = {id_value}"
                                                cur.execute(commands_image_tag)

                                        # close communication with the PostgreSQL database server
                                            cur.close()
                                        # commit the changes
                                            conn.commit()

                                            dlg = QtWidgets.QMessageBox()
                                            new_icon = QtGui.QIcon()
                                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                            dlg.setWindowIcon(new_icon)
                                            dlg.setWindowTitle("Verificación")
                                            dlg.setText("Datos insertados con éxito")
                                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                            dlg.exec()
                                            del dlg,new_icon

                                            self.querytags()

                                        except (Exception, psycopg2.DatabaseError) as error:
                                            dlg = QtWidgets.QMessageBox()
                                            new_icon = QtGui.QIcon()
                                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                            dlg.setWindowIcon(new_icon)
                                            dlg.setWindowTitle("ERP EIPSA")
                                            dlg.setText("Ha ocurrido el siguiente error:\n"
                                                        + str(error))
                                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                            dlg.exec()
                                            del dlg, new_icon
                                        finally:
                                            if conn is not None:
                                                conn.close()
                            break

                        elif pic_type == 'Aleatorio':
                            self.fname_images = askopenfilenames(filetypes=[("Archivos JPG", "*.jpg")],
                                                title="Seleccionar imagen")
                            if self.fname_images:
                                if len(selected_indexes) == 0:
                                    dlg = QtWidgets.QMessageBox()
                                    new_icon = QtGui.QIcon()
                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg.setWindowIcon(new_icon)
                                    dlg.setWindowTitle("ERP EIPSA")
                                    dlg.setText("No has seleccionado ningún TAG")
                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                    dlg.exec()
                                    del dlg, new_icon

                                else:
                                    conn = None
                                    try:
                                    # read the connection parameters
                                        params = config()
                                    # connect to the PostgreSQL server
                                        conn = psycopg2.connect(**params)
                                        cur = conn.cursor()
                                    # execution of commands
                                        for i in range(len(selected_indexes)):
                                            id_value = int(self.tableTags.item(selected_indexes[i].row(), 0).text())
                                            table_name = self.tableTags.item(selected_indexes[i].row(), 21).text()
                                            id_column = self.tableTags.item(selected_indexes[i].row(), 20).text()
                                            if selected_indexes[i].column() == 22:
                                                commands_image_tag = f"UPDATE {table_name} SET tag_images = '{random.choice(self.fname_images)}' WHERE {id_column} = {id_value}"
                                            elif selected_indexes[i].column() == 23:
                                                commands_image_tag = f"UPDATE {table_name} SET tag_images2 = '{random.choice(self.fname_images)}' WHERE {id_column} = {id_value}"
                                            cur.execute(commands_image_tag)

                                    # close communication with the PostgreSQL database server
                                        cur.close()
                                    # commit the changes
                                        conn.commit()

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("Verificación")
                                        dlg.setText("Datos insertados con éxito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg,new_icon

                                        self.querytags()

                                    except (Exception, psycopg2.DatabaseError) as error:
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                    + str(error))
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                        dlg.exec()
                                        del dlg, new_icon
                                    finally:
                                        if conn is not None:
                                            conn.close()
                            break
                        dlg_error = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg_error.setWindowIcon(new_icon)
                        dlg_error.setWindowTitle("Insertar Fotos")
                        dlg_error.setText("Selecciona un tipo")
                        dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg_error.exec()
                        del dlg_error,new_icon
                    else:
                        break

# Function when clicking on table tag header
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableTags.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableTags.horizontalHeader().height()
        popup_pos = self.tableTags.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableTags.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function when clicking on table others header
    def on_header_section_clicked_others(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableOthers.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableOthers.horizontalHeader().height()
        popup_pos = self.tableOthers.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableOthers.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to set fixed values
    def load_values(self):
        """
        Loads the current date and clears the observation field. Retrieves the available states and manometers from the database
        and populates the corresponding dropdown lists in the UI.
        """
        actual_date=date.today()
        actual_date=actual_date.strftime("%d/%m/%Y")
        self.date_test.setText(actual_date)
        self.obs_test.setText("")

        query_states = ("""
                            SELECT "state_verif"
                            FROM verification.states_verification
                            ORDER BY "id"
                            """)
        query_manometers = ("""
                            SELECT "manometer"
                            FROM verification.manometers
                            ORDER BY "id"
                            """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_states)
            results=cur.fetchall()
            list_states = [x[0] for x in results]

            cur.execute(query_manometers)
            results_manometers=cur.fetchall()
            list_manometers = [x[0] for x in results_manometers]
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.state_test.setItemDelegate(ColorDelegate())
        self.state_test.addItems(list_states)

        self.manometer1.addItems(list_manometers)
        self.manometer2.addItems([''] + list_manometers)

# Function to events for keys
    def keyPressEvent(self, event):
        """
        Handles custom key events for cell operations in the table.

        Args:
            event (QtGui.QKeyEvent): The key event to handle.
        """
        if event.key() == QtCore.Qt.Key.Key_F5:
            self.load_values()

# Function to change combobox color when change value
    def change_text_color(self, text):
        """
        Changes the text color of a widget based on the provided state. The color is retrieved from the database and applied
        to the widget. If the state is not found, a default white color is used.

        Args:
            text (str): The state whose corresponding color will be applied to the widget.
        """
        colors_dict = {}
        conn = None
        try:
            # read the connection parameters
            params = config()
            # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
            # execution of commands
            commands_colors = "SELECT state_verif, r_channel, g_channel, b_channel FROM verification.states_verification"
            cur.execute(commands_colors)
            results = cur.fetchall()

            for result in results:
                state, red, green, blue = result
                colors_dict[state] = [red, green, blue]

            # close communication with the PostgreSQL database server
            cur.close()
            # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            # Handle the error appropriately
            pass
        finally:
            if conn is not None:
                conn.close()

        if text in colors_dict:
            text_color = colors_dict[text]
        else:
            text_color = [255, 255, 255]

        self.state_test.setStyleSheet(f"color: rgb({text_color[0]}, {text_color[1]}, {text_color[2]})")

# Function to count cells of table tags
    def countSelectedCells_tags(self):
        """
        Counts the number of selected cells and sums their values. Updates the UI labels with the count and sum.
        """
        if len(self.tableTags.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
            self.label_CountItems_tags.setText("")
            self.label_CountValue_tags.setText("")

            count_value = len([ix for ix in self.tableTags.selectedIndexes() if ix.data() != ""])

            if count_value > 0:
                self.label_CountItems_tags.setText("Recuento:")
                self.label_CountValue_tags.setText(str(count_value))
        else:
            self.label_CountItems_tags.setText("")
            self.label_CountValue_tags.setText("")

# Function to count cells of table others
    def countSelectedCells_others(self):
        """
        Counts the number of selected cells and sums their values. Updates the UI labels with the count and sum.
        """
        if len(self.tableOthers.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
            self.label_CountItems_others.setText("")

            count_value = len([ix for ix in self.tableOthers.selectedIndexes() if ix.data() != ""])

            if count_value > 0:
                self.label_CountItems_others.setText("Recuento: " + str(count_value))
        else:
            self.label_CountItems_others.setText("")

# Function to load file
    def item_double_clicked(self, item):
        """
        Opens detailed information when column is double-clicked.
        """
        sender = self.sender()

        if sender == self.tableTags:
            header_item = self.tableTags.horizontalHeaderItem(item.column())
            header_text = header_item.text()

            if header_text == 'TAG':
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("TAG")
                dlg.setText(item.text())
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            elif header_text in ['Fotos', 'Fotos2', 'Foto', 'PDF Plano']:
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()

                    if header_text == 'Fotos':
                        table_name = self.tableTags.item(item.row(), 21).text()
                        id_column = self.tableTags.item(item.row(), 20).text()
                        query_path =f"SELECT tag_images FROM {table_name} WHERE {id_column} = {item_id}"
                    elif header_text == 'Fotos2':
                        table_name = self.tableTags.item(item.row(), 21).text()
                        id_column = self.tableTags.item(item.row(), 20).text()
                        query_path =f"SELECT tag_images2 FROM {table_name} WHERE {id_column} = {item_id}"
                    elif header_text == 'Foto':
                        query_path =f"""SELECT image FROM verification."al_drawing_verification" WHERE id = {item_id}"""
                    else:
                        query_path =f"""SELECT document FROM verification."al_drawing_verification" WHERE id = {item_id}"""

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_path)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        file_path = os.path.normpath(results[0][0])
                        os.startfile(file_path)

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Tipo Equipo':
                cell_content = item.text()
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Verificación")
                dlg.setText(cell_content)
                dlg.exec()
                del dlg, new_icon

            elif header_text == 'Fecha Dim.':
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()
                    table_name = self.tableTags.item(item.row(), 21).text()
                    id_column = self.tableTags.item(item.row(), 20).text()
                    query =f"SELECT TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), final_verif_dim_obs FROM {table_name} WHERE {id_column} = {item_id}"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Plano Dimensional")
                        dlg.setText("Fecha: " + results[0][0] + "\n"
                                    "Observaciones: " + results[0][1])
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg, new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Fecha OF Equipo':
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()
                    table_name = self.tableTags.item(item.row(), 21).text()
                    id_column = self.tableTags.item(item.row(), 20).text()
                    query =f"SELECT TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), final_verif_of_eq_obs FROM {table_name} WHERE {id_column} = {item_id}"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Plano OF")
                        dlg.setText("Fecha: " + results[0][0] + "\n"
                                    "Observaciones: " + results[0][1])
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg, new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Fecha OF Sensor':
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()
                    table_name = self.tableTags.item(item.row(), 21).text()
                    id_column = self.tableTags.item(item.row(), 20).text()
                    query =f"SELECT TO_CHAR(final_verif_of_sensor_date, 'DD/MM/YYYY'), final_verif_of_sensor_obs FROM {table_name} WHERE {id_column} = {item_id}"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Plano OF Sensor")
                        dlg.setText("Fecha: " + results[0][0] + "\n"
                                    "Observaciones: " + results[0][1])
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg, new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Fecha PH1':
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()
                    table_name = self.tableTags.item(item.row(), 21).text()
                    id_column = self.tableTags.item(item.row(), 20).text()
                    query =f"SELECT TO_CHAR(ph1_date, 'DD/MM/YYYY'), ph1_manometer, ph1_pressure, ph1_obs FROM {table_name} WHERE {id_column} = {item_id}"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Prueba Hidrostática 1")
                        dlg.setText("Fecha: " + results[0][0] + "\n"
                                    "Manómetro: " + results[0][1] + "\n"
                                    "Presión: " + results[0][2] + "\n"
                                    "Observaciones: " + results[0][3])
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg, new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Fecha PH2':
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()
                    table_name = self.tableTags.item(item.row(), 21).text()
                    id_column = self.tableTags.item(item.row(), 20).text()
                    query =f"SELECT TO_CHAR(ph2_date, 'DD/MM/YYYY'), ph2_manometer, ph2_pressure, ph2_obs FROM {table_name} WHERE {id_column} = {item_id}"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Prueba Hidrostática 2")
                        dlg.setText("Fecha: " + results[0][0] + "\n"
                                    "Manómetro: " + results[0][1] + "\n"
                                    "Presión: " + results[0][2] + "\n"
                                    "Observaciones: " + results[0][3])
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg, new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Fecha LP':
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()
                    table_name = self.tableTags.item(item.row(), 21).text()
                    id_column = self.tableTags.item(item.row(), 20).text()
                    query =f"SELECT TO_CHAR(lp_date, 'DD/MM/YYYY'), lp_hn_liq1, lp_hn_liq2, lp_hn_liq3, lp_obs FROM {table_name} WHERE {id_column} = {item_id}"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Líquidos Penetrantes")
                        dlg.setText("Fecha: " + results[0][0] + "\n"
                                    "9PR5: " + results[0][1] + "\n"
                                    "9D1B: " + results[0][2] + "\n"
                                    "996PB: " + results[0][3] + "\n"
                                    "Observaciones: " + results[0][4])
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg, new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Fecha Almacén':
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()
                    query =f"SELECT TO_CHAR(warehouse_date, 'DD/MM/YYYY'), warehouse_state, warehouse_obs FROM verification.al_drawing_verification WHERE id = {item_id}"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos AL")
                        dlg.setText("Fecha: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                    "Estado: " + (results[0][1] if results[0][1] is not None else "") + "\n"
                                    "Observaciones: " + (results[0][2] if results[0][2] is not None else ""))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg, new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Fecha Verif.':
                if item.text() != '':
                    item_id = self.tableTags.item(item.row(), 0).text()
                    query =f"SELECT TO_CHAR(verif_al_drawing_date, 'DD/MM/YYYY'), verif_al_drawing_state, verif_al_drawing_obs FROM verification.al_drawing_verification WHERE id = {item_id}"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos AL")
                        dlg.setText("Fecha: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                    "Estado: " + (results[0][1] if results[0][1] is not None else "") + "\n"
                                    "Observaciones: " + (results[0][2] if results[0][2] is not None else ""))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg, new_icon

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text == 'Plano Dim.':
                if item.text() != '':
                    dim_drawing_number = item.text()

                    commands_select_dim_drawing = ("""
                                SELECT notes, drawing_description
                                FROM verification."workshop_dim_drawings"
                                WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                                AND
                                "drawing_number" = %s
                                """)

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(commands_select_dim_drawing, (self.num_order_value, dim_drawing_number,))
                        results = cur.fetchall()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos Dim.")
                        dlg.setText("Pedido: " + self.num_order_value + "\n"
                                    "Plano: " + dim_drawing_number + "\n"
                                    "Notas: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                    "Descripción: " + (results[0][1] if results[0][1] is not None else ""))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos Dim.")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon

                    finally:
                        if conn is not None:
                            conn.close()

            elif header_text in ['OF Equipo', 'OF Sensor']:
                if item.text() != '':
                    of_drawing_number = item.text()

                    commands_select_of_drawing = ("""
                                SELECT notes, drawing_description
                                FROM verification."workshop_of_drawings"
                                WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                                AND
                                "drawing_number" = %s
                                """)

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(commands_select_of_drawing, (self.num_order_value, of_drawing_number,))
                        results = cur.fetchall()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos OF")
                        dlg.setText("Pedido: " + self.num_order_value + "\n"
                                    "Plano: " + of_drawing_number + "\n"
                                    "Notas: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                    "Descripción: " + (results[0][1] if results[0][1] is not None else ""))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos OF")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon

                    finally:
                        if conn is not None:
                            conn.close()

        else:
            header_item = self.tableOthers.horizontalHeaderItem(item.column())
            header_text = header_item.text()

            if header_text == 'Nº Plano':
                if item.column() == (self.tableOthers.columnCount() - 2) and self.num_order.text().upper()[:3] == 'AL-':
                    item_id = self.tableOthers.item(item.row(), 1).text()

                    query_path = "SELECT image FROM verification.al_drawing_verification WHERE id = %s"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_path, (item_id,))
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        file_path = os.path.normpath(results[0][0])
                        os.startfile(file_path)

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

                elif item.column() == (self.tableOthers.columnCount() - 1) and self.num_order.text().upper()[:3] == 'AL-':
                    item_id = self.tableOthers.item(item.row(), 1).text()

                    query_path = "SELECT document FROM verification.al_drawing_verification WHERE id = %s"

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_path, (item_id,))
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        file_path = os.path.normpath(results[0][0])
                        os.startfile(file_path)

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

                elif item.column() == 2 and item.text() == 'PPI':
                    self.num_order_value = self.num_order.text().upper()
                    order_year = str(datetime.now().year)[:2] + self.num_order_value [self.num_order_value .rfind("/") - 2:self.num_order_value .rfind("/")]
                    
                    if self.num_order_value[:2] == 'PA':
                        num_order = self.num_order_value
                        path = "//srvad01/base de datos de pedidos/Año " + order_year + "/" + order_year + " Pedidos Almacen"
                        for folder in os.listdir(path):
                            if num_order.replace("/", "-") in folder:
                                folder_path = "//srvad01/base de datos de pedidos/Año " + order_year + "/" + order_year + " Pedidos Almacen/" + folder + "/"
                                for root, dirs, files in os.walk(folder_path):
                                    for filename in files:
                                        if fnmatch.fnmatch(filename, '*-PPI*'):
                                            file_path = os.path.join(root, filename)
                                            file_path = os.path.normpath(file_path)
                                            os.startfile(file_path)
                                            break
                                    else:
                                        continue
                                    break

                    elif self.num_order_value[:2] == 'P-':
                        num_order = self.num_order_value[:8]
                        path = "//srvad01/base de datos de pedidos/Año " + order_year + "/" + order_year + " Pedidos"
                        for folder in os.listdir(path):
                            if num_order.replace("/", "-") in folder:
                                folder_path = "//srvad01/base de datos de pedidos/Año " + order_year + "/" + order_year + " Pedidos/" + folder + "/"
                                for root, dirs, files in os.walk(folder_path):
                                    for filename in files:
                                        if fnmatch.fnmatch(filename, '*-PPI.pdf'):
                                            file_path = os.path.join(root, filename)
                                            file_path = os.path.normpath(file_path)
                                            os.startfile(file_path)
                                            break
                                    else:
                                        continue
                                    break

                elif item.column() == 2 and item.text()[:2] == 'M-':
                    num_order = self.tableOthers.item(item.row(), 1).text()
                    m_drawing = self.tableOthers.item(item.row(), 2).text()
                    commands_select_m_drawing = ("""
                                SELECT notes, drawing_description
                                FROM verification."m_drawing_verification"
                                WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                                AND
                                "drawing_number" = %s
                                """)

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(commands_select_m_drawing, (num_order, m_drawing,))
                        results = cur.fetchall()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos M")
                        dlg.setText("Pedido: " + num_order + "\n"
                                    "Plano: " + m_drawing + "\n"
                                    "Notas: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                    "Descripción: " + (results[0][1] if results[0][1] is not None else ""))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos M")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon

                    finally:
                        if conn is not None:
                            conn.close()

                elif item.column() == 2 and item.text()[:3] == 'OF-':
                    num_order = self.tableOthers.item(item.row(), 1).text()
                    of_drawing = self.tableOthers.item(item.row(), 2).text()
                    commands_select_of_drawing = ("""
                                SELECT notes, drawing_description
                                FROM verification."workshop_of_drawings"
                                WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                                AND
                                "drawing_number" = %s
                                """)

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(commands_select_of_drawing, (num_order, of_drawing,))
                        results = cur.fetchall()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos OF")
                        dlg.setText("Pedido: " + num_order + "\n"
                                    "Plano: " + of_drawing + "\n"
                                    "Notas: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                    "Descripción: " + (results[0][1] if results[0][1] is not None else ""))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos OF")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon

                    finally:
                        if conn is not None:
                            conn.close()

                elif item.column() == 2 and item.text() not in ['PPI', 'EXP']:
                    num_order = self.tableOthers.item(item.row(), 1).text()
                    dim_drawing = self.tableOthers.item(item.row(), 2).text()
                    commands_select_dim_drawing = ("""
                                SELECT notes, drawing_description
                                FROM verification."workshop_dim_drawings"
                                WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                                AND
                                "drawing_number" = %s
                                """)

                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(commands_select_dim_drawing, (num_order, dim_drawing,))
                        results = cur.fetchall()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos Dim.")
                        dlg.setText("Pedido: " + num_order + "\n"
                                    "Plano: " + dim_drawing + "\n"
                                    "Notas: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                    "Descripción: " + (results[0][1] if results[0][1] is not None else ""))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos Dim.")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon

                    finally:
                        if conn is not None:
                            conn.close()

# Function to open temporary image
    def open_temp_image(self):
        """
        Open the image saved on temporary variable
        """
        if self.fname_image is not None:
            file_path = os.path.normpath(self.fname_image)
            os.startfile(file_path)

# Function to insert temporary image
    def insert_temp_image(self):
        selected_indexes = self.tableTags.selectedIndexes()
        if self.fname_image is not None and len(selected_indexes) > 0:
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                for index in selected_indexes:
                    id_value = int(self.tableTags.item(index.row(), 0).text())
                    table_name = self.tableTags.item(index.row(), 21).text()
                    id_column = self.tableTags.item(index.row(), 20).text()
                    commands_image_tag = f"UPDATE {table_name} SET tag_images = '{self.fname_image}' WHERE {id_column} = {id_value}"
                    cur.execute(commands_image_tag)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Verificación")
                dlg.setText("Datos insertados con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg,new_icon

                self.querytags()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.fname_image = None
            self.Button_SeePhoto.setVisible(False)
            self.Button_InsertPhoto.setVisible(False)

        else:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación")
            dlg.setText("Elige foto o selecciona tags")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

# Function to open window to check order verification
    def verif_order(self):
        if self.num_order.text().upper() is not None and self.num_order.text().upper() != '':
            self.veriforder_window=QtWidgets.QMainWindow()
            self.ui=Ui_Verif_Order_Window(self.username, self.num_order.text().upper())
            self.ui.setupUi(self.veriforder_window)
            self.veriforder_window.showMaximized()

# Function to delete verification
    def deverify(self):
        """
        Updates data to deverify.
        """
        self.num_order_value = self.num_order.text().upper()
        if self.num_order_value != '':
            if self.num_order_value[:3] != 'AL-':
                self.deverify_tags()
            else:
                self.deverify_al_drawings()
        self.deverify_others()
        self.query_tables()

# Function to deverify tags
    def deverify_tags(self):
        """
        Updates the selected data for a specific order based on user inputs and verification status.
        Data can be for OF Drawings, Dimensional Drawings, Hydrostatic Test or ND Test
        """
        num_order = self.num_order.text().upper()
        test_date = 'NULL'
        state = 'NULL'
        notes = 'NULL'

        manometer1 = 'NULL'
        pressure1 = 'NULL'
        manometer2 = 'NULL'
        pressure2 = 'NULL'

        if num_order not in ['ALMACÉN', 'ALMACEN', 'INTERNO', 'PROTOTIPOS']:
            selected_indexes = self.tableTags.selectedIndexes()

            if len(selected_indexes) == 0 and self.tableTags.rowCount() != 0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("No has seleccionado ningún TAG")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon
            else:
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    for index in selected_indexes:
                        column_index = index.column()
                        row_index = index.row()
                        id_value = int(self.tableTags.item(row_index, 0).text())
                        tag = self.tableTags.item(row_index, 1).text()
                        table_name = self.tableTags.item(row_index, 21).text()
                        id_column = self.tableTags.item(row_index, 20).text()

                        if column_index == 4 and self.tableTags.item(row_index, column_index).text() != '':
                            item_date_dim = self.tableTags.item(row_index, 7)

                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"El tag {tag} ya tiene datos dimensionales\n"
                                                "¿Estás seguro de que deseas desverificar?")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()

                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                commands_verification = f"UPDATE {table_name} SET final_verif_dim_date = {test_date}, final_verif_dim_state = {state}, final_verif_dim_obs = {notes}, fab_state = {notes} WHERE {id_column} = {id_value}"
                                cur.execute(commands_verification)

                            del dlg_yes_no, new_icon_yes_no

                        elif column_index == 5 and self.tableTags.item(row_index, column_index).text() != '':
                            item_date_eq = self.tableTags.item(row_index, 8)

                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"El tag {tag} ya tiene datos de equipo\n"
                                                "¿Estás seguro de que deseas desverificar?")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()

                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                commands_verification = f"UPDATE {table_name} SET final_verif_of_eq_date = {test_date}, final_verif_of_eq_state = {state}, final_verif_of_eq_obs = {notes} WHERE {id_column} = {id_value}"
                                cur.execute(commands_verification)

                            del dlg_yes_no, new_icon_yes_no

                        elif column_index == 6 and table_name == "tags_data.tags_temp" and self.tableTags.item(row_index, column_index).text() != '':
                            item_date_sensor = self.tableTags.item(row_index, 9)

                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"El tag {tag} ya tiene datos de sensor\n"
                                                "¿Estás seguro de que deseas desverificar?")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()

                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                commands_verification = f"UPDATE {table_name} SET final_verif_of_sensor_date = {test_date}, final_verif_of_sensor_state = {state}, final_verif_of_sensor_obs = {notes} WHERE {id_column} = {id_value}"
                                cur.execute(commands_verification)

                            del dlg_yes_no, new_icon_yes_no

                        if column_index == 10 and self.tableTags.item(row_index, column_index).text() != '':
                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"El tag {tag} ya tiene datos LP\n"
                                                "¿Estás seguro de que deseas desverificar?")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()

                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                commands_hydrotest = f"UPDATE {table_name} SET ph1_date = {test_date}, ph1_manometer = {manometer1}, ph1_pressure = {pressure1}, ph1_state = {state}, ph1_obs = {notes} WHERE {id_column} = {id_value}"
                                cur.execute(commands_hydrotest)

                            del dlg_yes_no, new_icon_yes_no

                        if column_index == 11 and self.tableTags.item(row_index, column_index).text() != '':
                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"El tag {tag} ya tiene datos LP\n"
                                                "¿Estás seguro de que deseas desverificar?")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()

                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                commands_hydrotest = f"UPDATE {table_name} SET ph2_date = {test_date}, ph2_manometer = {manometer2}, ph2_pressure = {pressure2}, ph2_state = {state}, ph2_obs = {notes} WHERE {id_column} = {id_value}"
                                cur.execute(commands_hydrotest)

                            del dlg_yes_no, new_icon_yes_no

                        if column_index == 12 and self.tableTags.item(row_index, column_index).text() != '':
                            hn_liq1 = None
                            hn_liq2 = None
                            hn_liq3 = None

                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"El tag {tag} ya tiene datos LP\n"
                                                "¿Estás seguro de que deseas desverificar?")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()

                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                commands_liquidtest = f"UPDATE {table_name} SET lp_date = {test_date}, lp_hn_liq1 = {hn_liq1}, lp_hn_liq2 = {hn_liq2}, lp_hn_liq3 = {hn_liq3}, lp_state = {state}, lp_obs = {notes} WHERE {id_column} = {id_value}"
                                cur.execute(commands_liquidtest)

                            del dlg_yes_no, new_icon_yes_no

                        if column_index == 22 and self.tableTags.item(row_index, column_index).text() != '':
                            images = 'NULL'

                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"El tag {tag} ya tiene fotos\n"
                                                "¿Estás seguro de que deseas desverificar?")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()

                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                commands_images = f"UPDATE {table_name} SET tag_images = {images} WHERE {id_column} = {id_value}"
                                cur.execute(commands_images)

                            del dlg_yes_no, new_icon_yes_no

                        if column_index == 23 and self.tableTags.item(row_index, column_index).text() != '':
                            images = 'NULL'

                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"El tag {tag} ya tiene fotos\n"
                                                "¿Estás seguro de que deseas desverificar?")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()

                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                commands_images = f"UPDATE {table_name} SET tag_images2 = {images} WHERE {id_column} = {id_value}"
                                cur.execute(commands_images)

                            del dlg_yes_no, new_icon_yes_no

                    if self.label_manometer1.checkState() == QtCore.Qt.CheckState.Checked:
                        self.label_manometer1.setCheckState(QtCore.Qt.CheckState.Unchecked)

                    if self.label_manometer2.checkState() == QtCore.Qt.CheckState.Checked:
                        self.label_manometer2.setCheckState(QtCore.Qt.CheckState.Unchecked)

                    if self.label_lptest.checkState() == QtCore.Qt.CheckState.Checked:
                        self.label_lptest.setCheckState(QtCore.Qt.CheckState.Unchecked)
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Verificación")
                    dlg.setText("Datos insertados con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg,new_icon

                    self.querytags()

                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

# Function to deverify AL drawings
    def deverify_al_drawings(self):
        """
        Updates the selected data for a specific order based on user inputs and verification status.
        Data is for AL drawings
        """
        selected_indexes = self.tableTags.selectedIndexes()

        if len(selected_indexes) == 0:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("No has seleccionado ningún TAG")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon
        else:
            for index in selected_indexes:
                row_index = index.row()
                id_value = self.tableTags.item(row_index, 0).text()
                num_order = self.tableTags.item(row_index, 1).text()
                al_drawing = self.tableTags.item(row_index, 2).text()

                commands_insert_al_drawing = ("""
                            UPDATE verification."al_drawing_verification"
                            SET "verif_al_drawing_date" = %s, "verif_al_drawing_state" = %s,"verif_al_drawing_obs" = %s
                            WHERE "id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands

                    dlg_yes_no = QtWidgets.QMessageBox()
                    new_icon_yes_no = QtGui.QIcon()
                    new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg_yes_no.setWindowIcon(new_icon_yes_no)
                    dlg_yes_no.setWindowTitle("ERP EIPSA")
                    dlg_yes_no.setText(f"Ya ha datos existentes para el plano {al_drawing}\n"
                                        "¿Deseas desverificar?\n")
                    dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                    result = dlg_yes_no.exec()
                    if result == QtWidgets.QMessageBox.StandardButton.Yes:
                        cur.execute(commands_insert_al_drawing, (None, None, None, id_value, ))

                        self.obs_test.setText('')

                    del dlg_yes_no, new_icon_yes_no

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Planos AL")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()

# Function to deverify PPI, EXP, M drawings, OF drawings and Dimensional Drawings
    def deverify_others(self):
        """
        Updates the selected data for a specific order based on user inputs and verification status.
        Data can be for PPI, EXP, M Drawings, OF Drawings or Dimensional Drawings
        """

        selected_indexes = self.tableOthers.selectedIndexes()

        if len(selected_indexes) == 0 and self.tableOthers.rowCount() != 0:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("No has seleccionado ningún elemento de Otros")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon
        else:
            for index in selected_indexes:
                conn = None
                try:
            # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                    row_index = index.row()
                    id_value = int(self.tableOthers.item(row_index, 0).text())
                    drawing_number = self.tableOthers.item(row_index, 2).text()

                    if drawing_number == 'PPI':
                        commands_insert_ppi = ("""
                        UPDATE verification."ppi_verification"
                        SET "verif_ppi_date" = %s, "verif_ppi_state" = %s,"verif_ppi_obs" = %s
                        WHERE "id" = %s
                        """)

                        dlg_yes_no = QtWidgets.QMessageBox()
                        new_icon_yes_no = QtGui.QIcon()
                        new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg_yes_no.setWindowIcon(new_icon_yes_no)
                        dlg_yes_no.setWindowTitle("ERP EIPSA")
                        dlg_yes_no.setText("Ya ha datos existentes en el PPI\n"
                                            "¿Deseas desverificar?\n")
                        dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                        result = dlg_yes_no.exec()
                        if result == QtWidgets.QMessageBox.StandardButton.Yes:
                            cur.execute(commands_insert_ppi, (None, None, None, id_value, ))
                        del dlg_yes_no, new_icon_yes_no

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    elif drawing_number == 'EXP':
                        commands_insert_exp = ("""
                        UPDATE verification."exp_verification"
                        SET "verif_exp_date" = %s, "verif_exp_state" = %s,"verif_exp_obs" = %s
                        WHERE "id" = %s
                        """)

                        dlg_yes_no = QtWidgets.QMessageBox()
                        new_icon_yes_no = QtGui.QIcon()
                        new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg_yes_no.setWindowIcon(new_icon_yes_no)
                        dlg_yes_no.setWindowTitle("ERP EIPSA")
                        dlg_yes_no.setText("Ya ha datos existentes en el EXP\n"
                                            "¿Deseas desverificar?\n")
                        dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                        result = dlg_yes_no.exec()
                        if result == QtWidgets.QMessageBox.StandardButton.Yes:
                            cur.execute(commands_insert_exp, (None, None, None, id_value, ))
                        del dlg_yes_no, new_icon_yes_no

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    elif drawing_number[:2] == 'M-':
                        commands_insert_m_drawing = ("""
                        UPDATE verification."m_drawing_verification"
                        SET "verif_m_drawing_date" = %s, "verif_m_drawing_state" = %s,"verif_m_drawing_obs" = %s
                        WHERE "id" = %s
                        """)

                        dlg_yes_no = QtWidgets.QMessageBox()
                        new_icon_yes_no = QtGui.QIcon()
                        new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg_yes_no.setWindowIcon(new_icon_yes_no)
                        dlg_yes_no.setWindowTitle("ERP EIPSA")
                        dlg_yes_no.setText(f"Ya ha datos existentes para el plano {drawing_number}\n"
                                    "¿Deseas desverificar?\n")
                        dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                        result = dlg_yes_no.exec()
                        if result == QtWidgets.QMessageBox.StandardButton.Yes:
                            cur.execute(commands_insert_m_drawing, (None, None, None, id_value, ))
                        del dlg_yes_no, new_icon_yes_no

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    elif drawing_number[:2] == 'OF':
                        commands_insert_of_drawing = ("""
                        UPDATE verification."of_drawing_verification"
                        SET "verif_of_drawing_date" = %s, "verif_of_drawing_state" = %s,"verif_of_drawing_obs" = %s
                        WHERE "id" = %s
                        """)

                        dlg_yes_no = QtWidgets.QMessageBox()
                        new_icon_yes_no = QtGui.QIcon()
                        new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg_yes_no.setWindowIcon(new_icon_yes_no)
                        dlg_yes_no.setWindowTitle("ERP EIPSA")
                        dlg_yes_no.setText(f"Ya ha datos existentes para el plano {drawing_number}\n"
                                    "¿Deseas desverificar?\n")
                        dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                        result = dlg_yes_no.exec()
                        if result == QtWidgets.QMessageBox.StandardButton.Yes:
                            cur.execute(commands_insert_of_drawing, (None, None, None, id_value, ))
                        del dlg_yes_no, new_icon_yes_no

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                    else:
                        commands_insert_dim_drawing = ("""
                        UPDATE verification."dim_drawing_verification"
                        SET "verif_dim_drawing_date" = %s, "verif_dim_drawing_state" = %s,"verif_dim_drawing_obs" = %s
                        WHERE "id" = %s
                        """)

                        dlg_yes_no = QtWidgets.QMessageBox()
                        new_icon_yes_no = QtGui.QIcon()
                        new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg_yes_no.setWindowIcon(new_icon_yes_no)
                        dlg_yes_no.setWindowTitle("ERP EIPSA")
                        dlg_yes_no.setText(f"Ya ha datos existentes para el plano {drawing_number}\n"
                                    "¿Deseas desverificar?\n")
                        dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                        result = dlg_yes_no.exec()
                        if result == QtWidgets.QMessageBox.StandardButton.Yes:
                            cur.execute(commands_insert_dim_drawing, (None, None, None, id_value, ))
                        del dlg_yes_no, new_icon_yes_no

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Verification")
                    dlg.setText(str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    VerificationInsert_Window = Ui_VerificationInsert_Window('m.gil')
    VerificationInsert_Window.showMaximized()
    sys.exit(app.exec())