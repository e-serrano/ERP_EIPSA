# Form implementation generated from reading ui file 'VerificationInsert_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import os
import re
from datetime import *
import locale
import fnmatch
from Verif_Pics_Warehouse_Window import Ui_Verif_Pics_Warehouse_Window
from Verif_Pics_InsertTag_Window import Ui_Verif_Pics_InsertTag_Window

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class ColorDelegate(QtWidgets.QStyledItemDelegate):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.colors_dict = self.get_colors_from_database()

    def get_colors_from_database(self):
        colors_dict = {}

        conn = None
        try:
            # read the connection parameters
            params = config()
            # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
            # execution of commands
            commands_colors = "SELECT id, r_channel, g_channel, b_channel FROM verification.states_verification"
            cur.execute(commands_colors)
            results = cur.fetchall()

            for result in results:
                id_color, red, green, blue = result
                colors_dict[id_color] = QtGui.QColor(red, green, blue)

            # close communication with the PostgreSQL database server
            cur.close()
            # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            # Handle the error appropriately
            pass
        finally:
            if conn is not None:
                conn.close()

        return colors_dict

    def initStyleOption(self, option, index):
        super().initStyleOption(option, index)
        color = self.colors_dict.get(index.row()+1, QtGui.QColor("white"))
        option.palette.setColor(QtGui.QPalette.ColorGroup.All, QtGui.QPalette.ColorRole.Text, color)

class CustomTableWidgetTags(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                if isinstance(self.cellWidget(row, col), QtWidgets.QCheckBox):
                    item_value = self.cellWidget(row, col).text()
                else:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                if text_filter is None:
                    if filters and item_value not in filters:
                        show_row = False
                        break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())


    def filter_by_text(self, column_index):
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
                else:
                    cell_widget = self.cellWidget(row, column_index)
                    if isinstance(cell_widget, QtWidgets.QCheckBox):
                        unique_values.add(cell_widget.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        if self.horizontalHeaderItem(column_index).text() in ['Fecha Dim.', 'Fecha OF Vaina', 'Fecha OF Sensor', 'Fecha OF']:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

    def custom_sort(self, column, order):
    # Obtén la cantidad de filas en la tabla
        row_count = self.rowCount()

        # Crea una lista de índices ordenados según las fechas
        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        # Si el orden es descendente, invierte la lista
        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guarda el estado actual de las filas ocultas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        # Actualiza las filas en la tabla en el orden ordenado
        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class CustomTableWidgetOthers(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())


    def filter_by_text(self, column_index):
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        if self.horizontalHeaderItem(column_index).text() in ['Fecha']:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)


    def custom_sort(self, column, order):
    # Obtén la cantidad de filas en la tabla
        row_count = self.rowCount()

        # Crea una lista de índices ordenados según las fechas
        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        # Si el orden es descendente, invierte la lista
        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guarda el estado actual de las filas ocultas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        # Actualiza las filas en la tabla en el orden ordenado
        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class Ui_VerificationInsert_Window(QtWidgets.QMainWindow):
    def __init__(self, username):
        super().__init__()
        self.username = username
        self.setupUi(self)

    def setupUi(self, VerificationInsert_Window):
        screen_width = QtWidgets.QApplication.primaryScreen().geometry().width()
        VerificationInsert_Window.setObjectName("VerificationInsert_Window")
        # VerificationInsert_Window.resize(400, 561)
        # VerificationInsert_Window.setMinimumSize(QtCore.QSize(1000, 675))
        # VerificationInsert_Window.setMaximumSize(QtCore.QSize(800, 675))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        VerificationInsert_Window.setWindowIcon(icon)
        if self.username == 'm.gil':
            VerificationInsert_Window.setStyleSheet("QWidget {\n"
    "background-color: #121212; color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}\n"
    "\n"
    "QComboBox {\n"
    "border: 1px solid white;\n"
    "border-radius: 3px;\n"
    "}\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        else:
            VerificationInsert_Window.setStyleSheet("QWidget {\n"
    "background-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid black;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 15px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .8em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}")
        self.centralwidget = QtWidgets.QWidget(parent=VerificationInsert_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 0, 0, 1, 2)
        self.label_order = QtWidgets.QLabel(parent=self.frame)
        self.label_order.setMinimumSize(QtCore.QSize(int(screen_width//6), 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_order.setFont(font)
        self.label_order.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_order.setObjectName("label_order")
        self.gridLayout_2.addWidget(self.label_order, 1, 0, 1, 1)
        self.num_order = QtWidgets.QLineEdit(parent=self.frame)
        self.num_order.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.num_order.setFont(font)
        self.num_order.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.num_order.setObjectName("num_order")
        self.gridLayout_2.addWidget(self.num_order, 1, 1, 1, 6)
        # self.Button_OF_Drawing = QtWidgets.QPushButton(parent=self.frame)
        # self.Button_OF_Drawing.setMinimumSize(QtCore.QSize(204, 35))
        # self.Button_OF_Drawing.setObjectName("Button_OF_Drawing")
        # self.gridLayout_2.addWidget(self.Button_OF_Drawing, 2, 1, 1, 1)
        # self.Button_M_Drawing = QtWidgets.QPushButton(parent=self.frame)
        # self.Button_M_Drawing.setMinimumSize(QtCore.QSize(204, 35))
        # self.Button_M_Drawing.setObjectName("Button_M_Drawing")
        # self.gridLayout_2.addWidget(self.Button_M_Drawing, 3, 0, 1, 1)
        # self.Button_Dim_Drawing = QtWidgets.QPushButton(parent=self.frame)
        # self.Button_Dim_Drawing.setMinimumSize(QtCore.QSize(204, 35))
        # self.Button_Dim_Drawing.setObjectName("Button_Dim_Drawing")
        # self.gridLayout_2.addWidget(self.Button_Dim_Drawing, 2, 0, 1, 1)
        self.label_manometer1 = QtWidgets.QCheckBox(parent=self.frame)
        self.label_manometer1.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_manometer1.setFont(font)
        # self.label_manometer1.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_manometer1.setObjectName("label_manometer1")
        self.gridLayout_2.addWidget(self.label_manometer1, 2, 0, 1, 1)
        self.manometer1 = QtWidgets.QComboBox(parent=self.frame)
        self.manometer1.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.manometer1.setFont(font)
        self.manometer1.setObjectName("manometer1")
        self.gridLayout_2.addWidget(self.manometer1, 2, 1, 1, 1)
        self.label_pressure1 = QtWidgets.QLabel(parent=self.frame)
        self.label_pressure1.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_pressure1.setFont(font)
        self.label_pressure1.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_pressure1.setObjectName("label_pressure1")
        self.gridLayout_2.addWidget(self.label_pressure1, 2, 2, 1, 1)
        self.pressure1 = QtWidgets.QLineEdit(parent=self.frame)
        self.pressure1.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pressure1.setFont(font)
        self.pressure1.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.pressure1.setObjectName("pressure1")
        self.gridLayout_2.addWidget(self.pressure1, 2, 3, 1, 1)
        self.label_manometer2 = QtWidgets.QCheckBox(parent=self.frame)
        self.label_manometer2.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_manometer2.setFont(font)
        # self.label_manometer2.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_manometer2.setObjectName("label_manometer2")
        self.gridLayout_2.addWidget(self.label_manometer2, 3, 0, 1, 1)
        self.manometer2 = QtWidgets.QComboBox(parent=self.frame)
        self.manometer2.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.manometer2.setFont(font)
        self.manometer2.setObjectName("manometer2")
        self.gridLayout_2.addWidget(self.manometer2, 3, 1, 1, 1)
        self.label_pressure2 = QtWidgets.QLabel(parent=self.frame)
        self.label_pressure2.setMinimumSize(QtCore.QSize(204, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_pressure2.setFont(font)
        self.label_pressure2.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_pressure2.setObjectName("label_pressure2")
        self.gridLayout_2.addWidget(self.label_pressure2, 3, 2, 1, 1)
        self.pressure2 = QtWidgets.QLineEdit(parent=self.frame)
        self.pressure2.setMinimumSize(QtCore.QSize(170, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pressure2.setFont(font)
        self.pressure2.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.pressure2.setObjectName("pressure2")
        self.gridLayout_2.addWidget(self.pressure2, 3, 3, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem3, 4, 2, 1, 1)
        self.select_all_dim = QtWidgets.QCheckBox('Todos Dim.')
        self.gridLayout_2.addWidget(self.select_all_dim, 5, 1, 1, 1)
        self.select_all_dim.setVisible(False)
        self.select_all_of_eq = QtWidgets.QCheckBox('Todos OF Eq.')
        self.select_all_of_eq.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.gridLayout_2.addWidget(self.select_all_of_eq, 5, 2, 1, 1)
        self.select_all_of_eq.setVisible(False)
        self.select_all_of_sensor = QtWidgets.QCheckBox('Todos OF Sensor')
        self.select_all_of_sensor.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.gridLayout_2.addWidget(self.select_all_of_sensor, 5, 3, 1, 1)
        self.select_all_of_sensor.setVisible(False)
        # self.select_ph = QtWidgets.QCheckBox('Prueba Hidrostática')
        # self.select_ph.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        # self.gridLayout_2.addWidget(self.select_ph, 5, 4, 1, 1)
        self.select_lp = QtWidgets.QCheckBox('Líquidos Penetrantes')
        self.select_lp.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.gridLayout_2.addWidget(self.select_lp, 5, 5, 1, 1)
        self.select_lp.setVisible(False)
        self.select_all_tags = QtWidgets.QCheckBox('Todos Tags')
        self.select_all_tags.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.gridLayout_2.addWidget(self.select_all_tags, 5, 0, 1, 1)
        self.tableTags = CustomTableWidgetTags()
        self.tableTags.setObjectName("tableWidget")
        self.tableTags.setColumnCount(0)
        self.tableTags.setRowCount(0)
        self.gridLayout_2.addWidget(self.tableTags, 6, 0, 1, 6)
        self.select_all_others = QtWidgets.QCheckBox('Todos Otros')
        self.select_all_others.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.gridLayout_2.addWidget(self.select_all_others, 2, 6, 1, 1)
        self.tableOthers = CustomTableWidgetOthers()
        self.tableOthers.setObjectName("tableWidget")
        self.tableOthers.setColumnCount(0)
        self.tableOthers.setRowCount(0)
        self.gridLayout_2.addWidget(self.tableOthers, 3, 6, 9, 1)
        self.label_CountItems_tags = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems_tags.setMinimumSize(QtCore.QSize(105, 25))
        self.label_CountItems_tags.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_CountItems_tags.setObjectName("label_CountItems_tags")
        self.gridLayout_2.addWidget(self.label_CountItems_tags, 9, 4, 1, 1)
        self.label_CountValue_tags = QtWidgets.QLabel(parent=self.frame)
        self.label_CountValue_tags.setMinimumSize(QtCore.QSize(105, 25))
        self.label_CountValue_tags.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_CountValue_tags.setObjectName("label_CountValue_tags")
        self.gridLayout_2.addWidget(self.label_CountValue_tags, 9, 5, 1, 1)
        self.label_CountItems_others = QtWidgets.QLabel(parent=self.frame)
        self.label_CountItems_others.setMinimumSize(QtCore.QSize(105, 25))
        self.label_CountItems_others.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_CountItems_others.setObjectName("label_CountItems_others")
        self.gridLayout_2.addWidget(self.label_CountItems_others, 12, 6, 1, 1)
        self.label_date = QtWidgets.QLabel(parent=self.frame)
        self.label_date.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_date.setFont(font)
        self.label_date.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_date.setObjectName("label_date")
        self.gridLayout_2.addWidget(self.label_date, 10, 0, 1, 1)
        self.date_test = QtWidgets.QLineEdit(parent=self.frame)
        self.date_test.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.date_test.setFont(font)
        self.date_test.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.date_test.setObjectName("date_test")
        self.gridLayout_2.addWidget(self.date_test, 10, 1, 1, 1)
        self.label_state = QtWidgets.QLabel(parent=self.frame)
        self.label_state.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_state.setFont(font)
        self.label_state.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_state.setObjectName("label_state")
        self.gridLayout_2.addWidget(self.label_state, 10, 2, 1, 1)
        self.state_test = QtWidgets.QComboBox(parent=self.frame)
        self.state_test.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.state_test.setFont(font)
        self.state_test.setObjectName("state_test")
        self.gridLayout_2.addWidget(self.state_test, 10, 3, 1, 1)
        self.label_obs = QtWidgets.QLabel(parent=self.frame)
        self.label_obs.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_obs.setFont(font)
        self.label_obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_obs.setObjectName("label_obs")
        self.gridLayout_2.addWidget(self.label_obs, 10, 4, 1, 1)
        self.obs_test = QtWidgets.QTextEdit(parent=self.frame)
        self.obs_test.setMinimumSize(QtCore.QSize(105, 25))
        self.obs_test.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.obs_test.setFont(font)
        self.obs_test.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.obs_test.setObjectName("obs_test")
        self.gridLayout_2.addWidget(self.obs_test, 10, 5, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem1, 11, 2, 1, 1)
        self.Button_Insert = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Insert.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Insert.setObjectName("Button_Insert")
        self.gridLayout_2.addWidget(self.Button_Insert, 12, 0, 1, 2)
        self.Button_Photos= QtWidgets.QPushButton(parent=self.frame)
        self.Button_Photos.setMinimumSize(QtCore.QSize(204, 35))
        self.Button_Photos.setObjectName("Button_Photos")
        self.gridLayout_2.addWidget(self.Button_Photos, 12, 2, 1, 2)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addWidget(self.Button_Cancel, 12, 4, 1, 2)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        VerificationInsert_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=VerificationInsert_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 22))
        self.menubar.setObjectName("menubar")
        VerificationInsert_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=VerificationInsert_Window)
        self.statusbar.setObjectName("statusbar")
        VerificationInsert_Window.setStatusBar(self.statusbar)
        self.tableTags.verticalHeader().setVisible(True)
        self.tableTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableTags.setSortingEnabled(False)
        if self.username == 'm.gil':
            self.tableTags.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableTags.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableTags.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        self.tableOthers.verticalHeader().setVisible(True)
        self.tableOthers.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
        self.tableOthers.setSortingEnabled(False)
        if self.username == 'm.gil':
            self.tableOthers.setStyleSheet("gridline-color: rgb(128, 128, 128);")
            self.tableOthers.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        else:
            self.tableOthers.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        VerificationInsert_Window.setWindowFlag(QtCore.Qt.WindowType.WindowCloseButtonHint, False)

        self.retranslateUi(VerificationInsert_Window)
        QtCore.QMetaObject.connectSlotsByName(VerificationInsert_Window)

        self.Button_Cancel.clicked.connect(VerificationInsert_Window.close)
        self.num_order.returnPressed.connect(self.query_tables)
        self.Button_Insert.clicked.connect(self.insert_all_data)
        self.Button_Photos.clicked.connect(lambda: self.insert_images(self.num_order.text().upper()))
        self.tableTags.horizontalHeader().sectionDoubleClicked.connect(self.on_header_section_clicked)
        self.tableOthers.horizontalHeader().sectionDoubleClicked.connect(self.on_header_section_clicked_others)
        self.select_all_tags.clicked.connect(self.toggle_all_tags_checkboxes)
        self.select_all_dim.clicked.connect(self.toggle_dim_checkboxes)
        self.select_all_of_eq.clicked.connect(self.toggle_of_eq_checkboxes)
        self.select_all_of_sensor.clicked.connect(self.toggle_of_sensor_checkboxes)
        self.select_all_others.clicked.connect(self.toggle_all_others_checkboxes)
        self.state_test.currentTextChanged.connect(self.change_text_color)
        self.tableOthers.itemSelectionChanged.connect(self.countSelectedCells_others)
        self.tableTags.itemSelectionChanged.connect(self.countSelectedCells_tags)
        self.tableTags.itemDoubleClicked.connect(self.item_double_clicked)
        self.tableOthers.itemDoubleClicked.connect(self.item_double_clicked)

        self.load_values()


    def retranslateUi(self, VerificationInsert_Window):
        _translate = QtCore.QCoreApplication.translate
        VerificationInsert_Window.setWindowTitle(_translate("VerificationInsert_Window", "Verificación"))
        self.label_order.setText(_translate("VerificationInsert_Window", "Nº Pedido:"))
        self.label_manometer1.setText(_translate("VerificationInsert_Window", "Manómetro 1:"))
        self.label_manometer2.setText(_translate("VerificationInsert_Window", "Manómetro 2:"))
        self.label_pressure1.setText(_translate("VerificationInsert_Window", "Presión 1:"))
        self.label_pressure2.setText(_translate("VerificationInsert_Window", "Presión 2:"))
        self.label_date.setText(_translate("VerificationInsert_Window", "Fecha:"))
        self.label_state.setText(_translate("VerificationInsert_Window", "Estado:"))
        self.label_obs.setText(_translate("VerificationInsert_Window", "Observaciones:"))
        self.Button_Cancel.setText(_translate("VerificationInsert_Window", "Cancelar"))
        self.Button_Insert.setText(_translate("VerificationInsert_Window", "Insertar"))
        # self.Button_M_Drawing.setText(_translate("VerificationInsert_Window", "Planos M"))
        # self.Button_OF_Drawing.setText(_translate("VerificationInsert_Window", "Planos OF"))
        # self.Button_Dim_Drawing.setText(_translate("VerificationInsert_Window", "Planos Dim."))
        self.Button_Photos.setText(_translate("VerificationInsert_Window", "Fotos"))


# Function to update data of both tables
    def query_tables(self):
        self.select_all_tags.setChecked(False)
        self.select_all_dim.setChecked(False)
        self.select_all_of_eq.setChecked(False)
        self.select_all_of_sensor.setChecked(False)
        self.select_all_others.setChecked(False)

        self.num_order_value = self.num_order.text().upper()
        if self.num_order_value != '':
            if self.num_order_value[:3] == 'AL-':
                self.tableTags.setRowCount(0)
                self.tableOthers.setRowCount(0)
                self.querywarehouse()
            else:
                self.querytags()
                self.queryothers()

# Function to insert all data
    def insert_all_data(self):
        self.num_order_value = self.num_order.text().upper()
        if self.num_order_value != '':
            if self.num_order_value[:3] != 'AL-':
                self.insert_data_tags()
        self.update_ppi()
        self.update_exp()
        self.update_al_drawings()
        self.update_m_drawings()
        self.update_of_drawings()
        self.update_dim_drawings()
        self.query_tables()

        self.select_all_tags.setChecked(False)
        self.select_all_dim.setChecked(False)
        self.select_all_of_eq.setChecked(False)
        self.select_all_of_sensor.setChecked(False)
        self.select_all_others.setChecked(False)

# Function to load data of table tags
    def querytags(self):
        self.num_columns = 0
        self.tableTags.setRowCount(0)
        self.num_order_value = self.num_order.text().upper()

        if self.num_order_value not in ['ALMACÉN', 'ALMACEN', 'INTERNO', 'PROTOTIPOS']:
            query_material = ("""
                                SELECT orders."num_order",orders."num_offer",product_type."variable"
                                FROM offers
                                INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                                INNER JOIN product_type ON (offers."material"=product_type."material")
                                WHERE (UPPER(orders."num_order") LIKE UPPER('%%'||%s||'%%')
                                )
                                ORDER BY orders."num_order"
                                """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(query_material,(self.num_order_value,))
                results=cur.fetchall()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            if len(results) != 0:
                query_flow = ('''
                    SELECT tags_data.tags_flow."num_order"
                    FROM tags_data.tags_flow
                    WHERE UPPER (tags_data.tags_flow."num_order") LIKE UPPER('%%'||%s||'%%')
                    ''')
                query_temp = ('''
                    SELECT tags_data.tags_temp."num_order"
                    FROM tags_data.tags_temp
                    WHERE UPPER (tags_data.tags_temp."num_order") LIKE UPPER('%%'||%s||'%%')
                    ''')
                query_level = ('''
                    SELECT tags_data.tags_level."num_order"
                    FROM tags_data.tags_level
                    WHERE UPPER (tags_data.tags_level."num_order") LIKE UPPER('%%'||%s||'%%')
                    ''')
                query_others = ('''
                    SELECT tags_data.tags_others."num_order"
                    FROM tags_data.tags_others
                    WHERE UPPER (tags_data.tags_others."num_order") LIKE UPPER('%%'||%s||'%%')
                    ''')
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query_flow,(self.num_order_value,))
                    results_flow=cur.fetchall()
                    cur.execute(query_temp,(self.num_order_value,))
                    results_temp=cur.fetchall()
                    cur.execute(query_level,(self.num_order_value,))
                    results_level=cur.fetchall()
                    cur.execute(query_others,(self.num_order_value,))
                    results_others=cur.fetchall()

                    if len(results_flow) != 0:
                        material = 'Caudal'
                    elif len(results_temp) != 0:
                        material = 'Temperatura'
                    elif len(results_level) != 0:
                        material = 'Nivel'
                    elif len(results_others) != 0:
                        material = 'Otros'
                    else:
                        material = ''
                        self.num_columns = 0

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()
                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                if material == 'Caudal':
                    self.table_name = "tags_data.tags_flow"
                    self.column_id = "id_tag_flow"
                    commands_tags = f" SELECT '', {self.column_id}, tag, num_order, item_type, dim_drawing, of_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), TO_CHAR(ph1_date, 'DD/MM/YYYY'), TO_CHAR(ph2_date, 'DD/MM/YYYY'), TO_CHAR(lp_date, 'DD/MM/YYYY'), tag_images FROM {self.table_name} WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') AND tag_state = 'PURCHASED' ORDER BY tag"
                    self.num_columns = 13
                    column_headers = ['', 'ID', 'TAG', 'Nº Pedido', 'Tipo Equipo', 'Plano Dim.', 'OF Equipo', 'Fecha Dim.', 'Fecha OF', 'Fecha PH1', 'Fecha PH2', 'Fecha LP', 'Fotos']
                    self.select_all_dim.setVisible(True)
                    self.select_all_of_eq.setVisible(True)
                    self.select_all_of_sensor.setVisible(False)
                    self.select_lp.setVisible(True)

                elif material == 'Temperatura':
                    self.table_name = "tags_data.tags_temp"
                    self.column_id = "id_tag_temp"
                    commands_tags = f" SELECT '', {self.column_id}, tag, num_order, item_type, dim_drawing, of_drawing, of_sensor_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_sensor_date, 'DD/MM/YYYY'), TO_CHAR(ph1_date, 'DD/MM/YYYY'), TO_CHAR(ph2_date, 'DD/MM/YYYY'), TO_CHAR(lp_date, 'DD/MM/YYYY'), tag_images FROM {self.table_name} WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') AND tag_state = 'PURCHASED' ORDER BY tag"
                    self.num_columns = 15
                    column_headers = ['', 'ID', 'TAG', 'Nº Pedido', 'Tipo Equipo', 'Plano Dim.', 'OF Equipo', 'OF Sensor', 'Fecha Dim.', 'Fecha OF Vaina', 'Fecha OF Sensor', 'Fecha PH1', 'Fecha PH2', 'Fecha LP', 'Fotos']
                    self.select_all_dim.setVisible(True)
                    self.select_all_of_eq.setVisible(True)
                    self.select_all_of_sensor.setVisible(True)
                    self.select_lp.setVisible(True)

                elif material == 'Nivel':
                    self.table_name = "tags_data.tags_level"
                    self.column_id = "id_tag_level"
                    commands_tags = f" SELECT '', {self.column_id}, tag, num_order, item_type, dim_drawing, of_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), TO_CHAR(ph1_date, 'DD/MM/YYYY'), TO_CHAR(ph2_date, 'DD/MM/YYYY'), TO_CHAR(lp_date, 'DD/MM/YYYY'), tag_images FROM {self.table_name} WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') AND tag_state = 'PURCHASED' ORDER BY tag"
                    self.num_columns = 13
                    column_headers = ['', 'ID', 'TAG', 'Nº Pedido', 'Tipo Equipo', 'Plano Dim.', 'OF Equipo', 'Fecha Dim.', 'Fecha OF', 'Fecha PH1', 'Fecha PH2', 'Fecha LP', 'Fotos']
                    self.select_all_dim.setVisible(True)
                    self.select_all_of_eq.setVisible(True)
                    self.select_all_of_sensor.setVisible(False)
                    self.select_lp.setVisible(True)

                elif material == 'Otros':
                    self.column_id = "id_tag_others"
                    self.table_name = "tags_data.tags_others"
                    commands_tags = f" SELECT '', {self.column_id}, tag, num_order, description, dim_drawing, of_drawing, TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), TO_CHAR(ph1_date, 'DD/MM/YYYY'), TO_CHAR(ph2_date, 'DD/MM/YYYY'), TO_CHAR(lp_date, 'DD/MM/YYYY'), tag_images FROM {self.table_name} WHERE num_order LIKE UPPER ('%%'||'{self.num_order_value}'||'%%') AND tag_state = 'PURCHASED' ORDER BY tag"
                    self.num_columns = 13
                    column_headers = ['', 'ID', 'TAG', 'Nº Pedido', 'Tipo Equipo', 'Plano Dim.', 'OF Equipo', 'Fecha Dim.', 'Fecha OF', 'Fecha PH1', 'Fecha PH2', 'Fecha LP', 'Fotos']
                    self.select_all_dim.setVisible(True)
                    self.select_all_of_eq.setVisible(True)
                    self.select_all_of_sensor.setVisible(False)
                    self.select_lp.setVisible(True)

                conn = None
                if material != '':
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()

                        cur.execute(commands_tags)
                        results=cur.fetchall()

                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        self.tableTags.setRowCount(len(results))
                        self.tableTags.setColumnCount(self.num_columns)
                        tablerow=0

                    # fill the Qt Table with the query results
                        for row in results:
                            for column in range(self.num_columns):
                                if column == 0:
                                    checkbox = QtWidgets.QCheckBox(self)
                                    checkbox.setChecked(False)
                                    self.tableTags.setCellWidget(tablerow, column, checkbox)
                                elif column in [5,6,7] and self.num_columns == 15:
                                    value = row[column]
                                    if value is None:
                                        value = ''
                                        it = QtWidgets.QTableWidgetItem(str(value))
                                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                                        self.tableTags.setItem(tablerow, column, it)
                                    else:
                                        checkbox = QtWidgets.QCheckBox(value)
                                        checkbox.setChecked(False)
                                        self.tableTags.setCellWidget(tablerow, column, checkbox)
                                elif column in [5,6] and self.num_columns == 13:
                                    value = row[column]
                                    if value is None:
                                        value = ''
                                        it = QtWidgets.QTableWidgetItem(str(value))
                                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                                        self.tableTags.setItem(tablerow, column, it)
                                    else:
                                        checkbox = QtWidgets.QCheckBox(value)
                                        checkbox.setChecked(False)
                                        self.tableTags.setCellWidget(tablerow, column, checkbox)
                                else:
                                    value = row[column]

                                    if value is None:
                                        value = ''
                                    else:
                                        if column == (self.tableTags.columnCount() - 1):
                                            value = row[column].split("/")[-1]

                                    it = QtWidgets.QTableWidgetItem(str(value))
                                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                                    self.tableTags.setItem(tablerow, column, it)

                            tablerow+=1

                        self.tableTags.verticalHeader().hide()
                        self.tableTags.setItemDelegate(AlignDelegate(self.tableTags))
                        self.tableTags.setSortingEnabled(False)
                        self.tableTags.setHorizontalHeaderLabels(column_headers)
                        self.tableTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
                        self.tableTags.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
                        self.tableTags.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.Interactive)
                        self.tableTags.hideColumn(1)

                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

# Function to load data of table others
    def queryothers(self):
        self.tableOthers.setRowCount(0)
        self.num_order_value = self.num_order.text().upper()

        query_others = ("""
                        SELECT '', num_order, drawing_number, TO_CHAR(verif_m_drawing_date, 'DD/MM/YYYY') FROM verification.m_drawing_verification WHERE UPPER(verification.m_drawing_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        UNION
                        SELECT '', num_order, 'PPI' as drawing_number, TO_CHAR(verif_ppi_date, 'DD/MM/YYYY') FROM verification.ppi_verification WHERE UPPER(verification.ppi_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        UNION
                        SELECT '', num_order, 'EXP' as drawing_number, TO_CHAR(verif_exp_date, 'DD/MM/YYYY') FROM verification.exp_verification WHERE UPPER(verification.exp_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        UNION
                        SELECT '', num_order, drawing_number, TO_CHAR(verif_of_drawing_date, 'DD/MM/YYYY') FROM verification.of_drawing_verification WHERE UPPER(verification.of_drawing_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        UNION
                        SELECT '', num_order, drawing_number, TO_CHAR(verif_dim_drawing_date, 'DD/MM/YYYY') FROM verification.dim_drawing_verification WHERE UPPER(verification.dim_drawing_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        ORDER BY drawing_number
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_others, (self.num_order_value, self.num_order_value, self.num_order_value, self.num_order_value, self.num_order_value,))
            results=cur.fetchall()

            column_headers = ['', 'Nº Pedido', 'Nº Plano', 'Fecha']

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableOthers.setRowCount(len(results))
            self.tableOthers.setColumnCount(4)
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(4):
                    if column == 0:
                        checkbox_others = QtWidgets.QCheckBox()
                        checkbox_others.setChecked(False)
                        self.tableOthers.setCellWidget(tablerow, column, checkbox_others)
                    else:
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableOthers.setItem(tablerow, column, it)

                tablerow+=1

            self.tableOthers.verticalHeader().hide()
            self.tableOthers.setItemDelegate(AlignDelegate(self.tableOthers))
            self.tableOthers.setSortingEnabled(False)
            self.tableOthers.setHorizontalHeaderLabels(column_headers)
            self.tableOthers.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableOthers.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableOthers.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableOthers.hideColumn(1)
            self.tableOthers.sortByColumn(2, QtCore.Qt.SortOrder.AscendingOrder)

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Funtion to load data of table wharehouse
    def querywarehouse(self):
        self.tableTags.setRowCount(0)
        self.num_order_value = self.num_order.text().upper()

        query_warehouse = ("""
                        SELECT '', id, num_order, drawing_number, TO_CHAR(warehouse_date, 'DD/MM/YYYY'), TO_CHAR(verif_al_drawing_date, 'DD/MM/YYYY'),
                        description, image, document
                        FROM verification.al_drawing_verification WHERE UPPER(verification.al_drawing_verification."num_order") LIKE UPPER('%%'||%s||'%%')
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_warehouse, (self.num_order_value,))
            results=cur.fetchall()

            column_headers = ['', 'ID', 'Nº Pedido', 'Nº Plano', 'Fecha Almacén', 'Fecha Verif.', 'Descripción', 'Foto', 'PDF Plano']

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableTags.setRowCount(len(results))
            self.tableTags.setColumnCount(9)
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(9):
                    if column == 0:
                        checkbox_others = QtWidgets.QCheckBox()
                        checkbox_others.setChecked(False)
                        self.tableTags.setCellWidget(tablerow, column, checkbox_others)
                    else:
                        value = row[column]
                        if value is None:
                            value = ''
                        else:
                            if column == (self.tableTags.columnCount() - 2) or column == (self.tableTags.columnCount() - 1):
                                value = row[column].split("/")[-1]
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableTags.setItem(tablerow, column, it)

                tablerow+=1

            self.tableTags.verticalHeader().hide()
            self.tableTags.setItemDelegate(AlignDelegate(self.tableTags))
            self.tableTags.setSortingEnabled(False)
            self.tableTags.setHorizontalHeaderLabels(column_headers)
            self.tableTags.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
            self.tableTags.horizontalHeader().setSectionResizeMode(8, QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableTags.horizontalHeader().setSectionResizeMode(9, QtWidgets.QHeaderView.ResizeMode.Stretch)
            self.tableTags.hideColumn(1)
            self.tableTags.sortByColumn(3, QtCore.Qt.SortOrder.AscendingOrder)

            self.select_all_dim.setVisible(False)
            self.select_all_of_eq.setVisible(False)
            self.select_all_of_sensor.setVisible(False)
            self.select_lp.setVisible(False)

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Function when final checkbox for all tags is checked
    def toggle_all_tags_checkboxes(self, state):
        if state:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 0)
                    checkbox.setChecked(True)
        else:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 0)
                    checkbox.setChecked(False)

# Function when final checkbox for all others is checked
    def toggle_all_others_checkboxes(self, state):
        if state:
            for row in range(0, self.tableOthers.rowCount()):
                if not self.tableOthers.isRowHidden(row):
                    checkbox = self.tableOthers.cellWidget(row, 0)
                    checkbox.setChecked(True)
        else:
            for row in range(0, self.tableOthers.rowCount()):
                if not self.tableOthers.isRowHidden(row):
                    checkbox = self.tableOthers.cellWidget(row, 0)
                    checkbox.setChecked(False)

# Function when final checkbox for all dimensional drawings is checked
    def toggle_dim_checkboxes(self, state):
        if state:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 5)
                    if checkbox is not None:
                        checkbox.setChecked(True)
        else:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 5)
                    if checkbox is not None:
                        checkbox.setChecked(False)

# Function when final checkbox for OF equipment drawing is checked
    def toggle_of_eq_checkboxes(self, state):
        if state:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 6)
                    if checkbox is not None:
                        checkbox.setChecked(True)
        else:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 6)
                    if checkbox is not None:
                        checkbox.setChecked(False)

# Function when final checkbox for OF sensor drawing is checked
    def toggle_of_sensor_checkboxes(self, state):
        if state:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 7)
                    if checkbox is not None:
                        checkbox.setChecked(True)
        else:
            for row in range(0, self.tableTags.rowCount()):
                if not self.tableTags.isRowHidden(row):
                    checkbox = self.tableTags.cellWidget(row, 7)
                    if checkbox is not None:
                        checkbox.setChecked(False)

# Function to insert data on tags
    def insert_data_tags(self):
        num_order = self.num_order.text().upper()
        test_date = self.date_test.text()
        state = self.state_test.currentText()
        notes = self.obs_test.toPlainText()

        manometer1 = self.manometer1.currentText()
        pressure1 = self.pressure1.text()
        manometer2 = self.manometer2.currentText()
        pressure2 = self.pressure2.text()

        if num_order == '' or test_date == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Rellena todos los campos. Solo el campo de observaciones puede quedarse vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', test_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            if num_order not in ['ALMACÉN', 'ALMACEN', 'INTERNO', 'PROTOTIPOS']:
                row_list =[]
                if self.num_columns != 0:
                    for row in range(0, self.tableTags.rowCount() + 1):
                        item = self.tableTags.cellWidget(row, 0)
                        if item is not None:
                            if item.checkState() == QtCore.Qt.CheckState.Checked:
                                row_list.append(row)

                if len(row_list) == 0:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("No has seleccionado ningún TAG")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon
                else:
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        for row_value in row_list:
                            id_value = int(self.tableTags.item(row_value, 1).text())
                            tag = self.tableTags.item(row_value, 2).text()
                            item_dim = self.tableTags.cellWidget(row_value, 5)
                            item_eq = self.tableTags.cellWidget(row_value, 6)
                            date_dim = self.tableTags.item(row_value, 8).text() if self.table_name == "tags_data.tags_temp" else self.tableTags.item(row_value, 7).text()
                            date_eq = self.tableTags.item(row_value, 9).text() if self.table_name == "tags_data.tags_temp" else self.tableTags.item(row_value, 8).text()

                            if item_dim is not None:
                                if item_dim.checkState() == QtCore.Qt.CheckState.Checked:
                                    if date_dim == '':
                                        commands_verification = f"UPDATE {self.table_name} SET final_verif_dim_date = '{test_date}', final_verif_dim_state = '{state}', final_verif_dim_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                        cur.execute(commands_verification)

                                    else:
                                        dlg_yes_no = QtWidgets.QMessageBox()
                                        new_icon_yes_no = QtGui.QIcon()
                                        new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                        dlg_yes_no.setWindowTitle("ERP EIPSA")
                                        dlg_yes_no.setText(f"El tag {tag} ya tiene datos dimensionales\n"
                                                            "¿Estás seguro de que deseas sobreescribir los datos?")
                                        dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                        dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                        result = dlg_yes_no.exec()

                                        if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                            commands_verification = f"UPDATE {self.table_name} SET final_verif_dim_date = '{test_date}', final_verif_dim_state = '{state}', final_verif_dim_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                            cur.execute(commands_verification)

                                        del dlg_yes_no, new_icon_yes_no

                            if item_eq is not None:
                                if item_eq.checkState() == QtCore.Qt.CheckState.Checked:
                                    if date_eq == '':
                                        commands_verification = f"UPDATE {self.table_name} SET final_verif_of_eq_date = '{test_date}', final_verif_of_eq_state = '{state}', final_verif_of_eq_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                        cur.execute(commands_verification)

                                    else:
                                        dlg_yes_no = QtWidgets.QMessageBox()
                                        new_icon_yes_no = QtGui.QIcon()
                                        new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                        dlg_yes_no.setWindowTitle("ERP EIPSA")
                                        dlg_yes_no.setText(f"El tag {tag} ya tiene datos de equipo\n"
                                                            "¿Estás seguro de que deseas sobreescribir los datos?")
                                        dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                        dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                        result = dlg_yes_no.exec()

                                        if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                            commands_verification = f"UPDATE {self.table_name} SET final_verif_of_eq_date = '{test_date}', final_verif_of_eq_state = '{state}', final_verif_of_eq_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                            cur.execute(commands_verification)

                                        del dlg_yes_no, new_icon_yes_no

                            if self.table_name == "tags_data.tags_temp":
                                item_sensor = self.tableTags.cellWidget(row_value, 7)
                                date_sensor = self.tableTags.item(row_value, 10).text()
                                if item_sensor is not None:
                                    if item_sensor.checkState() == QtCore.Qt.CheckState.Checked:
                                        if date_sensor == '':
                                            commands_verification = f"UPDATE {self.table_name} SET final_verif_of_sensor_date = '{test_date}', final_verif_of_sensor_state = '{state}', final_verif_of_sensor_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                            cur.execute(commands_verification)

                                        else:
                                            dlg_yes_no = QtWidgets.QMessageBox()
                                            new_icon_yes_no = QtGui.QIcon()
                                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                                            dlg_yes_no.setText(f"El tag {tag} ya tiene datos de sensor\n"
                                                                "¿Estás seguro de que deseas sobreescribir los datos?")
                                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                                            result = dlg_yes_no.exec()

                                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                                commands_verification = f"UPDATE {self.table_name} SET final_verif_of_sensor_date = '{test_date}', final_verif_of_sensor_state = '{state}', final_verif_of_sensor_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                                cur.execute(commands_verification)

                                            del dlg_yes_no, new_icon_yes_no

                            if self.label_manometer1.checkState() == QtCore.Qt.CheckState.Checked:
                                commands_hydrotest = f"UPDATE {self.table_name} SET ph1_date = '{test_date}', ph1_manometer = '{manometer1}', ph1_pressure = '{pressure1}', ph1_state = '{state}', ph1_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                cur.execute(commands_hydrotest)

                            if self.label_manometer2.checkState() == QtCore.Qt.CheckState.Checked:
                                commands_hydrotest = f"UPDATE {self.table_name} SET ph2_date = '{test_date}', ph2_manometer = '{manometer2}', ph2_pressure = '{pressure2}', ph2_state = '{state}', ph2_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                cur.execute(commands_hydrotest)

                            if self.select_lp.checkState() == QtCore.Qt.CheckState.Checked:
                                query_hn_liq = ("""SELECT liquid, heat_number FROM verification.liquid_heat_number""")
                                cur.execute(query_hn_liq)
                                results_hn=cur.fetchall()

                                match_liq1 = list(filter(lambda x: x[0] == '9PR5', results_hn))
                                match_liq2 = list(filter(lambda x: x[0] == '9D1B', results_hn))
                                match_liq3 = list(filter(lambda x: x[0] == '996PB', results_hn))

                                hn_liq1=match_liq1[0][1]
                                hn_liq2=match_liq2[0][1]
                                hn_liq3=match_liq3[0][1]

                                commands_liquidtest = f"UPDATE {self.table_name} SET lp_date = '{test_date}', lp_hn_liq1 = '{hn_liq1}', lp_hn_liq2 = '{hn_liq2}', lp_hn_liq3 = '{hn_liq3}', lp_state = '{state}', lp_obs = '{notes}' WHERE {self.column_id} = {id_value}"
                                cur.execute(commands_liquidtest)

                                self.select_lp.checkState()

                        if self.label_manometer1.checkState() == QtCore.Qt.CheckState.Checked:
                            self.label_manometer1.setCheckState(QtCore.Qt.CheckState.Unchecked)

                        if self.label_manometer2.checkState() == QtCore.Qt.CheckState.Checked:
                            self.label_manometer2.setCheckState(QtCore.Qt.CheckState.Unchecked)

                        if self.select_lp.checkState() == QtCore.Qt.CheckState.Checked:
                            self.select_lp.setCheckState(QtCore.Qt.CheckState.Unchecked)
                    # close communication with the PostgreSQL database server
                        cur.close()
                    # commit the changes
                        conn.commit()

                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Verificación")
                        dlg.setText("Datos insertados con éxito")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                        dlg.exec()
                        del dlg,new_icon

                        self.querytags()

                    except (Exception, psycopg2.DatabaseError) as error:
                        print(error)
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

# Function to update data for PPI
    def update_ppi(self):
        num_order = self.num_order.text()
        verif_date = self.date_test.text()
        verif_state = self.state_test.currentText()
        verif_notes = self.obs_test.toPlainText()

        if num_order == "" or verif_date == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación PPI")
            dlg.setText("Rellene todos los campos. Solo el campo de observaciones puede quedar vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', verif_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación PPI")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            row_list = []
            for row in range(self.tableOthers.rowCount()):
                item = self.tableOthers.cellWidget(row, 0)
                value_verif = self.tableOthers.item(row, 2).text()
                if item is not None and value_verif == 'PPI':
                    if item.checkState() == QtCore.Qt.CheckState.Checked:
                        row_list.append(row)
            
            for row_value in row_list:
                num_order = self.tableOthers.item(row_value, 1).text()
                commands_select_ppi = ("""
                            SELECT verif_ppi_date, id
                            FROM verification."ppi_verification"
                            WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                            """)
                commands_insert_ppi = ("""
                            UPDATE verification."ppi_verification"
                            SET "verif_ppi_date" = %s, "verif_ppi_state" = %s,"verif_ppi_obs" = %s
                            WHERE "id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_select_ppi, (num_order, ))
                    results = cur.fetchall()

                    if len(results) != 0:
                        if results[0][0] is None:
                            cur.execute(commands_insert_ppi, (verif_date, verif_state, verif_notes, results[0][1], ))
                            # dlg = QtWidgets.QMessageBox()
                            # new_icon = QtGui.QIcon()
                            # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            # dlg.setWindowIcon(new_icon)
                            # dlg.setWindowTitle("PPI")
                            # dlg.setText("Datos insertados con éxito")
                            # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            # dlg.exec()
                            # del dlg, new_icon

                        else:
                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText("Ya ha datos existentes en el PPI\n"
                                                "¿Deseas sobreescribirlos?\n")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()
                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                cur.execute(commands_insert_ppi, (verif_date, verif_state, verif_notes, results[0][1], ))

                                # dlg = QtWidgets.QMessageBox()
                                # new_icon = QtGui.QIcon()
                                # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                # dlg.setWindowIcon(new_icon)
                                # dlg.setWindowTitle("PPI")
                                # dlg.setText("Datos insertados con éxito")
                                # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                # dlg.exec()
                                # del dlg, new_icon

                            del dlg_yes_no, new_icon_yes_no

                    else:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("PPI")
                        dlg.setText("No hay PPI creado para este pedido")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Verificación PPI")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()

# Function to update data for EXP
    def update_exp(self):
        num_order = self.num_order.text()
        verif_date = self.date_test.text()
        verif_state = self.state_test.currentText()
        verif_notes = self.obs_test.toPlainText()

        if num_order == "" or verif_date == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación EXP")
            dlg.setText("Rellene todos los campos. Solo el campo de observaciones puede quedar vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', verif_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación EXP")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            row_list = []
            for row in range(self.tableOthers.rowCount()):
                item_exp = self.tableOthers.cellWidget(row, 0)
                value_verif = self.tableOthers.item(row, 2).text()
                if item_exp is not None and value_verif == 'EXP':
                    if item_exp.checkState() == QtCore.Qt.CheckState.Checked:
                        row_list.append(row)

            for row_value in row_list:
                num_order = self.tableOthers.item(row_value, 1).text()
                commands_select_exp = ("""
                            SELECT verif_exp_date, id
                            FROM verification."exp_verification"
                            WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                            """)
                commands_insert_exp = ("""
                            UPDATE verification."exp_verification"
                            SET "verif_exp_date" = %s, "verif_exp_state" = %s,"verif_exp_obs" = %s
                            WHERE "id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_select_exp, (num_order, ))
                    results = cur.fetchall()

                    if len(results) != 0:
                        if results[0][0] is None:
                            cur.execute(commands_insert_exp, (verif_date, verif_state, verif_notes, results[0][1], ))
                            # dlg = QtWidgets.QMessageBox()
                            # new_icon = QtGui.QIcon()
                            # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            # dlg.setWindowIcon(new_icon)
                            # dlg.setWindowTitle("EXP")
                            # dlg.setText("Datos insertados con éxito")
                            # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            # dlg.exec()
                            # del dlg, new_icon

                        else:
                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText("Ya ha datos existentes en el aviso de expedición\n"
                                                "¿Deseas sobreescribirlos?\n")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()
                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                cur.execute(commands_insert_exp, (verif_date, verif_state, verif_notes, results[0][1], ))

                                # dlg = QtWidgets.QMessageBox()
                                # new_icon = QtGui.QIcon()
                                # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                # dlg.setWindowIcon(new_icon)
                                # dlg.setWindowTitle("EXP")
                                # dlg.setText("Datos insertados con éxito")
                                # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                # dlg.exec()
                                # del dlg, new_icon

                            del dlg_yes_no, new_icon_yes_no

                    else:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("EXP")
                        dlg.setText("No hay EXP creado para este pedido")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Verificación EXP")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()

# Function to update data for AL drawings
    def update_al_drawings(self):
        num_order = self.num_order.text()
        verif_date = self.date_test.text()
        verif_state = self.state_test.currentText()
        verif_notes = self.obs_test.toPlainText()

        if num_order == "" or verif_date == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos AL")
            dlg.setText("Rellene todos los campos. Solo el campo de observaciones puede quedar vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', verif_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos AL")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            row_list = []
            for row in range(self.tableOthers.rowCount()):
                item = self.tableOthers.cellWidget(row, 0)
                value_verif = self.tableOthers.item(row, 3).text()
                if item is not None and value_verif[:2] == 'AL':
                    if item.checkState() == QtCore.Qt.CheckState.Checked:
                        row_list.append(row)
            
            for row_value in row_list:
                num_order = self.tableOthers.item(row_value, 2).text()
                al_drawing = self.tableOthers.item(row_value, 3).text()
                commands_select_al_drawing = ("""
                            SELECT verif_al_drawing_date, id
                            FROM verification."al_drawing_verification"
                            WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                            AND
                            "drawing_number" = %s
                            """)
                commands_insert_al_drawing = ("""
                            UPDATE verification."al_drawing_verification"
                            SET "verif_al_drawing_date" = %s, "verif_al_drawing_state" = %s,"verif_al_drawing_obs" = %s
                            WHERE "id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_select_al_drawing, (num_order, al_drawing,))
                    results = cur.fetchall()

                    if len(results) != 0:
                        if results[0][0] is None:
                            cur.execute(commands_insert_al_drawing, (verif_date, verif_state, verif_notes, results[0][1], ))

                        else:
                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"Ya ha datos existentes para el plano {al_drawing}\n"
                                                "¿Deseas sobreescribirlos?\n")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()
                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                cur.execute(commands_insert_al_drawing, (verif_date, verif_state, verif_notes, results[0][1], ))

                                self.obs_test.setText('')

                            del dlg_yes_no, new_icon_yes_no

                    else:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos AL")
                        dlg.setText("No existe el plano AL " + al_drawing)
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Planos AL")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()

# Function to update data for M drawings
    def update_m_drawings(self):
        num_order = self.num_order.text()
        verif_date = self.date_test.text()
        verif_state = self.state_test.currentText()
        verif_notes = self.obs_test.toPlainText()

        if num_order == "" or verif_date == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos M")
            dlg.setText("Rellene todos los campos. Solo el campo de observaciones puede quedar vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', verif_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos M")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            row_list = []
            for row in range(self.tableOthers.rowCount()):
                item = self.tableOthers.cellWidget(row, 0)
                value_verif = self.tableOthers.item(row, 2).text()
                if item is not None and value_verif[:1] == 'M':
                    if item.checkState() == QtCore.Qt.CheckState.Checked:
                        row_list.append(row)
            
            for row_value in row_list:
                num_order = self.tableOthers.item(row_value, 1).text()
                m_drawing = self.tableOthers.item(row_value, 2).text()
                commands_select_m_drawing = ("""
                            SELECT verif_m_drawing_date, id
                            FROM verification."m_drawing_verification"
                            WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                            AND
                            "drawing_number" = %s
                            """)
                commands_insert_m_drawing = ("""
                            UPDATE verification."m_drawing_verification"
                            SET "verif_m_drawing_date" = %s, "verif_m_drawing_state" = %s,"verif_m_drawing_obs" = %s
                            WHERE "id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_select_m_drawing, (num_order, m_drawing,))
                    results = cur.fetchall()

                    if len(results) != 0:
                        if results[0][0] is None:
                            cur.execute(commands_insert_m_drawing, (verif_date, verif_state, verif_notes, results[0][1], ))
                            # dlg = QtWidgets.QMessageBox()
                            # new_icon = QtGui.QIcon()
                            # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            # dlg.setWindowIcon(new_icon)
                            # dlg.setWindowTitle("Planos M")
                            # dlg.setText("Datos insertados con éxito")
                            # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            # dlg.exec()
                            # del dlg, new_icon

                        else:
                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"Ya ha datos existentes para el plano {m_drawing}\n"
                                                "¿Deseas sobreescribirlos?\n")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()
                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                cur.execute(commands_insert_m_drawing, (verif_date, verif_state, verif_notes, results[0][1], ))

                                # dlg = QtWidgets.QMessageBox()
                                # new_icon = QtGui.QIcon()
                                # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                # dlg.setWindowIcon(new_icon)
                                # dlg.setWindowTitle("Planos M")
                                # dlg.setText("Datos insertados con éxito")
                                # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                # dlg.exec()
                                # del dlg, new_icon

                            del dlg_yes_no, new_icon_yes_no

                    else:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos M")
                        dlg.setText("No existe el plano M " + m_drawing)
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Planos M")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()

# Function to update data for OF drawings
    def update_of_drawings(self):
        num_order = self.num_order.text()
        verif_date = self.date_test.text()
        verif_state = self.state_test.currentText()
        verif_notes = self.obs_test.toPlainText()

        if num_order == "" or verif_date == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos OF")
            dlg.setText("Rellene todos los campos. Solo el campo de observaciones puede quedar vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', verif_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos OF")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            row_list = []
            for row in range(self.tableOthers.rowCount()):
                item = self.tableOthers.cellWidget(row, 0)
                value_verif = self.tableOthers.item(row, 2).text()
                if item is not None and value_verif[:2] == 'OF':
                    if item.checkState() == QtCore.Qt.CheckState.Checked:
                        row_list.append(row)
            
            for row_value in row_list:
                num_order = self.tableOthers.item(row_value, 1).text()
                of_drawing = self.tableOthers.item(row_value, 2).text()
                commands_select_of_drawing = ("""
                            SELECT verif_of_drawing_date, id
                            FROM verification."of_drawing_verification"
                            WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                            AND
                            "drawing_number" = %s
                            """)
                commands_insert_of_drawing = ("""
                            UPDATE verification."of_drawing_verification"
                            SET "verif_of_drawing_date" = %s, "verif_of_drawing_state" = %s,"verif_of_drawing_obs" = %s
                            WHERE "id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_select_of_drawing, (num_order, of_drawing,))
                    results = cur.fetchall()

                    if len(results) != 0:
                        if results[0][0] is None:
                            cur.execute(commands_insert_of_drawing, (verif_date, verif_state, verif_notes, results[0][1], ))
                            # dlg = QtWidgets.QMessageBox()
                            # new_icon = QtGui.QIcon()
                            # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            # dlg.setWindowIcon(new_icon)
                            # dlg.setWindowTitle("Planos OF")
                            # dlg.setText("Datos insertados con éxito")
                            # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            # dlg.exec()
                            # del dlg, new_icon

                        else:
                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"Ya ha datos existentes para el plano {of_drawing}\n"
                                                "¿Deseas sobreescribirlos?\n")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()
                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                cur.execute(commands_insert_of_drawing, (verif_date, verif_state, verif_notes, results[0][1], ))

                                # dlg = QtWidgets.QMessageBox()
                                # new_icon = QtGui.QIcon()
                                # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                # dlg.setWindowIcon(new_icon)
                                # dlg.setWindowTitle("Planos OF")
                                # dlg.setText("Datos insertados con éxito")
                                # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                # dlg.exec()
                                # del dlg, new_icon

                            del dlg_yes_no, new_icon_yes_no

                    else:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos OF")
                        dlg.setText("No existe el plano OF " + of_drawing)
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Planos OF")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()

# Function to update data for Dim. drawings
    def update_dim_drawings(self):
        num_order = self.num_order.text()
        verif_date = self.date_test.text()
        verif_state = self.state_test.currentText()
        verif_notes = self.obs_test.toPlainText()

        if num_order == "" or verif_date == "":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos Dim.")
            dlg.setText("Rellene todos los campos. Solo el campo de observaciones puede quedar vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        elif not re.match(r'^\d{2}[/\-]\d{2}[/\-]\d{4}$', verif_date):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación Planos Dim.")
            dlg.setText("La fecha debe tener formato dd/mm/yyyy o dd-mm-yyyy")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            row_list = []
            for row in range(self.tableOthers.rowCount()):
                item = self.tableOthers.cellWidget(row, 0)
                value_verif = self.tableOthers.item(row, 2).text()
                if item is not None and ('AL' not in value_verif and ('M' not in value_verif and ('OF' not in value_verif and ('PPI' not in value_verif and 'EXP' not in value_verif)))):
                    if item.checkState() == QtCore.Qt.CheckState.Checked:
                        row_list.append(row)

            for row_value in row_list:
                num_order = self.tableOthers.item(row_value, 1).text()
                dim_drawing = self.tableOthers.item(row_value, 2).text()
                commands_select_dim_drawing = ("""
                            SELECT verif_dim_drawing_date, id
                            FROM verification."dim_drawing_verification"
                            WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                            AND
                            "drawing_number" = %s
                            """)
                commands_insert_dim_drawing = ("""
                            UPDATE verification."dim_drawing_verification"
                            SET "verif_dim_drawing_date" = %s, "verif_dim_drawing_state" = %s,"verif_dim_drawing_obs" = %s
                            WHERE "id" = %s
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(commands_select_dim_drawing, (num_order, dim_drawing,))
                    results = cur.fetchall()

                    if len(results) != 0:
                        if results[0][0] is None:
                            cur.execute(commands_insert_dim_drawing, (verif_date, verif_state, verif_notes, results[0][1], ))
                            # dlg = QtWidgets.QMessageBox()
                            # new_icon = QtGui.QIcon()
                            # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            # dlg.setWindowIcon(new_icon)
                            # dlg.setWindowTitle("Planos Dim.")
                            # dlg.setText("Datos insertados con éxito")
                            # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                            # dlg.exec()
                            # del dlg, new_icon

                        else:
                            dlg_yes_no = QtWidgets.QMessageBox()
                            new_icon_yes_no = QtGui.QIcon()
                            new_icon_yes_no.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_yes_no.setWindowIcon(new_icon_yes_no)
                            dlg_yes_no.setWindowTitle("ERP EIPSA")
                            dlg_yes_no.setText(f"Ya ha datos existentes para el plano {dim_drawing}\n"
                                                "¿Deseas sobreescribirlos?\n")
                            dlg_yes_no.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_yes_no.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No)
                            result = dlg_yes_no.exec()
                            if result == QtWidgets.QMessageBox.StandardButton.Yes:
                                cur.execute(commands_insert_dim_drawing, (verif_date, verif_state, verif_notes, results[0][1], ))

                                # dlg = QtWidgets.QMessageBox()
                                # new_icon = QtGui.QIcon()
                                # new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                # dlg.setWindowIcon(new_icon)
                                # dlg.setWindowTitle("Planos Dim.")
                                # dlg.setText("Datos insertados con éxito")
                                # dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                # dlg.exec()
                                # del dlg, new_icon

                            del dlg_yes_no, new_icon_yes_no

                    else:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Planos Dim.")
                        dlg.setText("No existe el plano dimensional " + dim_drawing)
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Planos Dim.")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon

                finally:
                    if conn is not None:
                        conn.close()

# Function to open window for images
    def insert_images(self, numorder):
        if numorder == '':
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación")
            dlg.setText("Introduce un número de pedido")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg,new_icon
        else:
            if numorder[:2] == 'AL':
                self.picswarehouse_window=QtWidgets.QMainWindow()
                self.ui=Ui_Verif_Pics_Warehouse_Window(numorder, self.username)
                self.ui.setupUi(self.picswarehouse_window)
                self.picswarehouse_window.showMaximized()
            else:
                self.picstags_window=QtWidgets.QMainWindow()
                self.ui=Ui_Verif_Pics_InsertTag_Window(numorder, self.username)
                self.ui.setupUi(self.picstags_window)
                self.picstags_window.showMaximized()

# Function when clicking on table tag header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableTags.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableTags.horizontalHeader().height()
        popup_pos = self.tableTags.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableTags.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function when clicking on table others header
    def on_header_section_clicked_others(self, logical_index):
        header_pos = self.tableOthers.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableOthers.horizontalHeader().height()
        popup_pos = self.tableOthers.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableOthers.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to set fixed values
    def load_values(self):
        actual_date=date.today()
        actual_date=actual_date.strftime("%d/%m/%Y")
        self.date_test.setText(actual_date)
        self.obs_test.setText("")

        query_states = ("""
                            SELECT "state_verif"
                            FROM verification.states_verification
                            ORDER BY "id"
                            """)
        query_manometers = ("""
                            SELECT "manometer"
                            FROM verification.manometers
                            ORDER BY "id"
                            """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_states)
            results=cur.fetchall()
            list_states = [x[0] for x in results]

            cur.execute(query_manometers)
            results_manometers=cur.fetchall()
            list_manometers = [x[0] for x in results_manometers]
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.state_test.setItemDelegate(ColorDelegate())
        self.state_test.addItems(list_states)

        self.manometer1.addItems(list_manometers)
        self.manometer2.addItems([''] + list_manometers)

# Function to events for keys
    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key.Key_F5:
            self.load_values()

# Function to change combobox color when change value
    def change_text_color(self, text):
        colors_dict = {}
        conn = None
        try:
            # read the connection parameters
            params = config()
            # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
            # execution of commands
            commands_colors = "SELECT state_verif, r_channel, g_channel, b_channel FROM verification.states_verification"
            cur.execute(commands_colors)
            results = cur.fetchall()

            for result in results:
                state, red, green, blue = result
                colors_dict[state] = [red, green, blue]

            # close communication with the PostgreSQL database server
            cur.close()
            # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            # Handle the error appropriately
            pass
        finally:
            if conn is not None:
                conn.close()

        if text in colors_dict:
            text_color = colors_dict[text]
        else:
            text_color = [255, 255, 255]

        self.state_test.setStyleSheet(f"color: rgb({text_color[0]}, {text_color[1]}, {text_color[2]})")

# Function to count cells of table tags
    def countSelectedCells_tags(self):
        if len(self.tableTags.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
            self.label_CountItems_tags.setText("")
            self.label_CountValue_tags.setText("")

            count_value = len([ix for ix in self.tableTags.selectedIndexes() if ix.data() != ""])

            if count_value > 0:
                self.label_CountItems_tags.setText("Recuento:")
                self.label_CountValue_tags.setText(str(count_value))
        else:
            self.label_CountItems_tags.setText("")
            self.label_CountValue_tags.setText("")

# Function to count cells of table others
    def countSelectedCells_others(self):
        if len(self.tableOthers.selectedIndexes()) > 1:
            locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')
            self.label_CountItems_others.setText("")

            count_value = len([ix for ix in self.tableOthers.selectedIndexes() if ix.data() != ""])

            if count_value > 0:
                self.label_CountItems_others.setText("Recuento: " + str(count_value))
        else:
            self.label_CountItems_others.setText("")

# Function to load file
    def item_double_clicked(self, item):
        sender = self.sender()
        if sender == self.tableTags:
            header_item = self.tableTags.horizontalHeaderItem(item.column())
            header_text = header_item.text()
        else:
            header_text = ''

        if header_text in ['Fotos', 'Foto', 'PDF Plano']:
            item_id = self.tableTags.item(item.row(), 1).text()

            if header_text == 'Fotos':
                query_path =f"SELECT tag_images FROM {self.table_name} WHERE {self.column_id} = {item_id}"
            elif header_text == 'Foto':
                query_path =f"""SELECT image FROM verification."al_drawing_verification" WHERE id = {item_id}"""
            else:
                query_path =f"""SELECT document FROM verification."al_drawing_verification" WHERE id = {item_id}"""

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(query_path)
                results=cur.fetchall()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                file_path = os.path.normpath(results[0][0])
                os.startfile(file_path)

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

        elif header_text == 'Tipo Equipo':
            cell_content = item.text()
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Verificación")
            dlg.setText(cell_content)
            dlg.exec()
            del dlg, new_icon

        elif header_text == 'Fecha Dim.':
            if item.text() != '':
                item_id = self.tableTags.item(item.row(), 1).text()
                query =f"SELECT TO_CHAR(final_verif_dim_date, 'DD/MM/YYYY'), final_verif_dim_obs FROM {self.table_name} WHERE {self.column_id} = {item_id}"

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Plano Dimensional")
                    dlg.setText("Fecha: " + results[0][0] + "\n"
                                "Observaciones: " + results[0][1])
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

        elif header_text == 'Fecha OF':
            if item.text() != '':
                item_id = self.tableTags.item(item.row(), 1).text()
                query =f"SELECT TO_CHAR(final_verif_of_eq_date, 'DD/MM/YYYY'), final_verif_of_eq_obs FROM {self.table_name} WHERE {self.column_id} = {item_id}"

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Plano OF")
                    dlg.setText("Fecha: " + results[0][0] + "\n"
                                "Observaciones: " + results[0][1])
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

        elif header_text == 'Fecha OF Sensor':
            if item.text() != '':
                item_id = self.tableTags.item(item.row(), 1).text()
                query =f"SELECT TO_CHAR(final_verif_of_sensor_date, 'DD/MM/YYYY'), final_verif_of_sensor_obs FROM {self.table_name} WHERE {self.column_id} = {item_id}"

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Plano OF Sensor")
                    dlg.setText("Fecha: " + results[0][0] + "\n"
                                "Observaciones: " + results[0][1])
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

        elif header_text == 'Fecha PH1':
            if item.text() != '':
                item_id = self.tableTags.item(item.row(), 1).text()
                query =f"SELECT TO_CHAR(ph1_date, 'DD/MM/YYYY'), ph1_manometer, ph1_pressure, ph1_obs FROM {self.table_name} WHERE {self.column_id} = {item_id}"

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Prueba Hidrostática 1")
                    dlg.setText("Fecha: " + results[0][0] + "\n"
                                "Manómetro: " + results[0][1] + "\n"
                                "Presión: " + results[0][2] + "\n"
                                "Observaciones: " + results[0][3])
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

        elif header_text == 'Fecha PH2':
            if item.text() != '':
                item_id = self.tableTags.item(item.row(), 1).text()
                query =f"SELECT TO_CHAR(ph2_date, 'DD/MM/YYYY'), ph2_manometer, ph2_pressure, ph2_obs FROM {self.table_name} WHERE {self.column_id} = {item_id}"

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Prueba Hidrostática 2")
                    dlg.setText("Fecha: " + results[0][0] + "\n"
                                "Manómetro: " + results[0][1] + "\n"
                                "Presión: " + results[0][2] + "\n"
                                "Observaciones: " + results[0][3])
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

        elif header_text == 'Fecha LP':
            if item.text() != '':
                item_id = self.tableTags.item(item.row(), 1).text()
                query =f"SELECT TO_CHAR(lp_date, 'DD/MM/YYYY'), lp_hn_liq1, lp_hn_liq2, lp_hn_liq3, lp_obs FROM {self.table_name} WHERE {self.column_id} = {item_id}"

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Líquidos Penetrantes")
                    dlg.setText("Fecha: " + results[0][0] + "\n"
                                "9PR5: " + results[0][1] + "\n"
                                "9D1B: " + results[0][2] + "\n"
                                "996PB: " + results[0][3] + "\n"
                                "Observaciones: " + results[0][4])
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

        elif header_text == 'Fecha Almacén':
            if item.text() != '':
                item_id = self.tableTags.item(item.row(), 1).text()
                query =f"SELECT TO_CHAR(warehouse_date, 'DD/MM/YYYY'), warehouse_state, warehouse_obs FROM verification.al_drawing_verification WHERE id = {item_id}"

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Planos AL")
                    dlg.setText("Fecha: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                "Estado: " + (results[0][1] if results[0][1] is not None else "") + "\n"
                                "Observaciones: " + (results[0][2] if results[0][2] is not None else ""))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

        elif header_text == 'Fecha Verif.':
            if item.text() != '':
                item_id = self.tableTags.item(item.row(), 1).text()
                query =f"SELECT TO_CHAR(verif_al_drawing_date, 'DD/MM/YYYY'), verif_al_drawing_state, verif_al_drawing_obs FROM verification.al_drawing_verification WHERE id = {item_id}"

                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    cur.execute(query)
                    results=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Planos AL")
                    dlg.setText("Fecha: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                                "Estado: " + (results[0][1] if results[0][1] is not None else "") + "\n"
                                "Observaciones: " + (results[0][2] if results[0][2] is not None else ""))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()


        if item.column() == (self.tableOthers.columnCount() - 2) and self.num_order.text().upper()[:3] == 'AL-':
            item_id = self.tableOthers.item(item.row(), 1).text()

            query_path = "SELECT image FROM verification.al_drawing_verification WHERE id = %s"

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(query_path, (item_id,))
                results=cur.fetchall()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                file_path = os.path.normpath(results[0][0])
                os.startfile(file_path)

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

        elif item.column() == (self.tableOthers.columnCount() - 1) and self.num_order.text().upper()[:3] == 'AL-':
            item_id = self.tableOthers.item(item.row(), 1).text()

            query_path = "SELECT document FROM verification.al_drawing_verification WHERE id = %s"

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(query_path, (item_id,))
                results=cur.fetchall()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                file_path = os.path.normpath(results[0][0])
                os.startfile(file_path)

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

        elif item.column() == 2 and item.text() == 'PPI':
            self.num_order_value = self.num_order.text().upper()
            order_year = str(datetime.now().year)[:2] + self.num_order_value [self.num_order_value .rfind("/") - 2:self.num_order_value .rfind("/")]
            
            if self.num_order_value[:2] == 'PA':
                num_order = self.num_order_value
                path = "//srvad01/base de datos de pedidos/Año " + order_year + "/" + order_year + " Pedidos Almacen"
                for folder in os.listdir(path):
                    if num_order.replace("/", "-") in folder:
                        folder_path = "//srvad01/base de datos de pedidos/Año " + order_year + "/" + order_year + " Pedidos Almacen/" + folder + "/"
                        for root, dirs, files in os.walk(folder_path):
                            for filename in files:
                                if fnmatch.fnmatch(filename, '*-PPI*'):
                                    file_path = os.path.join(root, filename)
                                    file_path = os.path.normpath(file_path)
                                    os.startfile(file_path)

            elif self.num_order_value[:2] == 'P-':
                num_order = self.num_order_value[:8]
                path = "//srvad01/base de datos de pedidos/Año " + order_year + "/" + order_year + " Pedidos"
                for folder in os.listdir(path):
                    if num_order.replace("/", "-") in folder:
                        folder_path = "//srvad01/base de datos de pedidos/Año " + order_year + "/" + order_year + " Pedidos/" + folder + "/"
                        for root, dirs, files in os.walk(folder_path):
                            for filename in files:
                                if fnmatch.fnmatch(filename, '*-PPI*'):
                                    file_path = os.path.join(root, filename)
                                    file_path = os.path.normpath(file_path)
                                    os.startfile(file_path)

        elif item.column() == 2 and item.text()[:2] == 'M-':
            num_order = self.tableOthers.item(item.row(), 1).text()
            m_drawing = self.tableOthers.item(item.row(), 2).text()
            commands_select_m_drawing = ("""
                        SELECT notes, drawing_description
                        FROM verification."m_drawing_verification"
                        WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                        AND
                        "drawing_number" = %s
                        """)

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_select_m_drawing, (num_order, m_drawing,))
                results = cur.fetchall()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Planos M")
                dlg.setText("Pedido: " + num_order + "\n"
                            "Plano: " + m_drawing + "\n"
                            "Notas: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                            "Descripción: " + (results[0][1] if results[0][1] is not None else ""))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Planos M")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon

            finally:
                if conn is not None:
                    conn.close()

        elif item.column() == 2 and item.text()[:3] == 'OF-':
            num_order = self.tableOthers.item(item.row(), 1).text()
            of_drawing = self.tableOthers.item(item.row(), 2).text()
            commands_select_of_drawing = ("""
                        SELECT notes, drawing_description
                        FROM verification."workshop_of_drawings"
                        WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                        AND
                        "drawing_number" = %s
                        """)

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_select_of_drawing, (num_order, of_drawing,))
                results = cur.fetchall()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Planos OF")
                dlg.setText("Pedido: " + num_order + "\n"
                            "Plano: " + of_drawing + "\n"
                            "Notas: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                            "Descripción: " + (results[0][1] if results[0][1] is not None else ""))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Planos OF")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon

            finally:
                if conn is not None:
                    conn.close()

        elif item.column() == 2 and item.text() not in ['PPI', 'EXP']:
            num_order = self.tableOthers.item(item.row(), 1).text()
            dim_drawing = self.tableOthers.item(item.row(), 2).text()
            commands_select_dim_drawing = ("""
                        SELECT notes, drawing_description
                        FROM verification."workshop_dim_drawings"
                        WHERE "num_order" LIKE UPPER ('%%'||%s||'%%')
                        AND
                        "drawing_number" = %s
                        """)

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(commands_select_dim_drawing, (num_order, dim_drawing,))
                results = cur.fetchall()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Planos Dim.")
                dlg.setText("Pedido: " + num_order + "\n"
                            "Plano: " + dim_drawing + "\n"
                            "Notas: " + (results[0][0] if results[0][0] is not None else "") + "\n"
                            "Descripción: " + (results[0][1] if results[0][1] is not None else ""))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Planos Dim.")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon

            finally:
                if conn is not None:
                    conn.close()








if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    VerificationInsert_Window = Ui_VerificationInsert_Window('m.gil')
    VerificationInsert_Window.showMaximized()
    sys.exit(app.exec())