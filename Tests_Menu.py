# Form implementation generated from reading ui file 'EditOrder_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6 import QtCore, QtGui, QtWidgets
import psycopg2
from config import config
import os
import datetime

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_Tests_Menu(QtWidgets.QMainWindow):
    def __init__(self, username):
        super().__init__()
        self.username = username
        self.setupUi(self)

    def setupUi(self, Tests_Menu):
        Tests_Menu.setObjectName("Tests_Menu")
        Tests_Menu.resize(680, 425)
        Tests_Menu.setMinimumSize(QtCore.QSize(280, 425))
        Tests_Menu.setMaximumSize(QtCore.QSize(280, 425))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Tests_Menu.setWindowIcon(icon)
        Tests_Menu.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .4em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=Tests_Menu)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_PMI = QtWidgets.QPushButton(parent=self.frame)
        self.Button_PMI.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_PMI.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_PMI.setFont(font)
        self.Button_PMI.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/PMI.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_PMI.setIcon(icon8)
        self.Button_PMI.setIconSize(QtCore.QSize(40, 40))
        self.Button_PMI.setObjectName("Button_PMI")
        self.Button_PMI.setText("   PMI")
        self.verticalLayout_3.addWidget(self.Button_PMI)
        self.Button_XRay = QtWidgets.QPushButton(parent=self.frame)
        self.Button_XRay.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_XRay.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_XRay.setFont(font)
        self.Button_XRay.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/X-Ray.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_XRay.setIcon(icon10)
        self.Button_XRay.setIconSize(QtCore.QSize(40, 40))
        self.Button_XRay.setObjectName("Button_XRay")
        self.Button_XRay.setText("   Radiografías")
        self.verticalLayout_3.addWidget(self.Button_XRay)
        self.Button_ultrasound = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ultrasound.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_ultrasound.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_ultrasound.setFont(font)
        self.Button_ultrasound.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/ultrasound.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ultrasound.setIcon(icon11)
        self.Button_ultrasound.setIconSize(QtCore.QSize(40, 40))
        self.Button_ultrasound.setObjectName("Button_ultrasound")
        self.Button_ultrasound.setText("   Ultrasonidos")
        self.verticalLayout_3.addWidget(self.Button_ultrasound)
        self.Button_query = QtWidgets.QPushButton(parent=self.frame)
        self.Button_query.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_query.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_query.setFont(font)
        self.Button_query.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Caliber_White.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_query.setIcon(icon12)
        self.Button_query.setIconSize(QtCore.QSize(40, 40))
        self.Button_query.setObjectName("Button_query")
        self.Button_query.setText("   Pruebas")
        self.verticalLayout_3.addWidget(self.Button_query)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_Cancel.sizePolicy().hasHeightForWidth())
        self.Button_Cancel.setSizePolicy(sizePolicy)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(90, 30))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(90, 30))
        self.Button_Cancel.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Cancel.setStyleSheet("QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}"
)
        self.Button_Cancel.setAutoDefault(True)
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addLayout(self.verticalLayout_3, 0, 0, 1, 2)
        self.gridLayout_2.addWidget(self.Button_Cancel, 1, 1, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Tests_Menu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Tests_Menu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 680, 22))
        self.menubar.setObjectName("menubar")
        Tests_Menu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Tests_Menu)
        self.statusbar.setObjectName("statusbar")
        Tests_Menu.setStatusBar(self.statusbar)
        Tests_Menu.setWindowFlags(QtCore.Qt.WindowType.WindowMinimizeButtonHint)

        self.retranslateUi(Tests_Menu)
        self.Button_Cancel.clicked.connect(Tests_Menu.close) # type: ignore
        self.Button_PMI.clicked.connect(self.insert_pmi)
        self.Button_ultrasound.clicked.connect(self.insert_ultrasound)
        self.Button_XRay.clicked.connect(self.insert_xray)
        self.Button_query.clicked.connect(self.query_test)

        QtCore.QMetaObject.connectSlotsByName(Tests_Menu)


    def retranslateUi(self, Tests_Menu):
        _translate = QtCore.QCoreApplication.translate
        Tests_Menu.setWindowTitle(_translate("Tests_Menu", "Pruebas"))
        self.Button_Cancel.setText(_translate("Tests_Menu", "Cancelar"))

# Function to show window to insert PMI test
    def insert_pmi(self):
        from TestPmiInsert_Window import Ui_PmiInsert_Window
        self.Pmiinsert_window=Ui_PmiInsert_Window(self.username)
        self.Pmiinsert_window.show()

# Function to show dialog to insert x-ray test
    def insert_xray(self):
        dlg1 = QtWidgets.QInputDialog()
        new_icon1 = QtGui.QIcon()
        new_icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg1.setWindowIcon(new_icon1)
        dlg1.setWindowTitle('Radiografías')
        dlg1.setLabelText('Introduce un pedido:')

        dlg3 = QtWidgets.QInputDialog()
        new_icon3 = QtGui.QIcon()
        new_icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg3.setWindowIcon(new_icon3)
        dlg3.setWindowTitle('Radiografías')
        dlg3.setLabelText('Introduce una fecha:')

        while True:
            clickedButton = dlg1.exec()
            if clickedButton == 1:
                order = dlg1.textValue()
                if order != '':
                    query_material = ("""
                            SELECT orders."num_order",orders."num_offer",product_type."variable"
                            FROM offers
                            INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                            INNER JOIN product_type ON (offers."material"=product_type."material")
                            WHERE (UPPER(orders."num_order") = UPPER(%s)
                            )
                            ORDER BY orders."num_order"
                            """)
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_material,(order,))
                        results=cur.fetchall()
                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

                    if len(results) == 0:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("El número de pedido no existe")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                    else:
                        while True:
                            clickedButton3 = dlg3.exec()
                            if clickedButton3 == 1:
                                date_test = dlg3.textValue()
                                if date_test != '' and self.is_valid_date(date_test):
                                    conn = None
                                    try:
                                    # read the connection parameters
                                        params = config()
                                    # connect to the PostgreSQL server
                                        conn = psycopg2.connect(**params)
                                        cur = conn.cursor()
                                    # execution of commands
                                        commands_inserttest = ("""INSERT INTO verification.test_others (num_order, test_type, test_date) 
                                                        VALUES (%s, %s, %s)""")
                                        cur.execute(commands_inserttest, (order.upper(), 'RADIOGRAFIAS', date_test,))

                                    # close communication with the PostgreSQL database server
                                        cur.close()
                                    # commit the changes
                                        conn.commit()

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("Radiografías")
                                        dlg.setText("Datos insertados con éxito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg,new_icon

                                    except (Exception, psycopg2.DatabaseError) as error:
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                    + str(error))
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                        dlg.exec()
                                        del dlg, new_icon
                                    finally:
                                        if conn is not None:
                                            conn.close()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle("Radiografías")
                                dlg_error.setText("La fecha no puede estar vacía o no es un valor válido (dd/mm/yyyy o dd-mm-yyyy)")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Ultrasonidos")
                dlg_error.setText("El pedido no puede estar vacío. Introduce un valor válido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to show dialog to insert ultrasound test
    def insert_ultrasound(self):
        dlg1 = QtWidgets.QInputDialog()
        new_icon1 = QtGui.QIcon()
        new_icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg1.setWindowIcon(new_icon1)
        dlg1.setWindowTitle('Ultrasonidos')
        dlg1.setLabelText('Introduce un pedido:')

        dlg3 = QtWidgets.QInputDialog()
        new_icon3 = QtGui.QIcon()
        new_icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg3.setWindowIcon(new_icon3)
        dlg3.setWindowTitle('Ultrasonidos')
        dlg3.setLabelText('Introduce una fecha:')

        while True:
            clickedButton = dlg1.exec()
            if clickedButton == 1:
                order = dlg1.textValue()
                if order != '':
                    query_material = ("""
                            SELECT orders."num_order",orders."num_offer",product_type."variable"
                            FROM offers
                            INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                            INNER JOIN product_type ON (offers."material"=product_type."material")
                            WHERE (UPPER(orders."num_order") = UPPER(%s)
                            )
                            ORDER BY orders."num_order"
                            """)
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_material,(order,))
                        results=cur.fetchall()
                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

                    if len(results) == 0:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("El número de pedido no existe")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                    else:
                        while True:
                            clickedButton3 = dlg3.exec()
                            if clickedButton3 == 1:
                                date_test = dlg3.textValue()
                                if date_test != '' and self.is_valid_date(date_test):
                                    conn = None
                                    try:
                                    # read the connection parameters
                                        params = config()
                                    # connect to the PostgreSQL server
                                        conn = psycopg2.connect(**params)
                                        cur = conn.cursor()
                                    # execution of commands
                                        commands_inserttest = ("""INSERT INTO verification.test_others (num_order, test_type, test_date) 
                                                        VALUES (%s, %s, %s)""")
                                        cur.execute(commands_inserttest, (order.upper(), 'ULTRASONIDOS', date_test,))

                                    # close communication with the PostgreSQL database server
                                        cur.close()
                                    # commit the changes
                                        conn.commit()

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("Ultrasonidos")
                                        dlg.setText("Datos insertados con éxito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg,new_icon

                                    except (Exception, psycopg2.DatabaseError) as error:
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                    + str(error))
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                        dlg.exec()
                                        del dlg, new_icon
                                    finally:
                                        if conn is not None:
                                            conn.close()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle("Ultrasonidos")
                                dlg_error.setText("La fecha no puede estar vacía o no es un valor válido (dd/mm/yyyy o dd-mm-yyyy)")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Ultrasonidos")
                dlg_error.setText("El pedido no puede estar vacío. Introduce un valor válido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to show window with all tests
    def query_test(self):
        from TestAllQuery_Window import Ui_TestAllQuery_Window
        self.testquery_window=QtWidgets.QMainWindow()
        self.ui=Ui_TestAllQuery_Window()
        self.ui.setupUi(self.testquery_window)
        self.testquery_window.showMaximized()

    # Function to check date format
    def is_valid_date(self, date_str):
        formats = ['%d/%m/%Y', '%d-%m-%Y']
        for fmt in formats:
            try:
                datetime.datetime.strptime(date_str, fmt)
                return True
            except ValueError:
                pass
            
        return False






if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Tests_Menu = QtWidgets.QMainWindow()
    ui = Ui_Tests_Menu('j.valtierra')
    ui.setupUi(Tests_Menu)
    Tests_Menu.show()
    sys.exit(app.exec())
