# Form implementation generated from reading ui file 'EditOrder_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6 import QtCore, QtGui, QtWidgets
import psycopg2
from config import config
import os, io
import datetime
from fpdf import FPDF
from PDF_Viewer import PDF_Viewer
import pandas as pd
from pathlib import Path
from pypdf import PdfReader, PdfWriter

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"

class CustomPDF(FPDF):
    """
    Custom PDF class extending FPDF for advanced text handling.

    This class provides additional functionalities for creating PDF documents,
    specifically for managing multi-line text with fixed height.

    Methods:
        fixed_height_multicell(w, total_h, txt, align_mc, border='LR', fill=False):
            Outputs text in a multi-cell format with a fixed total height.
    """
    def fixed_height_multicell(self, w, total_h, txt, align_mc, border, fill=False):
        """
        Creates a multi-line cell with a fixed total height, dividing text into lines.

        Parameters:
            w (float): The width of the cell.
            total_h (float): The total height of the cell.
            txt (str): The text to be placed in the cell.
            align_mc (str): The alignment of the text.
            border (str, optional): Border settings for the cell. Defaults to ''.
            fill (bool, optional): Whether to fill the cell with color. Defaults to False.
        """
        words = txt.split() # Divide text in words
        lines = []
        line = ''
        for word in words:
            if self.get_string_width(line + word + ' ') > w - 0.5:
                lines.append(line) # Add line to line list and starts a new one
                line = word + ' '
            else:
                line += word + ' ' # Add word to actual line
        lines.append(line) # Add last line to line list
        
        line_height = total_h / len(lines) # Calculate height of each line to get a total height = total_h

        x, y = self.get_x(), self.get_y() # Save actual position

        for i, line in enumerate(lines):
            # Add the bottom border only to the last line
            if i == len(lines) - 1:
                current_border = border  # Add bottom border to the last line
            else:
                current_border = border
            # Print each line with the calculated height
            self.multi_cell(w, line_height, line, current_border, align_mc, fill)
            self.set_x(x)

        self.set_xy(x, y + total_h)

    def calculate_min_height(self, w, texts):
        """
        Calculate the minimum height needed to fit multiple texts in a fixed-width cell based on the longest text.
        
        Parameters:
            w (float): The width of the cell.
            texts (list): A list of 5 texts (strings) to fit within the cell.

        Returns:
            float: The minimum height required based on the longest text in terms of line count,
                with a minimum of 0.5.
        """
        max_lines = 0

        for txt in texts:
            words = txt.split()
            line = ''
            lines = 0

            # Calculate the number of lines needed for the current text
            for word in words:
                if self.get_string_width(line + word + ' ') > w - 0.5:
                    lines += 1  # Start a new line
                    line = word + ' '
                else:
                    line += word + ' '

            lines += 1  # Account for the last line
            
            # Track the maximum number of lines
            if lines > max_lines:
                max_lines = lines

        # Calculate the total height required for the longest text
        total_height = max_lines * 0.25

        # Ensure the height is at least 0.5
        return max(0.5, total_height)

class Ui_Tests_Menu(QtWidgets.QMainWindow):
    """
    UI class for the Test Menu window.
    """
    def __init__(self, username):
        """
        Initializes the Ui_Tests_Menu with the specified username.

        Args:
            username (str): username associated with the window.
        """
        super().__init__()
        self.username = username
        self.pdf_viewer = PDF_Viewer()
        self.setupUi(self)

    def setupUi(self, Tests_Menu):
        """
        Sets up the user interface for the Tests_Menu.

        Args:
            Tests_Menu (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        Tests_Menu.setObjectName("Tests_Menu")
        Tests_Menu.resize(680, 425)
        Tests_Menu.setMinimumSize(QtCore.QSize(280, 475))
        Tests_Menu.setMaximumSize(QtCore.QSize(280, 475))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Tests_Menu.setWindowIcon(icon)
        Tests_Menu.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .4em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=Tests_Menu)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_PMI = QtWidgets.QPushButton(parent=self.frame)
        self.Button_PMI.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_PMI.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_PMI.setFont(font)
        self.Button_PMI.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/PMI.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_PMI.setIcon(icon8)
        self.Button_PMI.setIconSize(QtCore.QSize(40, 40))
        self.Button_PMI.setObjectName("Button_PMI")
        self.Button_PMI.setText("   PMI")
        self.verticalLayout_3.addWidget(self.Button_PMI)
        self.Button_XRay = QtWidgets.QPushButton(parent=self.frame)
        self.Button_XRay.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_XRay.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_XRay.setFont(font)
        self.Button_XRay.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/X-Ray.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_XRay.setIcon(icon10)
        self.Button_XRay.setIconSize(QtCore.QSize(40, 40))
        self.Button_XRay.setObjectName("Button_XRay")
        self.Button_XRay.setText("   Radiograf√≠as")
        self.verticalLayout_3.addWidget(self.Button_XRay)
        self.Button_ultrasound = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ultrasound.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_ultrasound.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_ultrasound.setFont(font)
        self.Button_ultrasound.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/ultrasound.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ultrasound.setIcon(icon11)
        self.Button_ultrasound.setIconSize(QtCore.QSize(40, 40))
        self.Button_ultrasound.setObjectName("Button_ultrasound")
        self.Button_ultrasound.setText("   Ultrasonidos")
        self.verticalLayout_3.addWidget(self.Button_ultrasound)
        self.Button_tests = QtWidgets.QPushButton(parent=self.frame)
        self.Button_tests.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_tests.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_tests.setFont(font)
        self.Button_tests.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Test_Menu_White.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_tests.setIcon(icon12)
        self.Button_tests.setIconSize(QtCore.QSize(40, 40))
        self.Button_tests.setObjectName("Button_tests")
        self.Button_tests.setText("   Pruebas")
        self.verticalLayout_3.addWidget(self.Button_tests)

        self.Button_calibration_sheet = QtWidgets.QPushButton(parent=self.frame)
        self.Button_calibration_sheet.setMinimumSize(QtCore.QSize(200, 50))
        # self.Button_tests.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_calibration_sheet.setFont(font)
        self.Button_calibration_sheet.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Caliber_White.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_calibration_sheet.setIcon(icon13)
        self.Button_calibration_sheet.setIconSize(QtCore.QSize(40, 40))
        self.Button_calibration_sheet.setObjectName("Button_calibration_sheet")
        self.Button_calibration_sheet.setText("   Ficha Calibraci√≥n")
        self.verticalLayout_3.addWidget(self.Button_calibration_sheet)

        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_Cancel.sizePolicy().hasHeightForWidth())
        self.Button_Cancel.setSizePolicy(sizePolicy)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(90, 30))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(90, 30))
        self.Button_Cancel.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Cancel.setStyleSheet("QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}"
)
        self.Button_Cancel.setAutoDefault(True)
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addLayout(self.verticalLayout_3, 0, 0, 1, 2)
        self.gridLayout_2.addWidget(self.Button_Cancel, 1, 1, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Tests_Menu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Tests_Menu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 680, 22))
        self.menubar.setObjectName("menubar")
        Tests_Menu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Tests_Menu)
        self.statusbar.setObjectName("statusbar")
        Tests_Menu.setStatusBar(self.statusbar)
        Tests_Menu.setWindowFlags(QtCore.Qt.WindowType.WindowMinimizeButtonHint)

        self.retranslateUi(Tests_Menu)
        self.Button_Cancel.clicked.connect(Tests_Menu.close) # type: ignore
        self.Button_PMI.clicked.connect(self.insert_pmi)
        self.Button_ultrasound.clicked.connect(self.insert_ultrasound)
        self.Button_XRay.clicked.connect(self.insert_xray)
        self.Button_tests.clicked.connect(self.query_test)
        self.Button_calibration_sheet.clicked.connect(self.calibration_sheet)

        QtCore.QMetaObject.connectSlotsByName(Tests_Menu)


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, Tests_Menu):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        Tests_Menu.setWindowTitle(_translate("Tests_Menu", "Pruebas"))
        self.Button_Cancel.setText(_translate("Tests_Menu", "Cancelar"))

# Function to show window to insert PMI test
    def insert_pmi(self):
        """
        Opens the 'insert_pmi' window. Sets up the UI for the user.
        """
        from TestPmiInsert_Window import Ui_PmiInsert_Window
        self.Pmiinsert_window=Ui_PmiInsert_Window(self.username)
        self.Pmiinsert_window.show()

# Function to show dialog to insert x-ray test
    def insert_xray(self):
        """
        Handles the insertion process for xray test. Prompts the user 
        to enter an order number and a date, then updates the database with the provided 
        information if valid input is received.
        """
        dlg1 = QtWidgets.QInputDialog()
        new_icon1 = QtGui.QIcon()
        new_icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg1.setWindowIcon(new_icon1)
        dlg1.setWindowTitle('Radiograf√≠as')
        dlg1.setLabelText('Introduce un pedido:')

        dlg3 = QtWidgets.QInputDialog()
        new_icon3 = QtGui.QIcon()
        new_icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg3.setWindowIcon(new_icon3)
        dlg3.setWindowTitle('Radiograf√≠as')
        dlg3.setLabelText('Introduce una fecha:')

        while True:
            clickedButton = dlg1.exec()
            if clickedButton == 1:
                order = dlg1.textValue()
                if order != '':
                    query_material = ("""
                            SELECT orders."num_order",orders."num_offer",product_type."variable"
                            FROM offers
                            INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                            INNER JOIN product_type ON (offers."material"=product_type."material")
                            WHERE (UPPER(orders."num_order") = UPPER(%s)
                            )
                            ORDER BY orders."num_order"
                            """)
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_material,(order,))
                        results=cur.fetchall()
                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

                    if len(results) == 0:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("El n√∫mero de pedido no existe")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                    else:
                        while True:
                            clickedButton3 = dlg3.exec()
                            if clickedButton3 == 1:
                                date_test = dlg3.textValue()
                                if date_test != '' and self.is_valid_date(date_test):
                                    conn = None
                                    try:
                                    # read the connection parameters
                                        params = config()
                                    # connect to the PostgreSQL server
                                        conn = psycopg2.connect(**params)
                                        cur = conn.cursor()
                                    # execution of commands
                                        commands_inserttest = ("""INSERT INTO verification.test_others (num_order, test_type, test_date) 
                                                        VALUES (%s, %s, %s)""")
                                        cur.execute(commands_inserttest, (order.upper(), 'RADIOGRAFIAS', date_test,))

                                    # close communication with the PostgreSQL database server
                                        cur.close()
                                    # commit the changes
                                        conn.commit()

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("Radiograf√≠as")
                                        dlg.setText("Datos insertados con √©xito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg,new_icon

                                    except (Exception, psycopg2.DatabaseError) as error:
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                    + str(error))
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                        dlg.exec()
                                        del dlg, new_icon
                                    finally:
                                        if conn is not None:
                                            conn.close()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle("Radiograf√≠as")
                                dlg_error.setText("La fecha no puede estar vac√≠a o no es un valor v√°lido (dd/mm/yyyy o dd-mm-yyyy)")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Ultrasonidos")
                dlg_error.setText("El pedido no puede estar vac√≠o. Introduce un valor v√°lido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to show dialog to insert ultrasound test
    def insert_ultrasound(self):
        """
        Handles the insertion process for ultrasound test. Prompts the user 
        to enter an order number and a date, then updates the database with the provided 
        information if valid input is received.
        """
        dlg1 = QtWidgets.QInputDialog()
        new_icon1 = QtGui.QIcon()
        new_icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg1.setWindowIcon(new_icon1)
        dlg1.setWindowTitle('Ultrasonidos')
        dlg1.setLabelText('Introduce un pedido:')

        dlg3 = QtWidgets.QInputDialog()
        new_icon3 = QtGui.QIcon()
        new_icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg3.setWindowIcon(new_icon3)
        dlg3.setWindowTitle('Ultrasonidos')
        dlg3.setLabelText('Introduce una fecha:')

        while True:
            clickedButton = dlg1.exec()
            if clickedButton == 1:
                order = dlg1.textValue()
                if order != '':
                    query_material = ("""
                            SELECT orders."num_order",orders."num_offer",product_type."variable"
                            FROM offers
                            INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                            INNER JOIN product_type ON (offers."material"=product_type."material")
                            WHERE (UPPER(orders."num_order") = UPPER(%s)
                            )
                            ORDER BY orders."num_order"
                            """)
                    conn = None
                    try:
                    # read the connection parameters
                        params = config()
                    # connect to the PostgreSQL server
                        conn = psycopg2.connect(**params)
                        cur = conn.cursor()
                    # execution of commands
                        cur.execute(query_material,(order,))
                        results=cur.fetchall()
                    except (Exception, psycopg2.DatabaseError) as error:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                    + str(error))
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                        dlg.exec()
                        del dlg, new_icon
                    finally:
                        if conn is not None:
                            conn.close()

                    if len(results) == 0:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("ERP EIPSA")
                        dlg.setText("El n√∫mero de pedido no existe")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                    else:
                        while True:
                            clickedButton3 = dlg3.exec()
                            if clickedButton3 == 1:
                                date_test = dlg3.textValue()
                                if date_test != '' and self.is_valid_date(date_test):
                                    conn = None
                                    try:
                                    # read the connection parameters
                                        params = config()
                                    # connect to the PostgreSQL server
                                        conn = psycopg2.connect(**params)
                                        cur = conn.cursor()
                                    # execution of commands
                                        commands_inserttest = ("""INSERT INTO verification.test_others (num_order, test_type, test_date) 
                                                        VALUES (%s, %s, %s)""")
                                        cur.execute(commands_inserttest, (order.upper(), 'ULTRASONIDOS', date_test,))

                                    # close communication with the PostgreSQL database server
                                        cur.close()
                                    # commit the changes
                                        conn.commit()

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("Ultrasonidos")
                                        dlg.setText("Datos insertados con √©xito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg,new_icon

                                    except (Exception, psycopg2.DatabaseError) as error:
                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("Ha ocurrido el siguiente error:\n"
                                                    + str(error))
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                        dlg.exec()
                                        del dlg, new_icon
                                    finally:
                                        if conn is not None:
                                            conn.close()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle("Ultrasonidos")
                                dlg_error.setText("La fecha no puede estar vac√≠a o no es un valor v√°lido (dd/mm/yyyy o dd-mm-yyyy)")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Ultrasonidos")
                dlg_error.setText("El pedido no puede estar vac√≠o. Introduce un valor v√°lido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to show window with all tests
    def query_test(self):
        """
        Opens the 'query_test' window. Sets up the UI for the user.
        """
        from TestAllQuery_Window import Ui_TestAllQuery_Window
        self.testquery_window=QtWidgets.QMainWindow()
        self.ui=Ui_TestAllQuery_Window()
        self.ui.setupUi(self.testquery_window)
        self.testquery_window.showMaximized()

# Function to check date format
    def is_valid_date(self, date_str):
        """
        Checks if the provided date string is in a valid format.

        Args:
            date_str (str): The date string to validate.

        Returns:
            bool: True if the date string is valid according to the specified formats, False otherwise.
        """
        formats = ['%d/%m/%Y', '%d-%m-%Y']
        for fmt in formats:
            try:
                datetime.datetime.strptime(date_str, fmt)
                return True
            except ValueError:
                pass
            
        return False

# Function to generate calibration sheet
    def calibration_sheet(self):
        """
        Generates a PDF datasheet for the calibers.
        Opens the generated PDF in the viewer.
        """
        query_calibers= ("""SELECT calibers.equipment_number, calibers.type_caliber, calibers.range_caliber || ' mm' as range, TO_CHAR(calibers.next_check_date, 'DD/MM/YYYY'),
                            'CP-40' as master, masters.certificate_1
                            FROM verification.calibers_workshop as calibers
                            LEFT JOIN verification.calibrated_masters as masters ON 'EIPSA-CP-40' = masters.number_item
                            WHERE calibers.notes = 'PRINCIPAL'

                            UNION

                            SELECT manometers.number, manometers.instrument, manometers.range|| ' ' || manometers.scale as range, TO_CHAR(manometers.next_revision, 'DD/MM/YYYY'),
                            manometers.master, masters.certificate_1
                            FROM verification.manometers_thermoelements_workshop as manometers
                            LEFT JOIN verification.calibrated_masters as masters ON manometers.master = masters.number_item
                            WHERE manometers.instrument = 'MANOMETRO'""")

        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_calibers)
            results_caliber=cur.fetchall()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        df_data = pd.DataFrame(results_caliber, columns=['N√∫mero', 'Instrumento', 'Rango', 'Pr√≥xima Revisi√≥n', 'Patr√≥n', 'Certificado Patr√≥n'])
        df_data = df_data.sort_values(by='N√∫mero')
        df_data["Certificado Patr√≥n"] = df_data["Certificado Patr√≥n"].apply(lambda x: Path(x).stem)
        df_data["Certificado Patr√≥n"] = df_data["Certificado Patr√≥n"].apply(lambda x: x.split()[0])

        pdf = CustomPDF('P', 'cm', 'A4')

        pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
        pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))

        pdf.set_auto_page_break(auto=True)
        pdf.set_margins(2, 1)

        pdf.add_page()

        pdf.image(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Eipsa Logo Blanco.png")), 2, 1, 8, 2)
        pdf.set_font('Helvetica', '', 6)
        pdf.set_xy(14.5, 1.4)
        pdf.multi_cell(5.1, 0.3, f"Pol.Ind. IGARSA - Naves 3, 4, 5, 6, 7 y 8\n"
        "28860 Paracuellos de Jarama. Madrid (ESPA√ëA)\n"
        "Tel.: (+34) 91 658 21 18\n"
        "E-mail: info@eipsa.es - Web: http://www.eipsa.es\n", align='L')
        pdf.set_font('Helvetica', 'BU', 16)
        pdf.set_xy(2,3)
        pdf.cell(17, 1, "FICHA DE CALIBRACI√ìN", align='C')
        pdf.ln()
        pdf.set_font('Helvetica', 'B', 16)
        pdf.cell(17, 1, "Calibration Sheet", align='C')
        pdf.ln(1)
        pdf.set_fill_color(191, 191, 191)
        pdf.set_font('Helvetica', '', 9)
        pdf.fixed_height_multicell(17, 1.5, "Certificamos que en la fecha indicada se ha procedido seg√∫n la instrucci√≥n CEM-I-001 a la comprobaci√≥n mediante comparaci√≥n del patr√≥n referenciado habi√©ndose obtenido los resultados reflejados, habi√©ndose sido aceptado para su uso", 'L', None)
        pdf.ln(0.5)
        pdf.fixed_height_multicell(17, 1, "We certify that on the indicated date we have proceeded according to the instruction CEM-I-001 to check by comparing the referenced pattern, having been accepted for its use.", 'L', None)
        pdf.ln(0.5)

        pdf.set_font('Helvetica', 'B', 9)
        pdf.cell(1.75, 0.5, "Numero", border=1, align='C')
        pdf.cell(3, 0.5, "Instrumento", border=1, align='C')
        pdf.cell(2.25, 0.5, "Rango", border=1, align='C')
        pdf.cell(4, 0.5, "Fecha Pr√≥x. Calibraci√≥n", border=1, align='C')
        pdf.cell(2, 0.5, "Patr√≥n", border=1, align='C')
        pdf.cell(4, 0.5, "Certificado Patr√≥n", border=1, align='C')
        pdf.ln()
        pdf.set_font('Helvetica', '', 8)
        pdf.cell(1.75, 0.5, "Number", border=1, align='C')
        pdf.cell(3, 0.5, "Instrument", border=1, align='C')
        pdf.cell(2.25, 0.5, "Range", border=1, align='C')
        pdf.cell(4, 0.5, "Next Calibration Date", border=1, align='C')
        pdf.cell(2, 0.5, "Master", border=1, align='C')
        pdf.cell(4, 0.5, "Master Calibration", border=1, align='C')
        pdf.ln()

        for index, row in df_data.iterrows():
            pdf.cell(1.75, 1, str(row['N√∫mero']), border=1, align='C')
            x_position = pdf.get_x()
            y_position = pdf.get_y()
            pdf.cell(3, 0.5, str(row['Instrumento']), border=1, align='C')
            pdf.cell(2.25, 1, str(row['Rango']), border=1, align='C')
            pdf.cell(4, 1, str(row['Pr√≥xima Revisi√≥n']), border=1, align='C')
            pdf.cell(2, 1, str(row['Patr√≥n']), border=1, align='C')
            pdf.cell(4, 1, str(row['Certificado Patr√≥n']), border=1, align='C')
            pdf.set_xy(x_position, y_position + 0.5)
            pdf.cell(3, 0.5, 'Vernier Caliper' if 'PIE' in str(row['Instrumento']) else 'Manometer', border=1, align='C')

            pdf.ln()

        pdf.ln(2.5)

        y_position = pdf.get_y()

        pdf.set_font('Helvetica', '', 9)
        pdf.cell(11, 0.5, "")
        pdf.cell(4, 0.5, "Departamendo de Calidad", align='C')
        pdf.ln()
        pdf.set_font('Helvetica', '', 8)
        pdf.cell(11, 0.5, "")
        pdf.cell(4, 0.5, "Quality Department", align='C')
        pdf.ln()

        temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp_calib_cert.pdf"))))
        pdf.output(temp_file_path)

        reader = PdfReader(temp_file_path)
        page_overlay = PdfReader(self.new_content(y_position)).pages[0]

        reader.pages[len(reader.pages) - 1].merge_page(page2=page_overlay)
        writer = PdfWriter()
        writer.append_pages_from_reader(reader)
        writer.write(temp_file_path)

        self.pdf_viewer.open(QtCore.QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
        self.pdf_viewer.showMaximized()


# Function to include the stamp for new pdf
    def new_content(self, y_position):
        """
        Generates a PDF document with a quality control stamp at a specified vertical position.

        Args:
            y_position (float): The vertical position (in centimeters) where the 
                                quality control stamp image will be placed on the page.

        Returns:
            io.BytesIO: A byte stream containing the generated PDF document.
        """
        fpdf = FPDF('P', 'cm', 'A4')
        fpdf.add_page()
        fpdf.set_font("helvetica", size=36)
        fpdf.image(os.path.abspath(os.path.join(basedir, "Resources/Iconos/QualityStamp.png")), 13, y_position - 2, 4, 2)
        return io.BytesIO(fpdf.output())


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Tests_Menu = QtWidgets.QMainWindow()
    ui = Ui_Tests_Menu('j.valtierra')
    ui.setupUi(Tests_Menu)
    Tests_Menu.show()
    sys.exit(app.exec())
