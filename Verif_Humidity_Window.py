# Form implementation generated from reading ui file 'Humidity_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import psycopg2
from config import config
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from matplotlib import ticker
from datetime import *
import numpy as np
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_Humidity_Window(QtWidgets.QMainWindow):
    """
    UI class for the Client Resume window.
    """
    def __init__(self):
        """
        Initializes the Ui_Humidity_Window.
        """
        super().__init__()
        self.setupUi(self)

    def setupUi(self, Humidity_Window):
        """
        Sets up the user interface for the Humidity_Window.

        Args:
            Humidity_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        Humidity_Window.setObjectName("Humidity_Window")
        Humidity_Window.resize(1165, 945)
        Humidity_Window.setMinimumSize(QtCore.QSize(1165, 945))
        # Humidity_Window.setMaximumSize(QtCore.QSize(1165, 945))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Humidity_Window.setWindowIcon(icon)
        Humidity_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255)\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=Humidity_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(1145, 860))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_Frame = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_Frame.setObjectName("gridLayout_Frame")
        spacerItem1 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_Frame.addItem(spacerItem1, 0, 0, 1, 1)
        self.year2_CustomerResume = QtWidgets.QComboBox(parent=self.frame)
        self.year2_CustomerResume.setMinimumSize(QtCore.QSize(150, 25))
        self.year2_CustomerResume.setMaximumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.year2_CustomerResume.setFont(font)
        self.year2_CustomerResume.setObjectName("year2_CustomerResume")
        self.gridLayout_Frame.addWidget(self.year2_CustomerResume, 1, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 30, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_Frame.addItem(spacerItem3, 2, 0, 1, 1)
        self.widgetspecial = QtWidgets.QWidget(parent=self.frame)
        self.widgetspecial.setObjectName("widgetspecial")
        self.gridLayout_Frame.addWidget(self.widgetspecial, 2, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Humidity_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Humidity_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1165, 22))
        self.menubar.setObjectName("menubar")
        Humidity_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Humidity_Window)
        self.statusbar.setObjectName("statusbar")
        Humidity_Window.setStatusBar(self.statusbar)
        self.gridLayout2 = None

        self.retranslateUi(Humidity_Window)
        QtCore.QMetaObject.connectSlotsByName(Humidity_Window)


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, Humidity_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        Humidity_Window.setWindowTitle(_translate("Humidity_Window", "Resumen Cliente"))

# Function to load data from the database
    def loadresults(self):
        """
        Loads and displays results.
        The function also creates a chart to visualize the data evolution.

        Raises:
            QMessageBox: Shows error messages in case of database errors or invalid inputs.
        """

        widget_to_delete = self.frame.findChild(QtWidgets.QWidget, "widgetspecial")
        if widget_to_delete is not None:
            widget_to_delete.deleteLater()

        self.remove_layout(self.gridLayout2)

        widget_to_delete = self.frame.findChild(QtWidgets.QWidget, "widget_2")
        if widget_to_delete is not None:
            widget_to_delete.deleteLater()

        if hasattr(self, 'canvas1'):
            self.canvas1.setParent(None)
            self.canvas1.deleteLater()

        # self.canvas1=FigureCanvas(Figure())
        # ax=self.canvas1.figure.subplots()
        # bar_positions1 = np.arange(min(years_offered),max(years_offered)+1) - bar_width / 2
        # bar_positions2 = np.arange(min(years_offered),max(years_offered)+1) + bar_width / 2
        # ax.bar(bar_positions1, final_offered_year, width=bar_width, label='Ofertado')
        # ax.bar(bar_positions2, final_sold_year, width=bar_width, label='Adjudicado')
        # ax.set_xticks(range(min(years_offered),max(years_offered)+1))
        # axticks_x=ticker.FuncFormatter(lambda x,pos: '{:02d}'.format(x-2000))
        # axticks_y=ticker.FuncFormatter(self.format_y_ticks)
        # ax.xaxis.set_major_formatter(axticks_x)
        # ax.yaxis.set_major_formatter(axticks_y)
        # ax.set_title('Ofertado/Adjudicado por años')
        # ax.set_xlabel('Año')
        # ax.set_ylabel('Importe (€)')
        # ax.legend(loc='best')

        self.canvas1.setObjectName("Graph1")
        self.gridLayout_Frame.addLayout(self.canvas1, 2, 0, 1, 1)


#Function to remove the layout to update it when combobox changes
    def remove_layout(self, layout):
        """
        Recursively removes all widgets from a given layout.

        Args:
            layout (QtWidgets.QLayout): The layout from which to remove widgets.
    """
        if layout is not None:
            while layout.count():
                item = layout.takeAt(0)
                widget = item.widget()
                if widget is not None:
                    widget.setParent(None)
                    widget.deleteLater()
                else:
                    self.remove_layout(item.layout())

#Function for formatting the y axis of the graphs
    def format_y_ticks(self, y, pos):
        """
        Formats the y-axis ticks for display based on their magnitude.

        Args:
            y (float): The y-value to format.
            pos (int): The position of the tick (unused in the formatting).

        Returns:
            str: The formatted tick label.
        """
        if y >= 1e6:
            return '{:.0f}M'.format(y * 1e-6)
        elif y >= 1e3:
            return '{:.0f}k'.format(y * 1e-3)
        else:
            return '{:d}'.format(int(y))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Humidity_Window = QtWidgets.QMainWindow()
    ui = Ui_Humidity_Window()
    ui.setupUi(Humidity_Window)
    Humidity_Window.show()
    sys.exit(app.exec())
