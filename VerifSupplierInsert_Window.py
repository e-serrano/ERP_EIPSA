# Form implementation generated from reading ui file 'VerifSupplierInsert_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import os
from datetime import *
from tkinter.filedialog import askopenfilename

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if value is None:
            self.column_filters[column_index] = set()
        elif checked:
            self.column_filters[column_index].add(value)
        elif value in self.column_filters[column_index]:
            self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if filters and item_value not in filters:
                        show_row = False
                        break

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

    # Update hidden rows for this column
        if checked:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

    # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class Ui_VerifSupplierInsert_Window(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


    def setupUi(self, VerifSupplierInsert_Window):
        VerifSupplierInsert_Window.setObjectName("VerifSupplierInsert_Window")
        VerifSupplierInsert_Window.resize(400, 561)
        VerifSupplierInsert_Window.setMinimumSize(QtCore.QSize(1000, 675))
        # VerifSupplierInsert_Window.setMaximumSize(QtCore.QSize(800, 675))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        VerifSupplierInsert_Window.setWindowIcon(icon)
        VerifSupplierInsert_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=VerifSupplierInsert_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 0, 0, 1, 2)
        self.tableRecords = CustomTableWidget()
        self.tableRecords.setObjectName("tableWidget")
        self.tableRecords.setColumnCount(6)
        self.tableRecords.setRowCount(0)
        for i in range (6):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableRecords.setHorizontalHeaderItem(i, item)
        self.gridLayout_2.addWidget(self.tableRecords, 1, 0, 1, 7)
        self.label_date = QtWidgets.QLabel(parent=self.frame)
        self.label_date.setMinimumSize(QtCore.QSize(105, 25))
        self.label_date.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_date.setFont(font)
        self.label_date.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_date.setObjectName("label_date")
        self.gridLayout_2.addWidget(self.label_date, 2, 0, 1, 1)
        self.date = QtWidgets.QLineEdit(parent=self.frame)
        self.date.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.date.setFont(font)
        self.date.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.date.setObjectName("date")
        self.gridLayout_2.addWidget(self.date, 2, 1, 1, 2)
        self.label_supplier = QtWidgets.QLabel(parent=self.frame)
        self.label_supplier.setMinimumSize(QtCore.QSize(105, 25))
        self.label_supplier.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_supplier.setFont(font)
        self.label_supplier.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_supplier.setObjectName("label_supplier")
        self.gridLayout_2.addWidget(self.label_supplier, 2, 3, 1, 1)
        self.supplier = QtWidgets.QLineEdit(parent=self.frame)
        self.supplier.setMinimumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.supplier.setFont(font)
        self.supplier.setObjectName("supplier")
        self.gridLayout_2.addWidget(self.supplier, 2, 4, 1, 1)
        self.label_obs = QtWidgets.QLabel(parent=self.frame)
        self.label_obs.setMinimumSize(QtCore.QSize(105, 25))
        self.label_obs.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_obs.setFont(font)
        self.label_obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_obs.setObjectName("label_obs")
        self.gridLayout_2.addWidget(self.label_obs, 2, 5, 1, 1)
        self.obs = QtWidgets.QTextEdit(parent=self.frame)
        self.obs.setMinimumSize(QtCore.QSize(105, 25))
        # self.obs.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.obs.setFont(font)
        self.obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.obs.setObjectName("obs")
        self.gridLayout_2.addWidget(self.obs, 2, 6, 2, 1)
        self.label_delivnote = QtWidgets.QLabel(parent=self.frame)
        self.label_delivnote.setMinimumSize(QtCore.QSize(105, 25))
        self.label_delivnote.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_delivnote.setFont(font)
        self.label_delivnote.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_delivnote.setObjectName("label_delivnote")
        self.gridLayout_2.addWidget(self.label_delivnote, 3, 0, 1, 1)
        self.delivnote = QtWidgets.QLineEdit(parent=self.frame)
        self.delivnote.setMinimumSize(QtCore.QSize(105, 25))
        # self.hn_liq1.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.delivnote.setFont(font)
        self.delivnote.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.delivnote.setObjectName("delivnote")
        self.delivnote.setReadOnly(True)
        self.gridLayout_2.addWidget(self.delivnote, 3, 1, 1, 1)

        self.Button_Search = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Search.setMinimumSize(QtCore.QSize(30, 25))
        self.Button_Search.setMaximumSize(QtCore.QSize(30, 25))
        self.Button_Search.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Search.setAutoDefault(True)
        self.Button_Search.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.Button_Search.setObjectName("Button_AcceptFilter")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Search.setIcon(icon1)
        self.Button_Search.setIconSize(QtCore.QSize(20, 20))
        self.Button_Search.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.gridLayout_2.addWidget(self.Button_Search, 3, 2, 1, 1)




        self.label_material = QtWidgets.QLabel(parent=self.frame)
        self.label_material.setMinimumSize(QtCore.QSize(105, 25))
        self.label_material.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.label_material.setFont(font)
        self.label_material.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_material.setObjectName("label_material")
        self.gridLayout_2.addWidget(self.label_material, 3, 3, 1, 1)
        self.material = QtWidgets.QLineEdit(parent=self.frame)
        self.material.setMinimumSize(QtCore.QSize(105, 25))
        # self.hn_liq2.setMaximumSize(QtCore.QSize(105, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.material.setFont(font)
        self.material.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.material.setObjectName("material")
        self.gridLayout_2.addWidget(self.material, 3, 4, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem1, 4, 1, 1, 1)
        self.Button_Insert = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Insert.setMinimumSize(QtCore.QSize(100, 35))
        # self.Button_Insert.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Insert.setObjectName("Button_Insert")
        self.gridLayout_2.addWidget(self.Button_Insert, 5, 1, 1, 2)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        # self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.gridLayout_2.addWidget(self.Button_Cancel, 5, 5, 1, 2)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        VerifSupplierInsert_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=VerifSupplierInsert_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 22))
        self.menubar.setObjectName("menubar")
        VerifSupplierInsert_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=VerifSupplierInsert_Window)
        self.statusbar.setObjectName("statusbar")
        VerifSupplierInsert_Window.setStatusBar(self.statusbar)
        self.tableRecords.verticalHeader().setVisible(True)
        self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableRecords.setSortingEnabled(False)
        self.tableRecords.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black; font-weight: bold; font-size: 10pt;}")
        VerifSupplierInsert_Window.setWindowFlag(QtCore.Qt.WindowType.WindowCloseButtonHint, False)

        self.retranslateUi(VerifSupplierInsert_Window)
        QtCore.QMetaObject.connectSlotsByName(VerifSupplierInsert_Window)

        self.Button_Cancel.clicked.connect(VerifSupplierInsert_Window.close)
        self.Button_Insert.clicked.connect(self.insert)
        self.tableRecords.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.tableRecords.itemDoubleClicked.connect(self.item_double_clicked)
        self.tableRecords.itemClicked.connect(self.loadform)
        self.Button_Search.clicked.connect(self.search_document)

        self.load_values()
        self.query_values()


    def retranslateUi(self, VerifSupplierInsert_Window):
        _translate = QtCore.QCoreApplication.translate
        VerifSupplierInsert_Window.setWindowTitle(_translate("VerifSupplierInsert_Window", "Proveedores"))
        self.label_date.setText(_translate("VerifSupplierInsert_Window", "Fecha:"))
        self.label_supplier.setText(_translate("VerifSupplierInsert_Window", "Proveedor:"))
        self.label_obs.setText(_translate("VerifSupplierInsert_Window", "Observaciones:"))
        self.label_delivnote.setText(_translate("VerifSupplierInsert_Window", "Nº Albarán:"))
        self.label_material.setText(_translate("VerifSupplierInsert_Window", "Material:"))
        self.Button_Cancel.setText(_translate("VerifSupplierInsert_Window", "Cancelar"))
        self.Button_Insert.setText(_translate("VerifSupplierInsert_Window", "Insertar"))
        item = self.tableRecords.horizontalHeaderItem(0)
        item.setText(_translate("VerificationQuery_Window", "ID"))
        item = self.tableRecords.horizontalHeaderItem(1)
        item.setText(_translate("VerificationQuery_Window", "Fecha"))
        item = self.tableRecords.horizontalHeaderItem(2)
        item.setText(_translate("VerificationQuery_Window", "Proveedor"))
        item = self.tableRecords.horizontalHeaderItem(3)
        item.setText(_translate("VerificationQuery_Window", "Nº Albarán"))
        item = self.tableRecords.horizontalHeaderItem(4)
        item.setText(_translate("VerificationQuery_Window", "Material"))
        item = self.tableRecords.horizontalHeaderItem(5)
        item.setText(_translate("VerificationQuery_Window", "Observaciones"))


    def query_values(self):
        self.tableRecords.setRowCount(0)

        query_material = ("""
                        SELECT suppliers."id", TO_CHAR(suppliers."date_delivnote", 'dd/MM/yyyy'), suppliers."supplier", suppliers."num_delivnote", suppliers."material", suppliers."notes"
                        FROM verification.delivnote_suppliers AS suppliers
                        ORDER BY suppliers."id"
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_material)
            results=cur.fetchall()

            # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableRecords.setRowCount(len(results))
            self.tableRecords.setColumnCount(6)
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(6):
                    if column == 3:
                        value = row[column].split("/")[-1]
                    else:
                        value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableRecords.setItem(tablerow, column, it)

                tablerow+=1

            self.tableRecords.verticalHeader().hide()
            self.tableRecords.setItemDelegate(AlignDelegate(self.tableRecords))
            self.tableRecords.setSortingEnabled(False)
            self.tableRecords.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Interactive)
            self.tableRecords.horizontalHeader().setSectionResizeMode( QtWidgets.QHeaderView.ResizeMode.Stretch)

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


    def insert(self):
        date_record = self.date.text()
        supplier = self.supplier.text()
        delivnote = self.delivnote.text()
        material = self.material.text()
        notes = self.obs.toPlainText()

        if date_record == '' or (supplier == '' or (delivnote == '' or material == '')):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Rellena todos los campos. Solo el campo de observaciones puede quedarse vacío")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()
            del dlg, new_icon

        else:
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                commands_insert = ("""INSERT INTO verification.delivnote_suppliers
                                    (date_delivnote, supplier, num_delivnote, material, notes) 
                                    VALUES (%s, %s, %s, %s, %s)""")
                data = (date_record, supplier, delivnote, material, notes,)
                cur.execute(commands_insert, data)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Proveedores")
                dlg.setText("Datos insertados con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg,new_icon

                self.query_values()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()


# Function to load file
    def item_double_clicked(self, item):
        if item.column() == 3:
            item_id = self.tableRecords.item(item.row(), 0).text()

            query_path = ("""
                        SELECT suppliers."num_delivnote"
                        FROM verification.delivnote_suppliers AS suppliers
                        WHERE suppliers."id" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                cur.execute(query_path, (item_id,))
                results=cur.fetchall()

                # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                file_path = os.path.normpath(results[0][0])
                os.startfile(file_path)

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()


    def loadform(self, item):
        data_order=[]

        for column in range(self.tableRecords.columnCount()):
            item_text=self.tableRecords.item(item.row(), column).text() if self.tableRecords.item(item.row(), column) is not None else ""
            data_order.append(item_text)

        self.date.setText(data_order[1])
        self.supplier.setText(data_order[2])
        # self.delivnote.setText(data_order[3])
        self.material.setText(data_order[4])
        self.obs.setText(data_order[5])


    def search_document(self):
        self.fname = askopenfilename(filetypes=[("Archivos PDF", "*.pdf")],
                            title="Seleccionar archivo pdf")
        if self.fname:
            self.delivnote.setText(self.fname)


#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableRecords.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableRecords.horizontalHeader().height()
        popup_pos = self.tableRecords.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableRecords.show_unique_values_menu(logical_index, popup_pos, header_height)


    def load_values(self):
        actual_date=date.today()
        actual_date=actual_date.strftime("%d/%m/%Y")
        self.date.setText(actual_date)


    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key.Key_F5:
            self.load_values()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    VerifSupplierInsert_Window = Ui_VerifSupplierInsert_Window()
    VerifSupplierInsert_Window.show()
    sys.exit(app.exec())