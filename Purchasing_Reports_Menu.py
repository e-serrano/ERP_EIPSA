# Form implementation generated from reading ui file 'Purchasing_Reports_Menu.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QUrl
from ReportArtMov_Window import Ui_ArtMov_Window
from ReportPurchaseRefDate_Window import Ui_ReportPurRefDate_Window
from ReportStockVal_Window import Ui_StockVal_Window
import os
from config import config
import pandas as pd
import psycopg2
from PDF_Styles import pending_orders
from datetime import *
from PDF_Viewer import PDF_Viewer
from tkinter.filedialog import asksaveasfilename
from openpyxl import Workbook
from openpyxl.styles import NamedStyle
from openpyxl.utils.dataframe import dataframe_to_rows


basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_Purchasing_Reports_Menu(QtWidgets.QMainWindow):
    """
    UI class for the Purchasing Reports Menu window.

    Attributes:
        name (str): The name of the user or the report being handled.
        username (str): The username of the logged-in user.
        pdf_viewer (PDF_Viewer): An instance of `PDF_Viewer` to view PDF reports.
    """
    def __init__(self, name, username):
        """
        Initializes the `Ui_Purchasing_Reports_Menu` window with the provided user information and sets up the UI.

        Args:
            name (str): The name of the user or report.
            username (str): The username of the logged-in user.

        The `PDF_Viewer` component is initialized for viewing reports in PDF format.
        """
        super().__init__() 
        self.name=name
        self.username=username
        self.pdf_viewer = PDF_Viewer()
        self.setupUi(self)

    def setupUi(self, Purchasing_Reports_Menu):
        """
        Sets up the user interface for the Purchasing_Reports_Menu.

        Args:
            Purchasing_Reports_Menu (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        Purchasing_Reports_Menu.setObjectName("Purchasing_Reports_Menu")
        Purchasing_Reports_Menu.setWindowModality(QtCore.Qt.WindowModality.WindowModal)
        Purchasing_Reports_Menu.resize(615, 400)
        Purchasing_Reports_Menu.setMinimumSize(QtCore.QSize(int(615//1.5), int(400//1.5)))
        Purchasing_Reports_Menu.setMaximumSize(QtCore.QSize(int(615//1.5), int(400//1.5)))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Purchasing_Reports_Menu.setWindowIcon(icon)
        if self.username == 'd.marquez':
            Purchasing_Reports_Menu.setStyleSheet("QWidget {\n"
    "background-color: #121212; color: rgb(255, 255, 255)\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 12px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .2em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}"
    )
        else:
            Purchasing_Reports_Menu.setStyleSheet("QWidget {\n"
    "background-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid black;\n"
    "}\n"
    "\n"
    "QPushButton {\n"
    "background-color: #33bdef;\n"
    "  border: 1px solid transparent;\n"
    "  border-radius: 3px;\n"
    "  color: #fff;\n"
    "  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
    "  font-size: 12px;\n"
    "  font-weight: 800;\n"
    "  line-height: 1.15385;\n"
    "  margin: 0;\n"
    "  outline: none;\n"
    "  padding: 2px .2em;\n"
    "  text-align: center;\n"
    "  text-decoration: none;\n"
    "  vertical-align: baseline;\n"
    "  white-space: nowrap;\n"
    "}\n"
    "\n"
    "QPushButton:hover {\n"
    "    background-color: #019ad2;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "}\n"
    "\n"
    "QPushButton:pressed {\n"
    "    background-color: rgb(1, 140, 190);\n"
    "    border-color: rgb(255, 255, 255);\n"
    "}"
    )
        self.centralwidget = QtWidgets.QWidget(parent=Purchasing_Reports_Menu)
        self.centralwidget.setMinimumSize(QtCore.QSize(int(615//1.5), int(360//1.5)))
        self.centralwidget.setMaximumSize(QtCore.QSize(int(615//1.5), int(360//1.5)))
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(int(275//1.5), int(325//1.5)))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.hLayout1 = QtWidgets.QHBoxLayout()
        self.hLayout1.setObjectName("hLayout1")
        self.Button_ArtMov = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ArtMov.setMinimumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_ArtMov.setMaximumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_ArtMov.setObjectName("Button_ArtMov")
        self.hLayout1.addWidget(self.Button_ArtMov)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout1.addItem(spacerItem2)
        self.Button_ArtPendClient = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ArtPendClient.setMinimumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_ArtPendClient.setMaximumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_ArtPendClient.setObjectName("Button_ArtPendClient")
        self.hLayout1.addWidget(self.Button_ArtPendClient)
        self.gridLayout_2.addLayout(self.hLayout1, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 2, 0, 1, 1)
        self.hLayout2 = QtWidgets.QHBoxLayout()
        self.hLayout2.setObjectName("hLayout2")
        self.Button_PurchaseRefDate = QtWidgets.QPushButton(parent=self.frame)
        self.Button_PurchaseRefDate.setMinimumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_PurchaseRefDate.setMaximumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_PurchaseRefDate.setObjectName("Button_PurchaseRefDate")
        self.hLayout2.addWidget(self.Button_PurchaseRefDate)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout2.addItem(spacerItem1)
        self.Button_ArtPenSupplier = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ArtPenSupplier.setMinimumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_ArtPenSupplier.setMaximumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_ArtPenSupplier.setObjectName("Button_ArtPenSupplier")
        self.hLayout2.addWidget(self.Button_ArtPenSupplier)
        self.gridLayout_2.addLayout(self.hLayout2, 3, 0, 1, 1)
        self.hLayout3 = QtWidgets.QHBoxLayout()
        self.hLayout3.setContentsMargins(-1, 0, -1, -1)
        self.hLayout3.setObjectName("hLayout3")
        self.Button_StockVal = QtWidgets.QPushButton(parent=self.frame)
        self.Button_StockVal.setMinimumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_StockVal.setMaximumSize(QtCore.QSize(int(250//1.5), int(35//1.5)))
        self.Button_StockVal.setObjectName("Button_StockVal")
        self.hLayout3.addWidget(self.Button_StockVal)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout3.addItem(spacerItem4)
        self.gridLayout_2.addLayout(self.hLayout3, 10, 0, 1, 1)
        self.hLayout4 = QtWidgets.QHBoxLayout()
        self.hLayout4.setContentsMargins(-1, 0, -1, -1)
        self.hLayout4.setObjectName("hLayout4")
        spacerItem3 = QtWidgets.QSpacerItem(350, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.hLayout4.addItem(spacerItem3)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setEnabled(True)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(int(100//1.5), int(35//1.5)))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(int(100//1.5), int(35//1.5)))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.hLayout4.addWidget(self.Button_Cancel)
        self.gridLayout_2.addLayout(self.hLayout4, 11, 0, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem5, 6, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Purchasing_Reports_Menu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Purchasing_Reports_Menu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 615, 22))
        self.menubar.setObjectName("menubar")
        Purchasing_Reports_Menu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Purchasing_Reports_Menu)
        self.statusbar.setObjectName("statusbar")
        Purchasing_Reports_Menu.setStatusBar(self.statusbar)
        Purchasing_Reports_Menu.setWindowFlags(QtCore.Qt.WindowType.WindowMinimizeButtonHint)

        self.retranslateUi(Purchasing_Reports_Menu)
        self.Button_ArtMov.clicked.connect(self.artmov)
        self.Button_ArtPendClient.clicked.connect(self.artpend_delivery_client)
        self.Button_PurchaseRefDate.clicked.connect(self.purchaserefdate)
        self.Button_ArtPenSupplier.clicked.connect(self.artpend_recep_supplier)
        self.Button_StockVal.clicked.connect(self.stockval)
        self.Button_Cancel.clicked.connect(Purchasing_Reports_Menu.close)
        QtCore.QMetaObject.connectSlotsByName(Purchasing_Reports_Menu)


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, Purchasing_Reports_Menu):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        Purchasing_Reports_Menu.setWindowTitle(_translate("Purchasing_Reports_Menu", "Informes"))
        self.Button_ArtMov.setText(_translate("Purchasing_Reports_Menu", "Mov. Artículo"))
        self.Button_ArtPendClient.setText(_translate("Purchasing_Reports_Menu", "Art. Pend. Entregar s/Cliente"))
        self.Button_PurchaseRefDate.setText(_translate("Purchasing_Reports_Menu", "Compra s/Ref. y Fechas"))
        self.Button_ArtPenSupplier.setText(_translate("Purchasing_Reports_Menu", "Art. Pend. Recibir s/Prov."))
        self.Button_StockVal.setText(_translate("Purchasing_Reports_Menu", "Val. Stock"))
        self.Button_Cancel.setText(_translate("Purchasing_Reports_Menu", "Cancelar"))


    def artmov(self):
        """
        Opens the 'artmov' window. Sets up the UI for the user.
        """
        self.artmov_window=QtWidgets.QMainWindow()
        self.ui=Ui_ArtMov_Window(self.username)
        self.ui.setupUi(self.artmov_window)
        self.artmov_window.showMaximized()


    def artpend_delivery_client(self):
        """
        Retrieves a report of pending deliveries to clients from the database, and allows the user to export it as an Excel or PDF file.

        Raises:
            Exception: If there is an issue with the database connection or query execution.
        """
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            commands_delivery_client = (""" SELECT supplies."reference", supplies."description", clients."name", client_ord_header."client_order_num",
                                            TO_CHAR(client_ord_header."order_date",'DD/MM/YYYY'), ROUND(client_ord_detail."pending"::numeric, 2)
                                        FROM 
                                            purch_fact.client_ord_header AS client_ord_header
                                            LEFT JOIN purch_fact.clients AS clients ON (client_ord_header."client_id" = clients."id")
                                            JOIN purch_fact.client_ord_detail AS client_ord_detail ON (client_ord_header."id" = client_ord_detail."client_ord_header_id")
                                            JOIN purch_fact.supplies AS supplies ON (client_ord_detail."supply_id" = supplies."id")
                                        WHERE 
                                            client_ord_detail."pending" > 0 
                                        ORDER BY
                                            clients."name"
                                        """)
            cur.execute(commands_delivery_client)

            results = cur.fetchall()
            df = pd.DataFrame(results, columns=["Referencia", "Descripción", "Cliente", "Nº Pedido", "Fecha Pedido", "Pendiente"])

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            while True:
                doc_type, ok = QtWidgets.QInputDialog.getItem(self, "Informe", "Seleccióna un tipo de documento:", ['Excel', 'PDF'], 0, False)
                if ok and doc_type:
                    if doc_type == 'Excel':
                        self.pending_delivery_client_excel(df)
                        break
                    else:
                        self.pending_delivery_client_pdf(df)
                        break
                else:
                    break

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


    def purchaserefdate(self):
        """
        Opens the 'purchaserefdate' window. Sets up the UI for the user.
        """
        self.purchaserefdate_window=QtWidgets.QMainWindow()
        self.ui=Ui_ReportPurRefDate_Window(self.username)
        self.ui.setupUi(self.purchaserefdate_window)
        self.purchaserefdate_window.showMaximized()


    def artpend_recep_supplier(self):
        """
        Retrieves a report of pending receptions from suppliers from the database, and allows the user to export it as an Excel or PDF file.

        Raises:
            Exception: If there is an issue with the database connection or query execution.
        """
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            commands_pending_client = ("""SELECT suppliers."name", supplies."reference", supplies."description", supplier_ord_header."supplier_order_num",
                                            TO_CHAR(supplier_ord_header."order_date",'DD/MM/YYYY'), ROUND(supplier_ord_detail."quantity"::numeric, 2), ROUND(supplier_ord_detail."pending"::numeric, 2), supplier_ord_detail."unit_value",
                                            supplier_ord_detail."pending" * supplies."unit_value" AS subtotal
                                        FROM 
                                            purch_fact.supplier_ord_header AS supplier_ord_header
                                            INNER JOIN purch_fact.suppliers AS suppliers ON (supplier_ord_header."supplier_id" = suppliers."id")
                                            INNER JOIN purch_fact.supplier_ord_detail AS supplier_ord_detail ON (supplier_ord_header."id" = supplier_ord_detail."supplier_ord_header_id")
                                            INNER JOIN purch_fact.supplies AS supplies ON (supplier_ord_detail."supply_id" = supplies."id")
                                        WHERE 
                                            supplier_ord_detail."pending" > 0 
                                        ORDER BY
                                            suppliers."name"
                                        """)
            cur.execute(commands_pending_client)

            results = cur.fetchall()
            df = pd.DataFrame(results, columns=["Suministrador", "Referencia", "Descripción", "Nº Pedido", "Fecha Pedido", "Cantidad", "Pendiente", "Val. Un.", "Subtotal"])

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            while True:
                doc_type, ok = QtWidgets.QInputDialog.getItem(self, "Informe", "Seleccióna un tipo de documento:", ['Excel', 'PDF'], 0, False)
                if ok and doc_type:
                    if doc_type == 'Excel':
                        self.pending_recep_supplier_excel(df)
                        break
                    else:
                        self.pending_recep_supplier_pdf(df)
                        break
                else:
                    break

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


    def stockval(self):
        """
        Opens the 'stockval' window. Sets up the UI for the user.
        """
        self.stockval_window=QtWidgets.QMainWindow()
        self.ui=Ui_StockVal_Window()
        self.ui.setupUi(self.stockval_window)
        self.stockval_window.showMaximized()


    def pending_delivery_client_pdf(self, df):
        """
        Generates the pdf a report of pending deliveries to clients
        """
        df = df.sort_values(by = ['Referencia', 'Cliente'])
        list_references= df['Referencia'].unique().tolist()

        pdf = pending_orders()
        pdf.set_auto_page_break(auto=True, margin=1)
        pdf.add_page()
        pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
        pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
        pdf.set_font('Helvetica', 'B', 20)
        pdf.cell(9.5, 0.5, 'Artículos Pendientes De Entregar')
        pdf.set_font('Helvetica', 'B', 10)
        pdf.cell(9.5, 0.5, self.format_date_spanish(date.today()), align='R')
        pdf.ln(1)

        pdf.set_text_color(30,102,198)
        pdf.set_font('Helvetica', 'B', 15)
        pdf.cell(11, 1, 'Cliente', align="L")
        pdf.cell(4, 1, 'Nº Pedido', align='C')
        pdf.cell(2.5, 1, 'Fecha', align="C")
        pdf.cell(1.5, 1, 'Pend.', align="C")
        pdf.ln(1)

        for code in list_references:
            pdf.set_text_color(0,0,0)
            pdf.set_font('DejaVuSansCondensed-Bold', size=8)
            df_client = df[df['Referencia'] == code]
            pdf.set_fill_color(216, 216, 216)
            pdf.cell(8, 0.5, code, align="R", fill=True,)
            pdf.cell(0.2, 0.5, ' | ', align="C")
            pdf.cell(11, 0.5, df_client.iloc[0, 1], align="L", fill=True, )
            pdf.ln(0.5)

            for row in range(df_client.shape[0]):
                pdf.set_font("DejaVuSansCondensed", size=8)
                pdf.multi_cell(11, 0.5, str(df_client.iloc[row, 2]), max_line_height=pdf.font_size, align='L')
                y_position=pdf.get_y()
                pdf.set_xy(12, y_position - 0.5)
                pdf.cell(4, 0.5, str(df_client.iloc[row, 3]), align="C")
                pdf.set_xy(16, y_position - 0.5)
                pdf.cell(2.5, 0.5, str(df_client.iloc[row, 4]), align="C")
                pdf.set_xy(18.5, y_position - 0.5)
                pdf.cell(1.5, 0.5, str(df_client.iloc[row, 5]), align="C")
                pdf.ln(0.5)

        pdf.ln(0.5)
        pdf.set_text_color(0,0,0)
        pdf.cell(11, 0.5, '')
        pdf.cell(3, 0.5, 'Total Pendiente:', border=1)
        pdf.set_font('DejaVuSansCondensed-Bold', size = 10)
        pdf.cell(3, 0.5, self.format_number(df['Pendiente'].sum()), border=1)
        pdf.set_text_color(0,0,0)
        pdf.ln(1)

        pdf_buffer = pdf.output()

        temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp.pdf"))))

        with open(temp_file_path, "wb") as temp_file:
            temp_file.write(pdf_buffer)

        pdf.close()

        self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
        self.pdf_viewer.showMaximized()

    def pending_delivery_client_excel(self, df):
        """
        Generates the excel a report of pending deliveries to clients
        """
        df = df.sort_values(by = ['Referencia', 'Cliente'])
        output_path = asksaveasfilename(defaultextension=".xlsx", filetypes=[("Archivos Excel", "*.xlsx")], title="Guardar Excel")

        if output_path:
            wb = Workbook()
            ws = wb.active

            for index, row in df.iterrows():
                fecha_str = row['Fecha Pedido']
                if fecha_str is not None:
                    fecha_obj = datetime.strptime(fecha_str, '%d/%m/%Y').date()
                    df.at[index, 'Fecha Pedido'] = fecha_obj

            # Add data to Excel
            for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), 1):
                ws.append(row)

            # Date Style
            date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')

            # Apply Date Style
            for cell in ws['E']:
                cell.style = date_style

            # Save Excel
            wb.save(output_path)


    def pending_recep_supplier_pdf(self, df):
        """
        Generates the pdf a report of pending receptions from suppliers
        """
        list_references= df['Suministrador'].unique().tolist()

        pdf = pending_orders()
        pdf.set_auto_page_break(auto=True, margin=1)
        pdf.add_page()
        pdf.add_font('DejaVuSansCondensed', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed.ttf")))
        pdf.add_font('DejaVuSansCondensed-Bold', '', os.path.abspath(os.path.join(basedir, "Resources/Iconos/DejaVuSansCondensed-Bold.ttf")))
        pdf.set_font('Helvetica', 'B', 20)
        pdf.cell(9.5, 0.5, 'Artículos Pendientes de Recibir')
        pdf.set_font('Helvetica', 'B', 10)
        pdf.cell(9.5, 0.5, self.format_date_spanish(date.today()), align='R')
        pdf.ln(1)

        pdf.set_text_color(30,102,198)
        pdf.set_font('Helvetica', 'B', 12)
        pdf.cell(3, 1, 'Referencia', align="C")
        pdf.cell(5, 1, 'Descripción', align='C')
        pdf.cell(2, 1, 'Nº Pedido', align="C")
        pdf.cell(2, 1, 'Fecha', align="C")
        pdf.cell(1.5, 1, 'Cant.', align="C")
        pdf.cell(1.5, 1, 'Pend.', align='C')
        pdf.cell(2, 1, 'Val. Un.', align="C")
        pdf.cell(2, 1, 'Subtotal', align="C")
        pdf.ln(1)

        for code in list_references:
            pdf.set_text_color(0,0,0)
            pdf.set_font('DejaVuSansCondensed-Bold', size=10)
            df_client = df[df['Suministrador'] == code]
            pdf.set_fill_color(216, 216, 216)
            pdf.cell(19, 0.5, code, align="C", fill=True,)
            pdf.ln(0.5)

            for row in range(df_client.shape[0]):
                pdf.set_font("DejaVuSansCondensed", size=8)
                pdf.multi_cell(3, 0.5, str(df_client.iloc[row, 1]), max_line_height=pdf.font_size, align='L')
                y_position=pdf.get_y()
                pdf.set_xy(4, y_position - 0.5)
                pdf.multi_cell(5, 0.5, str(df_client.iloc[row, 2]), max_line_height=pdf.font_size, align='L')
                pdf.set_xy(9, y_position - 0.5)
                pdf.cell(2, 0.5, str(df_client.iloc[row, 3]), align="C")
                pdf.cell(2, 0.5, str(df_client.iloc[row, 4]), align="C")
                pdf.cell(1.5, 0.5, str(df_client.iloc[row, 5]), align="C")
                pdf.cell(1.5, 0.5, str(df_client.iloc[row, 6]), align='C')
                pdf.cell(2, 0.5, str(self.format_value(df_client.iloc[row, 7])), align="C")
                pdf.cell(2, 0.5, str(self.format_value(df_client.iloc[row, 8])), align="C")
                pdf.ln(0.75)

            pdf.cell(16, 0.5, "Total Pendiente:", align="R")
            pdf.cell(3, 0.5, self.format_value(df_client['Subtotal'].sum()), align="C")
            pdf.ln(0.75)

        pdf.set_text_color(0,0,0)
        pdf.cell(2, 0.5, 'Total:', border=1)
        pdf.set_font('DejaVuSansCondensed-Bold', size = 10)
        pdf.cell(5, 0.5, self.format_value(df['Subtotal'].sum()), border=1)
        pdf.ln(1)

        pdf_buffer = pdf.output()

        temp_file_path = os.path.abspath(os.path.join(os.path.abspath(os.path.join(basedir, "Resources/pdfviewer/temp", "temp.pdf"))))

        with open(temp_file_path, "wb") as temp_file:
            temp_file.write(pdf_buffer)

        pdf.close()

        self.pdf_viewer.open(QUrl.fromLocalFile(temp_file_path))  # Open PDF on viewer
        self.pdf_viewer.showMaximized()

    def pending_recep_supplier_excel(self, df):
        """
        Generates the excel a report of pending receptions from suppliers
        """
        output_path = asksaveasfilename(defaultextension=".xlsx", filetypes=[("Archivos Excel", "*.xlsx")], title="Guardar Excel")

        # df["Val. Un."] = df["Val. Un."].apply(self.euros_to_float)
        # df["Subtotal"] = df["Subtotal"].apply(self.euros_to_float)

        if output_path:
            wb = Workbook()
            ws = wb.active

            for index, row in df.iterrows():
                fecha_str = row['Fecha Pedido']
                if fecha_str is not None:
                    fecha_obj = datetime.strptime(fecha_str, '%d/%m/%Y').date()
                    df.at[index, 'Fecha Pedido'] = fecha_obj

            # Add data to Excel
            for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), 1):
                ws.append(row)

            # Currency and Date Style
            currency_style = NamedStyle(name='currency', number_format='#,##0.00 €')
            date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')

            # Apply Currency and Date Style
            for cell in ws['H']:
                cell.style = currency_style

            for cell in ws['I']:
                cell.style = currency_style

            for cell in ws['E']:
                cell.style = date_style

            # Save Excel
            wb.save(output_path)

# Function to format date to long in spanish
    def format_date_spanish(self, date_toformat):
        """
        Formats a given date object into a Spanish date string (e.g., "25 de diciembre de 2024").
        
        Args:
            date_toformat (datetime.date): The date to format.
        
        Returns:
            str: The formatted date string in Spanish.
        """
        months = ("enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre")
        day = date_toformat.day
        month = months[date_toformat.month - 1]
        year = date_toformat.year
        messsage = "{} de {} de {}".format(day, month, year)

        return messsage


    def format_number(self, number):
        """
        Formats a number to a Spanish-style format with two decimal places.
        The function replaces dots with commas and vice versa to match the Spanish number formatting.

        Args:
            number (float): The number to format.
        
        Returns:
            str: The formatted number as a string (e.g., "1.234,56").
        """
        formatted_number = '{:,.2f}'.format(number)

        formatted_number = formatted_number.replace('.', ':')
        formatted_number = formatted_number.replace(',', '.')
        formatted_number = formatted_number.replace(':', ',')

        return formatted_number


    def format_value(self, number):
        """
        Formats a number to a Spanish-style currency format, adding the euro sign ("€") at the end.

        Args:
            number (float): The number to format.
        
        Returns:
            str: The formatted currency value (e.g., "1.234,56 €").
        """

        formatted_number = '{:,.2f}'.format(number)

        formatted_number = formatted_number.replace('.', ':')
        formatted_number = formatted_number.replace(',', '.')
        formatted_number = formatted_number.replace(':', ',')
        formatted_number = formatted_number + " €"

        return formatted_number

# Function to transform euros to float values
    def euros_to_float(self, value):
        """
        Converts a Spanish-formatted euro string (e.g., "1.234,56 €") to a float.
        
        Args:
            value (str): The euro value as a string.
        
        Returns:
            float: The value as a float.
        """
        value = value.replace(".", "")
        value = value.replace(",", ".")
        value = value[: value.find(" €")]
        return float(value)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Purchasing_Reports_Menu = QtWidgets.QMainWindow()
    ui = Ui_Purchasing_Reports_Menu('dani','d.marquez')
    ui.setupUi(Purchasing_Reports_Menu)
    Purchasing_Reports_Menu.show()
    sys.exit(app.exec())
