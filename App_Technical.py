# Form implementation generated from reading ui file 'App_Technical.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from config import config, get_path
from datetime import *
import psycopg2
import sys
import configparser
from utils.Database_Manager import Create_DBconnection, Database_Connection
from utils.Show_Message import MessageHelper
from tkinter.filedialog import askopenfilename, askdirectory
import pandas as pd
import os
from pypdf import PdfReader, PdfWriter
from overlay_pdf import new_content_notes, new_content_tags


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center and setting color for cells.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        if index.column() == 5: # Checking column number and painting if apply
            value = str(index.data())
            if value != '':
                fecha_str_split = value.split('/')
                fecha_str_qdate = QtCore.QDate(int(fecha_str_split[2]), int(fecha_str_split[1]), int(fecha_str_split[0]))
                delay_date=QtCore.QDate.currentDate().addDays(-10)

                if fecha_str_qdate.addDays(15) < QtCore.QDate.currentDate():  
                    color = QtGui.QColor(255, 0, 0)  # Red
                elif fecha_str_qdate.addDays(7) < QtCore.QDate.currentDate():
                    color = QtGui.QColor(255, 255, 168)  # Yellow
                else:
                    color = QtGui.QColor(255, 255, 255)  # White for rest

                option.backgroundBrush = color

class CustomTableWidget(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(str(get_path("Resources", "Iconos", "Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        """
        Sorts the specified column based on the given order. If the column is a date column, a custom sort method is used.

        Args:
            column_index (int): The index of the column to sort.
            sortOrder (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        if column_index == 5:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)

# Function to sort column based on special datatypes
    def custom_sort(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class Ui_App_Technical(QtWidgets.QMainWindow):
    """
    Main application window for the technical app.

        Args:
        name (str): The name of the user.
        username (str): The username of the user.
    """
    def __init__(self, name, username):
        """
        Initializes the main window, setting up the user interface and storing user-specific details.

        Args:
            name (str): The name of the user.
            username (str): The username of the user.
        """
        super().__init__() 
        self.name=name
        self.username=username
        self.setupUi(self)

    def setupUi(self, App_Technical):
        """
        Sets up the user interface components for the main application window.

        Args:
            App_Technical (QtWidgets.QMainWindow): The main window object to set up.
        """
        App_Technical.setObjectName("App_Technical")
        App_Technical.resize(945, 860)
        App_Technical.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Technical.setWindowIcon(icon)
        App_Technical.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Technical)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Logo.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        self.Button_PortalDoc = QtWidgets.QPushButton(parent=self.frame)
        self.Button_PortalDoc.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_PortalDoc.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_PortalDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_PortalDoc.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_PortalDoc.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Portal.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_PortalDoc.setIcon(icon12)
        self.Button_PortalDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_PortalDoc.setObjectName("Button_PortalDoc")
        self.Button_PortalDoc.setToolTip("Portal Documentación")
        self.Header.addWidget(self.Button_PortalDoc)
        spacerItem11 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem11)
        self.set_header_buttons(self.username)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem1)

        if self.username == 'e.carrillo':
            self.Button_Notes = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Notes.setMinimumSize(QtCore.QSize(60, 40))
            self.Button_Notes.setMaximumSize(QtCore.QSize(60, 40))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_Notes.setFont(font)
            self.Button_Notes.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Notes.setText('Notas')
            self.Button_Notes.setStyleSheet(
"QPushButton{\n"
"    border: 1px solid;\n"
"    color: rgb(3, 174, 236);\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid ;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
            self.Header.addWidget(self.Button_Notes)
            self.Button_Notes.clicked.connect(self.notifications_all)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.Button_Notification = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Notification.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setToolTip('Notificaciones')
        self.Button_Notification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Notification.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Notification.setText("")
        self.Button_Notification.setIconSize(QtCore.QSize(40, 40))
        self.Button_Notification.setObjectName("Button_Notification")
        self.Header.addWidget(self.Button_Notification)
        spacerItem15 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem15)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setToolTip('Configuración')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "User.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem3 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem3)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")

        if self.username in ['julian.martinez']:
            self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
            self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
            self.verticalLayout_3.setSpacing(25)
            self.verticalLayout_3.setObjectName("verticalLayout_3")
            self.Button_NewOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_NewOffer.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_NewOffer.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_NewOffer.setFont(font)
            self.Button_NewOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon3 = QtGui.QIcon()
            icon3.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Offer_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_NewOffer.setIcon(icon3)
            self.Button_NewOffer.setIconSize(QtCore.QSize(40, 40))
            self.Button_NewOffer.setCheckable(False)
            self.Button_NewOffer.setAutoRepeat(False)
            self.Button_NewOffer.setAutoExclusive(False)
            self.Button_NewOffer.setObjectName("Button_NewOffer")
            self.verticalLayout_3.addWidget(self.Button_NewOffer)
            self.Button_EditOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_EditOffer.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_EditOffer.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_EditOffer.setFont(font)
            self.Button_EditOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon4 = QtGui.QIcon()
            icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Offer_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_EditOffer.setIcon(icon4)
            self.Button_EditOffer.setIconSize(QtCore.QSize(40, 40))
            self.Button_EditOffer.setObjectName("Button_EditOffer")
            self.verticalLayout_3.addWidget(self.Button_EditOffer)
            self.Button_NewOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_NewOrder.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_NewOrder.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_NewOrder.setFont(font)
            self.Button_NewOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Order_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_NewOrder.setIcon(icon6)
            self.Button_NewOrder.setIconSize(QtCore.QSize(40, 40))
            self.Button_NewOrder.setObjectName("Button_NewOrder")
            self.verticalLayout_3.addWidget(self.Button_NewOrder)
            self.Button_NewTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_NewTag.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_NewTag.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_NewTag.setFont(font)
            self.Button_NewTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon9 = QtGui.QIcon()
            icon9.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_NewTag.setIcon(icon9)
            self.Button_NewTag.setIconSize(QtCore.QSize(40, 40))
            self.Button_NewTag.setObjectName("Button_NewTag")
            self.verticalLayout_3.addWidget(self.Button_NewTag)
            self.Button_QueryOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_QueryOrder.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_QueryOrder.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_QueryOrder.setFont(font)
            self.Button_QueryOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon8 = QtGui.QIcon()
            icon8.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Order_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_QueryOrder.setIcon(icon8)
            self.Button_QueryOrder.setIconSize(QtCore.QSize(40, 40))
            self.Button_QueryOrder.setObjectName("Button_QueryOrder")
            self.Button_QueryOrder.setText("   Consultar Pedidos")
            self.Button_QueryOrder.clicked.connect(self.query_order)
            self.verticalLayout_3.addWidget(self.Button_QueryOrder)
            self.Button_EditTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_EditTag.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_EditTag.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_EditTag.setFont(font)
            self.Button_EditTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon10 = QtGui.QIcon()
            icon10.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_EditTag.setIcon(icon10)
            self.Button_EditTag.setIconSize(QtCore.QSize(40, 40))
            self.Button_EditTag.setObjectName("Button_EditTag")
            self.verticalLayout_3.addWidget(self.Button_EditTag)
            self.Button_FactoryTimes = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_FactoryTimes.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_FactoryTimes.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_FactoryTimes.setFont(font)
            self.Button_FactoryTimes.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon11 = QtGui.QIcon()
            icon11.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Factory.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_FactoryTimes.setIcon(icon11)
            self.Button_FactoryTimes.setIconSize(QtCore.QSize(40, 40))
            self.Button_FactoryTimes.setObjectName("Button_FactoryTimes")
            self.verticalLayout_3.addWidget(self.Button_FactoryTimes)

        else:
            self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
            self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
            self.verticalLayout_3.setSpacing(25)
            self.verticalLayout_3.setObjectName("verticalLayout_3")
            self.Button_QueryOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_QueryOrder.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_QueryOrder.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_QueryOrder.setFont(font)
            self.Button_QueryOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon8 = QtGui.QIcon()
            icon8.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Order_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_QueryOrder.setIcon(icon8)
            self.Button_QueryOrder.setIconSize(QtCore.QSize(40, 40))
            self.Button_QueryOrder.setObjectName("Button_QueryOrder")
            self.Button_QueryOrder.setText("   Consultar Pedidos")
            self.Button_QueryOrder.clicked.connect(self.query_order)
            self.verticalLayout_3.addWidget(self.Button_QueryOrder)
            self.Button_EditTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_EditTag.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_EditTag.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_EditTag.setFont(font)
            self.Button_EditTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon10 = QtGui.QIcon()
            icon10.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_EditTag.setIcon(icon10)
            self.Button_EditTag.setIconSize(QtCore.QSize(40, 40))
            self.Button_EditTag.setObjectName("Button_EditTag")
            self.verticalLayout_3.addWidget(self.Button_EditTag)
            self.Button_QueryTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_QueryTag.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_QueryTag.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_QueryTag.setFont(font)
            self.Button_QueryTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon11 = QtGui.QIcon()
            icon11.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_QueryTag.setIcon(icon11)
            self.Button_QueryTag.setIconSize(QtCore.QSize(40, 40))
            self.Button_QueryTag.setObjectName("Button_QueryTag")
            self.verticalLayout_3.addWidget(self.Button_QueryTag)
            self.Button_NewDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_NewDoc.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_NewDoc.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_NewDoc.setFont(font)
            self.Button_NewDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Documents_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_NewDoc.setIcon(icon1)
            self.Button_NewDoc.setIconSize(QtCore.QSize(40, 40))
            self.Button_NewDoc.setObjectName("Button_NewDoc")
            self.verticalLayout_3.addWidget(self.Button_NewDoc)
            self.Button_ImportDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_ImportDoc.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_ImportDoc.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_ImportDoc.setFont(font)
            self.Button_ImportDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Documents_Import.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ImportDoc.setIcon(icon2)
            self.Button_ImportDoc.setIconSize(QtCore.QSize(40, 40))
            self.Button_ImportDoc.setObjectName("Button_ImportDoc")
            self.verticalLayout_3.addWidget(self.Button_ImportDoc)
            self.Button_EditDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_EditDoc.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_EditDoc.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_EditDoc.setFont(font)
            self.Button_EditDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon3 = QtGui.QIcon()
            icon3.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Documents_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_EditDoc.setIcon(icon3)
            self.Button_EditDoc.setIconSize(QtCore.QSize(40, 40))
            self.Button_EditDoc.setObjectName("Button_EditDoc")
            self.verticalLayout_3.addWidget(self.Button_EditDoc)
            self.Button_QueryDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
            self.Button_QueryDoc.setMinimumSize(QtCore.QSize(200, 50))
            self.Button_QueryDoc.setMaximumSize(QtCore.QSize(200, 50))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            self.Button_QueryDoc.setFont(font)
            self.Button_QueryDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            icon4 = QtGui.QIcon()
            icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Documents_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_QueryDoc.setIcon(icon4)
            self.Button_QueryDoc.setIconSize(QtCore.QSize(40, 40))
            self.Button_QueryDoc.setObjectName("Button_QueryDoc")
            self.verticalLayout_3.addWidget(self.Button_QueryDoc)

        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem4)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.tableDocs = CustomTableWidget()
        self.tableDocs.setMinimumSize(QtCore.QSize(650, 280))
        self.tableDocs.setObjectName("tableDocs")
        self.tableDocs.setColumnCount(7)
        self.tableDocs.setRowCount(0)
        for i in range(7):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableDocs.setHorizontalHeaderItem(i, item)
        self.tableDocs.verticalHeader().setVisible(False)
        self.tableDocs.setSortingEnabled(False)
        self.tableDocs.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.MainLayout.addWidget(self.tableDocs)
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem5)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Technical.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Technical)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Technical.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Technical)
        self.statusbar.setObjectName("statusbar")
        App_Technical.setStatusBar(self.statusbar)
        self.tableDocs.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        delay_date=QtCore.QDate.currentDate().addDays(-10)

        if self.username in ['julian.martinez']:
            self.update_principal_screen()
        
        else:
            commands_documentation = ("""
                        SELECT "num_doc_eipsa","num_order","doc_title","state","revision","state_date","tracking"
                        FROM documentation
                        WHERE (
                        "state" IS NULL OR "state" IN ('','Enviado','Comentado','Com. Mayores','Com. Menores')
                        )
                        ORDER BY "num_doc_eipsa"
                        """)
            
            column_headers = ['Nº Doc Eipsa', 'Nº Pedido', 'Título', 'Estado', 'Rev.', 'Fecha', ' Seguimiento']

            try:
                with Database_Connection(config()) as conn:
                    with conn.cursor() as cur:
                        cur.execute(commands_documentation)
                        results=cur.fetchall()
                self.tableDocs.setRowCount(len(results))
                tablerow=0

            # fill the Qt Table with the query results
                for row in results:
                    for column in range(7):
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableDocs.setItem(tablerow, column, it)

                    tablerow+=1

                self.tableDocs.setHorizontalHeaderLabels(column_headers)
                self.tableDocs.verticalHeader().hide()
                self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))
                self.tableDocs.setSortingEnabled(False)

            except (Exception, psycopg2.DatabaseError) as error:
                MessageHelper.show_message("Ha ocurrido el siguiente error:\n"
                            + str(error), "critical")

        self.retranslateUi(App_Technical)
        self.Button_Profile.clicked.connect(self.showMenu)
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.Button_EditTag.clicked.connect(self.edit_tag)
        self.Button_Notification.clicked.connect(self.notifications)
        self.Button_PortalDoc.clicked.connect(self.portal_doc)
        self.tableDocs.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)

        if self.username in ['julian.martinez']:
            self.Button_NewOffer.clicked.connect(self.new_offer)
            self.Button_EditOffer.clicked.connect(self.edit_offer)
            self.Button_FactoryTimes.clicked.connect(self.timesfactory)
            self.Button_NewOrder.clicked.connect(self.new_order)
            self.Button_NewTag.clicked.connect(self.new_tag)

        else:
            self.Button_QueryTag.clicked.connect(self.query_tag)
            self.Button_NewDoc.clicked.connect(self.create_documents)
            self.Button_ImportDoc.clicked.connect(self.import_documents)
            self.Button_EditDoc.clicked.connect(self.edit_documents)
            self.Button_QueryDoc.clicked.connect(self.query_documents)

        QtCore.QMetaObject.connectSlotsByName(App_Technical)

        self.load_notifications()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, App_Technical):
        """
        Translates and updates the text of various UI elements in the given App_Comercial.
        """
        _translate = QtCore.QCoreApplication.translate
        App_Technical.setWindowTitle(_translate("App_Technical", "ERP EIPSA - Técnico"))
        self.HeaderName.setText(_translate("App_Technical", self.name))

        if self.username in ['julian.martinez']:
            self.Button_NewTag.setText(_translate("App_Comercial", "    Nuevo(s) TAG(s)"))
            self.Button_EditTag.setText(_translate("App_Technical", "    Editar TAG(s)"))
            self.Button_FactoryTimes.setText(_translate("App_Technical", "    Tiempos Fab."))
            self.Button_NewOffer.setText(_translate("App_Technical", "        Nueva Oferta"))
            self.Button_EditOffer.setText(_translate("App_Technical", "    Editar Oferta"))
            self.Button_NewOrder.setText(_translate("App_Comercial", "    Nuevo Pedido"))

        else:
            self.Button_EditTag.setText(_translate("App_Technical", "    Editar TAG(s)"))
            self.Button_QueryTag.setText(_translate("App_Technical", "    Consultar TAG(s)"))
            self.Button_NewDoc.setText(_translate("App_Technical", "    Crear Documento"))
            self.Button_ImportDoc.setText(_translate("App_Technical", "    Importar Docum."))
            self.Button_EditDoc.setText(_translate("App_Technical", "    Editar Docum."))
            self.Button_QueryDoc.setText(_translate("App_Technical", "    Consultar Docum."))

# Function to set up header buttons based on the username
    def set_header_buttons(self, username):
        if username in ["e.carrillo"]:
            query_OTothers = """SELECT id, ot_num, TO_CHAR(start_date, 'DD/MM/YYYY'), tag, qty_ot, type_equipment, element
                                FROM fabrication.fab_order
                                WHERE "ot_num" NOT LIKE '90%'
                                ORDER BY "ot_num" DESC
                                """

            query_OT900 = """SELECT id, ot_num, TO_CHAR(start_date, 'DD/MM/YYYY'), tag, qty_ot, type_equipment, element
                                FROM fabrication.fab_order
                                WHERE "ot_num" LIKE '90%'
                                ORDER BY "ot_num" DESC
                                """

            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(query_OTothers)
                results1=cur.fetchall()

                cur.execute(query_OT900)
                results2=cur.fetchall()

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.Button_ImportTimes = QtWidgets.QPushButton(parent=self.frame)
            self.Button_ImportTimes.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_ImportTimes.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_ImportTimes.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_ImportTimes.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_ImportTimes.setText("")
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Import_Time.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ImportTimes.setIcon(icon5)
            self.Button_ImportTimes.setIconSize(QtCore.QSize(40, 40))
            self.Button_ImportTimes.setObjectName("Button_ImportTimes")
            self.Button_ImportTimes.setToolTip("Importar Tiempos")
            self.Header.addWidget(self.Button_ImportTimes)
            spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem10)
            self.Button_CheckTimes = QtWidgets.QPushButton(parent=self.frame)
            self.Button_CheckTimes.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_CheckTimes.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_CheckTimes.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_CheckTimes.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_CheckTimes.setText("")
            icon15 = QtGui.QIcon()
            icon15.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Clock.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_CheckTimes.setIcon(icon15)
            self.Button_CheckTimes.setIconSize(QtCore.QSize(40, 40))
            self.Button_CheckTimes.setObjectName("Button_CheckTimes")
            self.Button_CheckTimes.setToolTip("Tiempos")
            self.Header.addWidget(self.Button_CheckTimes)
            spacerItem7 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem7)
            self.Button_DB_Manuf = QtWidgets.QPushButton(parent=self.frame)
            self.Button_DB_Manuf.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_DB_Manuf.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_DB_Manuf.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_DB_Manuf.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_DB_Manuf.setText("")
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Worker.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_DB_Manuf.setIcon(icon7)
            self.Button_DB_Manuf.setIconSize(QtCore.QSize(40, 40))
            self.Button_DB_Manuf.setObjectName("Button_DB_Manuf")
            self.Button_DB_Manuf.setToolTip("Personal/Operaciones")
            self.Header.addWidget(self.Button_DB_Manuf)
            spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem6)
            self.Button_DBEdit = QtWidgets.QPushButton(parent=self.frame)
            self.Button_DBEdit.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_DBEdit.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_DBEdit.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_DBEdit.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_DBEdit.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Database_Admin.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_DBEdit.setIcon(icon2)
            self.Button_DBEdit.setIconSize(QtCore.QSize(40, 40))
            self.Button_DBEdit.setObjectName("Button_DBEdit")
            self.Header.addWidget(self.Button_DBEdit)
            spacerItem13 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem13)
            self.Button_PDFEdit = QtWidgets.QPushButton(parent=self.frame)
            self.Button_PDFEdit.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_PDFEdit.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_PDFEdit.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_PDFEdit.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_PDFEdit.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Adobe_PDF.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_PDFEdit.setIcon(icon2)
            self.Button_PDFEdit.setIconSize(QtCore.QSize(40, 40))
            self.Button_PDFEdit.setObjectName("Button_PDFEdit")
            self.Header.addWidget(self.Button_PDFEdit)
            spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem14)
            self.Button_OT = QtWidgets.QPushButton(parent=self.frame)
            self.Button_OT.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_OT.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_OT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_OT.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_OT.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Barcode.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_OT.setIcon(icon2)
            self.Button_OT.setIconSize(QtCore.QSize(40, 40))
            self.Button_OT.setObjectName("Button_OT")
            self.Button_OT.setToolTip("Ordenes de Trabajo 900")
            self.Header.addWidget(self.Button_OT)
            spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem2)
            self.HeaderOT = QtWidgets.QLabel(parent=self.frame)
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            self.HeaderOT.setFont(font)
            self.HeaderOT.setStyleSheet("color:rgb(3, 174, 236)")
            self.HeaderOT.setText("Ult. OT: " + str(results1[0][1]) + " / " + str(results2[0][1]))
            self.HeaderOT.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
            self.HeaderOT.setObjectName("HeaderOT")
            self.Header.addWidget(self.HeaderOT)
            spacerItem18 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem18)
            self.HeaderOT_scp = QtWidgets.QLineEdit(parent=self.frame)
            self.HeaderOT_scp.setObjectName("HeaderOT_scp")
            self.Header.addWidget(self.HeaderOT_scp)

            self.load_otscp()

            self.Button_DBEdit.clicked.connect(self.editdb)
            self.Button_ImportTimes.clicked.connect(self.importtimes)
            self.Button_CheckTimes.clicked.connect(self.checktimes)
            self.Button_PDFEdit.clicked.connect(self.editpdf)
            self.Button_DB_Manuf.clicked.connect(self.dbmanufedit)
            self.Button_OT.clicked.connect(self.otorder)
            self.HeaderOT_scp.editingFinished.connect(self.save_otscp)
        
        elif username in ["j.paredes"]:
            self.Button_Purchases = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Purchases.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Purchases.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Purchases.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Purchases.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Purchases.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Purchasing.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Purchases.setIcon(icon2)
            self.Button_Purchases.setIconSize(QtCore.QSize(40, 40))
            self.Button_Purchases.setObjectName("Button_Purchases")
            self.Button_Purchases.setToolTip("Compras")
            self.Header.addWidget(self.Button_Purchases)
            self.Button_Purchases.clicked.connect(self.purchase)
        
        elif username in ["j.valtierra"]:
            self.Button_Purchases = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Purchases.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Purchases.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Purchases.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Purchases.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Purchases.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Purchasing.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Purchases.setIcon(icon2)
            self.Button_Purchases.setIconSize(QtCore.QSize(40, 40))
            self.Button_Purchases.setObjectName("Button_Purchases")
            self.Button_Purchases.setToolTip("Compras")
            self.Header.addWidget(self.Button_Purchases)
            spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem14)
            self.Button_Deliveries = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Deliveries.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Deliveries.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Deliveries.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Deliveries.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Deliveries.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Deliveries.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Deliveries.setIcon(icon2)
            self.Button_Deliveries.setIconSize(QtCore.QSize(40, 40))
            self.Button_Deliveries.setObjectName("Button_Deliveries")
            self.Button_Deliveries.setToolTip("Envíos")
            self.Header.addWidget(self.Button_Deliveries)
            spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem14)
            self.Button_OT = QtWidgets.QPushButton(parent=self.frame)
            self.Button_OT.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_OT.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_OT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_OT.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_OT.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Barcode.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_OT.setIcon(icon2)
            self.Button_OT.setIconSize(QtCore.QSize(40, 40))
            self.Button_OT.setObjectName("Button_OT")
            self.Button_OT.setToolTip("Ordenes de Trabajo 900")
            self.Header.addWidget(self.Button_OT)
            spacerItem12 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem12)
            self.Button_TestMenu = QtWidgets.QPushButton(parent=self.frame)
            self.Button_TestMenu.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_TestMenu.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_TestMenu.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_TestMenu.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_TestMenu.setText("")
            icon9 = QtGui.QIcon()
            icon9.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Test_Menu.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_TestMenu.setIcon(icon9)
            self.Button_TestMenu.setIconSize(QtCore.QSize(40, 40))
            self.Button_TestMenu.setObjectName("Button_TestMenu")
            self.Button_TestMenu.setToolTip("Insertar Pruebas")
            self.Header.addWidget(self.Button_TestMenu)
            spacerItem16 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem16)
            self.Button_Test = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Test.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Test.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Test.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Test.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Test.setText("")
            icon14 = QtGui.QIcon()
            icon14.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Tests.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Test.setIcon(icon14)
            self.Button_Test.setIconSize(QtCore.QSize(40, 40))
            self.Button_Test.setObjectName("Button_Test")
            self.Button_Test.setToolTip("Verificación")
            self.Header.addWidget(self.Button_Test)
            spacerItem17 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem17)
            self.Button_Nuclear = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Nuclear.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Nuclear.setMaximumSize(QtCore.QSize(50, 16777215))
            self.Button_Nuclear.setToolTip('Anexos Nuclear')
            self.Button_Nuclear.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Nuclear.setStyleSheet(
                "QPushButton{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(3, 174, 236);\n"
                "    background-color: rgb(255, 255, 255);\n"
                "    border-radius: 10px;\n"
                "}\n"
                "\n"
                "QPushButton:hover{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(0, 0, 0);\n"
                "    color: rgb(0,0,0);\n"
                "    background-color: rgb(255, 255, 255);\n"
                "    border-radius: 10px;\n"
                "}\n"
                "\n"
                "QPushButton:pressed{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(0, 0, 0);\n"
                "    color: rgb(0,0,0);\n"
                "    background-color: rgb(200, 200, 200);\n"
                "    border-radius: 10px;\n"
                "}"
            )
            self.Button_Nuclear.setText("")
            icon17 = QtGui.QIcon()
            icon17.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Nuclear.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Nuclear.setIcon(icon17)
            self.Button_Nuclear.setIconSize(QtCore.QSize(40, 40))
            self.Button_Nuclear.setObjectName("Button_Nuclear")
            self.Header.addWidget(self.Button_Nuclear)
            self.Button_Purchases.clicked.connect(self.purchase)
            self.Button_Deliveries.clicked.connect(self.deliveries)
            self.Button_OT.clicked.connect(self.otorder)
            self.Button_TestMenu.clicked.connect(self.insert_test)
            self.Button_Test.clicked.connect(self.query_test)
            self.Button_Nuclear.clicked.connect(self.nuclear_annex)

        elif username in ["j.martinez"]:
            self.Button_Factory = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Factory.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Factory.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Factory.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Factory.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Factory.setText("")
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Factory.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Factory.setIcon(icon6)
            self.Button_Factory.setIconSize(QtCore.QSize(40, 40))
            self.Button_Factory.setObjectName("Button_Factory")
            self.Button_Factory.setToolTip("Fábrica")
            self.Header.addWidget(self.Button_Factory)
            spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem14)
            self.Button_OT = QtWidgets.QPushButton(parent=self.frame)
            self.Button_OT.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_OT.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_OT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_OT.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_OT.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Barcode.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_OT.setIcon(icon2)
            self.Button_OT.setIconSize(QtCore.QSize(40, 40))
            self.Button_OT.setObjectName("Button_OT")
            self.Button_OT.setToolTip("Ordenes de Trabajo 900")
            self.Header.addWidget(self.Button_OT)
            spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem2)
            self.Button_ClockIn = QtWidgets.QPushButton(parent=self.frame)
            self.Button_ClockIn.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_ClockIn.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_ClockIn.setToolTip('Fichajes')
            self.Button_ClockIn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_ClockIn.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_ClockIn.setText("")
            icon17 = QtGui.QIcon()
            icon17.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "ClockIn.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ClockIn.setIcon(icon17)
            self.Button_ClockIn.setIconSize(QtCore.QSize(40, 40))
            self.Button_ClockIn.setObjectName("Button_ClockIn")
            self.Header.addWidget(self.Button_ClockIn)
            spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem)
            self.Button_Index_Drawings = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Index_Drawings.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Index_Drawings.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Index_Drawings.setToolTip('Índice Planos')
            self.Button_Index_Drawings.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Index_Drawings.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Index_Drawings.setText("")
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Drawing_Index.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Index_Drawings.setIcon(icon6)
            self.Button_Index_Drawings.setIconSize(QtCore.QSize(int(40), int(40)))
            self.Button_Index_Drawings.setObjectName("Button_Index_Drawings")
            self.Header.addWidget(self.Button_Index_Drawings)

            spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem)
            self.Button_Verification = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Verification.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Verification.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Verification.setToolTip('Verificación')
            self.Button_Verification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Verification.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Verification.setText("")
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Verification.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Verification.setIcon(icon6)
            self.Button_Verification.setIconSize(QtCore.QSize(int(40), int(40)))
            self.Button_Verification.setObjectName("Button_Verification")
            self.Header.addWidget(self.Button_Verification)
            
            self.Button_Factory.clicked.connect(self.factory)
            self.Button_OT.clicked.connect(self.otorder)
            self.Button_ClockIn.clicked.connect(self.clockin)
            self.Button_Index_Drawings.clicked.connect(self.index_drawing)
            self.Button_Verification.clicked.connect(self.verification)
        
        elif username in ["s.sanchez"]:
            self.Button_TechOffice = QtWidgets.QPushButton(parent=self.frame)
            self.Button_TechOffice.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_TechOffice.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_TechOffice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_TechOffice.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_TechOffice.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TechOffice.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_TechOffice.setIcon(icon2)
            self.Button_TechOffice.setIconSize(QtCore.QSize(40, 40))
            self.Button_TechOffice.setObjectName("Button_TechOffice")
            self.Button_TechOffice.setToolTip("Oficina Técnica")
            self.Header.addWidget(self.Button_TechOffice)
            self.Button_TechOffice.clicked.connect(self.techoffice)
        
        elif username in ["julian.martinez"]:
            self.Button_OT = QtWidgets.QPushButton(parent=self.frame)
            self.Button_OT.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_OT.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_OT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_OT.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_OT.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Barcode.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_OT.setIcon(icon2)
            self.Button_OT.setIconSize(QtCore.QSize(40, 40))
            self.Button_OT.setObjectName("Button_OT")
            self.Button_OT.setToolTip("Ordenes de Trabajo 900")
            self.Header.addWidget(self.Button_OT)
            self.Button_OT.clicked.connect(self.otorder)

# Function to open window to check order drawings
    def index_drawing(self):
        """
        Loads and displays the workshop drawing index window after establishing a database connection.
        """
        from WorkshopDrawingIndex_Window import Ui_WorkshopDrawingIndex_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_index = Create_DBconnection(user_database, password_database, 'drawing_index')
        if not db_index:
            sys.exit()

        self.index_drawing_window = Ui_WorkshopDrawingIndex_Window(db_index, self.username)
        self.index_drawing_window.showMaximized()

# Function to edit database tables of technical section
    def editdb(self):
        """
        Opens a window for editing the database records.
        """
        from DBEditReg_Window import Ui_DBEditReg_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_validation = Create_DBconnection(user_database, password_database)
        if not db_validation:
            sys.exit()

        self.dbedit_window=Ui_DBEditReg_Window(db_validation)
        self.dbedit_window.show()

# Function to open window with deliveries table
    def deliveries(self):
        """
        Opens a window displaying the deliveries table.
        """
        from Deliveries_Window import Ui_Deliveries_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_deliveries = Create_DBconnection(user_database, password_database)
        if not db_deliveries:
            sys.exit()

        self.deliveries_window = Ui_Deliveries_Window(db_deliveries)
        self.deliveries_window.show()

# Function to open window with OT table
    def otorder(self):
        """
        Opens a window for creating OT (Order of Work) records.
        """
        from OTGeneralCreate_Window import Ui_OTGeneralCreate_Window
        self.otgeneralcreate_window=QtWidgets.QMainWindow()
        self.ui=Ui_OTGeneralCreate_Window()
        self.ui.setupUi(self.otgeneralcreate_window)
        self.otgeneralcreate_window.show()

# Function to open window to insert test data
    def insert_test(self):
        """
        Opens a menu for inserting test data.
        """
        from Tests_Menu import Ui_Tests_Menu
        self.Testinsert_window=Ui_Tests_Menu(self.username)
        self.Testinsert_window.show()

# Function to open window with orders table for technical office data
    def techoffice(self):
        """
        Opens a window displaying the orders table for technical office data.
        """
        from TechOffice_Window import Ui_TechOffice_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_techoffice = Create_DBconnection(user_database, password_database)
        if not db_techoffice:
            sys.exit()

        self.techoffice_window = Ui_TechOffice_Window(db_techoffice)
        self.techoffice_window.show()

# Function to open window with notifications table
    def notifications(self):
        """
        Opens a new window to show active notifications. 
        """
        from NotificationsHistory_Window import Ui_HistoryNotifications_Window
        self.notification_window=Ui_HistoryNotifications_Window(self.username)
        self.notification_window.show()
        self.notification_window.Button_Cancel.clicked.connect(self.load_notifications)

# Function to open window with all notifications table
    def notifications_all(self):
        """
        Opens a new window to show active notifications. 
        """
        from NotificationsAll_History_Window import Ui_HistoryNotificationsAll_Window
        self.notification_all_window=Ui_HistoryNotificationsAll_Window(self.username)
        self.notification_all_window.show()
        self.notification_all_window.Button_Cancel.clicked.connect(self.load_notifications)

# Function to open window for order query
    def query_order(self):
        """
        Opens a new window for querying orders. 
        """
        from OrderQuery_Window import Ui_QueryOrder_Window
        self.query_order_window=Ui_QueryOrder_Window('Técnico')

        self.query_order_window.show()

# Function to open window for tag edition
    def edit_tag(self):
        """
        Opens a new window for editing existing tags. 
        """
        from TAGEdit_Technical_Window import Ui_EditTags_Technical_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_tags_tech = Create_DBconnection(user_database, password_database)
        if not db_tags_tech:
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Technical_Window(self.username, db_tags_tech)
        self.edit_tags_app.show()

# Function to open window for tag query
    def query_tag(self):
        """
        Opens a new window for querying tags. 
        """
        from TAGQuery_Menu import Ui_TAGQuery_Menu
        self.querytag_window=QtWidgets.QMainWindow()
        self.ui=Ui_TAGQuery_Menu('Técnico')
        self.ui.setupUi(self.querytag_window)
        self.querytag_window.show()

# Function to open window for documentation creation
    def create_documents(self):
        """
        Opens a window for creating new documents.
        """
        from DocNew_Window import Ui_New_Doc_Window
        self.createdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_Doc_Window()
        self.ui.setupUi(self.createdoc_window)
        self.createdoc_window.show()

# Function to open window for documentation importation
    def import_documents(self):
        """
        Opens a file dialog for selecting an Excel file and imports its contents into the database.
        """
        # File dialog to select Excel file
        # Tk().withdraw()  # Ocultar la ventana principal de tkinter
        excel_file = askopenfilename(filetypes=[("Archivos de Excel", "*.xlsx")],
                        title="Seleccionar archivo Excel")

        if excel_file:
            try:
    # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # Saving Excel in Pandas Dataframe
                df = pd.read_excel(excel_file)

            # Reading each row and inserting data in table
                for index, row in df.iterrows():
                # Creating SQL sentence
                    values=[str(value) for value in row.values]
                    values.append('')

                    query = "SELECT * FROM documentation WHERE num_doc_eipsa = %s"
                    cur.execute(query, (values[0],))
                    results=cur.fetchall()
                    match=list(filter(lambda x:values[0] in x, results))

                    if len(match)>0:
                        dlg = QtWidgets.QMessageBox()
                        new_icon = QtGui.QIcon()
                        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                        dlg.setWindowIcon(new_icon)
                        dlg.setWindowTitle("Nuevo Documento")
                        dlg.setText(f"El número de documento '{values[0]}' ya existe y no será importado. Por favor, edítalo y vuelve a importarlo")
                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                        dlg.exec()
                        del dlg, new_icon

                    else:
                        query = "SELECT id FROM document_type WHERE doc_type = %s"
                        cur.execute(query, (values[4],))
                    # get results from query
                        resultado = cur.fetchone()
                    # get id from table
                        id_doctype = resultado[0]
                    #inserting values to BBDD
                        values[4]=str(id_doctype)
                        values = "', '".join(['' if value=='nan' else value for value in values])
                        sql_insertion = f"INSERT INTO documentation (num_doc_eipsa,num_doc_client,num_order,doc_title,doc_type_id,critical,state) VALUES ('{values}')"
                    # Executing SQL sentence
                        cur.execute(sql_insertion)

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Importar Documentos")
                dlg.setText("Importación completada")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to open window for documentation edition
    def edit_documents(self):
        """
        Opens a window for editing existing documents in the database.
        """
        from DocEdit_Window import Ui_EditDoc_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_doc = Create_DBconnection(user_database, password_database)
        if not db_doc:
            sys.exit()

        self.editdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditDoc_Window(db_doc)
        self.ui.setupUi(self.editdoc_window)
        self.editdoc_window.showMaximized()

# Function to open window for documentation query
    def query_documents(self):
        """
        Opens a new window for querying documents. 
        """
        from DocQuery_Window import Ui_QueryDoc_Window
        self.querydoc_menu=Ui_QueryDoc_Window()
        self.querydoc_menu.show()

# Function to show contextual menu when profile image is clicked
    def showMenu(self):
        """
        Displays a context menu when the profile button is clicked. 
        Provides options to edit the password.
        """
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contraseña")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))

# Function to open window for password edition
    def editpassword(self):
        """
        Opens a new window for editing the user's password. 
        """
        from PasswordEdit_Window import Ui_EditPasswordWindow
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()

# Function to update documentation table
    def update_table(self):
        """
        Updates the documentation table. Fetches documentation records that are either in a specific state or have no state. 
        Handles errors and displays them using a message box.

        Raises:
            Exception: If there is an error during the database operation.
        """
        self.tableDocs.setRowCount(0)
        delay_date=QtCore.QDate.currentDate().addDays(-10)
        commands_documentation = ("""
                    SELECT "num_doc_eipsa","num_order","doc_title","state","revision","state_date","tracking"
                    FROM documentation
                    WHERE (
                    "state" IS NULL OR "state" IN ('','Enviado','Comentado','Com. Mayores','Com. Menores')
                    )
                    ORDER BY "num_doc_eipsa"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_documentation)
            results=cur.fetchall()
            self.tableDocs.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(7):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableDocs.setItem(tablerow, column, it)

                tablerow+=1

            self.tableDocs.verticalHeader().hide()
            self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))
            self.tableDocs.setSortingEnabled(False)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableDocs.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableDocs.horizontalHeader().height()
        popup_pos = self.tableDocs.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableDocs.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to load number of notifications
    def load_notifications(self):
        """
        Loads and displays notifications for the user from various tables in the 'notifications' schema.
        """
        query_tables_notifications = """SELECT table_name
                                FROM information_schema.tables
                                WHERE table_schema = 'notifications' AND table_type = 'BASE TABLE';"""

        try:
            with Database_Connection(config()) as conn:
                with conn.cursor() as cur:
                    cur.execute(query_tables_notifications)
                    results=cur.fetchall()

                    tables_names=[x[0] for x in results]

                    notifications = []

                    for table in tables_names:
                        commands_notifications = f" SELECT * FROM notifications.{table} WHERE username = '{self.username}' and state = 'Pendiente'"
                        cur.execute(commands_notifications)
                        results=cur.fetchall()

                        for x in results:
                            notifications.append(x)

        except (Exception, psycopg2.DatabaseError) as error:
            MessageHelper.show_message("Ha ocurrido el siguiente error:\n"
                        + str(error), "critical")

        if len(notifications) != 0:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Notif_on.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        else:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Notif_off.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Notification.setIcon(icon13)

# Function to import clock times
    def importtimes(self):
        """
        Imports operational times from a text file into the database.

        Processes a specified text file, transforms the data into a DataFrame, 
        and inserts it into the table in the PostgreSQL database.

        Raises:
            Exception: If there is an error during the database operation.
        """

        fname = r"\\nas01\DATOS\Comunes\EIPSA-ERP\Tiempos\EXPSEM.txt"

        if fname:
            df = pd.read_csv(fname, sep = "|", header=None, encoding="latin-1", dtype={8: str})
            df = df.astype(str)
            final_df = df.iloc[:,[0, 2, 3, 4, 6, 7, 8, 10]]
            final_df.columns = ['personal_id','date_ot', 'start_hour', 'end_hour', 'total_time','time_ot','number_ot','operations_id']
            final_df['number_ot'] = final_df['number_ot'].str.replace(' ', '')

            params = config()
            conn = psycopg2.connect(**params)
            cursor = conn.cursor()

            try:

                for index, row in final_df.iterrows():
                # Create a list of pairs (column_name, column_value) for each column with value
                    columns_values = [(column, row[column]) for column in final_df.columns if not pd.isnull(row[column])]

                # Creating string for columns names
                    columns = ', '.join([column for column, _ in columns_values])

                # Creating string for columns values. For money/amount values, dots are replaced for commas to avoid insertion problems
                    values = ', '.join([f"'{values.replace(':', '.')}'" if column in ['total_time', 'time_ot'] else f"'{values}'" for column, values in columns_values])

                    sql_insertion = f"INSERT INTO fabrication.imp_ot ({columns}) VALUES ({values})"

                    cursor.execute(sql_insertion)

                conn.commit()
                cursor.close()

                new_fname = r"\\nas01\DATOS\Comunes\EIPSA-ERP\Tiempos\EXPSEM.txt"

                new_fname = "//nas01/DATOS/Comunes/EIPSA-ERP/Tiempos/EXPORTADOS/" + date.today().strftime("%Y") + "/EXPSEM " + date.today().strftime("%Y-%m-%d") + ".txt"

                os.rename(fname, new_fname)

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("TXT importado con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to show clock-in menu
    def clockin(self):
        """
        Opens the clock-in menu.
        """
        from ClockIn_Menu import Ui_ClockIn_Menu
        self.clockin_window = Ui_ClockIn_Menu(self.username)
        self.clockin_window.show()

# Function to show clock-in menu
    def factory(self):
        """
        Opens the factory menu.
        """
        from Factory_Menu import Ui_Factory_Menu
        self.factory_menu = Ui_Factory_Menu(self.username)
        self.factory_menu.show()

# Function to allow copy function in documents table
    def keyPressEvent(self, event):
        """
        Handles custom key events for cell operations in the table.

        Args:
            event (QtGui.QKeyEvent): The key event to handle.
        """
        super().keyPressEvent(event)
        if event.matches(QtGui.QKeySequence.StandardKey.Copy):
            selected_indexes = self.tableDocs.selectedIndexes()
            if selected_indexes:
                clipboard = QtWidgets.QApplication.clipboard()
                text = self.get_selected_text(selected_indexes)
                clipboard.setText(text)

# Function to get the copied text in the clipboard
    def get_selected_text(self, indexes):
        """
        Retrieves the text from the selected cells and returns it as a plain text string.

        Args:
            indexes (list of QModelIndex): A list of QModelIndex objects representing the selected cells.
        
        Returns:
            str: A string containing the text from the selected cells.
        """
        rows = set()
        cols = set()
        for index in indexes:
            rows.add(index.row())
            cols.add(index.column())

        text_doc = QtGui.QTextDocument()
        cursor = QtGui.QTextCursor(text_doc)

        header_labels = [self.tableDocs.horizontalHeaderItem(col).text() for col in sorted(cols)]
        for label in header_labels:
            cursor.insertText(label)
            cursor.insertText('\t')  # Tab separador de columnas
        cursor.insertText('\n')   # Salto de línea después de las cabeceras

        for row in sorted(rows):
            for col in sorted(cols):
                cell_data = self.tableDocs.item(row, col).data(QtCore.Qt.ItemDataRole.DisplayRole)
                cursor.insertText(cell_data)
                cursor.insertText('\t')  # Tab separador de columnas
            cursor.insertText('\n')  # Salto de línea al final de la fila

        return text_doc.toPlainText()

# Function to open menu for document control
    def portal_doc(self):
        """
        Opens the document portal menu window.
        """
        from DocPortal_Menu import Ui_PortalDoc_Menu
        self.portaldoc_menu=Ui_PortalDoc_Menu()
        self.portaldoc_menu.show()

# Function to insert text on existing PDF
    def editpdf(self):
        """
        Inserts text into an existing PDF based on data from an Excel file and saves the modified PDF.

        Prompts the user to select a PDF file to edit, processes the corresponding Excel file, 
        and merges new content onto the specified pages.

        Raises:
            Exception: If there is an error during the PDF editing process.
        """

        while True:
            answer, ok = QtWidgets.QInputDialog.getItem(self, "Texto en PDF", "¿Que quieres incluir?:", ['Notas', 'TAGS'], 0, False)
            if ok and answer:
                if answer == 'Notas':
                    dlg4 = QtWidgets.QInputDialog()
                    new_icon4 = QtGui.QIcon()
                    new_icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg4.setWindowIcon(new_icon4)
                    dlg4.setWindowTitle('Texto en PDF')
                    dlg4.setLabelText('Nº Pedido:')

                    while True:
                        clickedButton4 = dlg4.exec()
                        if clickedButton4 == 1:
                            order_number = dlg4.textValue()
                            if order_number != '':
                                query_flow = ('''
                                    SELECT tags_data.tags_flow."tag", tags_data.tags_flow."technical_notes"
                                    FROM tags_data.tags_flow
                                    WHERE UPPER (tags_data.tags_flow."num_order") LIKE UPPER('%%'||%s||'%%')
                                    ''')
                                query_temp = ('''
                                    SELECT tags_data.tags_temp."tag", tags_data.tags_temp."technical_notes"
                                    FROM tags_data.tags_temp
                                    WHERE UPPER (tags_data.tags_temp."num_order") LIKE UPPER('%%'||%s||'%%')
                                    ''')
                                query_level = ('''
                                    SELECT tags_data.tags_level."tag", tags_data.tags_level."technical_notes"
                                    FROM tags_data.tags_level
                                    WHERE UPPER (tags_data.tags_level."num_order") LIKE UPPER('%%'||%s||'%%')
                                    ''')
                                conn = None
                                try:
                                # read the connection parameters
                                    params = config()
                                # connect to the PostgreSQL server
                                    conn = psycopg2.connect(**params)
                                    cur = conn.cursor()
                                # execution of commands
                                    cur.execute(query_flow,(order_number,))
                                    results_flow=cur.fetchall()
                                    cur.execute(query_temp,(order_number,))
                                    results_temp=cur.fetchall()
                                    cur.execute(query_level,(order_number,))
                                    results_level=cur.fetchall()

                                    columns = ["tag", "technical_notes"]
                                    df_flow = pd.DataFrame(results_flow, columns=columns)
                                    df_temp = pd.DataFrame(results_temp, columns=columns)
                                    df_level = pd.DataFrame(results_level, columns=columns)

                                    # Concatenate dataframes
                                    df_combined = pd.concat([df_flow, df_temp, df_level], ignore_index=True)

                                    df_combined = df_combined.dropna()

                                    excel_file = askopenfilename(filetypes=[("Archivos de Excel", "*.xlsx")], title="Seleccionar archivo Excel")
                                    df_data = pd.read_excel(excel_file)

                                    if df_data.shape[0] > 0:
                                        original_path = askdirectory(title="Seleccionar carpeta con PDFs")
                                        for row in range(df_data.shape[0]):
                                            file_path = original_path + "/" + str(df_data.iloc[row,0]) + ".pdf"
                                            if not os.path.exists(file_path):
                                                print(f"Archivo no encontrado: {file_path}")
                                                continue
                                            reader = PdfReader(file_path)
                                            page_overlay = PdfReader(new_content_notes(str(df_data.iloc[row,1]))).pages[0] # PdfReader(self.new_content_notes(df_data.iloc[row,1], df_data.iloc[row,2], orientation)).pages[0]
                                            reader.pages[0].merge_page(page2=page_overlay)

                                            writer = PdfWriter()
                                            writer.append_pages_from_reader(reader)
                                            writer.write(original_path + "/" + str(df_data.iloc[row,0]) + ".pdf")

                                        dlg = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg.setWindowIcon(new_icon)
                                        dlg.setWindowTitle("ERP EIPSA")
                                        dlg.setText("PDFs editados con éxito")
                                        dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                        dlg.exec()
                                        del dlg, new_icon

                                # close communication with the PostgreSQL database server
                                    cur.close()
                                # commit the changes
                                    conn.commit()
                                except (Exception, psycopg2.DatabaseError) as error:
                                    dlg = QtWidgets.QMessageBox()
                                    new_icon = QtGui.QIcon()
                                    new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                    dlg.setWindowIcon(new_icon)
                                    dlg.setWindowTitle("ERP EIPSA")
                                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                                + str(error))
                                    print(error)
                                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                                    dlg.exec()
                                    del dlg, new_icon
                                finally:
                                    if conn is not None:
                                        conn.close()
                                break
                            dlg_error = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_error.setWindowIcon(new_icon)
                            dlg_error.setWindowTitle("Texto en PDF")
                            dlg_error.setText("El número de pedido no puede estar vacío. Introduce un valor válido.")
                            dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_error.exec()
                            del dlg_error,new_icon
                        else:
                            break
                else:
                    pdf_file = askopenfilename(filetypes=[("Archivos PDF", "*.pdf")], title="Seleccionar archivo pdf")

                    if pdf_file:
                        excel_file = r"\\nas01\DATOS\Comunes\EIPSA-ERP\Plantillas Importación\Importar Tags Cálculos.xlsx"

                        try:
                            reader = PdfReader(pdf_file)

                            df_data = pd.read_excel(excel_file)

                            for row in range(df_data.shape[0]):
                                page_overlay = PdfReader(new_content_tags(df_data.iloc[row,1], df_data.iloc[row,2])).pages[0] # PdfReader(self.new_content_tags(df_data.iloc[row,1], df_data.iloc[row,2], orientation)).pages[0]
                                reader.pages[int(df_data.iloc[row,0]) - 1].merge_page(page2=page_overlay)

                            path_parts = pdf_file.rsplit('/', 1)
                            first_part = path_parts[0] + "/"
                            name, extension = path_parts[1].rsplit('.', 1)

                            output_path = first_part + name + ".pdf"

                            if output_path:

                                writer = PdfWriter()
                                writer.append_pages_from_reader(reader)
                                writer.write(output_path)

                                dlg = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg.setWindowIcon(new_icon)
                                dlg.setWindowTitle("ERP EIPSA")
                                dlg.setText("PDF Generado con éxito")
                                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                                dlg.exec()
                                del dlg, new_icon

                        except Exception as error:
                            print(error)
                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("ERP EIPSA")
                            dlg.setText("Ha ocurrido el siguiente error:\n"
                                        + str(error))
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                            dlg.exec()
                            del dlg, new_icon
                break
            else:
                break

# Function to show window with tables of all tests
    def query_test(self):
        """
        Prompts the user to enter an order number and displays a window with the corresponding test tables.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Verificación')
        dlg.setLabelText('Introduce un pedido:')

        while True:
            clickedButton = dlg.exec()
            if clickedButton == 1:
                numorder = dlg.textValue()
                if numorder != '':
                    from Verif_Order_Window import Ui_Verif_Order_Window
                    self.testquery_window=QtWidgets.QMainWindow()
                    self.ui=Ui_Verif_Order_Window(self.username, numorder)
                    self.ui.setupUi(self.testquery_window)
                    self.testquery_window.showMaximized()
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Verificación")
                dlg_error.setText("El pedido no puede estar vacío. Introduce un valor válido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Funtion to show window with manufacturing times
    def checktimes(self):
        """
        Opens a window displaying manufacturing times.
        """
        from TimesQuery_Window import Ui_TimesQuery_Window
        self.timesquery_window=QtWidgets.QMainWindow()
        self.ui=Ui_TimesQuery_Window(self.username)
        self.ui.setupUi(self.timesquery_window)
        self.timesquery_window.showMaximized()

# Function to generate nuclear annexes
    def nuclear_annex(self):
        """
        Prompts the user for various inputs to generate nuclear annexes and exports them to an Excel document.
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Anexos Nucleares')
        dlg.setLabelText('Inserte pedido:')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Anexos Nucleares')
        dlg2.setLabelText('CODIGO A.N.A.:')

        dlg3 = QtWidgets.QInputDialog()
        new_icon3 = QtGui.QIcon()
        new_icon3.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg3.setWindowIcon(new_icon3)
        dlg3.setWindowTitle('Anexos Nucleares')
        dlg3.setLabelText('PDO A.N.A.:')

        dlg4 = QtWidgets.QInputDialog()
        new_icon4 = QtGui.QIcon()
        new_icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg4.setWindowIcon(new_icon4)
        dlg4.setWindowTitle('Anexos Nucleares')
        dlg4.setLabelText('Linea:')

        while True:
            annex, ok = QtWidgets.QInputDialog.getItem(self, "Anexos Nucleares", "Seleccióna un tipo de anexo:", ['Anexo A', 'Anexo B', 'Anexo C'], 0, False)
            if ok and annex:
                annex_type = annex
                if annex_type != '':
                    while True:
                        clickedButton = dlg.exec()
                        if clickedButton == 1:
                            numorder = dlg.textValue()
                            if numorder != '':
                                while True:
                                    clickedButton2 = dlg2.exec()
                                    if clickedButton2 == 1:
                                        ana_code = dlg2.textValue()
                                        if ana_code != '':
                                            while True:
                                                clickedButton3 = dlg3.exec()
                                                if clickedButton3 == 1:
                                                    ana_order = dlg3.textValue()
                                                    if ana_order != '':
                                                        while True:
                                                            clickedButton4 = dlg4.exec()
                                                            if clickedButton4 == 1:
                                                                line_number = dlg4.textValue()
                                                                if line_number != '':
                                                                    from Excel_Export_Templates import nuclear_annexes
                                                                    excel_to_export = nuclear_annexes(annex_type, numorder, ana_code, ana_order, line_number)
                                                                    excel_to_export.save_excel_doc()
                                                                    break
                                                                dlg_error = QtWidgets.QMessageBox()
                                                                new_icon = QtGui.QIcon()
                                                                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                                dlg_error.setWindowIcon(new_icon)
                                                                dlg_error.setWindowTitle("Anexos Nucleares")
                                                                dlg_error.setText("La línea no puede estar vacía")
                                                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                                                dlg_error.exec()
                                                                del dlg_error,new_icon
                                                            else:
                                                                break
                                                        break
                                                    dlg_error = QtWidgets.QMessageBox()
                                                    new_icon = QtGui.QIcon()
                                                    new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                    dlg_error.setWindowIcon(new_icon)
                                                    dlg_error.setWindowTitle("Anexos Nucleares")
                                                    dlg_error.setText("El pedido A.N.A. no puede estar vacío")
                                                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                                    dlg_error.exec()
                                                    del dlg_error,new_icon
                                                else:
                                                    break
                                            break
                                        dlg_error = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg_error.setWindowIcon(new_icon)
                                        dlg_error.setWindowTitle("Anexos Nucleares")
                                        dlg_error.setText("El código A.N.A. no puede estar vacío")
                                        dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                        dlg_error.exec()
                                        del dlg_error,new_icon
                                    else:
                                        break
                                break
                            dlg_error = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_error.setWindowIcon(new_icon)
                            dlg_error.setWindowTitle("Anexos Nucleares")
                            dlg_error.setText("El número de pedido no puede estar vacío")
                            dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_error.exec()
                            del dlg_error,new_icon
                        else:
                            break
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Anexos Nucleares")
                dlg_error.setText("Selecciona un anexo")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to edit database tables of manufacturing section
    def dbmanufedit(self):
        """
        Opens the database manufacturing editing window.
        """
        from DBManufEditReg_Window import Ui_DBEditRegManuf_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_manuf = Create_DBconnection(user_database, password_database)
        if not db_manuf:
            sys.exit()

        self.dbedit_window=Ui_DBEditRegManuf_Window(db_manuf)
        self.dbedit_window.show()

    def load_otscp(self):
        with open(r"\\nas01\DATOS\Comunes\EIPSA-ERP\Resources\scpwin_ot.txt","rb") as ot_file:
            ot_number = ot_file.read().decode('utf-8')
            self.HeaderOT_scp.setText(str(ot_number))

    def save_otscp(self):
        ot_number = self.HeaderOT_scp.text()
        with open(r"\\nas01\DATOS\Comunes\EIPSA-ERP\Resources\scpwin_ot.txt", "wb") as ot_file:
            ot_file.write(ot_number.encode('utf-8'))

# Function to open menu with purchase department functions
    def purchase(self):
        """
        Opens a new window for open purchase menu. 
        """
        from Purchasing_Menu import Ui_Purchasing_Menu
        self.purchasing_window=QtWidgets.QMainWindow()
        self.ui=Ui_Purchasing_Menu(self.name, self.username)
        self.ui.setupUi(self.purchasing_window)
        self.purchasing_window.show()

# Function to open corresponding window when Verification button is clicked
    def verification(self):
        """
        Open a new window for verification actions.
        """
        from VerificationInsert_Window import Ui_VerificationInsert_Window
        self.Verificationinsert_window=QtWidgets.QMainWindow()
        self.ui=Ui_VerificationInsert_Window(self.username)
        self.ui.showMaximized()

# Function to open fabrication times summary
    def timesfactory(self):
        """
        Prompts the user for various inputs to open window with manufacturing times
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Consultar tiempos')
        dlg.setLabelText('Inserte pedido:')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Consultar tiempos')
        dlg2.setLabelText('Inserte número OT:')

        while True:
            query_type, ok = QtWidgets.QInputDialog.getItem(self, "Consultar tiempos", "Selecciona como consultar:", ['Número OT', 'Pedido'], 0, False)
            if ok and query_type:
                if query_type != '':
                    if query_type[0] == 'P':
                        while True:
                            clickedButton = dlg.exec()
                            if clickedButton == 1:
                                numorder = dlg.textValue()
                                if numorder != '':
                                    from FabTimes_Window import Ui_FabTimes_Window
                                    self.timesfab_window=QtWidgets.QMainWindow()
                                    self.ui = Ui_FabTimes_Window(self.username, numorder)
                                    self.ui.setupUi(self.timesfab_window)
                                    self.timesfab_window.showMaximized()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle("Consultar tiempos")
                                dlg_error.setText("El pedido no puede estar vacío")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break

                    else:
                        while True:
                            clickedButton = dlg2.exec()
                            if clickedButton == 1:
                                num_ot = dlg2.textValue()
                                if num_ot != '':
                                    from FabTimes_Window import Ui_FabTimes_Window
                                    self.timesfab_window=QtWidgets.QMainWindow()
                                    self.ui = Ui_FabTimes_Window(self.username, num_ot)
                                    self.ui.setupUi(self.timesfab_window)
                                    self.timesfab_window.showMaximized()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle("Consultar tiempos")
                                dlg_error.setText("El número OT no puede estar vacío")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Consultar tiempos")
                dlg_error.setText("Selecciona un tipo")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to open window for create offers
    def new_offer(self):
        """
        Opens a new window for creating a new offer in the application. 
        """
        from OfferNew_Menu import Ui_NewOffer_Menu
        self.new_offer_menu=QtWidgets.QMainWindow()
        self.ui=Ui_NewOffer_Menu(self.username)
        self.ui.setupUi(self.new_offer_menu)
        self.new_offer_menu.show()
        if self.username in ['julian.martinez']:
            self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for edit offers
    def edit_offer(self):
        """
        Opens a new window for editing an existing offer. 
        """
        from OfferEdit_Menu import Ui_EditOffer_Menu
        self.edit_offer_menu=QtWidgets.QMainWindow()
        self.ui=Ui_EditOffer_Menu(self.username)
        self.ui.setupUi(self.edit_offer_menu)
        self.edit_offer_menu.show()
        if self.username in ['julian.martinez']:
            self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for create orders
    def new_order(self):
        """
        Opens a new window for creating a new order. 
        """
        from OrderNewAddData_Window import Ui_New_OrderAddData_Window
        self.new_orderAddData_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_OrderAddData_Window()
        self.ui.setupUi(self.new_orderAddData_window)
        self.new_orderAddData_window.show()
        if self.username in ['julian.martinez']:
            self.ui.Button_Cancel.clicked.connect(self.update_principal_screen)

# Function to open window for create tags
    def new_tag(self):
        """
        Opens a new window for creating new tags. 
        """
        from TAGCreate_Menu import Ui_CreateTag_Menu
        self.new_tag_window=QtWidgets.QMainWindow()
        self.ui=Ui_CreateTag_Menu()
        self.ui.setupUi(self.new_tag_window)
        self.new_tag_window.show()

# Function to load values on table
    def load_table(self):
        """
        Loads and displays offer data in a table widget.
        Handles errors with a message box and updates the table widget with the data.
        """
        self.tableDocs.setRowCount(0)

        commands_responsible = ("""
                        SELECT *
                        FROM users_data.initials
                        """)

        commands_appcomercial = ("""
                    SELECT "num_offer","state","client","final_client",TO_CHAR("presentation_date", 'DD-MM-YYYY'),"material","offer_amount","probability","notes","important","tracking"
                    FROM offers
                    WHERE ("responsible" = %s
                    AND
                    ("state" = 'Presentada'
                    OR
                    "state" = 'Registrada'
                    ))
                    ORDER BY "num_offer"
                    """)
        
        column_headers = ['Nº Oferta', 'Estado', 'Cliente', 'Cl. Final', 'Fecha Pres.', 'Material', 'Importe', 'Prob. Adj.', 'Notas', 'Importante', 'Seguimiento']

        try:
            with Database_Connection(config()) as conn:
                with conn.cursor() as cur:
                # execution of commands
                    cur.execute(commands_responsible)
                    results_responsible=cur.fetchall()
                    match=list(filter(lambda x:self.username in x, results_responsible))
                    responsible=match[0][0]

                    cur.execute(commands_appcomercial,(responsible,))
                    results=cur.fetchall()
                    number_columns = 11

                self.tableDocs.setRowCount(len(results))
                tablerow=0

            # fill the Qt Table with the query results
                for row in results:
                    for column in range(number_columns):
                        value = row[column]
                        if value is None:
                            value = ''
                        it = QtWidgets.QTableWidgetItem(str(value))
                        it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                        self.tableDocs.setItem(tablerow, column, it)

                    tablerow+=1

                self.tableDocs.setHorizontalHeaderLabels(column_headers)
                self.tableDocs.verticalHeader().hide()
                self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))

        except (Exception, psycopg2.DatabaseError) as error:
            MessageHelper.show_message("Ha ocurrido el siguiente error:\n"
                        + str(error), 'critical')

        self.tableDocs.setSortingEnabled(False)

# Function to update table and graphs at the same time
    def update_principal_screen(self):
        """
        Updates the main screen by reloading the table data and updating the graphs.
        """
        self.load_table()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Login_Window = QtWidgets.QMainWindow()
    ui = Ui_App_Technical('Jesús Martínez','julian.martinez')
    ui.setupUi(Login_Window)
    Login_Window.show()
    sys.exit(app.exec())