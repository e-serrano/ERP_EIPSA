# Form implementation generated from reading ui file 'App_Technical.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from config import config
from datetime import *
import psycopg2
import sys
import configparser
from Database_Connection import createConnection
from tkinter.filedialog import askopenfilename, asksaveasfilename
import pandas as pd
import os
import io
from fpdf import FPDF
from pypdf import PdfReader, PdfWriter


basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        if index.column() == 5: # Checking column number and painting if apply
            value = str(index.data())
            if value != '':
                fecha_str_split = value.split('-')
                fecha_str_qdate = QtCore.QDate(int(fecha_str_split[2]), int(fecha_str_split[1]), int(fecha_str_split[0]))
                delay_date=QtCore.QDate.currentDate().addDays(-10)

                if fecha_str_qdate.addDays(15) < QtCore.QDate.currentDate():  
                    color = QtGui.QColor(255, 0, 0)  # Red
                elif fecha_str_qdate.addDays(7) < QtCore.QDate.currentDate():
                    color = QtGui.QColor(255, 255, 168)  # Yellow
                else:
                    color = QtGui.QColor(255, 255, 255)  # White for rest

                option.backgroundBrush = color


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())


    def filter_by_text(self, column_index):
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        if column_index == 5:
            self.custom_sort(column_index, sortOrder)
        else:
            self.sortByColumn(column_index, sortOrder)


    def custom_sort(self, column, order):
    # Obtén la cantidad de filas en la tabla
        row_count = self.rowCount()

        # Crea una lista de índices ordenados según las fechas
        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        # Si el orden es descendente, invierte la lista
        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guarda el estado actual de las filas ocultas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        # Actualiza las filas en la tabla en el orden ordenado
        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class Ui_App_Technical(QtWidgets.QMainWindow):
    def __init__(self, name, username):
        super().__init__() 
        self.name=name
        self.username=username
        self.setupUi(self)


    def setupUi(self, App_Technical):
        App_Technical.setObjectName("App_Technical")
        App_Technical.resize(945, 860)
        App_Technical.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Technical.setWindowIcon(icon)
        App_Technical.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Technical)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Logo.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        self.Button_PortalDoc = QtWidgets.QPushButton(parent=self.frame)
        self.Button_PortalDoc.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_PortalDoc.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_PortalDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_PortalDoc.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_PortalDoc.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Portal.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_PortalDoc.setIcon(icon12)
        self.Button_PortalDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_PortalDoc.setObjectName("Button_PortalDoc")
        self.Button_PortalDoc.setToolTip("Portal Documentación")
        self.Header.addWidget(self.Button_PortalDoc)
        spacerItem11 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem11)
        if self.name in ["Ernesto Carrillo","Enrique Serrano"]:
            self.Button_ImportTimes = QtWidgets.QPushButton(parent=self.frame)
            self.Button_ImportTimes.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_ImportTimes.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_ImportTimes.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_ImportTimes.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_ImportTimes.setText("")
            icon5 = QtGui.QIcon()
            icon5.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Import_Time.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ImportTimes.setIcon(icon5)
            self.Button_ImportTimes.setIconSize(QtCore.QSize(40, 40))
            self.Button_ImportTimes.setObjectName("Button_ImportTimes")
            self.Button_ImportTimes.setToolTip("Importar Tiempos")
            self.Header.addWidget(self.Button_ImportTimes)
            spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem10)
            self.Button_CheckTimes = QtWidgets.QPushButton(parent=self.frame)
            self.Button_CheckTimes.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_CheckTimes.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_CheckTimes.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_CheckTimes.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_CheckTimes.setText("")
            icon15 = QtGui.QIcon()
            icon15.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Clock.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_CheckTimes.setIcon(icon15)
            self.Button_CheckTimes.setIconSize(QtCore.QSize(40, 40))
            self.Button_CheckTimes.setObjectName("Button_CheckTimes")
            self.Button_CheckTimes.setToolTip("Tiempos")
            self.Header.addWidget(self.Button_CheckTimes)
            spacerItem7 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem7)
            self.Button_DB_Manuf = QtWidgets.QPushButton(parent=self.frame)
            self.Button_DB_Manuf.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_DB_Manuf.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_DB_Manuf.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_DB_Manuf.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_DB_Manuf.setText("")
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Worker.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_DB_Manuf.setIcon(icon7)
            self.Button_DB_Manuf.setIconSize(QtCore.QSize(40, 40))
            self.Button_DB_Manuf.setObjectName("Button_DB_Manuf")
            self.Button_DB_Manuf.setToolTip("Personal/Operaciones")
            self.Header.addWidget(self.Button_DB_Manuf)
            spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem6)
            self.Button_DBEdit = QtWidgets.QPushButton(parent=self.frame)
            self.Button_DBEdit.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_DBEdit.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_DBEdit.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_DBEdit.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_DBEdit.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Database_Admin.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_DBEdit.setIcon(icon2)
            self.Button_DBEdit.setIconSize(QtCore.QSize(40, 40))
            self.Button_DBEdit.setObjectName("Button_DBEdit")
            self.Header.addWidget(self.Button_DBEdit)
            spacerItem13 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem13)
            self.Button_PDFEdit = QtWidgets.QPushButton(parent=self.frame)
            self.Button_PDFEdit.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_PDFEdit.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_PDFEdit.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_PDFEdit.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_PDFEdit.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Adobe_PDF.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_PDFEdit.setIcon(icon2)
            self.Button_PDFEdit.setIconSize(QtCore.QSize(40, 40))
            self.Button_PDFEdit.setObjectName("Button_PDFEdit")
            self.Header.addWidget(self.Button_PDFEdit)
            spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem14)
            self.Button_OT = QtWidgets.QPushButton(parent=self.frame)
            self.Button_OT.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_OT.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_OT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_OT.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_OT.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Barcode.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_OT.setIcon(icon2)
            self.Button_OT.setIconSize(QtCore.QSize(40, 40))
            self.Button_OT.setObjectName("Button_OT")
            self.Button_OT.setToolTip("Ordenes de Trabajo 900")
            self.Header.addWidget(self.Button_OT)
            self.Button_DBEdit.clicked.connect(self.editdb)
            self.Button_ImportTimes.clicked.connect(self.importtimes)
            self.Button_CheckTimes.clicked.connect(self.checktimes)
            self.Button_PDFEdit.clicked.connect(self.editpdf)
            self.Button_DB_Manuf.clicked.connect(self.dbmanufedit)
            self.Button_OT.clicked.connect(self.otorder)
        elif self.name in ["Jorge Valtierra"]:
            self.Button_Deliveries = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Deliveries.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Deliveries.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Deliveries.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Deliveries.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Deliveries.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Deliveries.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Deliveries.setIcon(icon2)
            self.Button_Deliveries.setIconSize(QtCore.QSize(40, 40))
            self.Button_Deliveries.setObjectName("Button_Deliveries")
            self.Button_Deliveries.setToolTip("Envíos")
            self.Header.addWidget(self.Button_Deliveries)
            spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem14)
            self.Button_OT = QtWidgets.QPushButton(parent=self.frame)
            self.Button_OT.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_OT.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_OT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_OT.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_OT.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Barcode.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_OT.setIcon(icon2)
            self.Button_OT.setIconSize(QtCore.QSize(40, 40))
            self.Button_OT.setObjectName("Button_OT")
            self.Button_OT.setToolTip("Ordenes de Trabajo 900")
            self.Header.addWidget(self.Button_OT)
            spacerItem12 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem12)
            self.Button_TestMenu = QtWidgets.QPushButton(parent=self.frame)
            self.Button_TestMenu.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_TestMenu.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_TestMenu.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_TestMenu.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_TestMenu.setText("")
            icon9 = QtGui.QIcon()
            icon9.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Test_Menu.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_TestMenu.setIcon(icon9)
            self.Button_TestMenu.setIconSize(QtCore.QSize(40, 40))
            self.Button_TestMenu.setObjectName("Button_TestMenu")
            self.Button_TestMenu.setToolTip("Insertar Pruebas")
            self.Header.addWidget(self.Button_TestMenu)

            spacerItem16 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem16)
            self.Button_Test = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Test.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Test.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Test.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Test.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Test.setText("")
            icon14 = QtGui.QIcon()
            icon14.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Tests.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Test.setIcon(icon14)
            self.Button_Test.setIconSize(QtCore.QSize(40, 40))
            self.Button_Test.setObjectName("Button_Test")
            self.Button_Test.setToolTip("Pruebas")
            self.Header.addWidget(self.Button_Test)
            spacerItem9 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem9)
            self.Button_Verification = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Verification.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Verification.setMaximumSize(QtCore.QSize(50, 16777215))
            self.Button_Verification.setToolTip('Verificación')
            self.Button_Verification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Verification.setStyleSheet(
                "QPushButton{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(3, 174, 236);\n"
                "    background-color: rgb(255, 255, 255);\n"
                "    border-radius: 10px;\n"
                "}\n"
                "\n"
                "QPushButton:hover{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(0, 0, 0);\n"
                "    color: rgb(0,0,0);\n"
                "    background-color: rgb(255, 255, 255);\n"
                "    border-radius: 10px;\n"
                "}\n"
                "\n"
                "QPushButton:pressed{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(0, 0, 0);\n"
                "    color: rgb(0,0,0);\n"
                "    background-color: rgb(200, 200, 200);\n"
                "    border-radius: 10px;\n"
                "}"
            )
            self.Button_Verification.setText("")
            icon9 = QtGui.QIcon()
            icon9.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Eye.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Verification.setIcon(icon9)
            self.Button_Verification.setIconSize(QtCore.QSize(40, 40))
            self.Button_Verification.setObjectName("Button_Verification")
            self.Header.addWidget(self.Button_Verification)
            spacerItem17 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem17)
            self.Button_Nuclear = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Nuclear.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Nuclear.setMaximumSize(QtCore.QSize(50, 16777215))
            self.Button_Nuclear.setToolTip('Anexos Nuclear')
            self.Button_Nuclear.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Nuclear.setStyleSheet(
                "QPushButton{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(3, 174, 236);\n"
                "    background-color: rgb(255, 255, 255);\n"
                "    border-radius: 10px;\n"
                "}\n"
                "\n"
                "QPushButton:hover{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(0, 0, 0);\n"
                "    color: rgb(0,0,0);\n"
                "    background-color: rgb(255, 255, 255);\n"
                "    border-radius: 10px;\n"
                "}\n"
                "\n"
                "QPushButton:pressed{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(0, 0, 0);\n"
                "    color: rgb(0,0,0);\n"
                "    background-color: rgb(200, 200, 200);\n"
                "    border-radius: 10px;\n"
                "}"
            )
            self.Button_Nuclear.setText("")
            icon17 = QtGui.QIcon()
            icon17.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Nuclear.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Nuclear.setIcon(icon17)
            self.Button_Nuclear.setIconSize(QtCore.QSize(40, 40))
            self.Button_Nuclear.setObjectName("Button_Nuclear")
            self.Header.addWidget(self.Button_Nuclear)
            self.Button_Deliveries.clicked.connect(self.deliveries)
            self.Button_OT.clicked.connect(self.otorder)
            self.Button_TestMenu.clicked.connect(self.insert_test)
            self.Button_Test.clicked.connect(self.query_test)
            self.Button_Verification.clicked.connect(self.verification)
            self.Button_Nuclear.clicked.connect(self.nuclear_annex)
        elif self.name in ["Jesús Martínez"]:
            self.Button_Times = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Times.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Times.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Times.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Times.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Times.setText("")
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Clock.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Times.setIcon(icon6)
            self.Button_Times.setIconSize(QtCore.QSize(40, 40))
            self.Button_Times.setObjectName("Button_Times")
            self.Button_Times.setToolTip("Tiempos")
            self.Header.addWidget(self.Button_Times)
            spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem14)
            self.Button_OT = QtWidgets.QPushButton(parent=self.frame)
            self.Button_OT.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_OT.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_OT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_OT.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_OT.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Barcode.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_OT.setIcon(icon2)
            self.Button_OT.setIconSize(QtCore.QSize(40, 40))
            self.Button_OT.setObjectName("Button_OT")
            self.Button_OT.setToolTip("Ordenes de Trabajo 900")
            self.Header.addWidget(self.Button_OT)
            spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem2)
            self.Button_DB_Manuf = QtWidgets.QPushButton(parent=self.frame)
            self.Button_DB_Manuf.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_DB_Manuf.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_DB_Manuf.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_DB_Manuf.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_DB_Manuf.setText("")
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Worker.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_DB_Manuf.setIcon(icon7)
            self.Button_DB_Manuf.setIconSize(QtCore.QSize(40, 40))
            self.Button_DB_Manuf.setObjectName("Button_DB_Manuf")
            self.Button_DB_Manuf.setToolTip("Personal/Operaciones")
            self.Header.addWidget(self.Button_DB_Manuf)
            spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem6)
            self.Button_ClockIn_Import = QtWidgets.QPushButton(parent=self.frame)
            self.Button_ClockIn_Import.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_ClockIn_Import.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_ClockIn_Import.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_ClockIn_Import.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_ClockIn_Import.setText("")
            icon7 = QtGui.QIcon()
            icon7.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/ClockIn_Import.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ClockIn_Import.setIcon(icon7)
            self.Button_ClockIn_Import.setIconSize(QtCore.QSize(40, 40))
            self.Button_ClockIn_Import.setObjectName("Button_ClockIn_Import")
            self.Button_ClockIn_Import.setToolTip("Importar fichajes")
            self.Header.addWidget(self.Button_ClockIn_Import)
            spacerItem18 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem18)
            self.Button_ClockIn = QtWidgets.QPushButton(parent=self.frame)
            self.Button_ClockIn.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_ClockIn.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_ClockIn.setToolTip('Fichajes')
            self.Button_ClockIn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_ClockIn.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_ClockIn.setText("")
            icon17 = QtGui.QIcon()
            icon17.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/ClockIn.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_ClockIn.setIcon(icon17)
            self.Button_ClockIn.setIconSize(QtCore.QSize(40, 40))
            self.Button_ClockIn.setObjectName("Button_ClockIn")
            self.Header.addWidget(self.Button_ClockIn)
            spacerItem19 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem19)
            self.Button_NCReport = QtWidgets.QPushButton(parent=self.frame)
            self.Button_NCReport.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_NCReport.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_NCReport.setToolTip('Informes NC')
            self.Button_NCReport.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_NCReport.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_NCReport.setText("")
            icon19 = QtGui.QIcon()
            icon19.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/NC.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_NCReport.setIcon(icon19)
            self.Button_NCReport.setIconSize(QtCore.QSize(40, 40))
            self.Button_NCReport.setObjectName("Button_NCReport")
            self.Header.addWidget(self.Button_NCReport)
            spacerItem17 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
            self.Header.addItem(spacerItem17)
            self.Button_Nuclear = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Nuclear.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Nuclear.setMaximumSize(QtCore.QSize(50, 16777215))
            self.Button_Nuclear.setToolTip('Anexos Nuclear')
            self.Button_Nuclear.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Nuclear.setStyleSheet(
                "QPushButton{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(3, 174, 236);\n"
                "    background-color: rgb(255, 255, 255);\n"
                "    border-radius: 10px;\n"
                "}\n"
                "\n"
                "QPushButton:hover{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(0, 0, 0);\n"
                "    color: rgb(0,0,0);\n"
                "    background-color: rgb(255, 255, 255);\n"
                "    border-radius: 10px;\n"
                "}\n"
                "\n"
                "QPushButton:pressed{\n"
                "    border: 1px solid transparent;\n"
                "    border-color: rgb(0, 0, 0);\n"
                "    color: rgb(0,0,0);\n"
                "    background-color: rgb(200, 200, 200);\n"
                "    border-radius: 10px;\n"
                "}"
            )
            self.Button_Nuclear.setText("")
            icon17 = QtGui.QIcon()
            icon17.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Nuclear.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Nuclear.setIcon(icon17)
            self.Button_Nuclear.setIconSize(QtCore.QSize(40, 40))
            self.Button_Nuclear.setObjectName("Button_Nuclear")
            self.Header.addWidget(self.Button_Nuclear)
            self.Button_Times.clicked.connect(self.times)
            self.Button_OT.clicked.connect(self.otorder)
            self.Button_DB_Manuf.clicked.connect(self.dbmanufedit)
            self.Button_ClockIn_Import.clicked.connect(self.importclockin)
            self.Button_ClockIn.clicked.connect(self.clockin)
            self.Button_NCReport.clicked.connect(self.nc_report)
            self.Button_Nuclear.clicked.connect(self.nuclear_annex)
        elif self.name in ["Santos Sánchez"]:
            self.Button_TechOffice = QtWidgets.QPushButton(parent=self.frame)
            self.Button_TechOffice.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_TechOffice.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_TechOffice.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_TechOffice.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_TechOffice.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/TechOffice.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_TechOffice.setIcon(icon2)
            self.Button_TechOffice.setIconSize(QtCore.QSize(40, 40))
            self.Button_TechOffice.setObjectName("Button_TechOffice")
            self.Button_TechOffice.setToolTip("Oficina Técnica")
            self.Header.addWidget(self.Button_TechOffice)
            self.Button_TechOffice.clicked.connect(self.techoffice)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.Button_Notification = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Notification.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Notification.setToolTip('Notificaciones')
        self.Button_Notification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Notification.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Notification.setText("")
        self.Button_Notification.setIconSize(QtCore.QSize(40, 40))
        self.Button_Notification.setObjectName("Button_Notification")
        self.Header.addWidget(self.Button_Notification)
        spacerItem15 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem15)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setToolTip('Configuración')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/User.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem3 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem3)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_QueryOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOrder.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryOrder.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryOrder.setFont(font)
        self.Button_QueryOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Order_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOrder.setIcon(icon8)
        self.Button_QueryOrder.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryOrder.setObjectName("Button_QueryOrder")
        self.Button_QueryOrder.setText("   Consultar Pedidos")
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.verticalLayout_3.addWidget(self.Button_QueryOrder)
        self.Button_EditTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_EditTag.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_EditTag.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_EditTag.setFont(font)
        self.Button_EditTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/TAG_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_EditTag.setIcon(icon10)
        self.Button_EditTag.setIconSize(QtCore.QSize(40, 40))
        self.Button_EditTag.setObjectName("Button_EditTag")
        self.verticalLayout_3.addWidget(self.Button_EditTag)
        self.Button_QueryTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryTag.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryTag.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryTag.setFont(font)
        self.Button_QueryTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/TAG_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTag.setIcon(icon11)
        self.Button_QueryTag.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryTag.setObjectName("Button_QueryTag")
        self.verticalLayout_3.addWidget(self.Button_QueryTag)
        self.Button_NewDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_NewDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_NewDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_NewDoc.setFont(font)
        self.Button_NewDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Documents_New.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_NewDoc.setIcon(icon1)
        self.Button_NewDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_NewDoc.setObjectName("Button_NewDoc")
        self.verticalLayout_3.addWidget(self.Button_NewDoc)
        self.Button_ImportDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_ImportDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_ImportDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_ImportDoc.setFont(font)
        self.Button_ImportDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Documents_Import.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ImportDoc.setIcon(icon2)
        self.Button_ImportDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_ImportDoc.setObjectName("Button_ImportDoc")
        self.verticalLayout_3.addWidget(self.Button_ImportDoc)
        self.Button_EditDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_EditDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_EditDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_EditDoc.setFont(font)
        self.Button_EditDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Documents_Edit.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_EditDoc.setIcon(icon3)
        self.Button_EditDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_EditDoc.setObjectName("Button_EditDoc")
        self.verticalLayout_3.addWidget(self.Button_EditDoc)
        self.Button_QueryDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryDoc.setFont(font)
        self.Button_QueryDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Documents_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryDoc.setIcon(icon4)
        self.Button_QueryDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryDoc.setObjectName("Button_QueryDoc")
        self.verticalLayout_3.addWidget(self.Button_QueryDoc)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem4)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.tableDocs = CustomTableWidget()
        self.tableDocs.setMinimumSize(QtCore.QSize(650, 280))
        self.tableDocs.setObjectName("tableDocs")
        self.tableDocs.setColumnCount(7)
        self.tableDocs.setRowCount(0)
        for i in range(7):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(10)
            font.setBold(True)
            item.setFont(font)
            self.tableDocs.setHorizontalHeaderItem(i, item)
        self.tableDocs.verticalHeader().setVisible(False)
        self.tableDocs.setSortingEnabled(False)
        self.tableDocs.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.MainLayout.addWidget(self.tableDocs)
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem5)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
#         self.Calendar = QtWidgets.QCalendarWidget(parent=self.frame)
#         self.Calendar.setEnabled(True)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.Calendar.sizePolicy().hasHeightForWidth())
#         self.Calendar.setSizePolicy(sizePolicy)
#         self.Calendar.setMinimumSize(QtCore.QSize(200, 400))
#         self.Calendar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
#         self.Calendar.setStyleSheet("QCalendarWidget QWidget{\n"
# "background-color: rgb(3, 174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QTableView{\n"
# "    background-color: white;\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton {\n"
# "    color: white;\n"
# "    font-size:20px;\n"
# "    icon-size:30px 30px;\n"
# "    background-color:rgb(3, 174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton::hover {\n"
# "    background-color : #019ad2;\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton::pressed {\n"
# "    background-color: rgb(1, 140, 190);\n"
# "    border: 3px solid;\n"
# "    border-color: rgb(255, 255, 255);\n"
# "}\n"
# "\n"
# "QCalendarWidget QSpinBox{\n"
# "    background-color: rgb(255, 255, 255);\n"
# "    border: 2px solid;\n"
# "    border-color: rgb(3,174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QAbstractItemView:enabled{\n"
# "    selection-background-color: rgb(3, 174, 236);\n"
# "    selection-color: white;\n"
# "}\n"
# "\n"
# "#qt_calendar_prevmonth {\n"
# "    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/back_arrow.png);\n"
# "}\n"
# "#qt_calendar_nextmonth {\n"
# "    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/forward_arrow.png);\n"
# "}")
#         self.Calendar.setSelectedDate(QtCore.QDate.currentDate())
#         self.Calendar.setGridVisible(True)
#         self.Calendar.setNavigationBarVisible(True)
#         self.Calendar.setDateEditEnabled(True)
#         self.Calendar.setObjectName("Calendar")
#         self.BottomLayout.addWidget(self.Calendar)
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Technical.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Technical)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Technical.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Technical)
        self.statusbar.setObjectName("statusbar")
        App_Technical.setStatusBar(self.statusbar)
        self.tableDocs.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


        delay_date=QtCore.QDate.currentDate().addDays(-10)
        commands_documentation = ("""
                    SELECT "num_doc_eipsa","num_order","doc_title","state","revision",TO_CHAR("state_date", 'DD-MM-YYYY'),"tracking"
                    FROM documentation
                    WHERE (
                    "state" IS NULL OR "state" IN ('','Enviado','Comentado','Com. Mayores','Com. Menores')
                    )
                    ORDER BY "num_doc_eipsa"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_documentation)
            results=cur.fetchall()
            self.tableDocs.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(7):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableDocs.setItem(tablerow, column, it)

                tablerow+=1

            self.tableDocs.verticalHeader().hide()
            self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))
            self.tableDocs.setSortingEnabled(False)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


        self.retranslateUi(App_Technical)
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.Button_EditTag.clicked.connect(self.edit_tag)
        self.Button_QueryTag.clicked.connect(self.query_tag)
        self.Button_NewDoc.clicked.connect(self.create_documents)
        self.Button_ImportDoc.clicked.connect(self.import_documents)
        self.Button_EditDoc.clicked.connect(self.edit_documents)
        self.Button_QueryDoc.clicked.connect(self.query_documents)
        self.Button_Profile.clicked.connect(self.showMenu)
        self.Button_Notification.clicked.connect(self.notifications)
        self.Button_PortalDoc.clicked.connect(self.portal_doc)
        self.tableDocs.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        QtCore.QMetaObject.connectSlotsByName(App_Technical)

        self.load_notifications()


    def retranslateUi(self, App_Technical):
        _translate = QtCore.QCoreApplication.translate
        App_Technical.setWindowTitle(_translate("App_Technical", "ERP EIPSA - Técnico"))
        self.HeaderName.setText(_translate("App_Technical", self.name))
        self.Button_EditTag.setText(_translate("App_Technical", "    Editar TAG(s)"))
        self.Button_QueryTag.setText(_translate("App_Technical", "    Consultar TAG(s)"))
        self.Button_NewDoc.setText(_translate("App_Technical", "    Crear Documento"))
        self.Button_ImportDoc.setText(_translate("App_Technical", "    Importar Docum."))
        self.Button_EditDoc.setText(_translate("App_Technical", "    Editar Docum."))
        self.Button_QueryDoc.setText(_translate("App_Technical", "    Consultar Docum."))
        item = self.tableDocs.horizontalHeaderItem(0)
        item.setText(_translate("App_Technical", "Nº Doc Eipsa"))
        item = self.tableDocs.horizontalHeaderItem(1)
        item.setText(_translate("App_Technical", "Nº Pedido"))
        item = self.tableDocs.horizontalHeaderItem(2)
        item.setText(_translate("App_Technical", "Título"))
        item = self.tableDocs.horizontalHeaderItem(3)
        item.setText(_translate("App_Technical", "Estado"))
        item = self.tableDocs.horizontalHeaderItem(4)
        item.setText(_translate("App_Technical", "Revisión"))
        item = self.tableDocs.horizontalHeaderItem(5)
        item.setText(_translate("App_Technical", "Fecha"))
        item = self.tableDocs.horizontalHeaderItem(6)
        item.setText(_translate("App_Technical", "Seguimiento"))


# Function to edit database tables of technical section
    def editdb(self):
        from DBEditReg_Window import Ui_DBEditReg_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_validation = createConnection(user_database, password_database)
        if not db_validation:
            sys.exit()

        self.dbedit_window=Ui_DBEditReg_Window(db_validation)
        self.dbedit_window.show()

# Function to open window with deliveries table
    def deliveries(self):
        from Deliveries_Window import Ui_Deliveries_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_deliveries = createConnection(user_database, password_database)
        if not db_deliveries:
            sys.exit()

        self.deliveries_window = Ui_Deliveries_Window(db_deliveries)
        self.deliveries_window.show()


    def times(self):
        print('tiempos')

# Function to open window with OT table
    def otorder(self):
        from OTGeneralCreate_Window import Ui_OTGeneralCreate_Window
        self.otgeneralcreate_window=QtWidgets.QMainWindow()
        self.ui=Ui_OTGeneralCreate_Window()
        self.ui.setupUi(self.otgeneralcreate_window)
        self.otgeneralcreate_window.show()

# Function to open window to insert test data
    def insert_test(self):
        from Tests_Menu import Ui_Tests_Menu
        self.Testinsert_window=Ui_Tests_Menu(self.username)
        self.Testinsert_window.show()

# Function to open window with orders table for technical office data
    def techoffice(self):
        from TechOffice_Window import Ui_TechOffice_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_techoffice = createConnection(user_database, password_database)
        if not db_techoffice:
            sys.exit()

        self.techoffice_window = Ui_TechOffice_Window(db_techoffice)
        self.techoffice_window.show()

# Function to open window with notifications table
    def notifications(self):
        from NotificationsHistory_Window import Ui_HistoryNotifications_Window
        self.notification_window=Ui_HistoryNotifications_Window(self.username)
        self.notification_window.show()
        self.notification_window.Button_Cancel.clicked.connect(self.load_notifications)

# Function to open window for order query
    def query_order(self):
        if self.name not in ['Jesús Martínez']:
            from OrderQuery_Window import Ui_QueryOrder_Window
            self.query_order_window=Ui_QueryOrder_Window('Técnico')

        self.query_order_window.show()

# Function to open window for tag edition
    def edit_tag(self):
        from TAGEdit_Technical_Window import Ui_EditTags_Technical_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_tags_tech = createConnection(user_database, password_database)
        if not db_tags_tech:
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Technical_Window(self.name, db_tags_tech)
        self.edit_tags_app.show()

# Function to open window for tag query
    def query_tag(self):
        from TAGQuery_Menu import Ui_TAGQuery_Menu
        self.querytag_window=QtWidgets.QMainWindow()
        self.ui=Ui_TAGQuery_Menu('Técnico')
        self.ui.setupUi(self.querytag_window)
        self.querytag_window.show()

# Function to open window for documentation creation
    def create_documents(self):
        from DocNew_Window import Ui_New_Doc_Window
        self.createdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_Doc_Window()
        self.ui.setupUi(self.createdoc_window)
        self.createdoc_window.show()

# Function to open window for documentation importation
    def import_documents(self):
        # File dialog to select Excel file
        # Tk().withdraw()  # Ocultar la ventana principal de tkinter
            excel_file = askopenfilename(filetypes=[("Archivos de Excel", "*.xlsx")],
                            title="Seleccionar archivo Excel")

            if excel_file:
                try:
        # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # Saving Excel in Pandas Dataframe
                    df = pd.read_excel(excel_file)

                # Reading each row and inserting data in table
                    for index, row in df.iterrows():
                    # Creating SQL sentence
                        values=[str(value) for value in row.values]
                        values.append('')

                        query = "SELECT * FROM documentation WHERE num_doc_eipsa = %s"
                        cur.execute(query, (values[0],))
                        results=cur.fetchall()
                        match=list(filter(lambda x:values[0] in x, results))

                        if len(match)>0:
                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("Nuevo Documento")
                            dlg.setText(f"El número de documento '{values[0]}' ya existe y no será importado. Por favor, edítalo y vuelve a importarlo")
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg.exec()
                            del dlg, new_icon

                        else:
                            query = "SELECT id FROM document_type WHERE doc_type = %s"
                            cur.execute(query, (values[4],))
                        # get results from query
                            resultado = cur.fetchone()
                        # get id from table
                            id_doctype = resultado[0]
                        #inserting values to BBDD
                            values[4]=str(id_doctype)
                            values = "', '".join(['' if value=='nan' else value for value in values])
                            sql_insertion = f"INSERT INTO documentation (num_doc_eipsa,num_doc_client,num_order,doc_title,doc_type_id,critical,state) VALUES ('{values}')"
                        # Executing SQL sentence
                            cur.execute(sql_insertion)

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Importar Documentos")
                    dlg.setText("Importación completada")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

# Function to open window for documentation edition
    def edit_documents(self):
        from DocEdit_Window import Ui_EditDoc_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_doc = createConnection(user_database, password_database)
        if not db_doc:
            sys.exit()

        self.editdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditDoc_Window(db_doc)
        self.ui.setupUi(self.editdoc_window)
        self.editdoc_window.showMaximized()

# Function to open window for documentation query
    def query_documents(self):
        from DocQuery_Window import Ui_QueryDoc_Window
        self.querydoc_menu=Ui_QueryDoc_Window()
        self.querydoc_menu.show()

# Function to show contextual menu when profile image is clicked
    def showMenu(self):
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contraseña")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))

# Function to open window for password edition
    def editpassword(self):
        from PasswordEdit_Window import Ui_EditPasswordWindow
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()

# Function to update documentation table
    def update_table(self):
        self.tableDocs.setRowCount(0)
        delay_date=QtCore.QDate.currentDate().addDays(-10)
        commands_documentation = ("""
                    SELECT "num_doc_eipsa","num_order","doc_title","state","revision",TO_CHAR("state_date", 'DD-MM-YYYY'),"tracking"
                    FROM documentation
                    WHERE (
                    "state" IS NULL OR "state" IN ('','Enviado','Comentado','Com. Mayores','Com. Menores')
                    )
                    ORDER BY "num_doc_eipsa"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_documentation)
            results=cur.fetchall()
            self.tableDocs.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(7):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableDocs.setItem(tablerow, column, it)

                tablerow+=1

            self.tableDocs.verticalHeader().hide()
            self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))
            self.tableDocs.setSortingEnabled(False)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableDocs.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableDocs.horizontalHeader().height()
        popup_pos = self.tableDocs.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableDocs.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to load number of notifications
    def load_notifications(self):
        query_tables_notifications = """SELECT table_name
                                FROM information_schema.tables
                                WHERE table_schema = 'notifications' AND table_type = 'BASE TABLE';"""
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_tables_notifications)
            results=cur.fetchall()
            tables_names=[x[0] for x in results]

            notifications = []

            for table in tables_names:
                commands_notifications = f" SELECT * FROM notifications.{table} WHERE username = '{self.username}' and state = 'Pendiente'"
                cur.execute(commands_notifications)
                results=cur.fetchall()

                for x in results:
                    notifications.append(x)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        if len(notifications) != 0:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Notif_on.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        else:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Notif_off.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Notification.setIcon(icon13)

# Function to import clock times
    def importtimes(self):
        fname = r"\\nas01\DATOS\Comunes\EIPSA-ERP\Tiempos\EXPSEM.txt"

        if fname:
            df = pd.read_csv(fname, sep = "|", header=None, encoding="latin-1", dtype={8: str})
            df = df.astype(str)
            final_df = df.iloc[:,[0, 2, 7, 8, 10]]
            final_df.columns = ['personal_id','date_ot','time_ot','number_ot','operations_id']
            final_df['number_ot'] = final_df['number_ot'].str.replace(' ', '')

            params = config()
            conn = psycopg2.connect(**params)
            cursor = conn.cursor()

            try:

                for index, row in final_df.iterrows():
                # Create a list of pairs (column_name, column_value) for each column with value
                    columns_values = [(column, row[column]) for column in final_df.columns if not pd.isnull(row[column])]

                # Creating string for columns names
                    columns = ', '.join([column for column, _ in columns_values])

                # Creating string for columns values. For money/amount values, dots are replaced for commas to avoid insertion problems
                    values = ', '.join([f"'{values.replace(':', '.')}'" if column in ['time_ot'] else f"'{values}'" for column, values in columns_values])

                    sql_insertion = f"INSERT INTO fabrication.imp_ot ({columns}) VALUES ({values})"

                    cursor.execute(sql_insertion)

                conn.commit()
                cursor.close()

                new_fname = r"\\nas01\DATOS\Comunes\EIPSA-ERP\Tiempos\EXPSEM.txt"

                new_fname = "//nas01/DATOS/Comunes/EIPSA-ERP/Tiempos/EXPORTADOS/" + date.today().strftime("%Y") + "/EXPSEM " + date.today().strftime("%Y-%m-%d") + ".txt"

                os.rename(fname, new_fname)

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("TXT importado con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to edit database tables of manufacturing section
    def dbmanufedit(self):
        from DBManufEditReg_Window import Ui_DBManufEditReg_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_manuf = createConnection(user_database, password_database)
        if not db_manuf:
            sys.exit()

        self.dbedit_window=Ui_DBManufEditReg_Window(db_manuf)
        self.dbedit_window.show()

# Function to import clock-in hours
    def importclockin(self):
        fname = askopenfilename(filetypes=[("Archivos de Excel", "*.txt")],
                        title="Seleccionar archivo Excel")

        if fname:
            # Expected columns
            column_names = ['worker_id', 'name', 'workday', 'type_day', 'notes', 'time_1', 'time_2', 'time_3', 'time_4','extra']
            
            df = pd.read_csv(fname, sep="|", header=None, names=column_names, encoding="latin-1")
            df = df.astype(str)
            df_final = df.iloc[1:,[0, 2, 4, 5, 6, 7, 8]].copy()
            columns_update = ['time_1', 'time_2', 'time_3', 'time_4']

            # Apply replace on selected columns
            df_final[columns_update] = df_final[columns_update].apply(lambda x: x.str.replace(r'\(\d+\)', '', regex=True))
            df_final[columns_update] = df_final[columns_update].apply(lambda x: x.str.replace('nan', '0:00', regex=True))

            params = config()
            conn = psycopg2.connect(**params)
            cursor = conn.cursor()

            try:

                for index, row in df_final.iterrows():
                # Create a list of pairs (column_name, column_value) for each column with value
                    columns_values = [(column, row[column]) for column in df_final.columns if not pd.isnull(row[column])]

                # Creating string for columns names
                    columns = ', '.join([column for column, _ in columns_values])

                # Creating string for columns values. For money/amount values, dots are replaced for commas to avoid insertion problems
                    values = ', '.join([f"'{values.replace(',', '.')}'" if column in ['time_ot'] else f"'{values}'" for column, values in columns_values])

                    sql_insertion = f"INSERT INTO clock_in_times ({columns}) VALUES ({values})"

                    cursor.execute(sql_insertion)

                conn.commit()
                cursor.close()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Datos importados con éxito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()
                del dlg, new_icon

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

# Function to show calendar with clock-in hours
    def clockin(self):
        from ClockIn_Window import MyCalendarApp
        self.clockin_window = MyCalendarApp(self.username)
        self.clockin_window.showMaximized()

# Function to allow copy function in documents table
    def keyPressEvent(self, event):
        super().keyPressEvent(event)
        if event.matches(QtGui.QKeySequence.StandardKey.Copy):
            selected_indexes = self.tableDocs.selectedIndexes()
            if selected_indexes:
                clipboard = QtWidgets.QApplication.clipboard()
                text = self.get_selected_text(selected_indexes)
                clipboard.setText(text)

# Function to get the copied text in the clipboard
    def get_selected_text(self, indexes):
        rows = set()
        cols = set()
        for index in indexes:
            rows.add(index.row())
            cols.add(index.column())

        text_doc = QtGui.QTextDocument()
        cursor = QtGui.QTextCursor(text_doc)

        header_labels = [self.tableDocs.horizontalHeaderItem(col).text() for col in sorted(cols)]
        for label in header_labels:
            cursor.insertText(label)
            cursor.insertText('\t')  # Tab separador de columnas
        cursor.insertText('\n')   # Salto de línea después de las cabeceras

        for row in sorted(rows):
            for col in sorted(cols):
                cell_data = self.tableDocs.item(row, col).data(QtCore.Qt.ItemDataRole.DisplayRole)
                cursor.insertText(cell_data)
                cursor.insertText('\t')  # Tab separador de columnas
            cursor.insertText('\n')  # Salto de línea al final de la fila

        return text_doc.toPlainText()

# Function to open menu for document control
    def portal_doc(self):
        from DocPortal_Menu import Ui_PortalDoc_Menu
        self.portaldoc_menu=QtWidgets.QMainWindow()
        self.ui=Ui_PortalDoc_Menu()
        self.ui.setupUi(self.portaldoc_menu)
        self.portaldoc_menu.show()

# Function to insert text on existing PDF
    def editpdf(self):
        pdf_file = askopenfilename(filetypes=[("Archivos PDF", "*.pdf")], title="Seleccionar archivo pdf")

        if pdf_file:
            excel_file = r"\\nas01\DATOS\Comunes\EIPSA-ERP\Plantillas Importación\Importar Tags Cálculos.xlsx"

            try:
                reader = PdfReader(pdf_file)

                df_data = pd.read_excel(excel_file)

                for row in range(df_data.shape[0]):
                    page_overlay = PdfReader(self.new_content(df_data.iloc[row,1], df_data.iloc[row,2])).pages[0] # PdfReader(self.new_content(df_data.iloc[row,1], df_data.iloc[row,2], orientation)).pages[0]
                    reader.pages[int(df_data.iloc[row,0]) - 1].merge_page(page2=page_overlay)

                path_parts = pdf_file.rsplit('/', 1)
                first_part = path_parts[0] + "/"
                name, extension = path_parts[1].rsplit('.', 1)

                output_path = first_part + name + ".pdf"

                if output_path:

                    writer = PdfWriter()
                    writer.append_pages_from_reader(reader)
                    writer.write(output_path)

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("PDF Generado con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

            except Exception as error:
                print(error)
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon

# Function to create PDF with specific text in a position
    def new_content(self, value, type_eq):
        pdf = FPDF(unit='mm')
        pdf.set_font("helvetica", "", 10)
        pdf.set_text_color(0, 0, 0)

        excel_file = r"\\nas01\DATOS\Comunes\EIPSA-ERP\Plantillas Importación\Importar Tags Cálculos.xlsx"
        df_data = pd.read_excel(excel_file, sheet_name='Posiciones')
        df_data = df_data.set_index('type')

        x_position = df_data['x(mm)'][type_eq]
        y_position = df_data['y(mm)'][type_eq]

        if type_eq == 'MUL':
            pdf.add_page()
            pdf.set_xy(x_position, y_position)
            with pdf.rotation(90):
                pdf.cell(10, 10, value)

        else:
            pdf.add_page()
            pdf.text(x_position, y_position, value)

        return io.BytesIO(pdf.output())

# Function to show window with tables of all tests
    def query_test(self):
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Verificación')
        dlg.setLabelText('Introduce un pedido:')

        while True:
            clickedButton = dlg.exec()
            if clickedButton == 1:
                numorder = dlg.textValue()
                if numorder != '':
                    from Verif_Order_Window import Ui_Verif_Order_Window
                    self.testquery_window=QtWidgets.QMainWindow()
                    self.ui=Ui_Verif_Order_Window(self.username, numorder)
                    self.ui.setupUi(self.testquery_window)
                    self.testquery_window.showMaximized()
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Verificación")
                dlg_error.setText("El pedido no puede estar vacío. Introduce un valor válido.")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Funtion to show window with manufacturing times
    def checktimes(self):
        from TimesQuery_Window import Ui_TimesQuery_Window
        self.timesquery_window=QtWidgets.QMainWindow()
        self.ui=Ui_TimesQuery_Window(self.username)
        self.ui.setupUi(self.timesquery_window)
        self.timesquery_window.showMaximized()

# Function to open corresponding window when Verification button is clicked
    def verification(self):
        from VerificationQuery_Window import Ui_VerificationQuery_Window
        self.Verificationquery_window=QtWidgets.QMainWindow()
        self.ui=Ui_VerificationQuery_Window(self.username)
        self.ui.setupUi(self.Verificationquery_window)
        self.Verificationquery_window.showMaximized()

# Function to generate nuclear annexes
    def nuclear_annex(self):
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Anexos Nucleares')
        dlg.setLabelText('Inserte pedido:')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Anexos Nucleares')
        dlg2.setLabelText('CODIGO A.N.A.:')

        dlg3 = QtWidgets.QInputDialog()
        new_icon3 = QtGui.QIcon()
        new_icon3.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg3.setWindowIcon(new_icon3)
        dlg3.setWindowTitle('Anexos Nucleares')
        dlg3.setLabelText('PDO A.N.A.:')

        dlg4 = QtWidgets.QInputDialog()
        new_icon4 = QtGui.QIcon()
        new_icon4.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg4.setWindowIcon(new_icon4)
        dlg4.setWindowTitle('Anexos Nucleares')
        dlg4.setLabelText('Linea:')

        while True:
            annex, ok = QtWidgets.QInputDialog.getItem(self, "Anexos Nucleares", "Seleccióna un tipo de anexo:", ['Anexo A', 'Anexo B', 'Anexo C'], 0, False)
            if ok and annex:
                annex_type = annex
                if annex_type != '':
                    while True:
                        clickedButton = dlg.exec()
                        if clickedButton == 1:
                            numorder = dlg.textValue()
                            if numorder != '':
                                while True:
                                    clickedButton2 = dlg2.exec()
                                    if clickedButton2 == 1:
                                        ana_code = dlg2.textValue()
                                        if ana_code != '':
                                            while True:
                                                clickedButton3 = dlg3.exec()
                                                if clickedButton3 == 1:
                                                    ana_order = dlg3.textValue()
                                                    if ana_order != '':
                                                        while True:
                                                            clickedButton4 = dlg4.exec()
                                                            if clickedButton4 == 1:
                                                                line_number = dlg4.textValue()
                                                                if line_number != '':
                                                                    from Excel_Export_Templates import nuclear_annexes
                                                                    excel_to_export = nuclear_annexes(annex_type, numorder, ana_code, ana_order, line_number)
                                                                    excel_to_export.save_excel_doc()
                                                                    break
                                                                dlg_error = QtWidgets.QMessageBox()
                                                                new_icon = QtGui.QIcon()
                                                                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                                dlg_error.setWindowIcon(new_icon)
                                                                dlg_error.setWindowTitle("Anexos Nucleares")
                                                                dlg_error.setText("La línea no puede estar vacía")
                                                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                                                dlg_error.exec()
                                                                del dlg_error,new_icon
                                                            else:
                                                                break
                                                        break
                                                    dlg_error = QtWidgets.QMessageBox()
                                                    new_icon = QtGui.QIcon()
                                                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                                    dlg_error.setWindowIcon(new_icon)
                                                    dlg_error.setWindowTitle("Anexos Nucleares")
                                                    dlg_error.setText("El pedido A.N.A. no puede estar vacío")
                                                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                                    dlg_error.exec()
                                                    del dlg_error,new_icon
                                                else:
                                                    break
                                            break
                                        dlg_error = QtWidgets.QMessageBox()
                                        new_icon = QtGui.QIcon()
                                        new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                        dlg_error.setWindowIcon(new_icon)
                                        dlg_error.setWindowTitle("Anexos Nucleares")
                                        dlg_error.setText("El código A.N.A. no puede estar vacío")
                                        dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                        dlg_error.exec()
                                        del dlg_error,new_icon
                                    else:
                                        break
                                break
                            dlg_error = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg_error.setWindowIcon(new_icon)
                            dlg_error.setWindowTitle("Anexos Nucleares")
                            dlg_error.setText("El número de pedido no puede estar vacío")
                            dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg_error.exec()
                            del dlg_error,new_icon
                        else:
                            break
                    break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Anexos Nucleares")
                dlg_error.setText("Selecciona un anexo")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to open window of nc reports
    def nc_report(self):
        from NC_Report_Window import Ui_NC_Report_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_nc = createConnection(user_database, password_database)
        if not db_nc:
            sys.exit()

        self.nc_window = Ui_NC_Report_Window(db_nc, self.username)
        self.nc_window.showMaximized()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Login_Window = QtWidgets.QMainWindow()
    ui = Ui_App_Technical('Ernesto Carrillo','e.carrillo')
    ui.setupUi(Login_Window)
    Login_Window.show()
    sys.exit(app.exec())