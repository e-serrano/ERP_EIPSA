# Form implementation generated from reading ui file 'App_Technical.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from config import config
from datetime import *
import psycopg2
import sys
import configparser
from Database_Connection import createConnection
from tkinter.filedialog import askopenfilename
import pandas as pd
from EditDB_Menu import Ui_EditDB_Menu
from Deliveries_Window import Ui_Deliveries_Window
from QueryOrder_Window import Ui_QueryOrder_Window
from QueryOrderTechnical_Window import Ui_QueryOrderTechnical_Window
from EditTags_Technical_Window import Ui_EditTags_Window
from QueryTags_Window import Ui_QueryTags_Window
from NewDoc_Window import Ui_New_Doc_Window
from EditDoc_Window import Ui_EditDoc_Window
from QueryDoc_Window import Ui_QueryDoc_Window
from EditPassword_Window import Ui_EditPasswordWindow
import os

basedir = os.path.dirname(__file__)


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

        if index.column() == 5:  # Verifica que estemos en la tercera columna
            value = str(index.data())
            if value != '':
                fecha_str_split = value.split('-')
                fecha_str_qdate = QtCore.QDate(int(fecha_str_split[2]), int(fecha_str_split[1]), int(fecha_str_split[0]))
                delay_date=QtCore.QDate.currentDate().addDays(-10)

                if fecha_str_qdate.addDays(15) < QtCore.QDate.currentDate():  
                    color = QtGui.QColor(255, 0, 0)  # Red
                elif fecha_str_qdate.addDays(7) < QtCore.QDate.currentDate():
                    color = QtGui.QColor(255, 255, 168)  # Yellow
                else:
                    color = QtGui.QColor(255, 255, 255)  # White for rest

                option.backgroundBrush = color


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if value is None:
            self.column_filters[column_index] = set()
        elif checked:
            self.column_filters[column_index].add(value)
        elif value in self.column_filters[column_index]:
            self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if filters and item_value not in filters:
                        show_row = False
                        break

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

    # Update hidden rows for this column
        if checked:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

    # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.join(basedir, "Resources/Iconos/Filter_Active.png")))

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class Ui_App_Technical(QtWidgets.QMainWindow):
    def __init__(self, name, username):
        super().__init__() 
        self.name=name
        self.username=username
        self.setupUi(self)

    # def __init__(self):
    #     super().__init__()  # Call the superclass constructor
    #     self.name='Enrique Serrano'
    #     self.username='e.serrano'
    #     self.setupUi(self)


    def setupUi(self, App_Technical):
        App_Technical.setObjectName("App_Technical")
        App_Technical.resize(945, 860)
        App_Technical.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Technical.setWindowIcon(icon)
        App_Technical.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(parent=App_Technical)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setMaximumSize(QtCore.QSize(220, 52))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/Logo.ico")))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        if self.name in ["Ernesto Carrillo","Enrique Serrano"]:
            self.Button_DBEdit = QtWidgets.QPushButton(parent=self.frame)
            self.Button_DBEdit.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_DBEdit.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_DBEdit.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_DBEdit.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_DBEdit.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/Database_Admin.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_DBEdit.setIcon(icon2)
            self.Button_DBEdit.setIconSize(QtCore.QSize(40, 40))
            self.Button_DBEdit.setObjectName("Button_DBEdit")
            self.Header.addWidget(self.Button_DBEdit)
            self.Button_DBEdit.clicked.connect(self.editdb)
        elif self.name in ["Jorge Valtierra"]:
            self.Button_Deliveries = QtWidgets.QPushButton(parent=self.frame)
            self.Button_Deliveries.setMinimumSize(QtCore.QSize(50, 50))
            self.Button_Deliveries.setMaximumSize(QtCore.QSize(50, 50))
            self.Button_Deliveries.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.Button_Deliveries.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
            self.Button_Deliveries.setText("")
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/Database_Admin.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            self.Button_Deliveries.setIcon(icon2)
            self.Button_Deliveries.setIconSize(QtCore.QSize(40, 40))
            self.Button_Deliveries.setObjectName("Button_Deliveries")
            self.Button_Deliveries.setToolTip("Envíos")
            self.Header.addWidget(self.Button_Deliveries)
            self.Button_Deliveries.clicked.connect(self.deliveries)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setMaximumSize(QtCore.QSize(50, 50))
        self.Button_Profile.setToolTip('Configuración')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.Button_Profile.setStyleSheet("QPushButton{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/User.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(40, 40))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem3 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem3)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(220, 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(220, 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        self.ButtonFrame.setStyleSheet("QFrame{\n"
"    background-color: rgb(3, 174, 236);\n"
"}\n"
"\n"
"QPushButton{\n"
"    border: 1px solid transparent;\n"
"    color: rgb(3, 174, 236);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border: 1px solid transparent;\n"
"    border-color: rgb(0, 0, 0);\n"
"    color: rgb(0,0,0);\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-radius: 10px;\n"
"}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_QueryOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOrder.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryOrder.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryOrder.setFont(font)
        self.Button_QueryOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/Order_Search.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOrder.setIcon(icon8)
        self.Button_QueryOrder.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryOrder.setObjectName("Button_QueryOrder")
        self.Button_QueryOrder.setText("   Consultar Pedidos")
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.verticalLayout_3.addWidget(self.Button_QueryOrder)
        self.Button_EditTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_EditTag.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_EditTag.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_EditTag.setFont(font)
        self.Button_EditTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/TAG_Edit.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_EditTag.setIcon(icon10)
        self.Button_EditTag.setIconSize(QtCore.QSize(40, 40))
        self.Button_EditTag.setObjectName("Button_EditTag")
        self.verticalLayout_3.addWidget(self.Button_EditTag)
        self.Button_QueryTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryTag.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryTag.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryTag.setFont(font)
        self.Button_QueryTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/TAG_Search.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTag.setIcon(icon11)
        self.Button_QueryTag.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryTag.setObjectName("Button_QueryTag")
        self.verticalLayout_3.addWidget(self.Button_QueryTag)
        self.Button_NewDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_NewDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_NewDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_NewDoc.setFont(font)
        self.Button_NewDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/Documents_New.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_NewDoc.setIcon(icon1)
        self.Button_NewDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_NewDoc.setObjectName("Button_NewDoc")
        self.verticalLayout_3.addWidget(self.Button_NewDoc)
        self.Button_ImportDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_ImportDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_ImportDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_ImportDoc.setFont(font)
        self.Button_ImportDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/Documents_Import.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ImportDoc.setIcon(icon2)
        self.Button_ImportDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_ImportDoc.setObjectName("Button_ImportDoc")
        self.verticalLayout_3.addWidget(self.Button_ImportDoc)
        self.Button_EditDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_EditDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_EditDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_EditDoc.setFont(font)
        self.Button_EditDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/Documents_Edit.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_EditDoc.setIcon(icon3)
        self.Button_EditDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_EditDoc.setObjectName("Button_EditDoc")
        self.verticalLayout_3.addWidget(self.Button_EditDoc)
        self.Button_QueryDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryDoc.setMinimumSize(QtCore.QSize(200, 50))
        self.Button_QueryDoc.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.Button_QueryDoc.setFont(font)
        self.Button_QueryDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/Documents_Search.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryDoc.setIcon(icon4)
        self.Button_QueryDoc.setIconSize(QtCore.QSize(40, 40))
        self.Button_QueryDoc.setObjectName("Button_QueryDoc")
        self.verticalLayout_3.addWidget(self.Button_QueryDoc)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem4)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.tableDocs = CustomTableWidget()
        self.tableDocs.setMinimumSize(QtCore.QSize(650, 280))
        self.tableDocs.setObjectName("tableDocs")
        self.tableDocs.setColumnCount(6)
        self.tableDocs.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        self.tableDocs.setHorizontalHeaderItem(5, item)
        self.tableDocs.verticalHeader().setVisible(False)
        self.tableDocs.setSortingEnabled(False)
        self.tableDocs.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.MainLayout.addWidget(self.tableDocs)
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem5)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
#         self.Calendar = QtWidgets.QCalendarWidget(parent=self.frame)
#         self.Calendar.setEnabled(True)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.Calendar.sizePolicy().hasHeightForWidth())
#         self.Calendar.setSizePolicy(sizePolicy)
#         self.Calendar.setMinimumSize(QtCore.QSize(200, 400))
#         self.Calendar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
#         self.Calendar.setStyleSheet("QCalendarWidget QWidget{\n"
# "background-color: rgb(3, 174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QTableView{\n"
# "    background-color: white;\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton {\n"
# "    color: white;\n"
# "    font-size:20px;\n"
# "    icon-size:30px 30px;\n"
# "    background-color:rgb(3, 174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton::hover {\n"
# "    background-color : #019ad2;\n"
# "}\n"
# "\n"
# "QCalendarWidget QToolButton::pressed {\n"
# "    background-color: rgb(1, 140, 190);\n"
# "    border: 3px solid;\n"
# "    border-color: rgb(255, 255, 255);\n"
# "}\n"
# "\n"
# "QCalendarWidget QSpinBox{\n"
# "    background-color: rgb(255, 255, 255);\n"
# "    border: 2px solid;\n"
# "    border-color: rgb(3,174, 236);\n"
# "}\n"
# "\n"
# "QCalendarWidget QAbstractItemView:enabled{\n"
# "    selection-background-color: rgb(3, 174, 236);\n"
# "    selection-color: white;\n"
# "}\n"
# "\n"
# "#qt_calendar_prevmonth {\n"
# "    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/back_arrow.png);\n"
# "}\n"
# "#qt_calendar_nextmonth {\n"
# "    qproperty-icon: url(//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/forward_arrow.png);\n"
# "}")
#         self.Calendar.setSelectedDate(QtCore.QDate.currentDate())
#         self.Calendar.setGridVisible(True)
#         self.Calendar.setNavigationBarVisible(True)
#         self.Calendar.setDateEditEnabled(True)
#         self.Calendar.setObjectName("Calendar")
#         self.BottomLayout.addWidget(self.Calendar)
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Technical.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Technical)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Technical.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Technical)
        self.statusbar.setObjectName("statusbar")
        App_Technical.setStatusBar(self.statusbar)
        self.tableDocs.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


        delay_date=QtCore.QDate.currentDate().addDays(-10)
        commands_documentation = ("""
                    SELECT "num_doc_eipsa","num_order","doc_title","state","revision",TO_CHAR("state_date", 'DD-MM-YYYY')
                    FROM documentation
                    WHERE (
                    "state" IS NULL OR "state" IN ('','Enviado','Comentado')
                    )
                    ORDER BY "num_doc_eipsa"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_documentation)
            results=cur.fetchall()
            self.tableDocs.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(6):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableDocs.setItem(tablerow, column, it)

                tablerow+=1

            self.tableDocs.verticalHeader().hide()
            self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))
            self.tableDocs.setSortingEnabled(False)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


        self.retranslateUi(App_Technical)
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.Button_EditTag.clicked.connect(self.edit_tag)
        self.Button_QueryTag.clicked.connect(self.query_tag)
        self.Button_NewDoc.clicked.connect(self.CreateDoc)
        self.Button_ImportDoc.clicked.connect(self.ImportDoc)
        self.Button_EditDoc.clicked.connect(self.EditDoc)
        self.Button_QueryDoc.clicked.connect(self.query_documents)
        self.Button_Profile.clicked.connect(self.showMenu)
        self.tableDocs.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        QtCore.QMetaObject.connectSlotsByName(App_Technical)


    def retranslateUi(self, App_Technical):
        _translate = QtCore.QCoreApplication.translate
        App_Technical.setWindowTitle(_translate("App_Technical", "ERP EIPSA - Técnico"))
        self.HeaderName.setText(_translate("App_Technical", self.name))
        self.Button_EditTag.setText(_translate("App_Technical", "    Editar TAG(s)"))
        self.Button_QueryTag.setText(_translate("App_Technical", "    Consultar TAG(s)"))
        self.Button_NewDoc.setText(_translate("App_Technical", "    Crear Documento"))
        self.Button_ImportDoc.setText(_translate("App_Technical", "    Importar Docum."))
        self.Button_EditDoc.setText(_translate("App_Technical", "    Editar Docum."))
        self.Button_QueryDoc.setText(_translate("App_Technical", "    Consultar Docum."))
        item = self.tableDocs.horizontalHeaderItem(0)
        item.setText(_translate("App_Technical", "Nº Doc Eipsa"))
        item = self.tableDocs.horizontalHeaderItem(1)
        item.setText(_translate("App_Technical", "Nº Pedido"))
        item = self.tableDocs.horizontalHeaderItem(2)
        item.setText(_translate("App_Technical", "Título"))
        item = self.tableDocs.horizontalHeaderItem(3)
        item.setText(_translate("App_Technical", "Estado"))
        item = self.tableDocs.horizontalHeaderItem(4)
        item.setText(_translate("App_Technical", "Revisión"))
        item = self.tableDocs.horizontalHeaderItem(5)
        item.setText(_translate("App_Technical", "Fecha"))


    def editdb(self):
        self.dbedit_menu=QtWidgets.QMainWindow()
        self.ui=Ui_EditDB_Menu()
        self.ui.setupUi(self.dbedit_menu)
        self.dbedit_menu.show()

    def deliveries(self):
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        if not createConnection(user_database, password_database):
            sys.exit()

        self.deliveries_window = Ui_Deliveries_Window()
        self.deliveries_window.show()


    def query_order(self):
        self.query_order_window=QtWidgets.QMainWindow()
        if self.name in ['Jesús Martínez']:
            self.ui=Ui_QueryOrder_Window()
        else:
            self.ui=Ui_QueryOrderTechnical_Window()
        self.ui.setupUi(self.query_order_window)
        self.query_order_window.show()


    def edit_tag(self):
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        if not createConnection(user_database, password_database):
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Window(self.name)
        self.edit_tags_app.show()


    def query_tag(self):
        self.querytag_window=QtWidgets.QMainWindow()
        self.ui=Ui_QueryTags_Window('Técnico')
        self.ui.setupUi(self.querytag_window)
        self.querytag_window.show()


    def CreateDoc(self):
        self.createdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_Doc_Window()
        self.ui.setupUi(self.createdoc_window)
        self.createdoc_window.show()


    def ImportDoc(self):
        # File dialog to select Excel file
        # Tk().withdraw()  # Ocultar la ventana principal de tkinter
            excel_file = askopenfilename(filetypes=[("Archivos de Excel", "*.xlsx")],
                            title="Seleccionar archivo Excel")

            if excel_file:
                try:
        # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # Saving Excel in Pandas Dataframe
                    df = pd.read_excel(excel_file)

                # Reading each row and inserting data in table
                    for index, row in df.iterrows():
                    # Creating SQL sentence
                        values=[str(value) for value in row.values]
                        values.append('')

                        query = "SELECT * FROM documentation WHERE num_doc_eipsa = %s"
                        cur.execute(query, (values[0],))
                        results=cur.fetchall()
                        match=list(filter(lambda x:values[0] in x, results))

                        if len(match)>0:
                            dlg = QtWidgets.QMessageBox()
                            new_icon = QtGui.QIcon()
                            new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                            dlg.setWindowIcon(new_icon)
                            dlg.setWindowTitle("Nuevo Documento")
                            dlg.setText(f"El número de documento '{values[0]}' ya existe y no será importado. Por favor, edítalo y vuelve a importarlo")
                            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                            dlg.exec()
                            del dlg, new_icon

                        else:
                            query = "SELECT id FROM document_type WHERE doc_type = %s"
                            cur.execute(query, (values[4],))
                        # get results from query
                            resultado = cur.fetchone()
                        # get id from table
                            id_doctype = resultado[0]
                        #inserting values to BBDD
                            values[4]=str(id_doctype)
                            values = "', '".join(['' if value=='nan' else value for value in values])
                            sql_insertion = f"INSERT INTO documentation (num_doc_eipsa,num_doc_client,num_order,doc_title,doc_type_id,critical,state) VALUES ('{values}')"
                        # Executing SQL sentence
                            cur.execute(sql_insertion)

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, "Resources/Iconos/icon.ico")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Importar Documentos")
                    dlg.setText("Importación completada")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()


    def EditDoc(self):
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        if not createConnection(user_database, password_database):
            sys.exit()

        self.editdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditDoc_Window()
        self.ui.setupUi(self.editdoc_window)
        self.editdoc_window.show()


    def query_documents(self):
        self.querydoc_menu=QtWidgets.QMainWindow()
        self.ui=Ui_QueryDoc_Window()
        self.ui.setupUi(self.querydoc_menu)
        self.querydoc_menu.show()


    def showMenu(self):
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; }"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contraseña")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))


    def editpassword(self):
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()


    def update_table(self):
        self.tableDocs.setRowCount(0)
        delay_date=QtCore.QDate.currentDate().addDays(-10)
        commands_documentation = ("""
                    SELECT "num_doc_eipsa","num_order","doc_title","state","revision",TO_CHAR("state_date", 'DD-MM-YYYY')
                    FROM documentation
                    WHERE (
                    "state" IS NULL OR "state" IN ('Enviado', 'Comentado')
                    )
                    ORDER BY "num_doc_eipsa"
                    """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(commands_documentation)
            results=cur.fetchall()
            self.tableDocs.setRowCount(len(results))
            tablerow=0

        # fill the Qt Table with the query results
            for row in results:
                for column in range(6):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    self.tableDocs.setItem(tablerow, column, it)

                tablerow+=1

            self.tableDocs.verticalHeader().hide()
            self.tableDocs.setItemDelegate(AlignDelegate(self.tableDocs))
            self.tableDocs.setSortingEnabled(False)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableDocs.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableDocs.horizontalHeader().height()
        popup_pos = self.tableDocs.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableDocs.show_unique_values_menu(logical_index, popup_pos, header_height)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # App_Technical = QtWidgets.QMainWindow()
    ui = Ui_App_Technical()
    # ui.setupUi(App_Technical)
    ui.show()
    sys.exit(app.exec())
