# Form implementation generated from reading ui file 'Suppliers_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import os

basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu { color: black; }"
                        "QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


# Function to delete filter on selected column
    def delete_filter(self,column_index):
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())


# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state


# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(os.path.abspath(os.path.join(basedir, "Resources/Iconos/Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())


    def filter_by_text(self, column_index):
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()


# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column
    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)


    def custom_sort(self, column, order):
    # Obtén la cantidad de filas en la tabla
        row_count = self.rowCount()

        # Crea una lista de índices ordenados según las fechas
        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        # Si el orden es descendente, invierte la lista
        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        # Guarda el estado actual de las filas ocultas
        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        # Actualiza las filas en la tabla en el orden ordenado
        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_Suppliers_Window(object):
    def setupUi(self, Suppliers_Window):
        Suppliers_Window.setObjectName("Suppliers_Window")
        Suppliers_Window.resize(1174, 600)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Suppliers_Window.setWindowIcon(icon)
        Suppliers_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=Suppliers_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_Name = QtWidgets.QLabel(parent=self.frame)
        self.label_Name.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_Name.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Name.setFont(font)
        self.label_Name.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Name.setObjectName("label_Name")
        self.gridLayout_2.addWidget(self.label_Name, 1, 1, 1, 1)
        self.Name_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.Name_Suppliers.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Name_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Name_Suppliers.setFont(font)
        self.Name_Suppliers.setObjectName("Name_Suppliers")
        self.gridLayout_2.addWidget(self.Name_Suppliers, 1, 2, 1, 10)
        self.label_CIF = QtWidgets.QLabel(parent=self.frame)
        self.label_CIF.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_CIF.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_CIF.setFont(font)
        self.label_CIF.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_CIF.setObjectName("label_CIF")
        self.gridLayout_2.addWidget(self.label_CIF, 1, 12, 1, 1)
        self.Cif_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.Cif_Suppliers.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.Cif_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Cif_Suppliers.setFont(font)
        self.Cif_Suppliers.setObjectName("Cif_Suppliers")
        self.gridLayout_2.addWidget(self.Cif_Suppliers, 1, 13, 1, 4)
        self.label_Address = QtWidgets.QLabel(parent=self.frame)
        self.label_Address.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_Address.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Address.setFont(font)
        self.label_Address.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Address.setObjectName("label_Address")
        self.gridLayout_2.addWidget(self.label_Address, 2, 1, 1, 1)
        self.Address_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.Address_Suppliers.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Address_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Address_Suppliers.setFont(font)
        self.Address_Suppliers.setObjectName("Address_Suppliers")
        self.gridLayout_2.addWidget(self.Address_Suppliers, 2, 2, 1, 6)
        self.label_ZipCode = QtWidgets.QLabel(parent=self.frame)
        self.label_ZipCode.setMinimumSize(QtCore.QSize(int(110//1.5), int(25//1.5)))
        self.label_ZipCode.setMaximumSize(QtCore.QSize(int(110//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_ZipCode.setFont(font)
        self.label_ZipCode.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_ZipCode.setObjectName("label_ZipCode")
        self.gridLayout_2.addWidget(self.label_ZipCode, 2, 8, 1, 1)
        self.Zipcode_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.Zipcode_Suppliers.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Zipcode_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Zipcode_Suppliers.setFont(font)
        self.Zipcode_Suppliers.setObjectName("Zipcode_Suppliers")
        self.gridLayout_2.addWidget(self.Zipcode_Suppliers, 2, 9, 1, 3)
        self.label_City = QtWidgets.QLabel(parent=self.frame)
        self.label_City.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_City.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_City.setFont(font)
        self.label_City.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_City.setObjectName("label_City")
        self.gridLayout_2.addWidget(self.label_City, 2, 12, 1, 1)
        self.City_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.City_Suppliers.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.City_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.City_Suppliers.setFont(font)
        self.City_Suppliers.setObjectName("City_Suppliers")
        self.gridLayout_2.addWidget(self.City_Suppliers, 2, 13, 1, 4)
        self.label_Province = QtWidgets.QLabel(parent=self.frame)
        self.label_Province.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_Province.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Province.setFont(font)
        self.label_Province.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Province.setObjectName("label_Province")
        self.gridLayout_2.addWidget(self.label_Province, 3, 1, 1, 1)
        self.Province_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.Province_Suppliers.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Province_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Province_Suppliers.setFont(font)
        self.Province_Suppliers.setObjectName("Province_Suppliers")
        self.gridLayout_2.addWidget(self.Province_Suppliers, 3, 2, 1, 6)
        self.label_Country = QtWidgets.QLabel(parent=self.frame)
        self.label_Country.setMinimumSize(QtCore.QSize(int(110//1.5), int(25//1.5)))
        self.label_Country.setMaximumSize(QtCore.QSize(int(110//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Country.setFont(font)
        self.label_Country.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Country.setObjectName("label_Country")
        self.gridLayout_2.addWidget(self.label_Country, 3, 8, 1, 1)
        self.Country_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.Country_Suppliers.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Country_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Country_Suppliers.setFont(font)
        self.Country_Suppliers.setObjectName("Country_Suppliers")
        self.gridLayout_2.addWidget(self.Country_Suppliers, 3, 9, 1, 3)
        self.label_PhoneNumber = QtWidgets.QLabel(parent=self.frame)
        self.label_PhoneNumber.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.label_PhoneNumber.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_PhoneNumber.setFont(font)
        self.label_PhoneNumber.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_PhoneNumber.setObjectName("label_PhoneNumber")
        self.gridLayout_2.addWidget(self.label_PhoneNumber, 3, 12, 1, 1)
        self.Phones_Suppliers = QtWidgets.QTextEdit(parent=self.frame)
        self.Phones_Suppliers.setMinimumSize(QtCore.QSize(0, int(100//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Phones_Suppliers.setFont(font)
        self.Phones_Suppliers.setObjectName("Phones_Suppliers")
        self.gridLayout_2.addWidget(self.Phones_Suppliers, 3, 13, 3, 4)
        self.label_IVA = QtWidgets.QLabel(parent=self.frame)
        self.label_IVA.setMinimumSize(QtCore.QSize(int(35//1.5), int(25//1.5)))
        self.label_IVA.setMaximumSize(QtCore.QSize(int(35//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_IVA.setFont(font)
        self.label_IVA.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_IVA.setObjectName("label_IVA")
        self.gridLayout_2.addWidget(self.label_IVA, 5, 1, 1, 1)
        self.Iva_Suppliers = QtWidgets.QComboBox(parent=self.frame)
        self.Iva_Suppliers.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Iva_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Iva_Suppliers.setFont(font)
        self.Iva_Suppliers.setObjectName("Iva_Suppliers")
        self.gridLayout_2.addWidget(self.Iva_Suppliers, 5, 2, 1, 4)
        self.label_PayWay = QtWidgets.QLabel(parent=self.frame)
        self.label_PayWay.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_PayWay.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_PayWay.setFont(font)
        self.label_PayWay.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_PayWay.setObjectName("label_PayWay")
        self.gridLayout_2.addWidget(self.label_PayWay, 5, 6, 1, 2)
        self.Payway_Suppliers = QtWidgets.QComboBox(parent=self.frame)
        self.Payway_Suppliers.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.Payway_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Payway_Suppliers.setFont(font)
        self.Payway_Suppliers.setObjectName("Payway_Suppliers")
        self.gridLayout_2.addWidget(self.Payway_Suppliers, 5, 8, 1, 2)
        self.label_Vto1 = QtWidgets.QLabel(parent=self.frame)
        self.label_Vto1.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_Vto1.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Vto1.setFont(font)
        self.label_Vto1.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.label_Vto1.setObjectName("label_Vto1")
        self.gridLayout_2.addWidget(self.label_Vto1, 4, 11, 1, 1)
        self.label_Vto2 = QtWidgets.QLabel(parent=self.frame)
        self.label_Vto2.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_Vto2.setMaximumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Vto2.setFont(font)
        self.label_Vto2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.label_Vto2.setObjectName("label_Vto2")
        self.gridLayout_2.addWidget(self.label_Vto2, 5, 11, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Vto1_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.Vto1_Suppliers.setMinimumSize(QtCore.QSize(int(50//1.5), 0))
        self.Vto1_Suppliers.setMaximumSize(QtCore.QSize(int(50//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Vto1_Suppliers.setFont(font)
        self.Vto1_Suppliers.setObjectName("Vto1_Suppliers")
        self.horizontalLayout.addWidget(self.Vto1_Suppliers)
        self.label_days1 = QtWidgets.QLabel(parent=self.frame)
        self.label_days1.setMinimumSize(QtCore.QSize(int(30//1.5), 0))
        self.label_days1.setMaximumSize(QtCore.QSize(int(30//1.5), int(30//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.label_days1.setFont(font)
        self.label_days1.setObjectName("label_days1")
        self.horizontalLayout.addWidget(self.label_days1)
        self.gridLayout_2.addLayout(self.horizontalLayout, 4, 12, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.Vto2_Suppliers = QtWidgets.QLineEdit(parent=self.frame)
        self.Vto2_Suppliers.setMinimumSize(QtCore.QSize(int(50//1.5), 0))
        self.Vto2_Suppliers.setMaximumSize(QtCore.QSize(int(50//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Vto2_Suppliers.setFont(font)
        self.Vto2_Suppliers.setObjectName("Vto2_Suppliers")
        self.horizontalLayout_2.addWidget(self.Vto2_Suppliers)
        self.label_days2 = QtWidgets.QLabel(parent=self.frame)
        self.label_days2.setMinimumSize(QtCore.QSize(int(30//1.5), 0))
        self.label_days2.setMaximumSize(QtCore.QSize(int(30//1.5), int(30//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.label_days2.setFont(font)
        self.label_days2.setObjectName("label_days2")
        self.horizontalLayout_2.addWidget(self.label_days2)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 5, 12, 1, 1)
        self.label_Notes = QtWidgets.QLabel(parent=self.frame)
        self.label_Notes.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_Notes.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Notes.setFont(font)
        self.label_Notes.setObjectName("label_Notes")
        self.gridLayout_2.addWidget(self.label_Notes, 7, 1, 1, 3)
        self.Notes_Suppliers = QtWidgets.QTextEdit(parent=self.frame)
        self.Notes_Suppliers.setMinimumSize(QtCore.QSize(0, int(100//1.5)))
        self.Notes_Suppliers.setMaximumSize(QtCore.QSize(16777215, int(100//1.5)))
        self.Notes_Suppliers.setObjectName("Notes_Suppliers")
        self.gridLayout_2.addWidget(self.Notes_Suppliers, 8, 1, 1, 20)
        self.tableSuppliers = CustomTableWidget()
        self.tableSuppliers.setObjectName("tableSuppliers")
        self.tableSuppliers.setColumnCount(15)
        self.tableSuppliers.setRowCount(0)
        for i in range(15):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(10//1.5))
            font.setBold(True)
            item.setFont(font)
            self.tableSuppliers.setHorizontalHeaderItem(i, item)
        self.gridLayout_2.addWidget(self.tableSuppliers, 9, 1, 1, 20)
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.label.setMaximumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.label.setText("")
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 4, 4, 1, 1)
        self.Button_AddSupplier = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddSupplier.setObjectName("Button_AddSupplier")
        self.Button_AddSupplier.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.gridLayout_2.addWidget(self.Button_AddSupplier, 1, 19, 1, 1)
        self.Button_ModifySupplier = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifySupplier.setObjectName("Button_ModifySupplier")
        self.Button_ModifySupplier.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.gridLayout_2.addWidget(self.Button_ModifySupplier, 3, 19, 1, 1)
        self.Button_DeleteSupplier = QtWidgets.QPushButton(parent=self.frame)
        self.Button_DeleteSupplier.setObjectName("Button_DeleteSupplier")
        self.Button_DeleteSupplier.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.gridLayout_2.addWidget(self.Button_DeleteSupplier, 5, 19, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 1, 1, 1)
        Suppliers_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Suppliers_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1174, 22))
        self.menubar.setObjectName("menubar")
        Suppliers_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Suppliers_Window)
        self.statusbar.setObjectName("statusbar")
        Suppliers_Window.setStatusBar(self.statusbar)
        self.tableSuppliers.setSortingEnabled(False)
        self.tableSuppliers.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableSuppliers.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)

        self.retranslateUi(Suppliers_Window)
        QtCore.QMetaObject.connectSlotsByName(Suppliers_Window)

        commands_iva = ("""
                        SELECT * 
                        FROM purch_fact.iva
                        """)
        commands_payway = ("""
                        SELECT * 
                        FROM purch_fact.pay_way
                        """)
        
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_iva)
            results_iva=cur.fetchall()
            cur.execute(commands_payway)
            results_payway=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_iva=['']+[x[1] for x in results_iva]
        self.Iva_Suppliers.addItems(list_iva)

        list_payway=[x[1] for x in results_payway]
        self.Payway_Suppliers.addItems(list_payway)

        self.tableSuppliers.itemClicked.connect(self.loadformsuppliers)
        self.tableSuppliers.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.Button_AddSupplier.clicked.connect(self.addsupplier)
        self.Button_ModifySupplier.clicked.connect(self.modifysupplier)
        self.Button_DeleteSupplier.clicked.connect(self.deletesupplier)
        self.loadtablesuppliers()


    def retranslateUi(self, Suppliers_Window):
        _translate = QtCore.QCoreApplication.translate
        Suppliers_Window.setWindowTitle(_translate("Suppliers_Window", "Proveedores"))
        item = self.tableSuppliers.horizontalHeaderItem(0)
        item.setText(_translate("Suppliers_Window", "ID"))
        item = self.tableSuppliers.horizontalHeaderItem(1)
        item.setText(_translate("Suppliers_Window", "Nombre"))
        item = self.tableSuppliers.horizontalHeaderItem(2)
        item.setText(_translate("Suppliers_Window", "CIF"))
        item = self.tableSuppliers.horizontalHeaderItem(3)
        item.setText(_translate("Suppliers_Window", "Dirección"))
        item = self.tableSuppliers.horizontalHeaderItem(4)
        item.setText(_translate("Suppliers_Window", "Teléfono"))
        item = self.tableSuppliers.horizontalHeaderItem(5)
        item.setText(_translate("Suppliers_Window", "Fax"))
        item = self.tableSuppliers.horizontalHeaderItem(6)
        item.setText(_translate("Suppliers_Window", "Ciudad"))
        item = self.tableSuppliers.horizontalHeaderItem(7)
        item.setText(_translate("Suppliers_Window", "Provincia"))
        item = self.tableSuppliers.horizontalHeaderItem(8)
        item.setText(_translate("Suppliers_Window", "País"))
        item = self.tableSuppliers.horizontalHeaderItem(9)
        item.setText(_translate("Suppliers_Window", "CP"))
        item = self.tableSuppliers.horizontalHeaderItem(10)
        item.setText(_translate("Suppliers_Window", "Forma Pago"))
        item = self.tableSuppliers.horizontalHeaderItem(11)
        item.setText(_translate("Suppliers_Window", "Vto. Prog. 1"))
        item = self.tableSuppliers.horizontalHeaderItem(12)
        item.setText(_translate("Suppliers_Window", "Vto. Prog. 2"))
        item = self.tableSuppliers.horizontalHeaderItem(13)
        item.setText(_translate("Suppliers_Window", "IVA"))
        item = self.tableSuppliers.horizontalHeaderItem(14)
        item.setText(_translate("Suppliers_Window", "Observaciones"))
        self.label_Country.setText(_translate("Suppliers_Window", "País:"))
        self.label_days1.setText(_translate("Suppliers_Window", "días"))
        self.label_IVA.setText(_translate("Suppliers_Window", "IVA:"))
        self.label_Province.setText(_translate("Suppliers_Window", "Provincia:"))
        self.label_Name.setText(_translate("Suppliers_Window", "Nombre:"))
        self.label_City.setText(_translate("Suppliers_Window", "Ciudad:"))
        self.label_Address.setText(_translate("Suppliers_Window", "Dirección:"))
        self.label_PayWay.setText(_translate("Suppliers_Window", "Forma de Pago:"))
        self.label_Notes.setText(_translate("Suppliers_Window", "Observaciones y/o comentarios:"))
        self.label_days2.setText(_translate("Suppliers_Window", "días"))
        self.label_ZipCode.setText(_translate("Suppliers_Window", "Código Postal:"))
        self.label_PhoneNumber.setText(_translate("Suppliers_Window", "Teléfonos:"))
        self.label_CIF.setText(_translate("Suppliers_Window", "CIF:"))
        self.label_Vto1.setText(_translate("Suppliers_Window", "Vto Prog1:"))
        self.label_Vto2.setText(_translate("Suppliers_Window", "Vto Prog2:"))
        self.Button_AddSupplier.setText(_translate("Suppliers_Window", "Agregar"))
        self.Button_ModifySupplier.setText(_translate("Suppliers_Window", "Modificar"))
        self.Button_DeleteSupplier.setText(_translate("Suppliers_Window", "Eliminar"))


# Function to create  suppliers in database
    def addsupplier(self):
        id=self.label.text()
        name=self.Name_Suppliers.text()
        cif=self.Cif_Suppliers.text()
        address=self.Address_Suppliers.text()
        zipcode=self.Zipcode_Suppliers.text()
        city=self.City_Suppliers.text()
        province=self.Province_Suppliers.text()
        country=self.Country_Suppliers.text()
        phones=self.Phones_Suppliers.toPlainText()
        iva=self.Iva_Suppliers.currentText()
        payway=self.Payway_Suppliers.currentText()
        vto1=self.Vto1_Suppliers.text()
        vto2=self.Vto2_Suppliers.text()
        notes=self.Notes_Suppliers.toPlainText()

        if name=="" or (cif=="" or country==""):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Proveedor")
            dlg.setText("Rellena como mínimo los siguientes campos:\n"
                        "·Nombre\n"
                        "·CIF\n"
                        "·País")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
        #SQL Query for checking if document number exists in database
            commands_checksupplier = ("""
                        SELECT * 
                        FROM purch_fact.suppliers_test
                        WHERE "name" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_checksupplier,(name,))
                results=cur.fetchall()
                match=list(filter(lambda x:name in x, results))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            if len(match)>0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Agregar Proveedor")
                dlg.setText("El nombre de proveedor introducido ya está registrado\n"
                            "Búscalo en la tabla")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()

                del dlg,new_icon

            else:
                commands_newsupplier = ("""
                            INSERT INTO purch_fact.suppliers_test (
                            name,cif,address,phone_number,fax,city,province,country,zip_code,
                            pay_way_id,vto_prog1,vto_prog2,iva_id,notes
                            )
                            VALUES (%s,%s,%s,%s,'',%s,%s,%s,%s,%s,%s,%s,%s,%s)
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    query_ivatype = "SELECT id FROM purch_fact.iva WHERE iva_type = %s"
                    cur.execute(query_ivatype, (iva,))
                    result_iva = cur.fetchone()

                    query_paywaytype = "SELECT id FROM purch_fact.pay_way WHERE pay_way_type = %s"
                    cur.execute(query_paywaytype, (payway,))
                    result_payway = cur.fetchone()
                # get id from table
                    id_iva = result_iva[0] if result_iva is not None else None
                    id_payway = result_payway[0]
                # execution of principal command
                    data=(name,cif,address,phones,city,province,country,zipcode,id_payway,vto1,vto2,id_iva,notes,)
                    cur.execute(commands_newsupplier, data)
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Agregar Proveedor")
                    dlg.setText("Proveedor agregado con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()

                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablesuppliers()


# Function to modify data of suplliers in database
    def modifysupplier(self):
        id=self.label.text()
        name=self.Name_Suppliers.text()
        cif=self.Cif_Suppliers.text()
        address=self.Address_Suppliers.text()
        zipcode=self.Zipcode_Suppliers.text()
        city=self.City_Suppliers.text()
        province=self.Province_Suppliers.text()
        country=self.Country_Suppliers.text()
        phones=self.Phones_Suppliers.toPlainText()
        iva=self.Iva_Suppliers.currentText()
        payway=self.Payway_Suppliers.currentText()
        vto1=self.Vto1_Suppliers.text()
        vto2=self.Vto2_Suppliers.text()
        notes=self.Notes_Suppliers.toPlainText()

        if id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Proveedor")
            dlg.setText("Pulsa en un proveedor de la tabla para cargar los datos en el formulario")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            commands_modifysupplier = ("""
                            UPDATE purch_fact.suppliers_test
                            SET "name" = %s, "cif" = %s, "address" = %s, "phone_number" = %s, "city" = %s, "province" = %s, "country" = %s,
                            "zip_code" = %s, "pay_way_id" = %s, "vto_prog1" = %s, "vto_prog2" = %s, "iva_id" = %s, "notes" = %s
                            WHERE "id" = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()

                query_ivatype = "SELECT id FROM purch_fact.iva WHERE iva_type = %s"
                cur.execute(query_ivatype, (iva,))
                result_iva = cur.fetchone()

                query_paywaytype = "SELECT id FROM purch_fact.pay_way WHERE pay_way_type = %s"
                cur.execute(query_paywaytype, (payway,))
                result_payway = cur.fetchone()
            # get id from table
                id_iva = result_iva[0] if result_iva is not None else None
                id_payway = result_payway[0]
            # execution of commands one by one
                data=(name,cif,address,phones,city,province,country,zipcode,id_payway,vto1,vto2,id_iva,notes,id,)
                cur.execute(commands_modifysupplier,data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Modificar Proveedor")
                dlg.setText("Proveedor modificado con exito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg, new_icon
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablesuppliers()


# Function to delete data of suppliers in database
    def deletesupplier(self):
        id=self.label.text()

        if id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Eliminar Proveedor")
            dlg.setText("Pulsa en un proveedor de la tabla para cargar los datos en el formulario")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            commands_deletesupplier = ("""
                            DELETE FROM purch_fact.suppliers_test
                            WHERE "id" = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()

                cur.execute(commands_deletesupplier, (id,))

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Eliminar Proveedor")
                dlg.setText("Proveedor eliminado con exito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg, new_icon
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablesuppliers()


# Function to load data of suppliers in form fields
    def loadformsuppliers(self,item):
        data_supplier=[]

        for column in range(15):
            item_text=self.tableSuppliers.item(item.row(), column).text()
            data_supplier.append(item_text)

        self.label.setText(data_supplier[0])
        self.Name_Suppliers.setText(data_supplier[1])
        self.Cif_Suppliers.setText(data_supplier[2])
        self.Address_Suppliers.setText(data_supplier[3])
        self.Phones_Suppliers.setText(data_supplier[4])
        self.City_Suppliers.setText(data_supplier[6])
        self.Province_Suppliers.setText(data_supplier[7])
        self.Country_Suppliers.setText(data_supplier[8])
        self.Zipcode_Suppliers.setText(data_supplier[9])
        self.Payway_Suppliers.setCurrentText(data_supplier[10])
        self.Vto1_Suppliers.setText(data_supplier[11])
        self.Vto2_Suppliers.setText(data_supplier[12])
        self.Iva_Suppliers.setCurrentText(data_supplier[13])
        self.Notes_Suppliers.setText(data_supplier[14])


# Function to load data of suppliers in table
    def loadtablesuppliers(self):
        commands_querysuppliers = ("""
                        SELECT purch_fact.suppliers_test.id,purch_fact.suppliers_test.name,
                        purch_fact.suppliers_test.cif,purch_fact.suppliers_test.address,
                        purch_fact.suppliers_test.phone_number,purch_fact.suppliers_test.fax,
                        purch_fact.suppliers_test.city,purch_fact.suppliers_test.province,
                        purch_fact.suppliers_test.country,purch_fact.suppliers_test.zip_code,
                        purch_fact.pay_way."pay_way_type",
                        purch_fact.suppliers_test.vto_prog1,purch_fact.suppliers_test.vto_prog2,
                        purch_fact.iva."iva_type",
                        purch_fact.suppliers_test.notes
                        FROM purch_fact.suppliers_test
                        LEFT JOIN purch_fact.pay_way ON (purch_fact.pay_way."id" = purch_fact.suppliers_test."pay_way_id")
                        LEFT JOIN purch_fact.iva ON (purch_fact.iva."id" = purch_fact.suppliers_test."iva_id")
                        ORDER BY purch_fact.suppliers_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querysuppliers)
            results_supplier=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.tableSuppliers.setRowCount(len(results_supplier))
        tablerow=0

        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))


    # fill the Qt Table with the query results
        for row in results_supplier:
            for column in range(15):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableSuppliers.setItem(tablerow, column, it)

            self.tableSuppliers.setItemDelegateForRow(tablerow, AlignDelegate(self.tableSuppliers))
            tablerow+=1

        self.tableSuppliers.verticalHeader().hide()


#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableSuppliers.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableSuppliers.horizontalHeader().height()
        popup_pos = self.tableSuppliers.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableSuppliers.show_unique_values_menu(logical_index, popup_pos, header_height)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Suppliers_Window = QtWidgets.QMainWindow()
    ui = Ui_Suppliers_Window()
    ui.setupUi(Suppliers_Window)
    Suppliers_Window.showMaximized()
    sys.exit(app.exec())
