# Form implementation generated from reading ui file 'OrderAccept_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import psycopg2
from config import config  
import os
from docxtpl import DocxTemplate
from tkinter.filedialog import asksaveasfilename
from datetime import *


basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class Ui_OrderAccept_Window(object):
    """
    UI class for the Order Accept window.
    """
    def __init__(self, username=None):
        """
        Initializes the Ui_OrderAccept_Window with the specified username.

        Args:
            username (str): username associated with the window.
        """
        self.username=username

    def setupUi(self, OrderAccept_Window):
        """
        Sets up the user interface for the OrderAccept_Window.

        Args:
            OrderAccept_Window (QtWidgets.QMainWindow): The main window for the UI setup.
        """
        OrderAccept_Window.setObjectName("OrderAccept_Window")
        OrderAccept_Window.resize(300, 450)
        OrderAccept_Window.setMinimumSize(QtCore.QSize(350, 650))
        OrderAccept_Window.setMaximumSize(QtCore.QSize(350, 650))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        OrderAccept_Window.setWindowIcon(icon)
        OrderAccept_Window.setAutoFillBackground(False)
        OrderAccept_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=OrderAccept_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_numorder_orderaccept = QtWidgets.QLabel(parent=self.frame)
        self.label_numorder_orderaccept.setEnabled(True)
        self.label_numorder_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.label_numorder_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_numorder_orderaccept.setFont(font)
        self.label_numorder_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_numorder_orderaccept.setObjectName("label_numorder_orderaccept")
        self.verticalLayout.addWidget(self.label_numorder_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.numorder_orderaccept = QtWidgets.QLineEdit(parent=self.frame)
        self.numorder_orderaccept.setEnabled(True)
        self.numorder_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.numorder_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.numorder_orderaccept.setFont(font)
        self.numorder_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.numorder_orderaccept.setObjectName("numorder_orderaccept")
        self.verticalLayout.addWidget(self.numorder_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label_address_orderaccept = QtWidgets.QLabel(parent=self.frame)
        self.label_address_orderaccept.setEnabled(True)
        self.label_address_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.label_address_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_address_orderaccept.setFont(font)
        self.label_address_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_address_orderaccept.setObjectName("label_address_orderaccept")
        self.verticalLayout.addWidget(self.label_address_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.address_orderaccept = QtWidgets.QLineEdit(parent=self.frame)
        self.address_orderaccept.setEnabled(True)
        self.address_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.address_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.address_orderaccept.setFont(font)
        self.address_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.address_orderaccept.setObjectName("address_orderaccept")
        self.verticalLayout.addWidget(self.address_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label_zipcode_orderaccept = QtWidgets.QLabel(parent=self.frame)
        self.label_zipcode_orderaccept.setEnabled(True)
        self.label_zipcode_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.label_zipcode_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_zipcode_orderaccept.setFont(font)
        self.label_zipcode_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_zipcode_orderaccept.setObjectName("label_zipcode_orderaccept")
        self.verticalLayout.addWidget(self.label_zipcode_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.zipcode_orderaccept = QtWidgets.QLineEdit(parent=self.frame)
        self.zipcode_orderaccept.setEnabled(True)
        self.zipcode_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.zipcode_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.zipcode_orderaccept.setFont(font)
        self.zipcode_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.zipcode_orderaccept.setObjectName("zipcode_orderaccept")
        self.verticalLayout.addWidget(self.zipcode_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label_city_orderaccept = QtWidgets.QLabel(parent=self.frame)
        self.label_city_orderaccept.setEnabled(True)
        self.label_city_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.label_city_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_city_orderaccept.setFont(font)
        self.label_city_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_city_orderaccept.setObjectName("label_city_orderaccept")
        self.verticalLayout.addWidget(self.label_city_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.city_orderaccept = QtWidgets.QLineEdit(parent=self.frame)
        self.city_orderaccept.setEnabled(True)
        self.city_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.city_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.city_orderaccept.setFont(font)
        self.city_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.city_orderaccept.setObjectName("city_orderaccept")
        self.verticalLayout.addWidget(self.city_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label_country_orderaccept = QtWidgets.QLabel(parent=self.frame)
        self.label_country_orderaccept.setEnabled(True)
        self.label_country_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.label_country_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_country_orderaccept.setFont(font)
        self.label_country_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_country_orderaccept.setObjectName("label_country_orderaccept")
        self.verticalLayout.addWidget(self.label_country_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.country_orderaccept = QtWidgets.QLineEdit(parent=self.frame)
        self.country_orderaccept.setEnabled(True)
        self.country_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.country_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.country_orderaccept.setFont(font)
        self.country_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.country_orderaccept.setObjectName("country_orderaccept")
        self.verticalLayout.addWidget(self.country_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label_responsible_client_orderaccept = QtWidgets.QLabel(parent=self.frame)
        self.label_responsible_client_orderaccept.setEnabled(True)
        self.label_responsible_client_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.label_responsible_client_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_responsible_client_orderaccept.setFont(font)
        self.label_responsible_client_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_responsible_client_orderaccept.setObjectName("label_responsible_client_orderaccept")
        self.verticalLayout.addWidget(self.label_responsible_client_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.responsible_client_orderaccept = QtWidgets.QLineEdit(parent=self.frame)
        self.responsible_client_orderaccept.setEnabled(True)
        self.responsible_client_orderaccept.setMinimumSize(QtCore.QSize(200, 25))
        self.responsible_client_orderaccept.setMaximumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.responsible_client_orderaccept.setFont(font)
        self.responsible_client_orderaccept.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.responsible_client_orderaccept.setObjectName("responsible_client_orderaccept")
        self.verticalLayout.addWidget(self.responsible_client_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)

        self.group1 = QtWidgets.QButtonGroup()
        self.group2 = QtWidgets.QButtonGroup()


        self.hLayout1 = QtWidgets.QHBoxLayout()
        self.hLayout1.setObjectName("hLayout2")
        self.bond_agreed = QtWidgets.QRadioButton(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bond_agreed.setFont(font)
        self.bond_agreed.setObjectName("bond_agreed")
        self.hLayout1.addWidget(self.bond_agreed)
        self.bond_not_agreed = QtWidgets.QRadioButton(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bond_not_agreed.setFont(font)
        self.bond_not_agreed.setObjectName("bond_not_agreed")
        self.hLayout1.addWidget(self.bond_not_agreed)
        self.not_bond = QtWidgets.QRadioButton(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.not_bond.setFont(font)
        self.not_bond.setObjectName("not_bond")
        self.hLayout1.addWidget(self.not_bond)
        self.group1.addButton(self.bond_agreed)
        self.group1.addButton(self.bond_not_agreed)
        self.group1.addButton(self.not_bond)
        self.verticalLayout.addLayout(self.hLayout1)
        self.hLayout2 = QtWidgets.QHBoxLayout()
        self.hLayout2.setObjectName("hLayout2")
        self.longformat = QtWidgets.QRadioButton(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.longformat.setFont(font)
        self.longformat.setObjectName("longformat")
        self.hLayout2.addWidget(self.longformat)
        self.shortformat = QtWidgets.QRadioButton(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.shortformat.setFont(font)
        self.shortformat.setObjectName("shortformat")
        self.hLayout2.addWidget(self.shortformat)
        self.group2.addButton(self.longformat)
        self.group2.addButton(self.shortformat)
        self.verticalLayout.addLayout(self.hLayout2)
        self.generate_orderaccept = QtWidgets.QPushButton(parent=self.frame)
        self.generate_orderaccept.setEnabled(True)
        self.generate_orderaccept.setMinimumSize(QtCore.QSize(200, 35))
        self.generate_orderaccept.setMaximumSize(QtCore.QSize(200, 35))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.generate_orderaccept.setFont(font)
        self.generate_orderaccept.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QPushButton:focus{\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:focus:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.generate_orderaccept.setAutoDefault(True)
        self.generate_orderaccept.setObjectName("generate_orderaccept")
        self.verticalLayout.addWidget(self.generate_orderaccept, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignHCenter)
        OrderAccept_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=OrderAccept_Window)
        self.menubar.setEnabled(True)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 275, 22))
        self.menubar.setObjectName("menubar")
        OrderAccept_Window.setMenuBar(self.menubar)

        self.retranslateUi(OrderAccept_Window)
        self.generate_orderaccept.clicked.connect(self.generate_document)
        # self.revision_orderaccept.returnPressed.connect(lambda: self.generateoffer(OrderAccept_Window))
        QtCore.QMetaObject.connectSlotsByName(OrderAccept_Window)


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, OrderAccept_Window):
        """
        Translates and updates the text of various UI elements.
        """
        _translate = QtCore.QCoreApplication.translate
        OrderAccept_Window.setWindowTitle(_translate("OrderAccept_Window", "Generar Acuse Pedido"))
        self.label_numorder_orderaccept.setText(_translate("OrderAccept_Window", "Número Pedido:"))
        self.label_address_orderaccept.setText(_translate("OrderAccept_Window", "Dirección Cliente:"))
        self.label_zipcode_orderaccept.setText(_translate("OrderAccept_Window", "CP Cliente:"))
        self.label_city_orderaccept.setText(_translate("OrderAccept_Window", "Ciudad Cliente:"))
        self.label_country_orderaccept.setText(_translate("OrderAccept_Window", "País Cliente:"))
        self.label_responsible_client_orderaccept.setText(_translate("OrderAccept_Window", "Responsable Cliente:"))
        self.generate_orderaccept.setText(_translate("OrderAccept_Window", "Generar"))
        self.bond_agreed.setText(_translate("OrderAccept_Window", "Aval Acordado"))
        self.bond_not_agreed.setText(_translate("OrderAccept_Window", "Aval EIPSA"))
        self.not_bond.setText(_translate("OrderAccept_Window", "Sin Aval"))
        self.longformat.setText(_translate("TAGOfferToOrder_Window", "Formato Largo"))
        self.shortformat.setText(_translate("TAGOfferToOrder_Window", "Formato Corto"))


# Function to generate the final document
    def generate_document(self):
        """
        Generates a purchase order acknowledgment document based on the order details provided by the user
        """
        try:
            numorder = self.numorder_orderaccept.text()
            address_client = self.address_orderaccept.text()
            zipcode_client = self.zipcode_orderaccept.text()
            city_client = self.city_orderaccept.text()
            country_client = self.country_orderaccept.text()
            client_responsible = self.responsible_client_orderaccept.text()
            actual_date=date.today()

            english_actual_date = self.format_date_english(actual_date)
            spanish_actual_date = self.format_date_spanish(actual_date)

            commands_checkorder = ("""
                        SELECT * 
                        FROM orders
                        WHERE "num_order" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_checkorder,(numorder,))
                results=cur.fetchall()
                match=list(filter(lambda x:numorder in x, results))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            if numorder=="" or (numorder==" " or len(match)==0):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Generar Acuse Pedido")
                dlg.setText("El número de pedido no se encuentra registrado")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon

            elif address_client =="" or (zipcode_client =="" or (city_client =="" or (country_client =="" or client_responsible ==""))):
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Generar Acuse Pedido")
                dlg.setText("Por favor, rellena todos los campos")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()
                del dlg, new_icon

            else:
                commands_queryorder = ("""
                                    SELECT orders."num_order",offers."num_offer", orders."num_ref_order", offers."client", orders."expected_date", orders."order_amount", orders."order_date", offers."delivery_term", offers."delivery_time", offers."payment_term", offers."validity"
                                    FROM offers
                                    INNER JOIN orders ON (offers."num_offer"=orders."num_offer")
                                    WHERE orders."num_order" = %s
                                    ORDER BY orders."num_order"
                                    """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur=conn.cursor()
                    cur.execute(commands_queryorder,(numorder,))
                    results_queryorder=cur.fetchall()

                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()
                except (Exception, psycopg2.DatabaseError) as error:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("ERP EIPSA")
                    dlg.setText("Ha ocurrido el siguiente error:\n"
                                + str(error))
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    dlg.exec()
                    del dlg, new_icon
                finally:
                    if conn is not None:
                        conn.close()

                num_order = results_queryorder[0][0]
                num_offer = results_queryorder[0][1]
                num_ref_order = results_queryorder[0][2]
                client = results_queryorder[0][3]
                expected_date = results_queryorder[0][4]
                order_amount = results_queryorder[0][5]
                order_date = results_queryorder[0][6]
                delivery_term = results_queryorder[0][7]
                delivery_time = results_queryorder[0][8]
                payment_term_db = results_queryorder[0][9]
                # validity = int(results_queryorder[0][10])
                validity = 30

                if num_order[-1] != 'R':
                    expected_date = order_date + timedelta(days=(validity + 28))

                if payment_term_db == "100_delivery":
                    payment_term_english = "100% of total amount of purchase order upon delivery of material according to Incoterms 2020"
                    payment_term_spanish = "Pago del 100% del valor total de la orden de compra a la entrega del material según Incoterm 2020"
                elif payment_term_db == "100_order":
                    payment_term_english = "100% of the total amount of purchase order upon receipt of purchase order."
                    payment_term_spanish = "Pago del 100% del valor total de la orden de compra a la recepción de la orden."
                elif payment_term_db == "90_10":
                    payment_term_english = "90% of the total amount of PO upon delivery of material according to Incoterms 2020 and 10% when final documentation is approved."
                    payment_term_spanish = "Pago del 90% del Valor total de la orden de compra a la entrega del material según Incoterm 2020 y el 10% cuando la documentación final sea aprobada."
                elif payment_term_db == "50_50":
                    payment_term_english = "50% of the total amount of purchase order upon receipt of purchase order. Remaining 50% before be delivered according to Incoterms 2020"
                    payment_term_spanish = "Pago del 50% del valor total de la orden de compra a la recepción de la orden. El 50% restante antes de la entrega del material según Incoterm 2020"
                elif payment_term_db == "Others" or payment_term_db == None:
                    payment_term_english = "PAYMENT TERMS TO BE DEFINED"
                    payment_term_spanish = "TERMINOS DE PAGO POR DEFINIR"

                english_estimated_date = self.format_date_english(expected_date)
                spanish_estimated_date = self.format_date_spanish(expected_date)

                english_order_date = self.format_date_english(order_date)
                spanish_order_date = self.format_date_spanish(order_date)

                if self.bond_agreed.isChecked() == True:
                    note_bond_english = "The text of warranty bond will be according to the usual document agreed with " + client + " for the last projects."
                    note_bond_spanish = "El texto del aval será de acuerdo al documento habitual acordado con " + client + " para los últimos proyectos"
                elif self.bond_not_agreed.isChecked() == True:
                    note_bond_english = "If required, warranty bond will be provided in the official EIPSA format."
                    note_bond_spanish = "En caso de ser requerido se facilitará el aval en formato oficial de EIPSA."
                elif self.not_bond.isChecked() == True:
                    note_bond_english = "Note that for purchase orders with an amount lower than 30.000,00 €, warranty bonds are not issued."
                    note_bond_spanish = "Les hacemos notar que para pedidos con importe inferior a 30.000,00 € no se emiten avales bancarios de garantía"
                else:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Generar Acuse")
                    dlg.setText("Elige una opción para el aval")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon

                if self.longformat.isChecked() == True:
                    doc = DocxTemplate(r"\\nas01\DATOS\Comunes\EIPSA-ERP\Plantillas Exportación\Plantilla Acuse Pedido.docx")
                    context = {'english_actual_date': english_actual_date,
                                'num_ref_order': str(num_ref_order).replace("&", "&amp;"),
                                'num_order': num_order,
                                'english_order_date': english_order_date,
                                'spanish_order_date': spanish_order_date,
                                'order_amount': order_amount,
                                'delivery_term': delivery_term,
                                'delivery_time': delivery_time,
                                'payment_term_english': payment_term_english,
                                'payment_term_spanish': payment_term_spanish,
                                'english_estimated_date': english_estimated_date,
                                'spanish_estimated_date': spanish_estimated_date,
                                'num_offer': num_offer,
                                'client': client,
                                'note_bond_english': note_bond_english,
                                'note_bond_spanish': note_bond_spanish,
                                'address_client': address_client,
                                'zipcode_client': zipcode_client,
                                'city_client': city_client, 
                                'country_client': country_client,
                                'client_responsible': client_responsible}
                    doc.render(context)
                    self.save_document(doc)

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Generar Acuse")
                    dlg.setText("Acuse generado con éxito\n\n"
                                "Revise los apartados de plazo de entrega, incoterms y aval")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                elif self.shortformat.isChecked() == True:
                    doc = DocxTemplate(r"\\nas01\DATOS\Comunes\EIPSA-ERP\Plantillas Exportación\Plantilla Acuse Corto Pedido.docx")
                    context = {'client': client,
                                'spanish_actual_date': spanish_actual_date,
                                'num_ref_order': str(num_ref_order).replace("&", "&amp;"),
                                'num_order': num_order,
                                'spanish_order_date': spanish_order_date,
                                'order_amount': order_amount,
                                'delivery_term': delivery_term,
                                'delivery_time': delivery_time,
                                'note_bond_spanish': note_bond_spanish,
                                'address_client': address_client,
                                'zipcode_client': zipcode_client,
                                'city_client': city_client, 
                                'country_client': country_client,
                                'client_responsible': client_responsible}
                    doc.render(context)
                    self.save_document(doc)

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Generar Acuse")
                    dlg.setText("Acuse generado con éxito\n\n"
                                "Revise los apartados de plazo de entrega, incoterms y aval")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()
                    del dlg, new_icon

                else:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Generar Acuse")
                    dlg.setText("Elige un formato")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()
                    del dlg, new_icon


        except Exception as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()


# Function to save the final document
    def save_document(self, document):
        """
        Saves the generated document to a user-specified location.

        Args:
        - document: The generated Word document object to be saved.
        """
        output_path_accept = asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Archivos de Word", "*.docx")],
                title="Guardar Acuse Pedido",
            )
        if output_path_accept:
            document.save(output_path_accept)

# Function to format date to long in spanish
    def format_date_spanish(self, date_toformat):
        """
        Formats a date object to a long string in Spanish.

        Args:
            date_toformat (date): The date to format.
            
        Returns:
            str: The formatted date as a string in the format "day de month de year".
        """
        months = ("enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre")
        day = date_toformat.day
        month = months[date_toformat.month - 1]
        year = date_toformat.year
        messsage = "{} de {} de {}".format(day, month, year)

        return messsage

# Function to format date to long in english
    def format_date_english(self, date_toformat):
        """
        Formats a date object to a long string in Englsih.

        Args:
            date_toformat (date): The date to format.
            
        Returns:
            str: The formatted date as a string in the format "month day, year".
        """
        months = ("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
        day = date_toformat.day
        month = months[date_toformat.month - 1]
        year = date_toformat.year
        messsage = "{} {}, {}".format(month, day, year)

        return messsage




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    OrderAccept_Window = QtWidgets.QMainWindow()
    ui = Ui_OrderAccept_Window()
    ui.setupUi(OrderAccept_Window)
    OrderAccept_Window.show()
    sys.exit(app.exec())
