# Form implementation generated from reading ui file 'Supplies_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2


class CustomTableWidget(QtWidgets.QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.list_filters=[]

    def show_unique_values_menu(self, column_index, header_pos, header_height):
        menu = QtWidgets.QMenu(self)
        menu.setStyleSheet("QMenu { color: black; }"
                                        "QMenu::item:selected { background-color: #33bdef; }"
                                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        unique_values = set()
        for row in range(self.rowCount()):
            if not self.isRowHidden(row):
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())

        action_all = menu.addAction("Seleccionar todo")
        action_all.triggered.connect(lambda: self.filter_column(column_index, None))
        menu.addSeparator()

        action_all = menu.addAction("Ordenar ascendente")
        action_all.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        action_all = menu.addAction("Ordenar descendente")
        action_all.triggered.connect(lambda: self.sort_column(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []  # List to stack checkboxes created

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if value in self.list_filters:
                checkbox.setCheckState(QtCore.Qt.CheckState(0))
            else:
                checkbox.setCheckState(QtCore.Qt.CheckState(2))

            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)  # Adding checkbox to list

        # Connecting checkboxes to function self.filter_column
        for value, checkbox in zip(sorted(unique_values), checkboxes):
            checkbox.clicked.connect(lambda checked, value=value: self.filter_column(column_index, value))

        # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))


    def filter_column(self, column_index, value):
        if value is None:
            for row in range(self.rowCount()):
                self.setRowHidden(row, False)
                self.list_filters=[]
        elif value in self.list_filters:
            self.list_filters.remove(value)
        else:
            self.list_filters.append(value)
        
        for row in range(self.rowCount()):
            item = self.item(row, column_index)
            if value is None:
                pass
            elif item.text() not in self.list_filters:
                self.setRowHidden(row, False)
            else:
                self.setRowHidden(row, True)


    def sort_column(self, column_index, sortOrder):
        self.sortByColumn(column_index, sortOrder)


    def contextMenuEvent(self, event):
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter


class Ui_Supplies_Window(object):
    def setupUi(self, Supplies_Window):
        Supplies_Window.setObjectName("Supplies_Window")
        Supplies_Window.resize(int(1174//1.5), int(600//1.5))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Supplies_Window.setWindowIcon(icon)
        Supplies_Window.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 10px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 4px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=Supplies_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_SupplyName = QtWidgets.QLabel(parent=self.frame)
        self.label_SupplyName.setMinimumSize(QtCore.QSize(int(130//1.5), int(25//1.5)))
        self.label_SupplyName.setMaximumSize(QtCore.QSize(int(130//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_SupplyName.setFont(font)
        self.label_SupplyName.setObjectName("label_SupplyName")
        self.gridLayout_2.addWidget(self.label_SupplyName, 1, 1, 1, 1)
        self.Name_Supplies = QtWidgets.QLineEdit(parent=self.frame)
        self.Name_Supplies.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Name_Supplies.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Name_Supplies.setFont(font)
        self.Name_Supplies.setObjectName("Name_Supplies")
        self.gridLayout_2.addWidget(self.Name_Supplies, 1, 2, 1, 4)
        self.label_ID = QtWidgets.QLabel(parent=self.frame)
        self.label_ID.setText("")
        self.label_ID.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_ID.setObjectName("label_ID")
        self.gridLayout_2.addWidget(self.label_ID, 1, 6, 1, 1)
        self.label_MeasureUnit = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_MeasureUnit.setFont(font)
        self.label_MeasureUnit.setObjectName("label_MeasureUnit")
        self.gridLayout_2.addWidget(self.label_MeasureUnit, 1, 7, 1, 1)
        self.MeasureUnit_Supplies = QtWidgets.QComboBox(parent=self.frame)
        self.MeasureUnit_Supplies.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.MeasureUnit_Supplies.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.MeasureUnit_Supplies.setFont(font)
        self.MeasureUnit_Supplies.setObjectName("MeasureUnit_Supplies")
        self.gridLayout_2.addWidget(self.MeasureUnit_Supplies, 1, 8, 1, 2)
        self.label_Description = QtWidgets.QLabel(parent=self.frame)
        self.label_Description.setMinimumSize(QtCore.QSize(int(130//1.5), int(25//1.5)))
        self.label_Description.setMaximumSize(QtCore.QSize(int(130//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Description.setFont(font)
        self.label_Description.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Description.setObjectName("label_Description")
        self.gridLayout_2.addWidget(self.label_Description, 2, 1, 1, 1)
        self.Description_Supplies = QtWidgets.QLineEdit(parent=self.frame)
        self.Description_Supplies.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.Description_Supplies.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Description_Supplies.setFont(font)
        self.Description_Supplies.setObjectName("Description_Supplies")
        self.gridLayout_2.addWidget(self.Description_Supplies, 2, 2, 1, 4)
        self.label_UnitValue = QtWidgets.QLabel(parent=self.frame)
        self.label_UnitValue.setMinimumSize(QtCore.QSize(int(110//1.5), int(25//1.5)))
        self.label_UnitValue.setMaximumSize(QtCore.QSize(int(110//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_UnitValue.setFont(font)
        self.label_UnitValue.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_UnitValue.setObjectName("label_UnitValue")
        self.gridLayout_2.addWidget(self.label_UnitValue, 2, 7, 1, 1)
        self.UnitValue_Supplies = QtWidgets.QLineEdit(parent=self.frame)
        self.UnitValue_Supplies.setMinimumSize(QtCore.QSize(int(100//1.5), int(25//1.5)))
        self.UnitValue_Supplies.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.UnitValue_Supplies.setFont(font)
        self.UnitValue_Supplies.setObjectName("UnitValue_Supplies")
        self.gridLayout_2.addWidget(self.UnitValue_Supplies, 2, 8, 1, 2)
        self.Destination_Supplies = QtWidgets.QComboBox(parent=self.frame)
        self.Destination_Supplies.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.Destination_Supplies.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Destination_Supplies.setFont(font)
        self.Destination_Supplies.setObjectName("Destination_Supplies")
        self.gridLayout_2.addWidget(self.Destination_Supplies, 3, 1, 1, 3)
        self.label_Stock = QtWidgets.QLabel(parent=self.frame)
        self.label_Stock.setMinimumSize(QtCore.QSize(int(125//1.5), int(25//1.5)))
        self.label_Stock.setMaximumSize(QtCore.QSize(int(125//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Stock.setFont(font)
        self.label_Stock.setObjectName("label_Stock")
        self.gridLayout_2.addWidget(self.label_Stock, 3, 4, 1, 1)
        self.Stock_Supplies = QtWidgets.QLineEdit(parent=self.frame)
        self.Stock_Supplies.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.Stock_Supplies.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Stock_Supplies.setFont(font)
        self.Stock_Supplies.setReadOnly(True)
        self.Stock_Supplies.setObjectName("Stock_Supplies")
        self.gridLayout_2.addWidget(self.Stock_Supplies, 3, 5, 1, 1)
        self.label_Pending = QtWidgets.QLabel(parent=self.frame)
        self.label_Pending.setMinimumSize(QtCore.QSize(int(120//1.5), int(25//1.5)))
        self.label_Pending.setMaximumSize(QtCore.QSize(int(120//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Pending.setFont(font)
        self.label_Pending.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Pending.setObjectName("label_Pending")
        self.gridLayout_2.addWidget(self.label_Pending, 3, 7, 1, 1)
        self.Pending_Supplies = QtWidgets.QLineEdit(parent=self.frame)
        self.Pending_Supplies.setMinimumSize(QtCore.QSize(100, int(25//1.5)))
        self.Pending_Supplies.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Pending_Supplies.setFont(font)
        self.Pending_Supplies.setReadOnly(True)
        self.Pending_Supplies.setObjectName("Pending_Supplies")
        self.gridLayout_2.addWidget(self.Pending_Supplies, 3, 8, 1, 2)
        self.Class_Supplies = QtWidgets.QComboBox(parent=self.frame)
        self.Class_Supplies.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.Class_Supplies.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Class_Supplies.setFont(font)
        self.Class_Supplies.setObjectName("Class_Supplies")
        self.gridLayout_2.addWidget(self.Class_Supplies, 4, 1, 1, 3)
        self.label_StockAv = QtWidgets.QLabel(parent=self.frame)
        self.label_StockAv.setMinimumSize(QtCore.QSize(int(125//1.5), int(25//1.5)))
        self.label_StockAv.setMaximumSize(QtCore.QSize(int(125//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_StockAv.setFont(font)
        self.label_StockAv.setObjectName("label_StockAv")
        self.gridLayout_2.addWidget(self.label_StockAv, 4, 4, 1, 1)
        self.StockAv_Supplies = QtWidgets.QLineEdit(parent=self.frame)
        self.StockAv_Supplies.setMinimumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        self.StockAv_Supplies.setMaximumSize(QtCore.QSize(int(75//1.5), int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.StockAv_Supplies.setFont(font)
        self.StockAv_Supplies.setReadOnly(True)
        self.StockAv_Supplies.setObjectName("StockAv_Supplies")
        self.gridLayout_2.addWidget(self.StockAv_Supplies, 4, 5, 1, 1)
        self.label_Location = QtWidgets.QLabel(parent=self.frame)
        self.label_Location.setMinimumSize(QtCore.QSize(int(80//1.5), int(25//1.5)))
        self.label_Location.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Location.setFont(font)
        self.label_Location.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.label_Location.setObjectName("label_Location")
        self.gridLayout_2.addWidget(self.label_Location, 4, 7, 1, 1)
        self.Location_Supplies = QtWidgets.QLineEdit(parent=self.frame)
        self.Location_Supplies.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.Location_Supplies.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Location_Supplies.setFont(font)
        self.Location_Supplies.setObjectName("Location_Supplies")
        self.gridLayout_2.addWidget(self.Location_Supplies, 4, 8, 1, 2)
        self.label_Obs = QtWidgets.QLabel(parent=self.frame)
        self.label_Obs.setMinimumSize(QtCore.QSize(75, int(25//1.5)))
        self.label_Obs.setMaximumSize(QtCore.QSize(75, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Obs.setFont(font)
        self.label_Obs.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.label_Obs.setObjectName("label_Obs")
        self.gridLayout_2.addWidget(self.label_Obs, 1, 11, 1, 1)
        self.Obs_Supplies = QtWidgets.QTextEdit(parent=self.frame)
        self.Obs_Supplies.setMinimumSize(QtCore.QSize(0, int(100//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.Obs_Supplies.setFont(font)
        self.Obs_Supplies.setObjectName("Obs_Supplies")
        self.gridLayout_2.addWidget(self.Obs_Supplies, 1, 12, 4, 2)
        self.label_Quotations = QtWidgets.QLabel(parent=self.frame)
        self.label_Quotations.setMinimumSize(QtCore.QSize(0, int(25//1.5)))
        self.label_Quotations.setMaximumSize(QtCore.QSize(16777215, int(25//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_Quotations.setFont(font)
        self.label_Quotations.setObjectName("label_Quotations")
        self.gridLayout_2.addWidget(self.label_Quotations, 6, 1, 1, 1)
        self.tableQuotations = CustomTableWidget()
        self.tableQuotations.setObjectName("tableQuotations")
        self.tableQuotations.setColumnCount(7)
        self.tableQuotations.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableQuotations.setHorizontalHeaderItem(6, item)
        self.gridLayout_2.addWidget(self.tableQuotations, 10, 1, 1, 15)
        self.tableSupplies = CustomTableWidget()
        self.tableSupplies.setObjectName("tableSupplies")
        self.tableSupplies.setColumnCount(12)
        self.tableSupplies.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        font.setBold(True)
        item.setFont(font)
        self.tableSupplies.setHorizontalHeaderItem(11, item)
        self.gridLayout_2.addWidget(self.tableSupplies, 11, 1, 1, 15)
        self.Button_AddSupply = QtWidgets.QPushButton(parent=self.frame)
        self.Button_AddSupply.setObjectName("Button_AddSupply")
        self.gridLayout_2.addWidget(self.Button_AddSupply, 1, 15, 1, 1)
        self.Button_ModifySupply = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ModifySupply.setObjectName("Button_ModifySupply")
        self.gridLayout_2.addWidget(self.Button_ModifySupply, 4, 15, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 1, 1, 1)
        Supplies_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=Supplies_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1174, 22))
        self.menubar.setObjectName("menubar")
        Supplies_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=Supplies_Window)
        self.statusbar.setObjectName("statusbar")
        Supplies_Window.setStatusBar(self.statusbar)
        self.tableQuotations.setSortingEnabled(False)
        self.tableQuotations.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.tableQuotations.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableSupplies.setSortingEnabled(False)
        self.tableSupplies.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")

        self.retranslateUi(Supplies_Window)
        QtCore.QMetaObject.connectSlotsByName(Supplies_Window)

        commands_destination = ("""
                        SELECT * 
                        FROM purch_fact.destination_supply
                        """)
        commands_class = ("""
                        SELECT * 
                        FROM purch_fact.class_supply
                        """)
        commands_measureunits = ("""
                        SELECT * 
                        FROM purch_fact.measure_units
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_destination)
            results_destination=cur.fetchall()
            cur.execute(commands_class)
            results_class=cur.fetchall()
            cur.execute(commands_measureunits)
            results_measureunits=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        list_destination=[''] + [x[1] for x in results_destination]
        self.Destination_Supplies.addItems(list_destination)

        list_class=[''] + [x[1] for x in results_class]
        self.Class_Supplies.addItems(list_class)

        list_measure=[x[1] for x in results_measureunits]
        self.MeasureUnit_Supplies.addItems(sorted(list_measure))

        self.tableSupplies.itemClicked.connect(self.loadformsupplies)
        self.tableSupplies.horizontalHeader().sectionClicked.connect(self.on_header_section_clicked)
        self.tableQuotations.horizontalHeader().sectionClicked.connect(self.on_header_sectionquot_clicked)
        self.Button_AddSupply.clicked.connect(self.addsupply)
        self.Button_ModifySupply.clicked.connect(self.modifysupply)
        self.Name_Supplies.editingFinished.connect(self.loadquotations)
        self.loadtablesupplies()


    def retranslateUi(self, Supplies_Window):
        _translate = QtCore.QCoreApplication.translate
        Supplies_Window.setWindowTitle(_translate("Supplies_Window", "Suministros"))
        self.label_StockAv.setText(_translate("Supplies_Window", "Stock Disponible:"))
        self.label_ID.setText(_translate("Supplies_Window", "TextLabel"))
        self.label_UnitValue.setText(_translate("Supplies_Window", "Valor Unit.:"))
        self.label_MeasureUnit.setText(_translate("Supplies_Window", "Un. Med.:"))
        self.Button_AddSupply.setText(_translate("Supplies_Window", "Agregar"))
        self.label_Pending.setText(_translate("Supplies_Window", "Pend. de recibir:"))
        item = self.tableSupplies.horizontalHeaderItem(0)
        item.setText(_translate("Supplies_Window", "ID"))
        item = self.tableSupplies.horizontalHeaderItem(1)
        item.setText(_translate("Supplies_Window", "Denominación"))
        item = self.tableSupplies.horizontalHeaderItem(2)
        item.setText(_translate("Supplies_Window", "Descripción"))
        item = self.tableSupplies.horizontalHeaderItem(3)
        item.setText(_translate("Supplies_Window", "Un. Med."))
        item = self.tableSupplies.horizontalHeaderItem(4)
        item.setText(_translate("Supplies_Window", "Valor Unit."))
        item = self.tableSupplies.horizontalHeaderItem(5)
        item.setText(_translate("Supplies_Window", "Stock"))
        item = self.tableSupplies.horizontalHeaderItem(6)
        item.setText(_translate("Supplies_Window", "Stock Disp."))
        item = self.tableSupplies.horizontalHeaderItem(7)
        item.setText(_translate("Supplies_Window", "Pend. Recibir"))
        item = self.tableSupplies.horizontalHeaderItem(8)
        item.setText(_translate("Supplies_Window", "Ubicación"))
        item = self.tableSupplies.horizontalHeaderItem(9)
        item.setText(_translate("Supplies_Window", "Aplicación"))
        item = self.tableSupplies.horizontalHeaderItem(10)
        item.setText(_translate("Supplies_Window", "Familia"))
        item = self.tableSupplies.horizontalHeaderItem(11)
        item.setText(_translate("Supplies_Window", "Obs."))
        item = self.tableQuotations.horizontalHeaderItem(0)
        item.setText(_translate("Supplies_Window", "Nombre"))
        item = self.tableQuotations.horizontalHeaderItem(1)
        item.setText(_translate("Supplies_Window", "Fecha"))
        item = self.tableQuotations.horizontalHeaderItem(2)
        item.setText(_translate("Supplies_Window", "Denominación"))
        item = self.tableQuotations.horizontalHeaderItem(3)
        item.setText(_translate("Supplies_Window", "Descripción"))
        item = self.tableQuotations.horizontalHeaderItem(4)
        item.setText(_translate("Supplies_Window", "Cantidad"))
        item = self.tableQuotations.horizontalHeaderItem(5)
        item.setText(_translate("Supplies_Window", "Valor"))
        item = self.tableQuotations.horizontalHeaderItem(6)
        item.setText(_translate("Supplies_Window", "Observaciones"))
        self.label_Obs.setText(_translate("Supplies_Window", "Obs:"))
        self.label_Description.setText(_translate("Supplies_Window", "Descripción:"))
        self.label_Location.setText(_translate("Supplies_Window", "Ubicación:"))
        self.label_SupplyName.setText(_translate("Supplies_Window", "Denominación:"))
        self.label_Quotations.setText(_translate("Supplies_Window", "Cotizaciones:"))
        self.label_Stock.setText(_translate("Supplies_Window", "Stock:"))
        self.Button_ModifySupply.setText(_translate("Supplies_Window", "Modificar"))


#Function to add a new supply
    def addsupply(self):
        name=self.Name_Supplies.text()
        description=self.Description_Supplies.text()
        m_unit=self.MeasureUnit_Supplies.currentText()
        unit_value=self.UnitValue_Supplies.text()
        unit_value=unit_value.replace(".",",")
        location=self.Location_Supplies.text()
        destination=self.Destination_Supplies.currentText()
        class_supply=self.Class_Supplies.currentText()
        notes=self.Obs_Supplies.toPlainText()

        if name=="" or (description=="" or unit_value==""):
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Agregar Suministro")
            dlg.setText("Rellena como mínimo los siguientes campos:\n"
                        "·Denominación\n"
                        "·Descripción\n"
                        "·Valor Unitario")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
        #SQL Query for checking if document number exists in database
            commands_checksupply = ("""
                        SELECT * 
                        FROM purch_fact.supplies_test
                        WHERE "reference" = %s
                        """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands one by one
                cur.execute(commands_checksupply,(name,))
                results=cur.fetchall()
                match=list(filter(lambda x:name in x, results))
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            if len(match)>0:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Agregar Suministro")
                dlg.setText("El nombre de suministro introducido ya está registrado\n"
                            "Búscalo en la tabla")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg.exec()

                del dlg,new_icon

            else:
                commands_newsupply = ("""
                            INSERT INTO purch_fact.supplies_test (
                            reference,description,dest_id,class_id,
                            m_unit_id,unit_value,notes,location,physical_stock,available_stock,pending_stock
                            )
                            VALUES (%s,%s,%s,%s,%s,%s,%s,%s,0,0,0)
                            """)
                conn = None
                try:
                # read the connection parameters
                    params = config()
                # connect to the PostgreSQL server
                    conn = psycopg2.connect(**params)
                    cur = conn.cursor()
                # execution of commands
                    query_measureunit = "SELECT id FROM purch_fact.measure_units WHERE measure_unit = %s"
                    cur.execute(query_measureunit, (m_unit,))
                    result_measureunit = cur.fetchone()

                    query_class = "SELECT id FROM purch_fact.class_supply WHERE class = %s"
                    cur.execute(query_class, (class_supply,))
                    result_class = cur.fetchone()

                    query_destination = "SELECT id FROM purch_fact.destination_supply WHERE destination = %s"
                    cur.execute(query_destination, (destination,))
                    result_destination = cur.fetchone()
                # get id from table
                    id_measureunit = result_measureunit[0]
                    id_class = result_class[0] if result_class is not None else None
                    id_destination = result_destination[0] if result_destination is not None else None
                # execution of principal command
                    data=(name,description,id_destination,id_class,id_measureunit,unit_value,notes,location,)
                    cur.execute(commands_newsupply, data)
                # close communication with the PostgreSQL database server
                    cur.close()
                # commit the changes
                    conn.commit()

                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Agregar Suministro")
                    dlg.setText("Suministro agregado con éxito")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    dlg.exec()

                    del dlg,new_icon

                except (Exception, psycopg2.DatabaseError) as error:
                    print(error)
                finally:
                    if conn is not None:
                        conn.close()

                self.loadtablesupplies()


# Function to modify data of supplies in database
    def modifysupply(self):
        id=self.label_ID.text()
        name=self.Name_Supplies.text()
        description=self.Description_Supplies.text()
        m_unit=self.MeasureUnit_Supplies.currentText()
        unit_value=self.UnitValue_Supplies.text()
        unit_value=unit_value.replace(".",",")
        location=self.Location_Supplies.text()
        destination=self.Destination_Supplies.currentText()
        class_supply=self.Class_Supplies.currentText()
        notes=self.Obs_Supplies.toPlainText()

        if id=="":
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Modificar Proveedor")
            dlg.setText("Pulsa en un proveedor de la tabla para cargar los datos en el formulario")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
            dlg.exec()

        else:
            commands_modifysupply = ("""
                            UPDATE purch_fact.supplies_test
                            SET "reference" = %s, "description" = %s, "dest_id" = %s, "class_id" = %s,
                            "m_unit_id" = %s, "unit_value" = %s, "notes" = %s, "location" = %s
                            WHERE "id" = %s
                            """)
            conn = None
            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()

                query_measureunit = "SELECT id FROM purch_fact.measure_units WHERE measure_unit = %s"
                cur.execute(query_measureunit, (m_unit,))
                result_measureunit = cur.fetchone()

                query_class = "SELECT id FROM purch_fact.class_supply WHERE class = %s"
                cur.execute(query_class, (class_supply,))
                result_class = cur.fetchone()

                query_destination = "SELECT id FROM purch_fact.destination_supply WHERE destination = %s"
                cur.execute(query_destination, (destination,))
                result_destination = cur.fetchone()
            # get id from table
                id_measureunit = result_measureunit[0]
                id_class = result_class[0] if result_class is not None else None
                id_destination = result_destination[0] if result_destination is not None else None
            # execution of commands one by one
                data=(name,description,id_destination,id_class,id_measureunit,unit_value,notes,location,id,)
                cur.execute(commands_modifysupply,data)
            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Recursos/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("Modificar Suministro")
                dlg.setText("Suministro modificado con exito")
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
                dlg.exec()

                del dlg, new_icon
            except (Exception, psycopg2.DatabaseError) as error:
                print(error)
            finally:
                if conn is not None:
                    conn.close()

            self.loadtablesupplies()


# Function to load data of clients in form fields
    def loadformsupplies(self,item):
        data_supply=[]

        for column in range(12):
            item_text=self.tableSupplies.item(item.row(), column).text()
            data_supply.append(item_text)

        self.label_ID.setText(data_supply[0])
        self.Name_Supplies.setText(data_supply[1])
        self.Description_Supplies.setText(data_supply[2])
        self.MeasureUnit_Supplies.setCurrentText(data_supply[3])
        self.UnitValue_Supplies.setText(data_supply[4])
        self.Stock_Supplies.setText(data_supply[5])
        self.StockAv_Supplies.setText(data_supply[6])
        self.Pending_Supplies.setText(data_supply[7])
        self.Location_Supplies.setText(data_supply[8])
        self.Destination_Supplies.setCurrentText(data_supply[9] if data_supply[9] != "None" else "")
        self.Class_Supplies.setCurrentText(data_supply[10] if data_supply[10] != "None" else "")
        self.Obs_Supplies.setText(data_supply[11])

        self.loadquotations()


# Function to load data of supplies in table
    def loadtablesupplies(self):
        commands_querysupplies = ("""
                        SELECT purch_fact.supplies_test.id,
                        purch_fact.supplies_test.reference,purch_fact.supplies_test.description,
                        purch_fact.measure_units."measure_unit",
                        purch_fact.supplies_test.unit_value,
                        purch_fact.supplies_test.physical_stock,purch_fact.supplies_test.available_stock,
                        purch_fact.supplies_test.pending_stock,purch_fact.supplies_test.location,
                        purch_fact.destination_supply."destination",
                        purch_fact.class_supply."class",
                        purch_fact.supplies_test.notes
                        FROM purch_fact.supplies_test
                        LEFT JOIN purch_fact.measure_units ON (purch_fact.measure_units."id" = purch_fact.supplies_test."m_unit_id")
                        LEFT JOIN purch_fact.destination_supply ON (purch_fact.destination_supply."id" = purch_fact.supplies_test."dest_id")
                        LEFT JOIN purch_fact.class_supply ON (purch_fact.class_supply."id" = purch_fact.supplies_test."class_id")
                        ORDER BY purch_fact.supplies_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_querysupplies)
            results_supplies=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        self.tableSupplies.setRowCount(len(results_supplies))
        tablerow=0

        font = QtGui.QFont()  # Crea un objeto de fuente
        font.setPointSize(int(10//1.5))


    # fill the Qt Table with the query results
        for row in results_supplies:
            for column in range(12):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableSupplies.setItem(tablerow, column, it)

            self.tableSupplies.setItemDelegateForRow(tablerow, AlignDelegate(self.tableSupplies))
            tablerow+=1

        self.tableSupplies.verticalHeader().hide()
        self.tableSupplies.setSortingEnabled(False)
        self.tableSupplies.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.ResizeToContents)


#Function to load quotations
    def loadquotations(self):
        id_supply=self.label_ID.text()
        commands_queryquotations = ("""
                        SELECT purch_fact.suppliers_test."name",
                        TO_CHAR(purch_fact.quot_header_test."quot_date",'DD-MM-YYYY'),
                        purch_fact.supplies_test."reference",purch_fact.supplies_test."description",
                        purch_fact.quot_det_test."quantity",purch_fact.quot_det_test."value",
                        purch_fact.quot_det_test."notes"
                        FROM purch_fact.quot_det_test
                        LEFT JOIN purch_fact.supplies_test ON (purch_fact.supplies_test."id" = purch_fact.quot_det_test."supply_id")
                        LEFT JOIN purch_fact.quot_header_test ON (purch_fact.quot_header_test."id" = purch_fact.quot_det_test."quot_head_id")
                        LEFT JOIN purch_fact.suppliers_test ON (purch_fact.suppliers_test."id" = purch_fact.quot_header_test."supplier_id")
                        WHERE purch_fact.quot_det_test.supply_id = %s
                        ORDER BY purch_fact.quot_det_test.id
                        """)
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_queryquotations,(id_supply,))
            results_quotations=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()

        self.tableQuotations.setRowCount(len(results_quotations))
        tablerow=0

        font = QtGui.QFont()  # Crea un objeto de fuente
        font.setPointSize(int(10//1.5))


    # fill the Qt Table with the query results
        for row in results_quotations:
            for column in range(7):
                value = row[column]
                if value is None:
                    value = ''
                it = QtWidgets.QTableWidgetItem(str(value))
                it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                it.setFont(font)
                self.tableQuotations.setItem(tablerow, column, it)

            self.tableQuotations.setItemDelegateForRow(tablerow, AlignDelegate(self.tableQuotations))
            tablerow+=1

        self.tableQuotations.verticalHeader().hide()
        self.tableQuotations.setSortingEnabled(False)
        self.tableQuotations.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

#Function when clicking on table header
    def on_header_section_clicked(self, logical_index):
        header_pos = self.tableSupplies.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableSupplies.horizontalHeader().height()
        popup_pos = self.tableSupplies.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableSupplies.show_unique_values_menu(logical_index, popup_pos, header_height)

    def on_header_sectionquot_clicked(self, logical_index):
        header_pos = self.tableQuotations.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableQuotations.horizontalHeader().height()
        popup_pos = self.tableQuotations.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableQuotations.show_unique_values_menu(logical_index, popup_pos, header_height)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Supplies_Window = QtWidgets.QMainWindow()
    ui = Ui_Supplies_Window()
    ui.setupUi(Supplies_Window)
    Supplies_Window.showMaximized()
    sys.exit(app.exec())
