# Form implementation generated from reading ui file 'ReportArtMov_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from config import config
import psycopg2
import locale
import os
import pandas as pd
from tkinter.filedialog import asksaveasfilename
from openpyxl import Workbook
from openpyxl.styles import NamedStyle
from openpyxl.utils.dataframe import dataframe_to_rows
from datetime import datetime


basedir = r"\\nas01\DATOS\Comunes\EIPSA-ERP"


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class Ui_ArtMov_Window(object):
    def setupUi(self, ReportArtMov):
        ReportArtMov.setObjectName("ReportArtMov")
        ReportArtMov.resize(1165, 945)
        ReportArtMov.setMinimumSize(QtCore.QSize(1165, 945))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/Resources/Iconos/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        ReportArtMov.setWindowIcon(icon)
        ReportArtMov.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QComboBox QAbstractItemView{\n"
    "min-width: 1200px;\n"
    "}\n"
    "\n"
    "QComboBox QAbstractItemView::item {\n"
    "min-height: 35px;\n"
    "}\n"
    "\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 13px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .2em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=ReportArtMov)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.gridLayout1 = QtWidgets.QGridLayout()
        self.gridLayout1.setSpacing(0)
        self.gridLayout1.setObjectName("gridLayout1")
        self.label_item = QtWidgets.QLabel(parent=self.frame)
        self.label_item.setMinimumSize(QtCore.QSize(int(100//1.5), int(35//1.5)))
        self.label_item.setMaximumSize(QtCore.QSize(int(100//1.5), int(35//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        font.setBold(True)
        self.label_item.setFont(font)
        self.label_item.setObjectName("label_item")
        self.gridLayout1.addWidget(self.label_item, 0, 0, 1, 1)
        self.ItemName = QtWidgets.QComboBox(parent=self.frame)
        self.ItemName.setMinimumSize(QtCore.QSize(0, int(35//1.5)))
        self.ItemName.setMaximumSize(QtCore.QSize(16777215, int(35//1.5)))
        self.ItemName.setEditable(True)
        font = QtGui.QFont()
        font.setPointSize(int(10//1.5))
        self.ItemName.setFont(font)
        self.ItemName.setObjectName("ItemName")
        self.gridLayout1.addWidget(self.ItemName, 0, 1, 1, 2)
        self.Button_Export = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Export.setMinimumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_Export.setMaximumSize(QtCore.QSize(int(175//1.5), int(35//1.5)))
        self.Button_Export.setObjectName("Button_Export")
        self.gridLayout1.addWidget(self.Button_Export, 0, 3, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout1, 1, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem1, 2, 0, 1, 1)
        self.tableWidget = QtWidgets.QTableWidget(parent=self.frame)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        for i in range(4):
            item = QtWidgets.QTableWidgetItem()
            font = QtGui.QFont()
            font.setPointSize(int(10//1.5))
            font.setBold(True)
            item.setFont(font)
            self.tableWidget.setHorizontalHeaderItem(i, item)
        self.gridLayout_2.addWidget(self.tableWidget, 3, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.label_Total = QtWidgets.QLabel(parent=self.frame)
        self.label_Total.setMinimumSize(QtCore.QSize(0, int(50//1.5)))
        self.label_Total.setMaximumSize(QtCore.QSize(16777215, int(50//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        self.label_Total.setFont(font)
        self.label_Total.setObjectName("label_Total")
        self.horizontalLayout.addWidget(self.label_Total)
        self.label_TotalValue = QtWidgets.QLabel(parent=self.frame)
        self.label_TotalValue.setMinimumSize(QtCore.QSize(int(100//1.5), int(50//1.5)))
        self.label_TotalValue.setMaximumSize(QtCore.QSize(int(100//1.5), int(50//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(11//1.5))
        self.label_TotalValue.setFont(font)
        self.label_TotalValue.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_TotalValue.setObjectName("label_TotalValue")
        self.horizontalLayout.addWidget(self.label_TotalValue)
        self.gridLayout_2.addLayout(self.horizontalLayout, 4, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        ReportArtMov.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=ReportArtMov)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1165, 22))
        self.menubar.setObjectName("menubar")
        ReportArtMov.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=ReportArtMov)
        self.statusbar.setObjectName("statusbar")
        ReportArtMov.setStatusBar(self.statusbar)
        self.tableWidget.verticalHeader().hide()
        self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.tableWidget.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")

        commands_supplies = "SELECT * FROM purch_fact.supplies"
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_supplies)
            results_supplies=cur.fetchall()
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        list_supplies=[x[3] + ' | ' + x[4] for x in results_supplies]
        self.ItemName.addItems([''] + sorted(list_supplies))

        self.retranslateUi(ReportArtMov)
        QtCore.QMetaObject.connectSlotsByName(ReportArtMov)

        self.ItemName.currentIndexChanged.connect(self.loaddata)
        self.Button_Export.clicked.connect(self.generate_excel)

    def retranslateUi(self, ReportArtMov):
        _translate = QtCore.QCoreApplication.translate
        ReportArtMov.setWindowTitle(_translate("ReportArtMov", "Mov. Artículo"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("ReportArtMov", "Nombre"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("ReportArtMov", "Nº Pedido"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("ReportArtMov", "Fecha Pedido"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("ReportArtMov", "Cantidad"))
        self.label_item.setText(_translate("ReportArtMov", "Artículo"))
        self.label_Total.setText(_translate("ReportArtMov", "Total Cantidad"))
        self.Button_Export.setText(_translate("ReportArtMov", "Exportar"))

# Function to load data in table
    def loaddata(self):
        supply_name=self.ItemName.currentText()
        supply_name=supply_name[:supply_name.find(" |")]

        
        query1 = """
                SELECT co_header."id", co_header."client_id", co_header."client_order_num", clients."name", co_header."order_date"
                FROM purch_fact.client_ord_header AS co_header
                LEFT JOIN purch_fact.clients AS clients ON co_header."client_id" = clients."id"
                ORDER BY clients."name" ASC, co_header."order_date" DESC
                """
        query2 = """
                SELECT co_det."client_ord_header_id", supplies."reference", supplies."description", co_det."quantity"
                FROM purch_fact.supplies AS supplies
                RIGHT JOIN purch_fact.client_ord_detail AS co_det ON supplies."id" = co_det."supply_id"
                ORDER BY co_det."client_ord_header_id"
                """
        commands_supplies = f"""
                            SELECT query1."name", query1."client_order_num", TO_CHAR(query1."order_date", 'DD/MM/YYYY') as formatted_date, query2."quantity"
                            FROM ({query1}) AS query1
                            INNER JOIN ({query2}) AS query2 ON query1."id" = query2."client_ord_header_id"
                            WHERE query2."reference" = '{supply_name}'
                            ORDER BY query1."order_date" DESC
                            """
        conn = None

        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_supplies)
            results=cur.fetchall()

            self.df = pd.DataFrame(results, columns=["Nombre", "Nº Pedido", "Fecha Pedido", "Cantidad"])
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            self.tableWidget.setRowCount(len(results))
            tablerow=0

            font = QtGui.QFont()
            font.setPointSize(int(10//1.5))

        # fill the Qt Table with the query results
            for row in results:
                for column in range(4):
                    value = row[column]
                    if value is None:
                        value = ''
                    it = QtWidgets.QTableWidgetItem(str(value))
                    it.setFlags(it.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
                    it.setFont(font)
                    self.tableWidget.setItem(tablerow, column, it)

                self.tableWidget.setItemDelegateForRow(tablerow, AlignDelegate(self.tableWidget))
                tablerow+=1

            self.tableWidget.verticalHeader().hide()
            self.tableWidget.setSortingEnabled(False)
            self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(os.path.abspath(os.path.join(basedir, "Resources/Iconos/icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        self.calculate_totalqty()

# Function to calculate total
    def calculate_totalqty(self):
            locale.setlocale(locale.LC_ALL, '')
            total = 0
            for row in range(self.tableWidget.rowCount()):
                item = self.tableWidget.item(row, 3)
                if item is not None:
                    value = item.text()
                    total += float(value)
            total = locale.format_string("%.2f", total, grouping=True)
            self.label_TotalValue.setText(total)

# Function to generate excel
    def generate_excel(self):
        output_path = asksaveasfilename(defaultextension=".xlsx", filetypes=[("Archivos Excel", "*.xlsx")], title="Guardar Excel")

        if output_path:
            wb = Workbook()
            ws = wb.active

            # Add data to Excel
            for index, row in self.df.iterrows():
                fecha_str = row['Fecha Pedido']
                if fecha_str is not None:
                    fecha_obj = datetime.strptime(fecha_str, '%d/%m/%Y').date()
                    self.df.at[index, 'Fecha Pedido'] = fecha_obj

            for r_idx, row in enumerate(dataframe_to_rows(self.df, index=False, header=True), 1):
                ws.append(row)

            date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')

            # Apply Styles
            for cell in ws['C']:
                cell.style = date_style

            # Save Excel
            wb.save(output_path)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ReportArtMov = QtWidgets.QMainWindow()
    ui = Ui_ArtMov_Window()
    ui.setupUi(ReportArtMov)
    ReportArtMov.show()
    sys.exit(app.exec())
