# Form implementation generated from reading ui file 'CreateDoc_Menu.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from NewDoc_Window import Ui_New_Doc_Window
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from config import config
import pandas as pd
import psycopg2


class Ui_CreateDoc_Menu(object):
    def setupUi(self, CreateDoc_Menu):
        CreateDoc_Menu.setObjectName("CreateDoc_Menu")
        CreateDoc_Menu.resize(300, 340)
        CreateDoc_Menu.setMinimumSize(QtCore.QSize(300, 340))
        CreateDoc_Menu.setMaximumSize(QtCore.QSize(300, 340))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        CreateDoc_Menu.setWindowIcon(icon)
        CreateDoc_Menu.setStyleSheet("QWidget {\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
".QFrame {\n"
"    border: 2px solid black;\n"
"}\n"
"\n"
"QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 8px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(parent=CreateDoc_Menu)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(275, 275))
        self.frame.setMaximumSize(QtCore.QSize(275, 275))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 80, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 4, 0, 1, 1)
        self.Button_Create = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Create.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Create.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Create.setObjectName("Button_Create")
        self.gridLayout_2.addWidget(self.Button_Create, 1, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem1, 2, 0, 1, 1)
        self.Button_Import = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Import.setMinimumSize(QtCore.QSize(250, 35))
        self.Button_Import.setMaximumSize(QtCore.QSize(250, 35))
        self.Button_Import.setObjectName("Button_Import")
        self.gridLayout_2.addWidget(self.Button_Import, 3, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem2 = QtWidgets.QSpacerItem(140, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.Button_Cancel = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Cancel.setEnabled(True)
        self.Button_Cancel.setMinimumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setMaximumSize(QtCore.QSize(100, 35))
        self.Button_Cancel.setObjectName("Button_Cancel")
        self.horizontalLayout.addWidget(self.Button_Cancel)
        self.gridLayout_2.addLayout(self.horizontalLayout, 5, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem3, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        CreateDoc_Menu.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=CreateDoc_Menu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 300, 22))
        self.menubar.setObjectName("menubar")
        CreateDoc_Menu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=CreateDoc_Menu)
        self.statusbar.setObjectName("statusbar")
        CreateDoc_Menu.setStatusBar(self.statusbar)

        self.retranslateUi(CreateDoc_Menu)
        self.Button_Cancel.clicked.connect(CreateDoc_Menu.close) # type: ignore
        self.Button_Create.clicked.connect(lambda: self.CreateDoc(CreateDoc_Menu))
        self.Button_Import.clicked.connect(lambda: self.ImportDoc(CreateDoc_Menu))
        QtCore.QMetaObject.connectSlotsByName(CreateDoc_Menu)


    def retranslateUi(self, CreateDoc_Menu):
        _translate = QtCore.QCoreApplication.translate
        CreateDoc_Menu.setWindowTitle(_translate("CreateDoc_Menu", "Crear Documento"))
        self.Button_Create.setText(_translate("CreateDoc_Menu", "Crear Documento"))
        self.Button_Import.setText(_translate("CreateDoc_Menu", "Importar Documento(s)"))
        self.Button_Cancel.setText(_translate("CreateDoc_Menu", "Cancelar"))


    def CreateDoc(self,CreateDoc_Menu):
        self.createdoc_window=QtWidgets.QMainWindow()
        self.ui=Ui_New_Doc_Window()
        self.ui.setupUi(self.createdoc_window)
        self.createdoc_window.show()
        CreateDoc_Menu.hide()
        self.ui.Button_Cancel.clicked.connect(CreateDoc_Menu.show)


    def ImportDoc(self,CreateDoc_Menu):
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()

        # File dialog to select Excel file
        # Tk().withdraw()  # Ocultar la ventana principal de tkinter
            excel_file = askopenfilename(title="Seleccionar archivo Excel")

        # Saving Excel in Pandas Dataframe
            df = pd.read_excel(excel_file)

        # Reading each row and inserting data in table
            for index, fila in df.iterrows():
            # Creating SQL sentence
                valores=[str(valor) for valor in fila.values]

                query = "SELECT * FROM documentation WHERE num_doc_eipsa = %s"
                cur.execute(query, (valores[0],))
                results=cur.fetchall()
                match=list(filter(lambda x:valores[0] in x, results))

                if len(match)>0:
                    dlg = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg.setWindowIcon(new_icon)
                    dlg.setWindowTitle("Nuevo Documento")
                    dlg.setText(f"El número de documento '{valores[0]}' ya existe y no será importado. Por favor, edítalo y vuelve a importarlo")
                    dlg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg.exec()

                else:
                    query = "SELECT id FROM document_type WHERE doc_type = %s"
                    cur.execute(query, (valores[4],))
                # get results from query
                    resultado = cur.fetchone()
                # get id from table
                    id_doctype = resultado[0]
                #inserting values to BBDD
                    valores[4]=str(id_doctype)
                    valores = "', '".join(valores)
                    sql_insercion = f"INSERT INTO documentation VALUES ('{valores}')"
                # Executing SQL sentence
                    cur.execute(sql_insercion)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap("//nas01/DATOS/Comunes/EIPSA-ERP/icon.ico"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("Importar Documentos")
            dlg.setText("Importación completada")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()

            del dlg, new_icon

        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if conn is not None:
                conn.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    CreateDoc_Menu = QtWidgets.QMainWindow()
    ui = Ui_CreateDoc_Menu()
    ui.setupUi(CreateDoc_Menu)
    CreateDoc_Menu.show()
    sys.exit(app.exec())
