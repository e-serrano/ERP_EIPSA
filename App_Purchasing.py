# Form implementation generated from reading ui file 'App_Purchasing.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMenu
from datetime import *
import os
from pathlib import Path
from config import config, get_path
import psycopg2
import pandas as pd
from PDF_Viewer import PDF_Viewer
from openpyxl import Workbook, load_workbook
from openpyxl.styles import NamedStyle
from openpyxl.utils.dataframe import dataframe_to_rows
import configparser
from Database_Connection import createConnection
from TAGEdit_Commercial_Window import Ui_EditTags_Commercial_Window


class AlignDelegate(QtWidgets.QStyledItemDelegate):
    """
    A custom item delegate for aligning cell content in a QTableView or QTableWidget to the center.

    Inherits from:
        QtWidgets.QStyledItemDelegate: Provides custom rendering and editing for table items.

    """
    def initStyleOption(self, option, index):
        """
        Initializes the style option for the item, setting its display alignment to center.

        Args:
            option (QtWidgets.QStyleOptionViewItem): The style option to initialize.
            index (QtCore.QModelIndex): The model index of the item.
        """
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignmentFlag.AlignCenter

class CustomTableWidget(QtWidgets.QTableWidget):
    """
    Custom QTableWidget that supports filtering and sorting features.

    Attributes:
        list_filters (list): Stores filters applied to the table.
        column_filters (dict): Maps column indices to sets of applied filters.
        column_actions (dict): Maps column indices to actions related to columns.
        checkbox_states (dict): Stores the state of checkboxes for filtering.
        rows_hidden (dict): Maps column indices to sets of hidden row indices.
        general_rows_to_hide (set): Set of row indices that are hidden across the table.
    """
    def __init__(self, parent=None):
        """
        Initializes the CustomTableWidget.

        Sets up the initial state of the widget, including filters, checkbox states, 
        and hidden rows.

        Args:
            parent (QWidget, optional): The parent widget of this table. Defaults to None.
        """
        super().__init__(parent)
        self.list_filters=[]
        self.column_filters = {}
        self.column_actions = {}
        self.checkbox_states = {}
        self.rows_hidden = {}
        self.general_rows_to_hide = set()

# Function to show the menu
    def show_unique_values_menu(self, column_index, header_pos, header_height):
        """
        Displays a context menu for unique values in a specified column.

        The menu includes options to remove filters, sort the column, and filter by text. 
        It also allows the user to select/unselect unique values via checkboxes.

        Args:
            column_index (int): The index of the column for which the menu is displayed.
            header_pos (QPoint): The position of the header in the viewport.
            header_height (int): The height of the header.
        """
        menu = QtWidgets.QMenu(self)
        actionDeleteFilterColumn = QtGui.QAction("Quitar Filtro")
        actionDeleteFilterColumn.triggered.connect(lambda: self.delete_filter(column_index))
        menu.addAction(actionDeleteFilterColumn)
        menu.addSeparator()
        actionOrderAsc = menu.addAction("Ordenar Ascendente")
        actionOrderAsc.triggered.connect(lambda: self.sortByColumn(column_index, QtCore.Qt.SortOrder.AscendingOrder))
        actionOrderDesc = menu.addAction("Ordenar Descendente")
        actionOrderDesc.triggered.connect(lambda: self.sortByColumn(column_index, QtCore.Qt.SortOrder.DescendingOrder))
        menu.addSeparator()
        actionFilterByText = menu.addAction("Buscar Texto")
        actionFilterByText.triggered.connect(lambda: self.filter_by_text(column_index))
        menu.addSeparator()

        menu.setStyleSheet("QMenu::item:selected { background-color: #33bdef; }"
                        "QMenu::item:pressed { background-color: rgb(1, 140, 190); }")

        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        scroll_menu = QtWidgets.QScrollArea()
        scroll_menu.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget(scroll_menu)
        scroll_menu.setWidget(scroll_widget)
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        checkboxes = []

        select_all_checkbox = QtWidgets.QCheckBox("Seleccionar todo")
        if column_index in self.checkbox_states:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index].get("Seleccionar todo", QtCore.Qt.CheckState(2))))
        else:
            select_all_checkbox.setCheckState(QtCore.Qt.CheckState(2))
        scroll_layout.addWidget(select_all_checkbox)
        checkboxes.append(select_all_checkbox)

        unique_values = self.get_unique_values(column_index)
        filtered_values = self.get_filtered_values()

        for value in sorted(unique_values):
            checkbox = QtWidgets.QCheckBox(value)
            if select_all_checkbox.isChecked(): 
                checkbox.setCheckState(QtCore.Qt.CheckState(2))
            else:
                if column_index in self.checkbox_states and value in self.checkbox_states[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(self.checkbox_states[column_index][value]))
                elif filtered_values is None or value in filtered_values[column_index]:
                    checkbox.setCheckState(QtCore.Qt.CheckState(2))
                else:
                    checkbox.setCheckState(QtCore.Qt.CheckState(0))
            scroll_layout.addWidget(checkbox)
            checkboxes.append(checkbox)

        select_all_checkbox.stateChanged.connect(lambda state: self.set_all_checkboxes_state(checkboxes, state, column_index))

        for value, checkbox in zip(sorted(unique_values), checkboxes[1:]):
            checkbox.stateChanged.connect(lambda checked, value=value, checkbox=checkbox: self.apply_filter(column_index, value, checked))

    # Action for drop down menu and adding scroll area as widget
        action_scroll_menu = QtWidgets.QWidgetAction(menu)
        action_scroll_menu.setDefaultWidget(scroll_menu)
        menu.addAction(action_scroll_menu)

        menu.exec(header_pos - QtCore.QPoint(0, header_height))

# Function to delete filter on selected column
    def delete_filter(self,column_index):
        """
        Removes the filter applied to the specified column.

        Unhides previously hidden rows and resets the checkbox state for the column.

        Args:
            column_index (int): The index of the column from which to delete the filter.
        """
        if column_index in self.column_filters:
            del self.column_filters[column_index]
        if column_index in self.checkbox_states:
            del self.checkbox_states[column_index]
        if column_index in self.rows_hidden:
            for item in self.rows_hidden[column_index]:
                self.setRowHidden(item, False)
                if item in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(item)
            del self.rows_hidden[column_index]
        header_item = self.horizontalHeaderItem(column_index)
        header_item.setIcon(QtGui.QIcon())

# Function to set all checkboxes state
    def set_all_checkboxes_state(self, checkboxes, state, column_index):
        """
        Sets the state of all checkboxes in the filter menu for a specific column.

        Args:
            checkboxes (list): List of checkboxes to update.
            state (Qt.CheckState): The desired state for the checkboxes.
            column_index (int): The index of the column for which the checkboxes are set.
        """
        if column_index not in self.checkbox_states:
            self.checkbox_states[column_index] = {}

        for checkbox in checkboxes:
            checkbox.setCheckState(QtCore.Qt.CheckState(state))

        self.checkbox_states[column_index]["Seleccionar todo"] = state

# Function to apply filters to table
    def apply_filter(self, column_index, value, checked, text_filter=None, filter_dialog=None):
        """
        Applies a filter to the specified column based on the checkbox state and optional text filter.

        Args:
            column_index (int): The index of the column to filter.
            value (str): The value to filter by.
            checked (bool): Indicates if the filter should be applied (True) or removed (False).
            text_filter (str, optional): Additional text filter for filtering items. Defaults to None.
            filter_dialog (QDialog, optional): The dialog used for the text filter. Defaults to None.
        """
        if column_index not in self.column_filters:
            self.column_filters[column_index] = set()

        if text_filter is None:
            if value is None:
                self.column_filters[column_index] = set()
            elif checked:
                self.column_filters[column_index].add(value)
            elif value in self.column_filters[column_index]:
                self.column_filters[column_index].remove(value)

        rows_to_hide = set()
        for row in range(self.rowCount()):
            show_row = True

            # Check filters for all columns
            for col, filters in self.column_filters.items():
                item = self.item(row, col)
                if item:
                    item_value = item.text()
                    if text_filter is None:
                        if filters and item_value not in filters:
                            show_row = False
                            break

        # Filtering by text
            if text_filter is not None:
                filter_dialog.accept()
                item = self.item(row, column_index)
                if item:
                    if text_filter.upper() in item.text().upper():
                        self.column_filters[column_index].add(item.text())
                    else:
                        show_row = False

            if not show_row:
                if row not in self.general_rows_to_hide:
                    self.general_rows_to_hide.add(row)
                    rows_to_hide.add(row)
            else:
                if row in self.general_rows_to_hide:
                    self.general_rows_to_hide.remove(row)

        # Update hidden rows for this column depending on checkboxes
        if checked and text_filter is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Update hidden rows for this column depending on filtered text
        if text_filter is not None and value is None:
            if column_index not in self.rows_hidden:
                self.rows_hidden[column_index] = set(rows_to_hide)
            else:
                self.rows_hidden[column_index].update(rows_to_hide)

        # Iterate over all rows to hide them as necessary
        for row in range(self.rowCount()):
            self.setRowHidden(row, row in self.general_rows_to_hide)

        header_item = self.horizontalHeaderItem(column_index)
        if len(self.general_rows_to_hide) > 0:
            header_item.setIcon(QtGui.QIcon(str(get_path("Resources", "Iconos", "Filter_Active.png"))))
        else:
            header_item.setIcon(QtGui.QIcon())

# Function to apply filters to table based on a desired text
    def filter_by_text(self, column_index):
        """
        Opens a dialog for filtering the specified column by text input.

        Args:
            column_index (int): The index of the column to filter.
        """
        filter_dialog = QtWidgets.QDialog(self)
        filter_dialog.setWindowTitle("Filtrar por texto")
        
        label = QtWidgets.QLabel("Texto a filtrar:")
        text_input = QtWidgets.QLineEdit()
        
        filter_button = QtWidgets.QPushButton("Filtrar")
        filter_button.setStyleSheet("QPushButton {\n"
"background-color: #33bdef;\n"
"  border: 1px solid transparent;\n"
"  border-radius: 3px;\n"
"  color: #fff;\n"
"  font-family: -apple-system,system-ui,\"Segoe UI\",\"Liberation Sans\",sans-serif;\n"
"  font-size: 15px;\n"
"  font-weight: 800;\n"
"  line-height: 1.15385;\n"
"  margin: 0;\n"
"  outline: none;\n"
"  padding: 2px .8em;\n"
"  text-align: center;\n"
"  text-decoration: none;\n"
"  vertical-align: baseline;\n"
"  white-space: nowrap;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #019ad2;\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(1, 140, 190);\n"
"    border-color: rgb(255, 255, 255);\n"
"}")
        filter_button.clicked.connect(lambda: self.apply_filter(column_index, None, False, text_input.text(), filter_dialog))

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(text_input)
        layout.addWidget(filter_button)

        filter_dialog.setLayout(layout)
        filter_dialog.exec()

# Function to obtain the unique matching applied filters 
    def get_unique_values(self, column_index):
        """
        Retrieves unique values from the specified column, taking into account any active filters on other columns.

        Args:
            column_index (int): The index of the column from which to retrieve unique values.

        Returns:
            set: A set of unique values from the specified column that are visible based on the current filters.
        """
        unique_values = set()
        for row in range(self.rowCount()):
            show_row = True
            for col, filters in self.column_filters.items():
                if col != column_index:
                    item = self.item(row, col)
                    if item:
                        item_value = item.text()
                        if filters and item_value not in filters:
                            show_row = False
                            break
            if show_row:
                item = self.item(row, column_index)
                if item:
                    unique_values.add(item.text())
        return unique_values

# Function to get values filtered by all columns
    def get_filtered_values(self):
        """
        Gets the current filter values for all columns.

        Returns:
            dict: A dictionary where each key is a column index and the value is a set of filters applied to that column.
        """
        filtered_values = {}
        for col, filters in self.column_filters.items():
            filtered_values[col] = filters
        return filtered_values

# Function to sort column based on special datatypes
    def custom_sort(self, column, order):
        """
        Custom sorting method for date columns. Sorts the specified column based on date values.

        Args:
            column (int): The index of the column to sort.
            order (Qt.SortOrder): The order to sort the column (ascending or descending).
        """
        row_count = self.rowCount()

        indexes = list(range(row_count))
        indexes.sort(key=lambda i: QtCore.QDateTime.fromString(self.item(i, column).text(), "dd-MM-yyyy"))

        if order == QtCore.Qt.SortOrder.DescendingOrder:
            indexes.reverse()

        hidden_rows = [row for row in range(row_count) if self.isRowHidden(row)]

        rows = self.rowCount()
        for i in range(rows):
            self.insertRow(i)

        for new_row, old_row in enumerate(indexes):
            for col in range(self.columnCount()):
                item = self.takeItem(old_row + rows, col)
                self.setItem(new_row, col, item)

        for i in range(rows):
            self.removeRow(rows)

        for row in hidden_rows:
            self.setRowHidden(row, True)

# Function with the menu configuration
    def contextMenuEvent(self, event):
        """
        Handles the context menu event for the table. Shows a menu for filtering unique values when the header is right-clicked.

        Args:
            event (QEvent): The event triggered by the context menu action.
        """
        if self.horizontalHeader().visualIndexAt(event.pos().x()) >= 0:
            logical_index = self.horizontalHeader().logicalIndexAt(event.pos().x())
            header_pos = self.mapToGlobal(self.horizontalHeader().pos())
            header_height = self.horizontalHeader().height()
            self.show_unique_values_menu(logical_index, header_pos, header_height)
        else:
            super().contextMenuEvent(event)

class Ui_App_Purchasing(QtWidgets.QMainWindow):
    """
    Ui_App_Invoicing represents the invoicing application interface.

    Attributes:
        name (str): The name of the application or user.
        username (str): The username of the logged-in user.
        pdf_viewer (PDF_Viewer): An instance of the PDF_Viewer class used to display PDFs.
    """
    def __init__(self, name, username):
        """
        Initializes the Ui_App_Invoicing object with a user-specific name and username.

        Args:
            name (str): The name associated with the application or user.
            username (str): The username of the current user.

        Side Effects:
            Creates an instance of the PDF_Viewer class for PDF handling.
        """
        super().__init__() 
        self.name=name
        self.username=username
        self.pdf_viewer = PDF_Viewer()
        self.setupUi(self)


    def setupUi(self, App_Purchasing):
        """
        Sets up the user interface components for the main application window.

        Args:
            App_Purchasing (QtWidgets.QMainWindow): The main window object to set up.
        """
        App_Purchasing.setObjectName("App_Purchasing")
        App_Purchasing.resize(945, 860)
        App_Purchasing.setMinimumSize(QtCore.QSize(945, 860))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        App_Purchasing.setWindowIcon(icon)
        if self.username == 'd.marquez':
            App_Purchasing.setStyleSheet("QWidget {\n"
    "background-color: #121212; color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid white;\n"
    "}")
        else:
            App_Purchasing.setStyleSheet("QWidget {\n"
    "background-color: rgb(255, 255, 255);\n"
    "}\n"
    "\n"
    ".QFrame {\n"
    "    border: 2px solid black;\n"
    "}")
        self.centralwidget = QtWidgets.QWidget(parent=App_Purchasing)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.FrameApp = QtWidgets.QVBoxLayout()
        self.FrameApp.setObjectName("FrameApp")
        self.Header = QtWidgets.QHBoxLayout()
        self.Header.setContentsMargins(-1, 0, -1, -1)
        self.Header.setObjectName("Header")
        self.LogoIcon = QtWidgets.QLabel(parent=self.frame)
        self.LogoIcon.setMinimumSize(QtCore.QSize(int(220//1.5), int(52//1.5)))
        self.LogoIcon.setMaximumSize(QtCore.QSize(int(220//1.5), int(52//1.5)))
        self.LogoIcon.setText("")
        self.LogoIcon.setPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Logo Nobg.ico"))))
        self.LogoIcon.setScaledContents(True)
        self.LogoIcon.setObjectName("LogoIcon")
        self.Header.addWidget(self.LogoIcon)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem)
        self.Button_Notification = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Notification.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Notification.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Notification.setToolTip('Notificaciones')
        self.Button_Notification.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_Notification.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_Notification.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_Notification.setText("")
        self.Button_Notification.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_Notification.setObjectName("Button_Notification")
        self.Header.addWidget(self.Button_Notification)
        spacerItem15 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem15)
        self.Button_Welding = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Welding.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Welding.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Welding.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_Welding.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_Welding.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_Welding.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Welding.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Welding.setIcon(icon12)
        self.Button_Welding.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_Welding.setObjectName("Button_Welding")
        self.Button_Welding.setToolTip("Homologación Soldadura")
        self.Header.addWidget(self.Button_Welding)
        spacerItem11 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem11)

        self.Button_LiquidVisual = QtWidgets.QPushButton(parent=self.frame)
        self.Button_LiquidVisual.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_LiquidVisual.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_LiquidVisual.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_LiquidVisual.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_LiquidVisual.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_LiquidVisual.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Liquids_Visual.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_LiquidVisual.setIcon(icon2)
        self.Button_LiquidVisual.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_LiquidVisual.setObjectName("Button_LiquidVisual")
        self.Button_LiquidVisual.setToolTip("Certificados Líquidos")
        self.Header.addWidget(self.Button_LiquidVisual)
        spacerItem8 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem8)
        self.Button_Warehouse = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Warehouse.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Warehouse.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Warehouse.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_Warehouse.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_Warehouse.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_Warehouse.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Warehouse.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Warehouse.setIcon(icon12)
        self.Button_Warehouse.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_Warehouse.setObjectName("Button_Warehouse")
        self.Button_Warehouse.setToolTip("Almacén")
        self.Header.addWidget(self.Button_Warehouse)

        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem6)
        self.Button_ActiveOffer = QtWidgets.QPushButton(parent=self.frame)
        self.Button_ActiveOffer.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_ActiveOffer.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_ActiveOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_ActiveOffer.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_ActiveOffer.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_ActiveOffer.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Offer_Pending.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_ActiveOffer.setIcon(icon12)
        self.Button_ActiveOffer.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_ActiveOffer.setObjectName("Button_ActiveOffer")
        self.Button_ActiveOffer.setToolTip("Ofertas Activas")
        self.Header.addWidget(self.Button_ActiveOffer)

        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem6)
        self.Button_Revisions = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Revisions.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Revisions.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Revisions.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_Revisions.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_Revisions.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_Revisions.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Revision.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Revisions.setIcon(icon12)
        self.Button_Revisions.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_Revisions.setObjectName("Button_Revisions")
        self.Button_Revisions.setToolTip("Revisiones")
        self.Header.addWidget(self.Button_Revisions)
        spacerItem7 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem7)
        self.Button_Times = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Times.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Times.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Times.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_Times.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_Times.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_Times.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Clock.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Times.setIcon(icon13)
        self.Button_Times.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_Times.setObjectName("Button_Times")
        self.Button_Times.setToolTip("Tiempos Fabricaión")
        self.Header.addWidget(self.Button_Times)

        spacerItem8 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem8)
        self.Button_OfferSummary = QtWidgets.QPushButton(parent=self.frame)
        self.Button_OfferSummary.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_OfferSummary.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_OfferSummary.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_OfferSummary.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_OfferSummary.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_OfferSummary.setText("")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Offer_Summary.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_OfferSummary.setIcon(icon14)
        self.Button_OfferSummary.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_OfferSummary.setObjectName("Button_OfferSummary")
        self.Button_OfferSummary.setToolTip("Resumen Ofertas")
        self.Header.addWidget(self.Button_OfferSummary)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem1)
        self.HeaderName = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(int(12//1.5))
        font.setBold(True)
        self.HeaderName.setFont(font)
        self.HeaderName.setStyleSheet("color:rgb(3, 174, 236)")
        self.HeaderName.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.HeaderName.setObjectName("HeaderName")
        self.Header.addWidget(self.HeaderName)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.Header.addItem(spacerItem2)
        self.Button_Profile = QtWidgets.QPushButton(parent=self.frame)
        self.Button_Profile.setMinimumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Profile.setMaximumSize(QtCore.QSize(int(50//1.5), int(50//1.5)))
        self.Button_Profile.setToolTip('Configuración')
        self.Button_Profile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        if self.username == 'd.marquez':
            self.Button_Profile.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.Button_Profile.setStyleSheet("QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.Button_Profile.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "User.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Profile.setIcon(icon13)
        self.Button_Profile.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_Profile.setObjectName("Button_Profile")
        self.Header.addWidget(self.Button_Profile)
        self.FrameApp.addLayout(self.Header)
        spacerItem3 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.FrameApp.addItem(spacerItem3)
        self.PrincipalScreen = QtWidgets.QHBoxLayout()
        self.PrincipalScreen.setObjectName("PrincipalScreen")
        self.ButtonFrame = QtWidgets.QFrame(parent=self.frame)
        self.ButtonFrame.setMinimumSize(QtCore.QSize(int(220//1.5), 0))
        self.ButtonFrame.setMaximumSize(QtCore.QSize(int(220//1.5), 16777215))
        self.ButtonFrame.setAutoFillBackground(False)
        if self.username == 'd.marquez':
            self.ButtonFrame.setStyleSheet("QFrame{\n"
    "    background-color: rgb(3, 174, 236);\n"
    "}\n"
    "\n"
    "QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    color: rgb(3, 174, 236);\n"
    "    background-color: rgb(38, 38, 38);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        else:
            self.ButtonFrame.setStyleSheet("QFrame{\n"
    "    background-color: rgb(3, 174, 236);\n"
    "}\n"
    "\n"
    "QPushButton{\n"
    "    border: 1px solid transparent;\n"
    "    color: rgb(3, 174, 236);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:hover{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(255, 255, 255);\n"
    "    border-radius: 10px;\n"
    "}\n"
    "\n"
    "QPushButton:pressed{\n"
    "    border: 1px solid transparent;\n"
    "    border-color: rgb(0, 0, 0);\n"
    "    color: rgb(0,0,0);\n"
    "    background-color: rgb(200, 200, 200);\n"
    "    border-radius: 10px;\n"
    "}")
        self.ButtonFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ButtonFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ButtonFrame.setObjectName("ButtonFrame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.ButtonFrame)
        self.verticalLayout_3.setContentsMargins(9, 0, -1, 0)
        self.verticalLayout_3.setSpacing(25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_Purchasing = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_Purchasing.setMinimumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        self.Button_Purchasing.setMaximumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(12//1.5))
        font.setBold(True)
        self.Button_Purchasing.setFont(font)
        self.Button_Purchasing.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Purchasing.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Purchasing.setIcon(icon1)
        self.Button_Purchasing.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_Purchasing.setObjectName("Button_Purchasing")
        self.verticalLayout_3.addWidget(self.Button_Purchasing)
        self.Button_QueryOffer = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOffer.setMinimumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        self.Button_QueryOffer.setMaximumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(12//1.5))
        font.setBold(True)
        self.Button_QueryOffer.setFont(font)
        self.Button_QueryOffer.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Offer_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOffer.setIcon(icon3)
        self.Button_QueryOffer.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_QueryOffer.setObjectName("Button_QueryOffer")
        self.verticalLayout_3.addWidget(self.Button_QueryOffer)
        self.Button_QueryOrder = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryOrder.setMinimumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        self.Button_QueryOrder.setMaximumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(12//1.5))
        font.setBold(True)
        self.Button_QueryOrder.setFont(font)
        self.Button_QueryOrder.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Order_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryOrder.setIcon(icon4)
        self.Button_QueryOrder.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_QueryOrder.setObjectName("Button_QueryOrder")
        self.verticalLayout_3.addWidget(self.Button_QueryOrder)
        self.Button_QueryTag = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryTag.setMinimumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        self.Button_QueryTag.setMaximumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(12//1.5))
        font.setBold(True)
        self.Button_QueryTag.setFont(font)
        self.Button_QueryTag.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTag.setIcon(icon5)
        self.Button_QueryTag.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_QueryTag.setObjectName("Button_QueryTag")
        self.verticalLayout_3.addWidget(self.Button_QueryTag)
        self.Button_QueryTagPrices = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryTagPrices.setMinimumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        self.Button_QueryTagPrices.setMaximumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(12//1.5))
        font.setBold(True)
        self.Button_QueryTagPrices.setFont(font)
        self.Button_QueryTagPrices.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "TAG_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryTagPrices.setIcon(icon5)
        self.Button_QueryTagPrices.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_QueryTagPrices.setObjectName("Button_QueryTagPrices")
        self.verticalLayout_3.addWidget(self.Button_QueryTagPrices)
        self.Button_QueryDoc = QtWidgets.QPushButton(parent=self.ButtonFrame)
        self.Button_QueryDoc.setMinimumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        self.Button_QueryDoc.setMaximumSize(QtCore.QSize(int(200//1.5), int(50//1.5)))
        font = QtGui.QFont()
        font.setPointSize(int(12//1.5))
        font.setBold(True)
        self.Button_QueryDoc.setFont(font)
        self.Button_QueryDoc.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Documents_Search.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_QueryDoc.setIcon(icon4)
        self.Button_QueryDoc.setIconSize(QtCore.QSize(int(40//1.5), int(40//1.5)))
        self.Button_QueryDoc.setObjectName("Button_QueryDoc")
        self.verticalLayout_3.addWidget(self.Button_QueryDoc)
        self.PrincipalScreen.addWidget(self.ButtonFrame)
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.PrincipalScreen.addItem(spacerItem4)
        self.MainLayout = QtWidgets.QVBoxLayout()
        self.MainLayout.setObjectName("MainLayout")
        self.tableOffer = CustomTableWidget()
        self.tableOffer.setMinimumSize(QtCore.QSize(650, 280))
        self.tableOffer.setObjectName("tableOffer")
        # self.tableOffer.setColumnCount(11)
        self.tableOffer.setRowCount(0)
        # for i in range(11):
        #     item = QtWidgets.QTableWidgetItem()
        #     font = QtGui.QFont()
        #     font.setPointSize(10)
        #     font.setBold(True)
        #     item.setFont(font)
        #     self.tableOffer.setHorizontalHeaderItem(i, item)
        # self.tableOffer.verticalHeader().setVisible(False)
        # self.tableOffer.setSortingEnabled(False)
        # if self.username == 'd.marquez':
        #     self.tableOffer.setStyleSheet("gridline-color: rgb(128, 128, 128);")
        #     self.tableOffer.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid white; font-weight: bold; font-size: 10pt;}")
        # else:
        #     self.tableOffer.horizontalHeader().setStyleSheet("QHeaderView::section {background-color: #33bdef; border: 1px solid black;}")
        self.MainLayout.addWidget(self.tableOffer)
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.MainLayout.addItem(spacerItem5)
        self.BottomLayout = QtWidgets.QHBoxLayout()
        self.BottomLayout.setContentsMargins(-1, 0, -1, -1)
        self.BottomLayout.setObjectName("BottomLayout")
        self.MainLayout.addLayout(self.BottomLayout)
        self.PrincipalScreen.addLayout(self.MainLayout)
        self.FrameApp.addLayout(self.PrincipalScreen)
        self.gridLayout.addLayout(self.FrameApp, 3, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 0, 0, 1, 1)
        App_Purchasing.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=App_Purchasing)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        App_Purchasing.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=App_Purchasing)
        self.statusbar.setObjectName("statusbar")
        App_Purchasing.setStatusBar(self.statusbar)

        self.retranslateUi(App_Purchasing)
        QtCore.QMetaObject.connectSlotsByName(App_Purchasing)
        self.Button_Purchasing.clicked.connect(self.purchase)
        self.Button_QueryOffer.clicked.connect(self.query_offer)
        self.Button_QueryOrder.clicked.connect(self.query_order)
        self.Button_QueryTag.clicked.connect(self.query_tag)
        self.Button_QueryTagPrices.clicked.connect(self.query_tag_prices)
        self.Button_QueryDoc.clicked.connect(self.query_documents)
        self.Button_Profile.clicked.connect(self.showMenu)
        self.Button_Welding.clicked.connect(self.welding_data)
        self.Button_LiquidVisual.clicked.connect(self.liquid_visual_certificate)
        self.Button_Warehouse.clicked.connect(self.warehouse_app)
        self.Button_ActiveOffer.clicked.connect(self.open_active_offers)
        self.Button_Revisions.clicked.connect(self.revisions)
        self.Button_Times.clicked.connect(self.times)
        self.Button_OfferSummary.clicked.connect(self.offers_summary)
        self.Button_Notification.clicked.connect(self.notifications)

        self.backup_data()
        self.warning_calibration()
        self.visual_certificate_check()
        self.load_notifications()


# Function to translate and updates the text of various UI elements
    def retranslateUi(self, App_Purchasing):
        """
        Translates and updates the text of various UI elements in the given App_Comercial.
        """
        _translate = QtCore.QCoreApplication.translate
        App_Purchasing.setWindowTitle(_translate("App_Purchasing", "ERP EIPSA - Compras"))
        self.HeaderName.setText(_translate("App_Purchasing", self.name))
        self.Button_Purchasing.setText(_translate("App_Purchasing", "    Compras"))
        self.Button_QueryOffer.setText(_translate("App_Purchasing", "    Consultar Ofertas"))
        self.Button_QueryOrder.setText(_translate("App_Purchasing", "   Consultar Pedidos"))
        self.Button_QueryTag.setText(_translate("App_Purchasing", "    Consultar TAG(s)"))
        self.Button_QueryTagPrices.setText(_translate("App_Purchasing", "    Consultar €€ TAG(s)"))
        self.Button_QueryDoc.setText(_translate("App_Technical", "    Consultar Docum."))

# Function to open menu with purchase department functions
    def purchase(self):
        """
        Opens a new window for open purchase menu. 
        """
        from Purchasing_Menu import Ui_Purchasing_Menu
        self.purchasing_window=QtWidgets.QMainWindow()
        self.ui=Ui_Purchasing_Menu(self.name, self.username)
        self.ui.setupUi(self.purchasing_window)
        self.purchasing_window.show()

# Function to open window for query offers
    def query_offer(self):
        """
        Opens a new window for querying offers. 
        """
        from OfferQuery_Window import Ui_QueryOffer_Window
        self.query_offer_window=QtWidgets.QMainWindow()
        self.ui=Ui_QueryOffer_Window(self.username)
        self.ui.setupUi(self.query_offer_window)
        self.query_offer_window.showMaximized()

# Function to open window for query orders
    def query_order(self):
        """
        Opens a new window for querying orders. 
        """
        from OrderQuery_Window import Ui_QueryOrder_Window
        self.query_order_window=QtWidgets.QMainWindow()
        self.ui=Ui_QueryOrder_Window()
        self.ui.setupUi(self.query_order_window)
        self.query_order_window.showMaximized()

# Function to open window for query tags
    def query_tag(self):
        """
        Opens the "Edit Tags Commercial" window, establishes a database connection and closes the current menu.
        """
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_tag_com = createConnection(user_database, password_database)
        if not db_tag_com:
            sys.exit()

        self.edit_tags_app = Ui_EditTags_Commercial_Window(db_tag_com, self.username)
        self.edit_tags_app.showMaximized()

# Function to open window for query tags prices
    def query_tag_prices(self):
        """
        Opens a new window for querying tags. 
        """
        from TAGQuery_Menu import Ui_TAGQuery_Menu
        self.querytag_window=QtWidgets.QMainWindow()
        self.ui=Ui_TAGQuery_Menu('Comercial')
        self.ui.setupUi(self.querytag_window)
        self.querytag_window.show()

# Function to show menu when profile button is pressed
    def showMenu(self):
        """
        Displays a context menu when the profile button is clicked. 
        Provides options to edit the password.
        """
        menu = QMenu(self.centralwidget)
        menu.setStyleSheet("QMenu { border: 1px solid black; width: 125px; right: -1px; font: 10px; color: white}"
        "QMenu::item:selected { background-color: rgb(3, 174, 236); color: white; }")
        option1 = menu.addAction("Editar contraseña")
        option1.triggered.connect(lambda: self.editpassword())
        menu.addAction(option1)
        button = self.Button_Profile
        menu.exec(button.mapToGlobal(QtCore.QPoint(-75, 50)))

# Function to edit user password
    def editpassword(self):
        """
        Opens a new window for editing the user's password. 
        """
        from PasswordEdit_Window import Ui_EditPasswordWindow
        self.edit_password_window=QtWidgets.QMainWindow()
        self.ui=Ui_EditPasswordWindow(self.username)
        self.ui.setupUi(self.edit_password_window)
        self.edit_password_window.show()

# Function to query data related to welding operation
    def welding_data(self):
        """
        Opens a new window for welding menu. 
        """
        from Welding_Menu import Ui_Welding_Menu
        self.welding_menu_window=QtWidgets.QMainWindow()
        self.ui=Ui_Welding_Menu(self.username)
        self.ui.setupUi(self.welding_menu_window)
        self.welding_menu_window.show()

# Function to format date to long in spanish
    def format_date_spanish(self, date_toformat):
        """
        Formats a date object to a long string in Spanish.

        Args:
            date_toformat (date): The date to format.
            
        Returns:
            str: The formatted date as a string in the format "day de month de year".
        """
        months = ("enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre")
        day = date_toformat.day
        month = months[date_toformat.month - 1]
        year = date_toformat.year
        messsage = "{} de {} de {}".format(day, month, year)

        return messsage

# Function to save all data related to purchasing departmen in Excel files
    def backup_data(self):
        """
        Backs up data by creating an Excel file for various purchase-related tables.
        """
        base_path = Path.home() / "Documents" / "00 BACKUP-ERP"
        new_folder_path = base_path / (date.today().strftime("%Y-%m-%d"))

        if not new_folder_path.exists():
            os.makedirs(new_folder_path, exist_ok=True)

            try:
            # read the connection parameters
                params = config()
            # connect to the PostgreSQL server
                conn = psycopg2.connect(**params)
                cur = conn.cursor()
            # execution of commands
                commands_supplies = (""" SELECT * FROM purch_fact.supplies """)
                cur.execute(commands_supplies)
                results = cur.fetchall()
                df_supplies = pd.DataFrame(results, columns=["ID", "ID Destino", "ID Clase", "Referencia", "Descripción", "Un. Med",
                                                            "Val. Unit.", "Notas", "Stock", "Stock Disponible", "Pendiente", "Ubicación"])

                commands_client_ord_header = (""" SELECT * FROM purch_fact.client_ord_header """)
                cur.execute(commands_client_ord_header)
                results = cur.fetchall()
                df_client_order_header = pd.DataFrame(results, columns=["ID", "ID Cliente", "Fecha Pedido", "Fecha Entrega", "Nº Pedido Cliente", "Notas",
                                                            "Fecha Entrega 1", "Albarán 1", "Fecha Entrega 2", "Albarán 2", "Fecha Entrega 3", "Albarán 3"])

                commands_client_ord_details = (""" SELECT * FROM purch_fact.client_ord_detail """)
                cur.execute(commands_client_ord_details)
                results = cur.fetchall()
                df_client_ord_details = pd.DataFrame(results, columns=["ID", "ID Pedido Cliente", "ID Suministro", "Cantidad", "Pendiente",
                                                            "Fecha Entrega 1", "Cantidad 1", "Albarán 1",
                                                            "Fecha Entrega 2", "Cantidad 1", "Albarán 2",
                                                            "Fecha Entrega 3", "Cantidad 1", "Albarán 3", "Notas"])

                commands_supplier_ord_header = (""" SELECT * FROM purch_fact.supplier_ord_header """)
                cur.execute(commands_supplier_ord_header)
                results = cur.fetchall()
                df_supplier_ord_header = pd.DataFrame(results, columns=["ID", "ID Proveedor", "Fecha Pedido", "Fecha Entrega", "Notas", "Nº Pedido Proveedor",
                                                            "S/Ref.", "Forma Envío", "Forma Pago", "Plazo Entrega", "Notas Pedido", "Subtotal",
                                                            "Fecha Entrega 1", "Albarán 1", "Fecha Entrega 2", "Albarán 2", "Fecha Entrega 3", "Albarán 3",
                                                            "Notas Finales", "ID Divisa"])

                commands_supplier_ord_details = (""" SELECT * FROM purch_fact.supplier_ord_detail """)
                cur.execute(commands_supplier_ord_details)
                results = cur.fetchall()
                df_supplier_ord_details = pd.DataFrame(results, columns=["ID", "ID Pedido Proveedor", "Posición", "ID Suministro", "Val. Unit.", "Descuento", "Cantidad", "Pendiente",
                                                            "Fecha Entrega 1", "Cantidad 1", "Albarán 1",
                                                            "Fecha Entrega 2", "Cantidad 1", "Albarán 2",
                                                            "Fecha Entrega 3", "Cantidad 1", "Albarán 3"])

                commands_quotation_header = (""" SELECT * FROM purch_fact.quotation_header """)
                cur.execute(commands_quotation_header)
                results = cur.fetchall()
                df_quotation_header = pd.DataFrame(results, columns=["ID", "ID Proveedor", "Fecha Cotización", "Notas"])

                commands_quotation_details = (""" SELECT * FROM purch_fact.quotation_details """)
                cur.execute(commands_quotation_details)
                results = cur.fetchall()
                df_quotation_details = pd.DataFrame(results, columns=["ID", "ID Cotización", "ID Suministro", "Cantidad", "ID Divisa", "Valor Divisa", "Valor", "Notas"])

                commands_suppliers = (""" SELECT * FROM purch_fact.suppliers """)
                cur.execute(commands_suppliers)
                results = cur.fetchall()
                df_suppliers = pd.DataFrame(results, columns=["ID", "Nombre", "CIF", "Dirección", "Nº Tlf.", "Fax", "Ciudad", "Provincia", "País",
                                                                "Código Postal", "ID Forma Pago", "Vto. Prog. 1", "Vto. Prog. 2", "ID IVA", "Notas"])

            # close communication with the PostgreSQL database server
                cur.close()
            # commit the changes
                conn.commit()

            except (Exception, psycopg2.DatabaseError) as error:
                dlg = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg.setWindowIcon(new_icon)
                dlg.setWindowTitle("ERP EIPSA")
                dlg.setText("Ha ocurrido el siguiente error:\n"
                            + str(error))
                print(error)
                dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                dlg.exec()
                del dlg, new_icon
            finally:
                if conn is not None:
                    conn.close()

            output_path_supplies = new_folder_path / "Suministros.xlsx"
            output_path_client_ord_header = new_folder_path / "Pedidos Cliente.xlsx"
            output_path_client_ord_details = new_folder_path / "Detalles Pedidos Cliente.xlsx"
            output_path_supplier_ord_header = new_folder_path / "Pedidos Proveedor.xlsx"
            output_path_supplier_ord_details = new_folder_path / "Detalles Pedidos Proveedor.xlsx"
            output_path_quotation_header = new_folder_path / "Cotizaciones.xlsx"
            output_path_quotation_details = new_folder_path / "Detalles Cotizaciones.xlsx"
            output_path_suppliers = new_folder_path / "Proveedores.xlsx"

            if output_path_supplies:
                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df_supplies, index=False, header=True), 1):
                    ws.append(row)

                # Date Style
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')
                currency_style  = NamedStyle(name='currency_style ', number_format='#,##0.00" €"')

                # Apply Date Style
                for cell in ws['G']:
                    cell.style = currency_style

                # Save Excel
                wb.save(output_path_supplies)

            if output_path_client_ord_header:
                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df_client_order_header, index=False, header=True), 1):
                    ws.append(row)

                # Date Style
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')
                currency_style  = NamedStyle(name='currency_style ', number_format='#,##0.00" €"')

                # Apply Date Style
                columns = ['C', 'D', 'G', 'I', 'K']
                for col in columns:
                    for row in range(1, ws.max_row + 1):
                        cell = ws[f'{col}{row}']
                        cell.style = date_style

                # Save Excel
                wb.save(output_path_client_ord_header)

            if output_path_client_ord_details:
                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df_client_ord_details, index=False, header=True), 1):
                    ws.append(row)

                # Date Style
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')
                currency_style  = NamedStyle(name='currency_style ', number_format='#,##0.00" €"')

                # Apply Date Style
                columns = ['F','I','L']
                for col in columns:
                    for row in range(1, ws.max_row + 1):
                        cell = ws[f'{col}{row}']
                        cell.style = date_style

                # Save Excel
                wb.save(output_path_client_ord_details)

            if output_path_supplier_ord_header:
                df_supplier_ord_header["Subtotal"] = df_supplier_ord_header["Subtotal"].apply(self.euros_to_float)
                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df_supplier_ord_header, index=False, header=True), 1):
                    ws.append(row)

                # Date Style
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')
                currency_style  = NamedStyle(name='currency_style ', number_format='#,##0.00" €"')

                # Apply Date Style
                for cell in ws['L']:
                    cell.style = currency_style

                columns = ['C','D','M','N','O']
                for col in columns:
                    for row in range(1, ws.max_row + 1):
                        cell = ws[f'{col}{row}']
                        cell.style = date_style

                # Save Excel
                wb.save(output_path_supplier_ord_header)

            if output_path_supplier_ord_details:
                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df_supplier_ord_details, index=False, header=True), 1):
                    ws.append(row)

                # Date Style
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')
                currency_style  = NamedStyle(name='currency_style ', number_format='#,##0.00" €"')

                # Apply Date Style
                for cell in ws['E']:
                    cell.style = currency_style

                columns = ['I','L','O']
                for col in columns:
                    for row in range(1, ws.max_row + 1):
                        cell = ws[f'{col}{row}']
                        cell.style = date_style

                # Save Excel
                wb.save(output_path_supplier_ord_details)

            if output_path_quotation_header:
                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df_quotation_header, index=False, header=True), 1):
                    ws.append(row)

                # Date Style
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')
                currency_style  = NamedStyle(name='currency_style ', number_format='#,##0.00" €"')

                # Apply Date Style
                for cell in ws['C']:
                    cell.style = date_style

                # Save Excel
                wb.save(output_path_quotation_header)

            if output_path_quotation_details:
                # df_quotation_details["Valor"] = df_quotation_details["Valor"].apply(self.euros_to_float)
                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df_quotation_details, index=False, header=True), 1):
                    ws.append(row)

                # Date Style
                date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')
                currency_style  = NamedStyle(name='currency_style ', number_format='#,##0.00" €"')

                # Apply Date Style
                for cell in ws['G']:
                    cell.style = currency_style

                # Save Excel
                wb.save(output_path_quotation_details)

            if output_path_suppliers:
                wb = Workbook()
                ws = wb.active

                # Add data to Excel
                for r_idx, row in enumerate(dataframe_to_rows(df_suppliers, index=False, header=True), 1):
                    ws.append(row)

                # Save Excel
                wb.save(output_path_suppliers)

            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("BackUp realizado con éxito")
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Information)
            dlg.exec()
            del dlg, new_icon

# Function to transform euros to float values
    def euros_to_float(self, value):
        """
        Converts a euro-formatted string to a float.
        """
        if value is not None:
            value = value.replace(".", "")
            value = value.replace(",", ".")
            value = value[: value.find(" €")]
        else:
            value = 0
        return float(value)

# Function to open warehouse window
    def warehouse_app(self):
        """
        Opens the warehouse application window.
        """
        from App_Warehouse import Ui_App_Warehouse
        self.warehouse_window = QtWidgets.QMainWindow()
        self.ui_warehouse = Ui_App_Warehouse('Juan Tena', 'j.tena')
        self.ui_warehouse.setupUi(self.warehouse_window)
        self.warehouse_window.showMaximized()

# Function when clicking on table tag header
    def on_header_section_clicked(self, logical_index):
        """
        Handles the click event on the table header.
        Displays a context menu for unique values in the clicked column header.
        """
        header_pos = self.tableOffer.horizontalHeader().sectionViewportPosition(logical_index)
        header_height = self.tableOffer.horizontalHeader().height()
        popup_pos = self.tableOffer.viewport().mapToGlobal(QtCore.QPoint(header_pos, header_height))
        self.tableOffer.show_unique_values_menu(logical_index, popup_pos, header_height)

# Function to open active offers window
    def open_active_offers(self):
        """
        Opens a new window for querying active offers. 
        """
        from OfferQueryActive_Window import Ui_OfferQueryActive_Window
        self.query_active_offer_window=QtWidgets.QMainWindow()
        self.ui=Ui_OfferQueryActive_Window()
        self.ui.setupUi(self.query_active_offer_window)
        self.query_active_offer_window.showMaximized()

# Function to open menu with different types of revisions
    def revisions(self):
        """
        Initializes and displays the revisions menu for the current user.
        """
        from Verif_Revisions_Menu import Ui_Verif_Revisions_Menu
        self.revisions_menu=QtWidgets.QMainWindow()
        self.ui=Ui_Verif_Revisions_Menu(self.username)
        self.ui.setupUi(self.revisions_menu)
        self.revisions_menu.show()

# Function to open window with manufacture times table
    def times(self):
        """
        Prompts the user for various inputs to open window with manufacturing times
        """
        dlg = QtWidgets.QInputDialog()
        new_icon = QtGui.QIcon()
        new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg.setWindowIcon(new_icon)
        dlg.setWindowTitle('Consultar tiempos')
        dlg.setLabelText('Inserte pedido:')

        dlg2 = QtWidgets.QInputDialog()
        new_icon2 = QtGui.QIcon()
        new_icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        dlg2.setWindowIcon(new_icon2)
        dlg2.setWindowTitle('Consultar tiempos')
        dlg2.setLabelText('Inserte número OT:')

        while True:
            query_type, ok = QtWidgets.QInputDialog.getItem(self, "Consultar tiempos", "Selecciona como consultar:", ['Número OT', 'Pedido'], 0, False)
            if ok and query_type:
                if query_type != '':
                    if query_type[0] == 'P':
                        while True:
                            clickedButton = dlg.exec()
                            if clickedButton == 1:
                                numorder = dlg.textValue()
                                if numorder != '':
                                    from FabTimes_Window import Ui_FabTimes_Window
                                    self.timesfab_window=QtWidgets.QMainWindow()
                                    self.ui = Ui_FabTimes_Window(self.username, numorder)
                                    self.ui.setupUi(self.timesfab_window)
                                    self.timesfab_window.showMaximized()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle("Consultar tiempos")
                                dlg_error.setText("El pedido no puede estar vacío")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break

                    else:
                        while True:
                            clickedButton = dlg2.exec()
                            if clickedButton == 1:
                                num_ot = dlg2.textValue()
                                if num_ot != '':
                                    from FabTimes_Window import Ui_FabTimes_Window
                                    self.timesfab_window=QtWidgets.QMainWindow()
                                    self.ui = Ui_FabTimes_Window(self.username, num_ot)
                                    self.ui.setupUi(self.timesfab_window)
                                    self.timesfab_window.showMaximized()
                                    break
                                dlg_error = QtWidgets.QMessageBox()
                                new_icon = QtGui.QIcon()
                                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                                dlg_error.setWindowIcon(new_icon)
                                dlg_error.setWindowTitle("Consultar tiempos")
                                dlg_error.setText("El número OT no puede estar vacío")
                                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                                dlg_error.exec()
                                del dlg_error,new_icon
                            else:
                                break
                        break
                dlg_error = QtWidgets.QMessageBox()
                new_icon = QtGui.QIcon()
                new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                dlg_error.setWindowIcon(new_icon)
                dlg_error.setWindowTitle("Consultar tiempos")
                dlg_error.setText("Selecciona un tipo")
                dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                dlg_error.exec()
                del dlg_error,new_icon
            else:
                break

# Function to open window to check notifications
    def notifications(self):
        """
        Opens a new window to show active notifications. 
        """
        from NotificationsHistory_Window import Ui_HistoryNotifications_Window
        self.notification_window=Ui_HistoryNotifications_Window(self.username)
        self.notification_window.show()
        self.notification_window.Button_Cancel.clicked.connect(self.load_notifications)

# Function to load number of notifications
    def load_notifications(self):
        """
        Loads and displays notifications for the user from various tables in the 'notifications' schema.
        """
        query_tables_notifications = """SELECT table_name
                                FROM information_schema.tables
                                WHERE table_schema = 'notifications' AND table_type = 'BASE TABLE';"""
        conn = None
        try:
        # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands
            cur.execute(query_tables_notifications)
            results=cur.fetchall()
            tables_names=[x[0] for x in results]

            notifications = []

            for table in tables_names:
                commands_notifications = f" SELECT * FROM notifications.{table} WHERE username = '{self.username}' and state = 'Pendiente'"
                cur.execute(commands_notifications)
                results=cur.fetchall()

                for x in results:
                    notifications.append(x)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()

        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

        if len(notifications) != 0:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Notif_on.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        else:
            icon13 = QtGui.QIcon()
            icon13.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "Notif_off.png"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Button_Notification.setIcon(icon13)

# Function to open window for documentation query
    def query_documents(self):
        """
        Opens a new window for querying documents. 
        """
        from DocQuery_Window import Ui_QueryDoc_Window
        self.querydoc_menu=Ui_QueryDoc_Window()
        self.querydoc_menu.show()

# Funtion to set notification for calibration of equipments
    def warning_calibration(self):
        """
        Set a notification if the calibration date of an equipment is close.
        """
        commands_check_dates = ("""
                        SELECT number_item, instrument, certificate_1, TO_CHAR(next_calibration, 'DD/MM/YYYY'), months_advance
                        FROM verification.calibrated_masters
                        WHERE notes = ''

                        UNION

                        SELECT number_item, instrument, certificate_1, TO_CHAR(next_calibration, 'DD/MM/YYYY'), months_advance
                        FROM verification.thread_masters

                        UNION

                        SELECT number_item, instrument, certificate_1, TO_CHAR(next_calibration, 'DD/MM/YYYY'), months_advance
                        FROM verification.welding_equipment_masters
                        """)
        commands_insert_notification = ("""
                        INSERT INTO notifications.notifications_others (username, message, state)
                        VALUES (%s,%s,%s)
                        """)
        commands_check_notifications = ("""
                        SELECT *
                        FROM notifications.notifications_others
                        WHERE username = %s and message = %s and state = %s
                        """)
        conn = None
        try:
            # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_check_dates)
            results_dates = cur.fetchall()

            df_data = pd.DataFrame(results_dates, columns=['Número', 'Instrumento', 'Certificado', 'Próxima Revisión', 'Meses Preaviso'])
            df_data = df_data.sort_values(by='Número')
            df_data["Certificado"] = df_data["Certificado"].fillna("")
            df_data["Certificado"] = df_data["Certificado"].apply(lambda x: Path(x).stem if x else "")
            df_data["Certificado"] = df_data["Certificado"].apply(lambda x: x.split()[0])

            df_data["Próxima Revisión"] = pd.to_datetime(df_data["Próxima Revisión"], format="%d/%m/%Y") 
            df_data["Meses Preaviso"] = pd.to_numeric(df_data["Meses Preaviso"], errors="coerce")
            df_data["Fecha Aviso"] = df_data["Próxima Revisión"] - pd.to_timedelta(df_data["Meses Preaviso"] * 30, unit="D")

            df_data["Próxima Revisión"] = df_data["Próxima Revisión"].dt.strftime("%d/%m/%Y")

            for index, row in df_data.iterrows():
                warning_date = row.iloc[5]
                warning_date = warning_date.date()
                if warning_date < date.today():
                    username = self.username
                    state = 'Pendiente'
                    message = (f"Número: {row.iloc[0]}\n"
                            f"Instrumento: {row.iloc[1]}\n"
                            f"Certificado: {row.iloc[2]}\n"
                            f"Próxima Revisión: {row.iloc[3]}")

                    cur.execute(commands_check_notifications, (username,message,state,))
                    results_notifications = cur.fetchall()

                    if len(results_notifications) == 0:
                        cur.execute(commands_insert_notification, (username,message,state,))
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Function to open window for liquid visual certificate
    def liquid_visual_certificate(self):
        """
        Opens a new window for liquid visual certificate.
        """
        from Workshop_Staff_Certificates_Window import Ui_Workshop_Staff_Certificates_Window
        config_obj = configparser.ConfigParser()
        config_obj.read(r"C:\Program Files\ERP EIPSA\database.ini")
        dbparam = config_obj["postgresql"]
        # set your parameters for the database connection URI using the keys from the configfile.ini
        user_database = dbparam["user"]
        password_database = dbparam["password"]

        db_certificates = createConnection(user_database, password_database)
        if not db_certificates:
            sys.exit()

        self.certificates_window = Ui_Workshop_Staff_Certificates_Window(db_certificates, self.username)
        self.certificates_window.showMaximized()

# Function to check visual certificates dates and notify if applies
    def visual_certificate_check(self):
        commands_check_snt = ("""
                        SELECT date_lp_1
                        FROM verification.staff_certificates
                        ORDER BY date_lp_1 ASC
                        """)

        commands_notify_snt = ("""
                        UPDATE notifications.notifications_others
                        SET state = 'Pendiente'
                        WHERE message LIKE '%SNT%'
                        """)

        commands_check_iso = ("""
                        SELECT date_lp_2
                        FROM verification.staff_certificates
                        ORDER BY date_lp_2 ASC
                        """)

        commands_notify_iso = ("""
                        UPDATE notifications.notifications_others
                        SET state = 'Pendiente'
                        WHERE message LIKE '%ISO%'
                        """)

        commands_check_visual = ("""
                        SELECT date_visual
                        FROM verification.staff_certificates
                        ORDER BY date_visual ASC
                        """)

        commands_notify_visual = ("""
                        UPDATE notifications.notifications_others
                        SET state = 'Pendiente'
                        WHERE message LIKE '%visual%'
                        """)

        conn = None
        try:
            # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
        # execution of commands one by one
            cur.execute(commands_check_snt)
            results_snt = cur.fetchall()
            if date.today() >= results_snt[0][0] - timedelta(days=30):
                cur.execute(commands_notify_snt)

            cur.execute(commands_check_iso)
            results_iso = cur.fetchall()
            if date.today() >= results_iso[0][0] - timedelta(days=60):
                cur.execute(commands_notify_iso)

            cur.execute(commands_check_visual)
            results_visual = cur.fetchall()
            if date.today() >= results_visual[0][0] - timedelta(days=40):
                cur.execute(commands_notify_visual)

        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()

# Function to export offers summary
    def offers_summary(self):
        conn = None
        try:
            # read the connection parameters
            params = config()
        # connect to the PostgreSQL server
            conn = psycopg2.connect(**params)
            cur = conn.cursor()
            commands_offers_1 = ("""
                            SELECT num_offer, state, client, final_client, TO_CHAR(register_date, 'DD/MM/YYYY'), nac_ext, offer_amount, EXTRACT(YEAR FROM register_date) as offer_year
                            FROM offers
                            WHERE EXTRACT(YEAR FROM register_date) = %s
                            ORDER BY num_offer ASC
                            """)
            commands_offers_2 = ("""
                            SELECT num_offer, state, client, final_client, TO_CHAR(register_date, 'DD/MM/YYYY'), nac_ext, offer_amount, EXTRACT(YEAR FROM register_date) as offer_year
                            FROM offers
                            WHERE EXTRACT(YEAR FROM register_date) BETWEEN %s AND %s
                            ORDER BY num_offer ASC
                            """)

            dlg = QtWidgets.QInputDialog()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle('Resumen Ofertas')
            dlg.setLabelText('Inserte primer año:')

            dlg2 = QtWidgets.QInputDialog()
            new_icon2 = QtGui.QIcon()
            new_icon2.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg2.setWindowIcon(new_icon2)
            dlg2.setWindowTitle('Resumen Ofertas')
            dlg2.setLabelText('Inserte segundo año (si aplica):')

            while True:
                clickedButton = dlg.exec()
                if clickedButton == 1:
                    date_1 = dlg.textValue()
                    if date_1 != '':
                        while True:
                            clickedButton2 = dlg2.exec()
                            if clickedButton2 == 1:
                                date_2 = dlg2.textValue()
                                if date_2 != '':
                                    cur.execute(commands_offers_2, (date_1, date_2,))
                                else:
                                    cur.execute(commands_offers_1, (date_1,))

                                results_offers = cur.fetchall()
                                df_offers = pd.DataFrame(results_offers, columns=['Oferta', 'Estado', 'Cliente', 'Cliente Final', 'Fecha Reg.', 'Nac./Ext.', 'Importe', 'Año'])

                                existing_workbook = r"\\nas01\DATOS\Comunes\ENRIQUE SERRANO\05 COSAS DANI\RESUMEN OFERTAS.xlsm"
                                wb = load_workbook(existing_workbook, keep_vba=True)
                                ws = wb["TABLA"]

                                max_row = ws.max_row
                                if max_row > 1:
                                    ws.delete_rows(2, max_row)

                                df_offers["Importe"] = df_offers["Importe"].apply(self.euros_to_float)

                                for index, row in df_offers.iterrows():
                                    fecha_str = row['Fecha Reg.']
                                    if fecha_str is not None:
                                        fecha_obj = datetime.strptime(fecha_str, '%d/%m/%Y').date()
                                        df_offers.at[index, 'Fecha Reg.'] = fecha_obj

                                for r_idx, row in enumerate(dataframe_to_rows(df_offers, index=False, header=True), 1):
                                    ws.append(row)

                                # currency_style = NamedStyle(name='currency', number_format='#,##0.00 €')
                                # date_style = NamedStyle(name='date_style', number_format='DD/MM/YYYY')

                                # # Apply Styles
                                # for cell in ws['E']:
                                #     cell.style = date_style
                                
                                # for cell in ws['G']:
                                #     cell.style = currency_style

                                wb.save(existing_workbook)
                                break

                            else:
                                break
                        break
                    dlg_error = QtWidgets.QMessageBox()
                    new_icon = QtGui.QIcon()
                    new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
                    dlg_error.setWindowIcon(new_icon)
                    dlg_error.setWindowTitle("Resumen Ofertas")
                    dlg_error.setText("El primer año no puede estar vacío")
                    dlg_error.setIcon(QtWidgets.QMessageBox.Icon.Warning)
                    dlg_error.exec()
                    del dlg_error,new_icon
                else:
                    break
        # close communication with the PostgreSQL database server
            cur.close()
        # commit the changes
            conn.commit()
        except (Exception, psycopg2.DatabaseError) as error:
            dlg = QtWidgets.QMessageBox()
            new_icon = QtGui.QIcon()
            new_icon.addPixmap(QtGui.QPixmap(str(get_path("Resources", "Iconos", "icon.ico"))), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
            dlg.setWindowIcon(new_icon)
            dlg.setWindowTitle("ERP EIPSA")
            dlg.setText("Ha ocurrido el siguiente error:\n"
                        + str(error))
            print(error)
            dlg.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            dlg.exec()
            del dlg, new_icon
        finally:
            if conn is not None:
                conn.close()




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    App_Invoicing = QtWidgets.QMainWindow()
    ui = Ui_App_Purchasing('Daniel Marquez', 'd.marquez')
    ui.setupUi(App_Invoicing)
    App_Invoicing.showMaximized()
    sys.exit(app.exec())